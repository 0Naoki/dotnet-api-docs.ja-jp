<Type Name="UIElement3D" FullName="System.Windows.UIElement3D">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6ba88e92faddb472a93ca9331c4c7aea06baa90e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39918149" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class UIElement3D : System.Windows.Media.Media3D.Visual3D, System.Windows.IInputElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract UIElement3D extends System.Windows.Media.Media3D.Visual3D implements class System.Windows.IInputElement" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement3D" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UIElement3D&#xA;Inherits Visual3D&#xA;Implements IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement3D abstract : System::Windows::Media::Media3D::Visual3D, System::Windows::IInputElement" />
  <TypeSignature Language="F#" Value="type UIElement3D = class&#xA;    inherit Visual3D&#xA;    interface IInputElement" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Media3D.Visual3D</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="e1989-101">
        <see cref="T:System.Windows.UIElement3D" /> は、Windows Presentation Foundation (WPF) の要素および基本表示特性における WPF コア レベル実装構築の基底クラスです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1989-101">
          <see cref="T:System.Windows.UIElement3D" /> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-102"><xref:System.Windows.UIElement3D> 3D の特定の要素を表すクラスの派生元となる抽象基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="e1989-102"><xref:System.Windows.UIElement3D> is an abstract base class from which you can derive classes to represent specific 3D elements.</span></span>  
  
 <span data-ttu-id="e1989-103">3D 要素の入力、フォーカス、およびイベント処理の動作の多くで一般的に定義されて、<xref:System.Windows.UIElement3D>クラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-103">Much of the input, focusing, and eventing behavior for 3D elements in general is defined in the <xref:System.Windows.UIElement3D> class.</span></span> <span data-ttu-id="e1989-104">これには、キーボード、マウス、およびスタイラス入力、および関連するステータスのプロパティのイベントが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-104">This includes the events for keyboard, mouse, and stylus input, and related status properties.</span></span> <span data-ttu-id="e1989-105">ルーティング イベントは、これらのイベントの多くはあり、多くの入力に関連するイベントのバブルを両方のルーティング イベントのトンネリング バージョンとバージョン。</span><span class="sxs-lookup"><span data-stu-id="e1989-105">Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.</span></span> <span data-ttu-id="e1989-106">これらのペアになっているイベントは、通常、コントロールの作成者に最も関心のあるイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-106">These paired events are typically the events of greatest interest to control authors.</span></span>  
  
 <span data-ttu-id="e1989-107"><xref:System.Windows.UIElement3D> 含まれています[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]に関連した、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]イベント モデルでは、指定した発生可能なメソッドを含む要素インスタンスに基づいているイベントをルーティングします。</span><span class="sxs-lookup"><span data-stu-id="e1989-107"><xref:System.Windows.UIElement3D> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.</span></span>  
  
 <span data-ttu-id="e1989-108">A<xref:System.Windows.UIElement3D>で具体的には定義されている次の機能を備えて、<xref:System.Windows.UIElement3D>クラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-108">A <xref:System.Windows.UIElement3D> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement3D> class:</span></span>  
  
-   <span data-ttu-id="e1989-109">ユーザー入力に応答できます (イベントの処理を使用して入力を送信する先のコントロールを含むルーティングやコマンドのルーティング)。</span><span class="sxs-lookup"><span data-stu-id="e1989-109">Can respond to user input (including control of where input is sent via handling of event routing or routing of commands).</span></span>  
  
-   <span data-ttu-id="e1989-110">要素の論理ツリー内のルートを経由するルーティング イベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-110">Can raise routed events that travel a route through the logical element tree.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e1989-111"><xref:System.Windows.UIElement3D.Visibility%2A> 状態では、すべての入力をその要素の処理に影響します。</span><span class="sxs-lookup"><span data-stu-id="e1989-111"><xref:System.Windows.UIElement3D.Visibility%2A> state affects all input handling by that element.</span></span> <span data-ttu-id="e1989-112">表示されていない要素は、ヒット テストに参加していないと、要素があるとの境界上にマウスが場合でも、入力イベントを受け取りません場合に表示されていた。</span><span class="sxs-lookup"><span data-stu-id="e1989-112">Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds of where the element would be if were visible.</span></span>  
  
 <span data-ttu-id="e1989-113">異なり、<xref:System.Windows.UIElement>クラス、<xref:System.Windows.UIElement3D>クラスではレイアウトは含まれません。</span><span class="sxs-lookup"><span data-stu-id="e1989-113">Unlike the <xref:System.Windows.UIElement> class, the <xref:System.Windows.UIElement3D> class does not include layout.</span></span> <span data-ttu-id="e1989-114">そのため、<xref:System.Windows.UIElement3D>クラスが含まれません**メジャー**または**配置**メソッド。</span><span class="sxs-lookup"><span data-stu-id="e1989-114">Therefore, the <xref:System.Windows.UIElement3D> class does not include **Measure** or **Arrange** methods.</span></span>  
  
 <span data-ttu-id="e1989-115">派生したクラス<xref:System.Windows.UIElement3D>は独自の一連の管理と<xref:System.Windows.Media.Media3D.Visual3D>オーバーライドすることでオブジェクト<xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A>と<xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A>新しいに渡す必要がありますも<xref:System.Windows.Media.Media3D.Visual3D>オブジェクトを<xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-115">A class that derives from <xref:System.Windows.UIElement3D> and maintains its own collection of <xref:System.Windows.Media.Media3D.Visual3D> objects by overriding <xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A> and <xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A> must still pass new <xref:System.Windows.Media.Media3D.Visual3D> objects to <xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>.</span></span>  
  
 <span data-ttu-id="e1989-116"><xref:System.Windows.UIElement3D> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-116"><xref:System.Windows.UIElement3D> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-117">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-117">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1989-118">次の例から派生させる方法を示しています、<xref:System.Windows.UIElement3D>クラスを作成する、`Sphere`クラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-118">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="e1989-119">サンプル全体については、次を参照してください。 [UIElement3D 球サンプル](http://go.microsoft.com/fwlink/?LinkID=160044)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-119">For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIElement3D ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UIElement3D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-120">
            <see cref="T:System.Windows.UIElement3D" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-120">Initializes a new instance of the <see cref="T:System.Windows.UIElement3D" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-121"><xref:System.Windows.UIElement3D.%23ctor%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-121"><xref:System.Windows.UIElement3D.%23ctor%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-122">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-122">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-123">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-123">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.AddHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement3D.AddHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="e1989-124">処理されるルーティング イベントの識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-124">An identifier for the routed event to be handled.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="e1989-125">ハンドラーの実装に対する参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-125">A reference to the handler implementation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-126">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-126">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-127">例外を発生させずは、同じイベントに対して同じハンドラーを複数回追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-127">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="e1989-128">ただし、ハンドラーには、イベントを処理するときに複数回が実際に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-128">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="e1989-129">そのため、この動作では次の方法でハンドラーの実装で考慮する必要があります副作用がある可能性がありますを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-129">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="e1989-130">通常の"add"アクセサーの実装を提供するこのメソッドを使用する、[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]カスタム ルーティング イベントのイベントへのアクセス パターン。</span><span class="sxs-lookup"><span data-stu-id="e1989-130">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 <span data-ttu-id="e1989-131"><xref:System.Windows.UIElement3D.AddHandler%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-131"><xref:System.Windows.UIElement3D.AddHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-132">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-132">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="uIElement3D.AddHandler (routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="e1989-133">処理されるルーティング イベントの識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-133">An identifier for the routed event to be handled.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="e1989-134">ハンドラーの実装に対する参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-134">A reference to the handler implementation.</span>
          </span>
        </param>
        <param name="handledEventsToo">
          <span data-ttu-id="e1989-135">イベント データ内でルーティング イベントがハンドル済みとしてマークされている場合でも呼び出されるようにハンドラーを登録するには <see langword="true" />。ルーティング イベントが既にハンドル済みとしてマークされている場合はハンドラーを呼び出ないという既定の条件を使用してハンドラーを登録する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-135">
              <see langword="true" /> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <see langword="false" /> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.</span>
          </span>
          <span data-ttu-id="e1989-136">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-136">The default is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-137">ルーティング イベントの再処理を機械的に要求しないでください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-137">Do not routinely ask to rehandle a routed event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-138">指定したルーティング イベントのルーティング イベント ハンドラーを追加します。このハンドラーは、現在の要素のハンドラー コレクションに追加されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-138">Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.</span>
          </span>
          <span data-ttu-id="e1989-139">イベント ルート上の他の要素により既に処理済みとしてマークされているルーティング イベントに対し、指定したハンドラーが呼び出されるようにするには、<paramref name="handledEventsToo" /> を <see langword="true" /> に指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-139">Specify <paramref name="handledEventsToo" /> as <see langword="true" /> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-140">複雑な作業は、実用的な方法で低レベルの入力イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="e1989-140">Processing low-level input events in a practical way is a complex task.</span></span> <span data-ttu-id="e1989-141">多くのコントロールは、特定のイベントが処理済みとしてマークされてし、別のより直感的なイベントに置き換えの動作を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-141">Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.</span></span> <span data-ttu-id="e1989-142">一般に、これを行うための設計上の意図がある場合を処理済みとして、コントロールは、プラットフォームの入力イベントをマークだけです。</span><span class="sxs-lookup"><span data-stu-id="e1989-142">Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.</span></span> <span data-ttu-id="e1989-143">特定のシナリオでこれらの設計意図、特定の入力イベントの処理が必要とは限りません。</span><span class="sxs-lookup"><span data-stu-id="e1989-143">In certain scenarios, those design intentions might not be what your particular handling of the input event requires.</span></span> <span data-ttu-id="e1989-144">その登録するこのようなシナリオがハンドラーを`handledEventsToo`として`true`が適切です。</span><span class="sxs-lookup"><span data-stu-id="e1989-144">It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate.</span></span> <span data-ttu-id="e1989-145">実行しないでこの日常的にします。</span><span class="sxs-lookup"><span data-stu-id="e1989-145">But you should not do this routinely.</span></span> <span data-ttu-id="e1989-146">処理される場合でも、すべてのイベントに応答ハンドラーを呼び出すと、独自のアプリケーション イベント処理ロジックが複雑になります。</span><span class="sxs-lookup"><span data-stu-id="e1989-146">Invoking handlers in response to all events even if handled will complicate your own application event processing logic.</span></span> <span data-ttu-id="e1989-147">ハンドラーのロジックが多くの場合は、パフォーマンスの低下を参照してください可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-147">You may see a decrease in performance if the handler logic is substantial.</span></span> <span data-ttu-id="e1989-148">既に特定のコントロールがアプリケーション ロジックで処理するイベントを処理している開発プロセス中に検出する場所の場合の処理済みイベントのハンドラーをアタッチの使用を予約する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-148">You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.</span></span>  
  
 <span data-ttu-id="e1989-149">クラスの特定のイベントとコントロールの組み合わせの動作を処理を回避するための別の手法では、代わりにそのイベントのプレビューを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-149">Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.</span></span> <span data-ttu-id="e1989-150">たとえば場合、<xref:System.Windows.UIElement3D.MouseLeftButtonDown>処理済みとしてマークは、クラス処理によってありますのハンドラーを追加する<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-150">For example, if <xref:System.Windows.UIElement3D.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> instead.</span></span>  
  
 <span data-ttu-id="e1989-151">例外を発生させずは、同じイベントに対して同じハンドラーを複数回追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-151">You can add the same handler for the same event multiple times without raising an exception.</span></span> <span data-ttu-id="e1989-152">ただし、ハンドラーには、イベントを処理するときに複数回が実際に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-152">However, the handler is actually invoked multiple times when the event is handled.</span></span> <span data-ttu-id="e1989-153">そのため、この動作では次の方法でハンドラーの実装で考慮する必要があります副作用がある可能性がありますを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-153">Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.</span></span>  
  
 <span data-ttu-id="e1989-154">通常の"add"アクセサーの実装を提供するこのメソッドを使用する、[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]カスタム ルーティング イベントのイベントへのアクセス パターン。</span><span class="sxs-lookup"><span data-stu-id="e1989-154">You typically use this method to provide the implementation of the "add" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.</span></span>  
  
 <span data-ttu-id="e1989-155"><xref:System.Windows.UIElement3D.AddHandler%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-155"><xref:System.Windows.UIElement3D.AddHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-156">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-156">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AddToEventRoute : System.Windows.EventRoute * System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.AddToEventRoute (route, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">
          <span data-ttu-id="e1989-157">ハンドラーの追加先のイベント ルート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-157">The event route that handlers are added to.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="e1989-158">ハンドラーを追加するために使用されるイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-158">The event data that is used to add the handlers.</span>
          </span>
          <span data-ttu-id="e1989-159">このメソッドは、イベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティを使用してハンドラーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-159">This method uses the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of the event data to create the handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-160">現在の <see cref="T:System.Windows.EventRoute" /> イベント ハンドラー コレクションのハンドラーを、指定した <see cref="T:System.Windows.UIElement3D" /> に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-160">Adds handlers to the specified <see cref="T:System.Windows.EventRoute" /> for the current <see cref="T:System.Windows.UIElement3D" /> event handler collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-161">このメソッドは、コンテンツ ホスト要素で使用できます (を実装するか、<xref:System.Windows.IContentHost>またはご存知ない方) の子要素のハンドラーを追加する、<xref:System.Windows.EventRoute>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-161">This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>.</span></span>  
  
 <span data-ttu-id="e1989-162"><xref:System.Windows.UIElement3D.AddToEventRoute%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-162"><xref:System.Windows.UIElement3D.AddToEventRoute%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-163">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-163">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.UIElement3D.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-164">この要素をドラッグアンドドロップ操作の対象として使用できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-164">Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-165">この要素をドラッグアンドドロップ操作の対象として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-165">
              <see langword="true" /> if this element can be used as the target of a drag-and-drop operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-166">既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-166">The default value is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-167">ドラッグ アンド ドロップ操作が既定では、有効でないと、設定した意図的に有効にする必要があります<xref:System.Windows.UIElement3D.AllowDrop%2A>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-167">Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement3D.AllowDrop%2A> to `true`.</span></span> <span data-ttu-id="e1989-168">この基本の設定を超えたドラッグ アンド ドロップの動作は完全に特定の実装とによって定義されていない<xref:System.Windows.UIElement3D>またはその他の基本要素クラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-168">Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement3D> or any other base element class.</span></span> <span data-ttu-id="e1989-169">たとえば、特定のコントロール<xref:System.Windows.Controls.RichTextBox>既定の動作を持っています。</span><span class="sxs-lookup"><span data-stu-id="e1989-169">Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior.</span></span> <span data-ttu-id="e1989-170">ドラッグ アンド ドロップの詳細については、次を参照してください。[ドラッグ アンド ドロップの概要](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-170">For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-171"><xref:System.Windows.UIElement3D.AllowDrop%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-171"><xref:System.Windows.UIElement3D.AllowDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-172">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-172">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-173">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-173">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-174">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-174">Identifier field</span></span>|<xref:System.Windows.UIElement3D.AllowDropProperty>|  
|<span data-ttu-id="e1989-175">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-175">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-176">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-176">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowDropProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AllowDropProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-177">
            <see cref="P:System.Windows.UIElement3D.AllowDrop" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-177">Identifies the <see cref="P:System.Windows.UIElement3D.AllowDrop" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-178"><xref:System.Windows.UIElement3D.AllowDropProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-178"><xref:System.Windows.UIElement3D.AllowDropProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-179">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-179">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCaptured : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-180">少なくとも 1 つのタッチがこの要素にキャプチャされているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-180">Gets a value that indicates whether at least one touch is captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-181">少なくとも 1 つのタッチがこの要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-181">
              <see langword="true" /> if at least one touch is captured to this element; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-182">
            <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-182">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesCapturedWithin : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-183">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-183">Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-184">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-184">
              <see langword="true" /> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesCapturedWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-185">
            <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-185">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesDirectlyOver : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-186">少なくとも 1 つのタッチがこの要素上で押されているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-186">Gets a value that indicates whether at least one touch is pressed over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-187">少なくとも 1 つのタッチがこの要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-187">
              <see langword="true" /> if at least one touch is pressed over this element; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-188">
            <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-188">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AreAnyTouchesOver : bool" Usage="System.Windows.UIElement3D.AreAnyTouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-189">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-189">Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-190">少なくとも 1 つのタッチがこの要素またはそのビジュアル ツリー内のいずれかの子要素上で押されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-190">
              <see langword="true" /> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AreAnyTouchesOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.AreAnyTouchesOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-191">
            <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-191">Identifies the <see cref="P:System.Windows.UIElement3D.AreAnyTouchesOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberSignature Language="F#" Value="abstract member CaptureMouse : unit -&gt; bool&#xA;override this.CaptureMouse : unit -&gt; bool" Usage="uIElement3D.CaptureMouse " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-192">この要素にマウスをキャプチャするように強制することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-192">Attempts to force capture of the mouse to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-193">マウスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-193">
              <see langword="true" /> if the mouse is successfully captured; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-194">キャプチャするには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-194">To be captured, an element must be enabled.</span></span> <span data-ttu-id="e1989-195">確認するかどうか<xref:System.Windows.UIElement3D.IsEnabled%2A>は`true`を呼び出す前に<xref:System.Windows.UIElement3D.CaptureMouse%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-195">Check whether <xref:System.Windows.UIElement3D.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement3D.CaptureMouse%2A>.</span></span>  
  
 <span data-ttu-id="e1989-196">呼び出す場合<xref:System.Windows.UIElement3D.CaptureMouse%2A>返します`true`、し<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>も`true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-196">If calling <xref:System.Windows.UIElement3D.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="e1989-197">呼び出す場合<xref:System.Windows.UIElement3D.CaptureMouse%2A>返します`true`、<xref:System.Windows.UIElement3D.GotMouseCapture>と<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>イベントが発生するで<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType>要素としてデータを報告するイベントの場所、<xref:System.Windows.UIElement3D.CaptureMouse%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-197">If calling <xref:System.Windows.UIElement3D.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement3D.GotMouseCapture> and <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> in the event data reported as the element where the <xref:System.Windows.UIElement3D.CaptureMouse%2A> method is called.</span></span> <span data-ttu-id="e1989-198">既存のキャプチャに干渉する可能性がありますキャプチャを強制する場合、マウスでドラッグ アンド ドロップに関連するキャプチャに特にです。</span><span class="sxs-lookup"><span data-stu-id="e1989-198">If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.</span></span>  
  
 <span data-ttu-id="e1989-199">すべての要素からマウスのキャプチャをクリアするには、呼び出し<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType>で、`element`として指定されたパラメーター`null`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-199">To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> with the `element` parameter provided as `null`.</span></span>  
  
 <span data-ttu-id="e1989-200"><xref:System.Windows.UIElement3D.CaptureMouse%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-200"><xref:System.Windows.UIElement3D.CaptureMouse%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-201">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-201">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberSignature Language="F#" Value="abstract member CaptureStylus : unit -&gt; bool&#xA;override this.CaptureStylus : unit -&gt; bool" Usage="uIElement3D.CaptureStylus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-202">この要素にスタイラスをキャプチャするように強制することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-202">Attempts to force capture of the stylus to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-203">スタイラスが正常にキャプチャされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-203">
              <see langword="true" /> if the stylus was successfully captured; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-204">既定の実装を常に基になる既定のスタイラス デバイスに基づいて`true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-204">The default implementation based on the underlying default stylus device always returns `true`.</span></span> <span data-ttu-id="e1989-205">ただし、入力システムのデバイスの実装を提供する、入力デバイスを拡張する場合に、異なる結果を返す可能性のある代替のスタイラス デバイス実装で、システムを作成することです。</span><span class="sxs-lookup"><span data-stu-id="e1989-205">However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.</span></span>  
  
 <span data-ttu-id="e1989-206">スタイラスをキャプチャする要素は、その境界の外側にスタイラスがある場合でも、スタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="e1989-206">When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.</span></span> <span data-ttu-id="e1989-207">スタイラスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="e1989-207">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="e1989-208">このメソッドを呼び出す呼び出しと基になるは静的<xref:System.Windows.Input.Stylus>メソッド<xref:System.Windows.Input.Stylus.Capture%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-208">Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>.</span></span> <span data-ttu-id="e1989-209">実際のキャプチャの動作は、アクティブなスタイラス デバイスの実装によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-209">The actual capture behavior is implemented by the active stylus device implementation.</span></span>  
  
 <span data-ttu-id="e1989-210">キャプチャするには、要素を有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-210">To be captured, an element must be enabled.</span></span> <span data-ttu-id="e1989-211">確認するかどうか<xref:System.Windows.UIElement3D.IsEnabled%2A>は`true`を呼び出す前に返す<xref:System.Windows.UIElement3D.CaptureStylus%2A>。</span><span class="sxs-lookup"><span data-stu-id="e1989-211">Check whether <xref:System.Windows.UIElement3D.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement3D.CaptureStylus%2A>.</span></span>  
  
 <span data-ttu-id="e1989-212">呼び出す場合<xref:System.Windows.UIElement3D.CaptureStylus%2A>返します`true`、<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>も`true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-212">If calling <xref:System.Windows.UIElement3D.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> is also `true`.</span></span>  
  
 <span data-ttu-id="e1989-213"><xref:System.Windows.UIElement3D.CaptureStylus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-213"><xref:System.Windows.UIElement3D.CaptureStylus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-214">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-214">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.CaptureTouch : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement3D.CaptureTouch touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">
          <span data-ttu-id="e1989-215">キャプチャの対象となるデバイス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-215">The device to capture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-216">この要素にタッチをキャプチャするように強制することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-216">Attempts to force capture of a touch to this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-217">指定したタッチがこの要素にキャプチャされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-217">
              <see langword="true" /> if the specified touch is captured to this element; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-218"><xref:System.Windows.UIElement3D.CaptureTouch%2A> 戻ります`false`場合、<xref:System.Windows.Input.TouchDevice>別の要素にキャプチャされています。</span><span class="sxs-lookup"><span data-stu-id="e1989-218"><xref:System.Windows.UIElement3D.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.</span></span>  
  
 <span data-ttu-id="e1989-219">場合<xref:System.Windows.UIElement3D.CaptureTouch%2A>返します`true`、<xref:System.Windows.UIElement3D.GotTouchCapture>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-219">If <xref:System.Windows.UIElement3D.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement3D.GotTouchCapture> event is raised.</span></span>  
  
 <span data-ttu-id="e1989-220">この要素から 1 つのタッチのキャプチャをリリースするには、使用、<xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A>メソッドを解放するタッチ デバイスを指定します。</span><span class="sxs-lookup"><span data-stu-id="e1989-220">To release capture of a single touch from this element, use the <xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A> method and specify the touch device to release.</span></span> <span data-ttu-id="e1989-221">この要素からすべてのタッチをリリースするには、使用、<xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e1989-221">To release all touches from this element, use the <xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e1989-222">
            <paramref name="touchDevice" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-222">
              <paramref name="touchDevice" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandBindings : System.Windows.Input.CommandBindingCollection" Usage="System.Windows.UIElement3D.CommandBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-223">この要素に関連付けられている <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-223">Gets a collection of <see cref="T:System.Windows.Input.CommandBinding" /> objects associated with this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-224">すべての <see cref="T:System.Windows.Input.CommandBinding" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-224">The collection of all <see cref="T:System.Windows.Input.CommandBinding" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-225">A <xref:System.Windows.Input.CommandBinding> 、この要素の特定のコマンドのコマンドの処理を有効にし、コマンド、イベント、およびこの要素によってアタッチされるハンドラー間のリンケージを宣言します。</span><span class="sxs-lookup"><span data-stu-id="e1989-225">A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element, and declares the linkage between a command, its events, and the handlers attached by this element.</span></span>  
  
 <span data-ttu-id="e1989-226">もう 1 つの一般的な方法を設定する、<xref:System.Windows.UIElement3D.CommandBindings%2A>コレクションは、使用する<xref:System.Windows.Input.CommandManager>メソッド プログラムを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-226">Another typical way to populate the <xref:System.Windows.UIElement3D.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.</span></span>  
  
 <span data-ttu-id="e1989-227"><xref:System.Windows.UIElement3D.CommandBindings%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-227"><xref:System.Windows.UIElement3D.CommandBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-228">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-228">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="e1989-229">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="e1989-229">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="e1989-230">XAML 値</span><span class="sxs-lookup"><span data-stu-id="e1989-230">XAML Values</span></span>  
 <span data-ttu-id="e1989-231">*oneOrMoreCommandBindings*</span><span class="sxs-lookup"><span data-stu-id="e1989-231">*oneOrMoreCommandBindings*</span></span>  
 <span data-ttu-id="e1989-232">1 つまたは複数<xref:System.Windows.Input.CommandBinding>要素。</span><span class="sxs-lookup"><span data-stu-id="e1989-232">One or more <xref:System.Windows.Input.CommandBinding> elements.</span></span> <span data-ttu-id="e1989-233">これらの必要がありますが、<xref:System.Windows.Input.CommandBinding.Command%2A>属性、既知のコマンドに設定され、に対して属性が設定、<xref:System.Windows.Input.CommandBinding.CanExecute>と<xref:System.Windows.Input.CommandBinding.Executed>ハンドラーの実装。</span><span class="sxs-lookup"><span data-stu-id="e1989-233">Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations.</span></span> <span data-ttu-id="e1989-234">詳細については、「<xref:System.Windows.Input.CommandBinding>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-234">For more information see <xref:System.Windows.Input.CommandBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.DragEventHandler " Usage="member this.DragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-235">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-235">Occurs when the input system reports an underlying drag event with this element as the drag target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-236">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.DragEnter?displayProperty=nameWithType>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-236">This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.DragEnter?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-237">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.DragEnter>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-237">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-238"><xref:System.Windows.UIElement3D.DragEnter> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-238"><xref:System.Windows.UIElement3D.DragEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-239">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-239">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-240">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-240">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-241">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-241">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragEnterEvent>|  
|<span data-ttu-id="e1989-242">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-242">Routing strategy</span></span>|<span data-ttu-id="e1989-243">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-243">Bubbling</span></span>|  
|<span data-ttu-id="e1989-244">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-244">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="e1989-245">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewDragEnter>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-245">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragEnter>.</span></span>  
  
-   <span data-ttu-id="e1989-246">オーバーライド<xref:System.Windows.UIElement3D.OnDragEnter%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-246">Override <xref:System.Windows.UIElement3D.OnDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-247">
            <see cref="E:System.Windows.UIElement3D.DragEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-247">Identifies the <see cref="E:System.Windows.UIElement3D.DragEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-248">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-248">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-249">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-249">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-250">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-250">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-251">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-251">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-252">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-252">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-253"><xref:System.Windows.UIElement3D.DragEnterEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-253"><xref:System.Windows.UIElement3D.DragEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-254">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-254">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : System.Windows.DragEventHandler " Usage="member this.DragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-255">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-255">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-256">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>添付イベントをこのクラスのように<xref:System.Windows.UIElement3D.DragLeave?displayProperty=nameWithType>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-256">This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.DragLeave?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-257">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.DragLeave>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-257">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-258"><xref:System.Windows.UIElement3D.DragLeave> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-258"><xref:System.Windows.UIElement3D.DragLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-259">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-259">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-260">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-260">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-261">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-261">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragLeaveEvent>|  
|<span data-ttu-id="e1989-262">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-262">Routing strategy</span></span>|<span data-ttu-id="e1989-263">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-263">Bubbling</span></span>|  
|<span data-ttu-id="e1989-264">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-264">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="e1989-265">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewDragLeave>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-265">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragLeave>.</span></span>  
  
-   <span data-ttu-id="e1989-266">オーバーライド<xref:System.Windows.UIElement3D.OnDragLeave%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-266">Override <xref:System.Windows.UIElement3D.OnDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
        <altmember cref="E:System.Windows.UIElement3D.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-267">
            <see cref="E:System.Windows.UIElement3D.DragLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-267">Identifies the <see cref="E:System.Windows.UIElement3D.DragLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-268">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-268">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-269">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-269">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-270">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-270">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-271">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-271">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-272">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-272">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-273"><xref:System.Windows.UIElement3D.DragLeaveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-273"><xref:System.Windows.UIElement3D.DragLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-274">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-274">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.DragEventHandler " Usage="member this.DragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-275">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-275">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-276">このイベントは、要素の境界でドラッグを開始した場合でも発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-276">This event occurs even if the drag originates in the element bounds.</span></span> <span data-ttu-id="e1989-277">ドラッグが境界の外側を開始し、このイベントは発生しても、内部で、移動だけでなく<xref:System.Windows.UIElement3D.DragEnter>およびプレビュー イベントに関連します。</span><span class="sxs-lookup"><span data-stu-id="e1989-277">If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement3D.DragEnter> and related preview events.</span></span>  
  
 <span data-ttu-id="e1989-278">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>添付イベントをこのクラスのように<xref:System.Windows.UIElement3D.DragOver?displayProperty=nameWithType>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-278">This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.DragOver?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-279">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.DragOver>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-279">Event handlers that are attached to the <xref:System.Windows.UIElement3D.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-280"><xref:System.Windows.UIElement3D.DragOver> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-280"><xref:System.Windows.UIElement3D.DragOver> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-281">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-281">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-282">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-282">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-283">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-283">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DragOverEvent>|  
|<span data-ttu-id="e1989-284">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-284">Routing strategy</span></span>|<span data-ttu-id="e1989-285">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-285">Bubbling</span></span>|  
|<span data-ttu-id="e1989-286">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-286">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="e1989-287">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewDragOver>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-287">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDragOver>.</span></span>  
  
-   <span data-ttu-id="e1989-288">オーバーライド<xref:System.Windows.UIElement3D.OnDragOver%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-288">Override <xref:System.Windows.UIElement3D.OnDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
        <altmember cref="E:System.Windows.UIElement3D.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-289">
            <see cref="E:System.Windows.UIElement3D.DragOver" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-289">Identifies the <see cref="E:System.Windows.UIElement3D.DragOver" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-290">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-290">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-291">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-291">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-292">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-292">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-293">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-293">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-294">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-294">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-295"><xref:System.Windows.UIElement3D.DragOverEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-295"><xref:System.Windows.UIElement3D.DragOverEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-296">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-296">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberSignature Language="F#" Value="member this.Drop : System.Windows.DragEventHandler " Usage="member this.Drop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-297">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-297">Occurs when the input system reports an underlying drop event with this element as the drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-298">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>添付イベントをこのクラスのように<xref:System.Windows.UIElement3D.Drop?displayProperty=nameWithType>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-298">This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.Drop?displayProperty=nameWithType> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-299">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.Drop>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-299">Event handlers that are attached to the <xref:System.Windows.UIElement3D.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-300"><xref:System.Windows.UIElement3D.Drop> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-300"><xref:System.Windows.UIElement3D.Drop> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-301">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-301">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-302">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-302">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-303">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-303">Identifier field</span></span>|<xref:System.Windows.UIElement3D.DropEvent>|  
|<span data-ttu-id="e1989-304">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-304">Routing strategy</span></span>|<span data-ttu-id="e1989-305">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-305">Bubbling</span></span>|  
|<span data-ttu-id="e1989-306">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-306">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="e1989-307">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewDrop>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-307">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewDrop>.</span></span>  
  
-   <span data-ttu-id="e1989-308">オーバーライド<xref:System.Windows.UIElement3D.OnDrop%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-308">Override <xref:System.Windows.UIElement3D.OnDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.DropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-309">
            <see cref="E:System.Windows.UIElement3D.Drop" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-309">Identifies the <see cref="E:System.Windows.UIElement3D.Drop" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-310">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-310">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-311">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-311">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-312">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-312">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-313">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-313">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-314">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-314">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-315"><xref:System.Windows.UIElement3D.DropEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-315"><xref:System.Windows.UIElement3D.DropEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-316">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-316">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberSignature Language="F#" Value="abstract member Focus : unit -&gt; bool&#xA;override this.Focus : unit -&gt; bool" Usage="uIElement3D.Focus " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-317">この要素に論理フォーカスを設定することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-317">Attempts to set the logical focus on this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-318">この要素に論理フォーカスとキーボード フォーカスの両方が設定された場合は <see langword="true" />。論理フォーカスのみが設定された場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-318">
              <see langword="true" /> if both logical and keyboard focus were set to this element; <see langword="false" /> if only logical focus was set.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-319">フォーカスを<xref:System.Windows.UIElement3D.Focusable%2A>と<xref:System.Windows.UIElement3D.IsEnabled%2A>は両方とも必要`true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-319">To be focusable, <xref:System.Windows.UIElement3D.Focusable%2A> and <xref:System.Windows.UIElement3D.IsEnabled%2A> must both be `true`.</span></span>  
  
 <span data-ttu-id="e1989-320">要素は、特定のツリー内のフォーカスを設定できる、有効な場合は、イベントの処理が、場合でも、フォーカスを許可しないことによって、プレビューのフォーカス イベントに応答 (複合コントロールなど) ためこのメソッドは`false`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-320">Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.</span></span>  
  
 <span data-ttu-id="e1989-321">呼び出す場合<xref:System.Windows.UIElement3D.Focus%2A>返します`true`、<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>と<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>も`true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-321">If calling  <xref:System.Windows.UIElement3D.Focus%2A> returns `true`, <xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are also `true`.</span></span>  
  
 <span data-ttu-id="e1989-322">関連するプロパティが既にがない場合`true`を呼び出すとき、 <xref:System.Windows.UIElement3D.Focus%2A>、1 つ以上の次のイベントは、次の順序で発生します: <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>、 <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> (ソースの新しいフォーカス ターゲット)、 <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>、 <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>、<xref:System.Windows.UIElement3D.LostKeyboardFocus>、 <xref:System.Windows.UIElement3D.GotKeyboardFocus> (ソースは新しいフォーカス対象です)。</span><span class="sxs-lookup"><span data-stu-id="e1989-322">If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement3D.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement3D.LostKeyboardFocus>, <xref:System.Windows.UIElement3D.GotKeyboardFocus> (source is the new focus target).</span></span>  
  
 <span data-ttu-id="e1989-323">この呼び出しを正常に行うためには、以前フォーカスがあることに、アプリケーションで他の要素が必要です。</span><span class="sxs-lookup"><span data-stu-id="e1989-323">In order for this call to be successful, some other element in the application needed to have focus previously.</span></span>  
  
 <span data-ttu-id="e1989-324">一般にフォーカスが 2 つの異なる概念によって制御されます。 キーボード フォーカスと論理フォーカスは、常に同じではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-324">Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.</span></span> <span data-ttu-id="e1989-325">このメソッドは、論理フォーカスを設定し、キーボード フォーカスを設定しようとしてもします。</span><span class="sxs-lookup"><span data-stu-id="e1989-325">This method sets the logical focus, and also attempts to set the keyboard focus.</span></span> <span data-ttu-id="e1989-326">プログラムはキーボード フォーカスを具体的には、設定これが発生する原因は、ユーザー入力はありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-326">There is no programmatic means to set keyboard focus specifically, this happens due to user input.</span></span> <span data-ttu-id="e1989-327">詳細については、次を参照してください。[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-327">For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-328"><xref:System.Windows.UIElement3D.Focus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-328"><xref:System.Windows.UIElement3D.Focus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-329">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-329">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Focusable : bool with get, set" Usage="System.Windows.UIElement3D.Focusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-330">要素がフォーカスを得ることができるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-330">Gets or sets a value that indicates whether the element can receive focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-331">要素にフォーカスを設定できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-331">
              <see langword="true" /> if the element is focusable; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-332">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-332">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-333">フォーカスがある要素のみでは、キーボード入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="e1989-333">Only the focused element receives keyboard input.</span></span>  
  
 <span data-ttu-id="e1989-334"><xref:System.Windows.UIElement3D.Focusable%2A> [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]何が実際には、依存関係プロパティのプロパティ アクセサー。</span><span class="sxs-lookup"><span data-stu-id="e1989-334"><xref:System.Windows.UIElement3D.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="e1989-335">この特定の依存関係プロパティでは、その見かけ上の「既定」値が要素の派生クラスで設定が異なりますがよくあります。</span><span class="sxs-lookup"><span data-stu-id="e1989-335">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes.</span></span> <span data-ttu-id="e1989-336">これは、2 つの方法のいずれかでよく発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-336">This commonly occurs in one of two ways:</span></span>  
  
-   <span data-ttu-id="e1989-337">依存関係プロパティが特定の派生クラスによって継承されますが、派生したクラスのオーバーライドを依存関係プロパティのメタデータとプロパティの既定値を変更します。</span><span class="sxs-lookup"><span data-stu-id="e1989-337">The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.</span></span>  
  
 <span data-ttu-id="e1989-338"><xref:System.Windows.UIElement3D.Focusable%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-338"><xref:System.Windows.UIElement3D.Focusable%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-339">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-339">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-340">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-340">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-341">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-341">Identifier field</span></span>|<xref:System.Windows.UIElement3D.FocusableProperty>|  
|<span data-ttu-id="e1989-342">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-342">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-343">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-343">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberSignature Language="F#" Value="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.FocusableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-344">
            <see cref="P:System.Windows.UIElement3D.Focusable" /> プロパティの値が変化したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-344">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.Focusable" /> property changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-345">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-345">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-346"><xref:System.Windows.UIElement3D.FocusableChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-346"><xref:System.Windows.UIElement3D.FocusableChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-347">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-347">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusableProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.FocusableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-348">
            <see cref="P:System.Windows.UIElement3D.Focusable" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-348">Identifies the <see cref="P:System.Windows.UIElement3D.Focusable" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-349"><xref:System.Windows.UIElement3D.FocusableProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-349"><xref:System.Windows.UIElement3D.FocusableProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-350">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-350">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="member this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="uIElement3D.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-351">派生クラスでオーバーライドされると、ビジュアル親が存在しない場合に、この要素の代替[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] の親を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-351">When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-352">報告する代替の親接続を派生クラスの実装が持つ場合のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-352">An object, if implementation of a derived class has an alternate parent connection to report.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-353">このメソッドの既定の仮想実装`null`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-353">The default virtual implementation of this method returns `null`.</span></span> <span data-ttu-id="e1989-354"><xref:System.Windows.FrameworkElement> 現実の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-354"><xref:System.Windows.FrameworkElement> provides a practical implementation.</span></span>  
  
 <span data-ttu-id="e1989-355">別の親が場所要素代替親構造体を作成、イベントがルーティングされるように、ビジュアル ツリーに標準の親では、ルーティングの標準的なパターンから逸脱した方法での場合、イベントのルーティングに使用またはの下、ルーティング方法をプレビューします。</span><span class="sxs-lookup"><span data-stu-id="e1989-355">Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.</span></span>  
  
 <span data-ttu-id="e1989-356"><xref:System.Windows.UIElement3D.GetUIParentCore%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-356"><xref:System.Windows.UIElement3D.GetUIParentCore%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-357">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-357">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-358">入力システムがこの要素を対象とするドラッグ アンド ドロップ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-358">Occurs when the input system reports an underlying drag-and-drop event that involves this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-359"><xref:System.Windows.UIElement3D.GiveFeedback>イベントにより、ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するためにマウス ポインターの外観を変更するドラッグ イベントのソース。</span><span class="sxs-lookup"><span data-stu-id="e1989-359">The <xref:System.Windows.UIElement3D.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span> <span data-ttu-id="e1989-360">ドラッグ アンド ドロップ操作が、プロセス、視覚的なフィードバックが促進されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-360">The visual feedback reinforces that a drag-and-drop operation is in process.</span></span>  
  
 <span data-ttu-id="e1989-361">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>添付イベントをこのクラスのように<xref:System.Windows.UIElement3D.GiveFeedback>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-361">This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-362">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.GiveFeedback>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-362">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-363"><xref:System.Windows.UIElement3D.GiveFeedback> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-363"><xref:System.Windows.UIElement3D.GiveFeedback> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-364">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-364">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-365">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-365">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-366">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-366">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GiveFeedbackEvent>|  
|<span data-ttu-id="e1989-367">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-367">Routing strategy</span></span>|<span data-ttu-id="e1989-368">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-368">Bubbling</span></span>|  
|<span data-ttu-id="e1989-369">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-369">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="e1989-370">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewGiveFeedback>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-370">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewGiveFeedback>.</span></span>  
  
-   <span data-ttu-id="e1989-371">オーバーライド<xref:System.Windows.UIElement3D.OnGiveFeedback%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-371">Override <xref:System.Windows.UIElement3D.OnGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-372">
            <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-372">Identifies the <see cref="E:System.Windows.UIElement3D.GiveFeedback" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-373">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-373">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-374">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-374">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-375">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-375">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-376">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-376">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-377">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-377">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-378"><xref:System.Windows.UIElement3D.GiveFeedbackEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-378"><xref:System.Windows.UIElement3D.GiveFeedbackEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-379">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-379">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.RoutedEventHandler " Usage="member this.GotFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-380">この要素が論理フォーカスを取得したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-380">Occurs when this element gets logical focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-381">フォーカスがメソッド呼び出しを使用して強制意図的には、直前のキーボード フォーカスが別のスコープに存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-381">Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="e1989-382">このシナリオでキーボード フォーカスのままであると、要素を<xref:System.Windows.UIElement3D.Focus%2A>メソッドが呼び出されますも論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1989-382">In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement3D.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="e1989-383">このイベントをより正確に解釈するは、発生する状況の値、<xref:System.Windows.UIElement3D.IsFocused%2A>からルート内の要素のプロパティが変更された`false`に`true`。</span><span class="sxs-lookup"><span data-stu-id="e1989-383">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement3D.IsFocused%2A> property of an element in the route is changed from `false` to `true`.</span></span>  
  
 <span data-ttu-id="e1989-384">このイベントは、バブル ルーティングを使用するため、フォーカスを受け取る要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-384">Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-385">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスを取得、実際の要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-385">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
 <span data-ttu-id="e1989-386"><xref:System.Windows.UIElement3D.GotFocus> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-386"><xref:System.Windows.UIElement3D.GotFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-387">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-387">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-388">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-388">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-389">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-389">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotFocusEvent>|  
|<span data-ttu-id="e1989-390">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-390">Routing strategy</span></span>|<span data-ttu-id="e1989-391">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-391">Bubbling</span></span>|  
|<span data-ttu-id="e1989-392">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-392">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="e1989-393">対応するトンネル イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-393">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="e1989-394">オーバーライド<xref:System.Windows.UIElement3D.OnGotFocus%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-394">Override <xref:System.Windows.UIElement3D.OnGotFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-395">
            <see cref="E:System.Windows.UIElement3D.GotFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-395">Identifies the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-396">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-396">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-397">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-397">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-398">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-398">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-399">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-399">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-400">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-400">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-401"><xref:System.Windows.UIElement3D.GotFocusEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-401"><xref:System.Windows.UIElement3D.GotFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-402">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-402">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.GotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-403">この要素にキーボード フォーカスが移動したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-403">Occurs when the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-404"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> 要素のフォーカスの状態を保持するプロパティで状態の変更を追跡するようなイベント<xref:System.Windows.UIElement3D.GotKeyboardFocus>多くの同じ状況でイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-404"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement3D.GotKeyboardFocus> event is raised in many of the same circumstances.</span></span>  
  
 <span data-ttu-id="e1989-405">このイベントは、バブル ルーティングを使用するため、フォーカスを持つ要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-405">Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-406">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスのある実際の要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-406">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="e1989-407">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>添付イベントをこのクラスのように<xref:System.Windows.UIElement3D.GotKeyboardFocus>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-407">This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-408">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.GotKeyboardFocus>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-408">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-409"><xref:System.Windows.UIElement3D.GotKeyboardFocus> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-409"><xref:System.Windows.UIElement3D.GotKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-410">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-410">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-411">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-411">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-412">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-412">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotKeyboardFocusEvent>|  
|<span data-ttu-id="e1989-413">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-413">Routing strategy</span></span>|<span data-ttu-id="e1989-414">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-414">Bubbling</span></span>|  
|<span data-ttu-id="e1989-415">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-415">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="e1989-416">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-416">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="e1989-417">オーバーライド<xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-417">Override <xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-418">
            <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-418">Identifies the <see cref="E:System.Windows.UIElement3D.GotKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-419">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-419">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-420">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-420">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-421">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-421">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-422">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-422">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-423">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-423">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-424"><xref:System.Windows.UIElement3D.GotKeyboardFocusEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-424"><xref:System.Windows.UIElement3D.GotKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-425">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-425">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.GotMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-426">この要素がマウスをキャプチャしたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-426">Occurs when this element captures the mouse.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-427">要素がマウスをキャプチャは、境界外にマウス ポインターがあってもマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="e1989-427">When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.</span></span> <span data-ttu-id="e1989-428">マウスは、通常、ドラッグ アンド ドロップ操作中にのみキャプチャし、は、ドラッグ アンド ドロップ操作の削除アクションが発生するまでにキャプチャされました。</span><span class="sxs-lookup"><span data-stu-id="e1989-428">The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="e1989-429">このイベントは、バブル ルーティングを使用するため、キャプチャを持つ要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-429">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-430">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>マウスが、実際の要素を決定するデータのキャプチャ、イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-430">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.</span></span>  
  
 <span data-ttu-id="e1989-431">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>添付イベントをこのクラスのように<xref:System.Windows.UIElement3D.GotMouseCapture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-431">This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event for  this class so that <xref:System.Windows.UIElement3D.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-432">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.GotMouseCapture>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-432">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-433"><xref:System.Windows.UIElement3D.GotMouseCapture> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-433"><xref:System.Windows.UIElement3D.GotMouseCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-434">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-434">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-435">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-435">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-436">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-436">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotMouseCaptureEvent>|  
|<span data-ttu-id="e1989-437">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-437">Routing strategy</span></span>|<span data-ttu-id="e1989-438">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-438">Bubbling</span></span>|  
|<span data-ttu-id="e1989-439">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-439">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="e1989-440">定義済みの対応するトンネル イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-440">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="e1989-441">オーバーライド<xref:System.Windows.UIElement3D.OnGotMouseCapture%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-441">Override <xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-442">
            <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-442">Identifies the <see cref="E:System.Windows.UIElement3D.GotMouseCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-443">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-443">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-444">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-444">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-445">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-445">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-446">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-446">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-447">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-447">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-448"><xref:System.Windows.UIElement3D.GotMouseCaptureEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-448"><xref:System.Windows.UIElement3D.GotMouseCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-449">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-449">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.GotStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-450">この要素がスタイラスをキャプチャしたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-450">Occurs when this element captures the stylus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-451">要素がスタイラスをキャプチャするときは、ポインターがその境界の外側にある場合でも、スタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="e1989-451">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="e1989-452">スタイラスは、通常、ドラッグ アンド ドロップ操作中にのみキャプチャし、ドラッグ アンド ドロップ操作の削除アクションが発生するまで、キャプチャを保持します。</span><span class="sxs-lookup"><span data-stu-id="e1989-452">The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
 <span data-ttu-id="e1989-453">このイベントは、バブル ルーティングを使用するため、キャプチャを持つ要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-453">Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-454">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>実際のキャプチャを持つ要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-454">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.</span></span>  
  
 <span data-ttu-id="e1989-455">このイベントは、このクラスで添付イベントのエイリアスを作成できるように<xref:System.Windows.UIElement3D.GotStylusCapture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-455">This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement3D.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-456">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.GotStylusCapture>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-456">Event handlers that are attached to the <xref:System.Windows.UIElement3D.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-457"><xref:System.Windows.UIElement3D.GotStylusCapture> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-457"><xref:System.Windows.UIElement3D.GotStylusCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-458">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-458">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-459">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-459">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-460">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-460">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotStylusCaptureEvent>|  
|<span data-ttu-id="e1989-461">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-461">Routing strategy</span></span>|<span data-ttu-id="e1989-462">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-462">Bubbling</span></span>|  
|<span data-ttu-id="e1989-463">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-463">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-464">定義済みの対応するトンネル イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-464">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="e1989-465">オーバーライド<xref:System.Windows.UIElement3D.OnGotStylusCapture%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-465">Override <xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-466">
            <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-466">Identifies the <see cref="E:System.Windows.UIElement3D.GotStylusCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-467">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-467">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-468">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-468">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-469">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-469">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-470">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-470">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-471">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-471">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-472"><xref:System.Windows.UIElement3D.GotStylusCaptureEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-472"><xref:System.Windows.UIElement3D.GotStylusCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-473">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-473">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.GotTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.GotTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-474">タッチがこの要素にキャプチャされると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-474">Occurs when a touch is captured to this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-475">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-475">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-476">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-476">Identifier field</span></span>|<xref:System.Windows.UIElement3D.GotTouchCaptureEvent>|  
|<span data-ttu-id="e1989-477">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-477">Routing strategy</span></span>|<span data-ttu-id="e1989-478">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-478">Bubbling</span></span>|  
|<span data-ttu-id="e1989-479">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-479">Delegate</span></span>|<span data-ttu-id="e1989-480"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs></span><span class="sxs-lookup"><span data-stu-id="e1989-480"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs></span></span>|  
  
-   <span data-ttu-id="e1989-481">オーバーライド<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-481">Override <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.GotTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-482">
            <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-482">Identifies the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBindings : System.Windows.Input.InputBindingCollection" Usage="System.Windows.UIElement3D.InputBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-483">この要素に関連付けられている入力バインドのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-483">Gets the collection of input bindings associated with this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-484">入力バインディングのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-484">The collection of input bindings.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-485">入力バインディングでは、入力デバイスにコマンドのバインドをサポートします。</span><span class="sxs-lookup"><span data-stu-id="e1989-485">Input bindings support the binding of commands to input devices.</span></span> <span data-ttu-id="e1989-486">たとえば、<xref:System.Windows.Input.MouseBinding>実装は、マウス デバイスに特定のプロパティを含むバインドを入力します。</span><span class="sxs-lookup"><span data-stu-id="e1989-486">For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.</span></span>  
  
 <span data-ttu-id="e1989-487">入力バインディングのコレクション型に関連すると、インスタンスで宣言されている入力バインドの両方が含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-487">The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.</span></span>  
  
 <span data-ttu-id="e1989-488">関連するプロパティ、 <xref:System.Windows.UIElement3D.CommandBindings%2A>、コマンド バインディングのコレクションを保持します。</span><span class="sxs-lookup"><span data-stu-id="e1989-488">A related property, <xref:System.Windows.UIElement3D.CommandBindings%2A>, maintains a collection of command bindings.</span></span> <span data-ttu-id="e1989-489">これは、プロセスはコマンドの処理 - 既知のコマンドに関連付けられているアクションの下、次のレベルを表しているという点で入力バインディングとは異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-489">These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.</span></span>  
  
 <span data-ttu-id="e1989-490"><xref:System.Windows.UIElement3D.InputBindings%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-490"><xref:System.Windows.UIElement3D.InputBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-491">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-491">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="e1989-492">XAML プロパティ要素の使用</span><span class="sxs-lookup"><span data-stu-id="e1989-492">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a><span data-ttu-id="e1989-493">XAML 値</span><span class="sxs-lookup"><span data-stu-id="e1989-493">XAML Values</span></span>  
 <span data-ttu-id="e1989-494">*oneOrMoreInputBindings*</span><span class="sxs-lookup"><span data-stu-id="e1989-494">*oneOrMoreInputBindings*</span></span>  
 <span data-ttu-id="e1989-495">1 つまたは複数<xref:System.Windows.Input.InputBinding>要素 (通常、<xref:System.Windows.Input.KeyBinding>または<xref:System.Windows.Input.MouseBinding>派生クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-495">One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes).</span></span> <span data-ttu-id="e1989-496">これらの各が必要です、<xref:System.Windows.Input.InputBinding.Command%2A>と<xref:System.Windows.Input.InputBinding.Gesture%2A>属性に設定します。</span><span class="sxs-lookup"><span data-stu-id="e1989-496">Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateModel">
      <MemberSignature Language="C#" Value="public void InvalidateModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateModel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.InvalidateModel" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateModel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateModel();" />
      <MemberSignature Language="F#" Value="member this.InvalidateModel : unit -&gt; unit" Usage="uIElement3D.InvalidateModel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-497">要素を表すモデルを無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-497">Invalidates the model that represents the element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-498">クラスを派生するときに、<xref:System.Windows.UIElement3D>クラスと共にこのメソッドを使用することができます、<xref:System.Windows.UIElement3D.OnUpdateModel%2A>要素のモデルを更新する方法。</span><span class="sxs-lookup"><span data-stu-id="e1989-498">When you derive a class from the <xref:System.Windows.UIElement3D> class, you can use this method together with the <xref:System.Windows.UIElement3D.OnUpdateModel%2A> method to refresh the model of the element.</span></span>  
  
 <span data-ttu-id="e1989-499">高度なシナリオでこのメソッドを呼び出す必要があるだけです。</span><span class="sxs-lookup"><span data-stu-id="e1989-499">You only need to call this method in advanced scenarios.</span></span> <span data-ttu-id="e1989-500">このような 1 つの高度なシナリオは、派生クラスには、外観に影響を与える複数のプロパティと、1 回だけ、基になるモデルを更新するかどうかは。</span><span class="sxs-lookup"><span data-stu-id="e1989-500">One such advanced scenario is if the derived class has multiple properties that affect the appearance, and you want to update the underlying model only once.</span></span>  
  
 <span data-ttu-id="e1989-501"><xref:System.Windows.UIElement3D.InvalidateModel%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-501"><xref:System.Windows.UIElement3D.InvalidateModel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-502">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-502">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1989-503">次の例から派生させる方法を示しています、<xref:System.Windows.UIElement3D>クラスを作成する、`Sphere`クラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-503">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="e1989-504">サンプル全体については、次を参照してください。 [UIElement3D 球サンプル](http://go.microsoft.com/fwlink/?LinkID=160044)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-504">For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.UIElement3D.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-505">この要素が[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] で有効かどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-505">Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-506">要素が有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-506">
              <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-507">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-507">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-508">このプロパティがクラス固有の実装によって影響を受けることに注意してください<xref:System.Windows.UIElement3D.IsEnabledCore%2A>で多くの場合、実行時に、特定の要素。</span><span class="sxs-lookup"><span data-stu-id="e1989-508">Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement3D.IsEnabledCore%2A> on particular elements, often at runtime.</span></span> <span data-ttu-id="e1989-509">そのため、ここで示されている既定値がありますいない有効です。</span><span class="sxs-lookup"><span data-stu-id="e1989-509">Therefore, the default value listed here is sometimes not effective.</span></span> <span data-ttu-id="e1989-510">この値を設定しようとしても可能性があるとオーバーライドされますによって返される値<xref:System.Windows.UIElement3D.IsEnabledCore%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-510">Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement3D.IsEnabledCore%2A>.</span></span>  
  
 <span data-ttu-id="e1989-511">無効な要素は、ヒット テストやフォーカスに参加していないと、そのため、入力イベントのソースはできません。</span><span class="sxs-lookup"><span data-stu-id="e1989-511">Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.</span></span>  
  
 <span data-ttu-id="e1989-512"><xref:System.Windows.UIElement3D.IsEnabled%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-512"><xref:System.Windows.UIElement3D.IsEnabled%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-513">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-513">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-514">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-514">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-515">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-515">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsEnabledProperty>|  
|<span data-ttu-id="e1989-516">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-516">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-517">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-517">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsEnabledChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-518">この要素の <see cref="P:System.Windows.UIElement3D.IsEnabled" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-518">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> property on this element changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-519">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-519">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-520"><xref:System.Windows.UIElement3D.IsEnabledChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-520"><xref:System.Windows.UIElement3D.IsEnabledChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-521">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-521">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabledCore : bool" Usage="System.Windows.UIElement3D.IsEnabledCore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-522">派生クラス内で <see cref="P:System.Windows.UIElement3D.IsEnabled" /> の戻り値になる値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-522">Gets a value that becomes the return value of <see cref="P:System.Windows.UIElement3D.IsEnabled" /> in derived classes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-523">要素が有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-523">
              <see langword="true" /> if the element is enabled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-524"><xref:System.Windows.UIElement3D.IsEnabledCore%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-524"><xref:System.Windows.UIElement3D.IsEnabledCore%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-525">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-525">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e1989-526">
            <para>このプロパティの既定の実装では、値をキャッシュしもこの要素の親要素が有効になっているかどうかを計算します。(子要素は実用的で効果的に有効にできません、親が有効でない場合[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)])。この実装をオーバーライドすることを選択する場合、この動作を保持する基本実装を呼び出すことをことを確認します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-526">
              <para>The default implementation of this property caches the value and also calculates whether the parent element of this element is enabled. (If the parent is not enabled, the child element cannot be effectively enabled in practical [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) If you choose to override this implementation, make certain that you call the base implementation to preserve this behavior.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.Windows.UIElement3D.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement3D.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-527">
            <see cref="P:System.Windows.UIElement3D.IsEnabled" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-527">Identifies the <see cref="P:System.Windows.UIElement3D.IsEnabled" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-528"><xref:System.Windows.UIElement3D.IsEnabledProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-528"><xref:System.Windows.UIElement3D.IsEnabledProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-529">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-529">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFocused : bool" Usage="System.Windows.UIElement3D.IsFocused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-530">この要素に論理フォーカスがあるかどうかを判断する値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-530">Gets a value that determines whether this element has logical focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-531">この要素に論理フォーカスが設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-531">
              <see langword="true" /> if this element has logical focus; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-532">論理フォーカスは、アプリケーションは、メニューの内容と、アプリケーションの残りの部分の間など、複数のフォーカス区分がキーボード フォーカスと異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-532">Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.</span></span> <span data-ttu-id="e1989-533">このシナリオでアプリケーションの UI の 1 つの要素にキーボード フォーカスが設定できるのみ、ただし、他のフォーカス区分の特定の要素には論理フォーカスが保持可能性がありますもします。</span><span class="sxs-lookup"><span data-stu-id="e1989-533">In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.</span></span> <span data-ttu-id="e1989-534">論理フォーカスの詳細については、次を参照してください。[フォーカスの概要](~/docs/framework/wpf/advanced/focus-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-534">For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-535">(これは読み取り専用)、このプロパティを設定してフォーカスを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="e1989-535">You do not set focus by setting this property (it is read-only).</span></span> <span data-ttu-id="e1989-536">このプロパティの一般的な使用がの依存関係プロパティとして使用するには、<xref:System.Windows.Setter>または<xref:System.Windows.EventTrigger>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-536">The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>.</span></span> <span data-ttu-id="e1989-537">プログラムでフォーカスを設定するには、呼び出す<xref:System.Windows.UIElement3D.Focus%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-537">To set focus programmatically, call <xref:System.Windows.UIElement3D.Focus%2A>.</span></span> <span data-ttu-id="e1989-538">ユーザーによる操作や管理の実装は、マウス キャプチャの動作を含む可能性によって、フォーカスを設定もできます。</span><span class="sxs-lookup"><span data-stu-id="e1989-538">Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.</span></span>  
  
 <span data-ttu-id="e1989-539"><xref:System.Windows.UIElement3D.IsFocused%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-539"><xref:System.Windows.UIElement3D.IsFocused%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-540">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-540">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-541">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-541">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-542">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-542">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsFocusedProperty>|  
|<span data-ttu-id="e1989-543">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-543">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-544">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-544">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-545">
            <see cref="P:System.Windows.UIElement3D.IsFocused" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-545">Identifies the <see cref="P:System.Windows.UIElement3D.IsFocused" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-546"><xref:System.Windows.UIElement3D.IsFocusedProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-546"><xref:System.Windows.UIElement3D.IsFocusedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-547">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-547">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisible : bool with get, set" Usage="System.Windows.UIElement3D.IsHitTestVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-548">この要素が、表示される内容のある部分からのヒット テストの結果として返されるかどうかを宣言する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-548">Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-549">少なくとも 1 つのポイントからヒット テスト結果としてこの要素が返される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-549">
              <see langword="true" /> if this element could be returned as a hit test result from at least one point; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-550">既定値は <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-550">The default value is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-551">このプロパティの有効な値は、論理ツリーのヒット テスト可能な要素の相対位置が反映されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-551">The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.</span></span> <span data-ttu-id="e1989-552">たとえば、要素が子要素の場合にある要素のないヒット テストの表示、子のプロパティの有効な値のまま`false`場合でも、その値をローカルに設定しようとしています。</span><span class="sxs-lookup"><span data-stu-id="e1989-552">For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally.</span></span> <span data-ttu-id="e1989-553">このためは設定しないことが重要<xref:System.Windows.UIElement3D.IsHitTestVisible%2A>に`false`複合コントロールで任意の入力を必要またはそのコントロールのヒット テストしない場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="e1989-553">For this reason, it is important that you do not set <xref:System.Windows.UIElement3D.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control.</span></span> <span data-ttu-id="e1989-554">ヒット テストについて詳しくは、「[ビジュアル層でのヒット テスト](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="e1989-554">For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).</span></span>  
  
 <span data-ttu-id="e1989-555"><xref:System.Windows.UIElement3D.IsHitTestVisible%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-555"><xref:System.Windows.UIElement3D.IsHitTestVisible%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-556">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-556">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-557">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-557">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-558">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-558">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsHitTestVisibleProperty>|  
|<span data-ttu-id="e1989-559">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-559">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-560">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-560">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsHitTestVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-561">この要素の <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> 依存関係プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-561">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-562">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-562">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-563"><xref:System.Windows.UIElement3D.IsHitTestVisibleChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-563"><xref:System.Windows.UIElement3D.IsHitTestVisibleChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-564">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-564">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsHitTestVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsHitTestVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-565">
            <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-565">Identifies the <see cref="P:System.Windows.UIElement3D.IsHitTestVisible" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-566"><xref:System.Windows.UIElement3D.IsHitTestVisibleProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-566"><xref:System.Windows.UIElement3D.IsHitTestVisibleProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-567">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-567">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInputMethodEnabled : bool" Usage="System.Windows.UIElement3D.IsInputMethodEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-568">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)] などの入力方法システムが、この要素への入力の処理に対して有効かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-568">Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-569">入力方法がアクティブの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-569">
              <see langword="true" /> if an input method is active; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-570">基になる添付プロパティの既定値は<see langword="true;" />ただし、これが反映される実行時に入力方式の実際の状態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-570">The default value of the underlying attached property is <see langword="true;" /> however, this will be influenced by the actual state of input methods at runtime.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-571">このプロパティが添付プロパティによって返される値を返します<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType>現在有効な入力方法 (キーボード、音声、他の入力デバイス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-571">This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> for the currently enabled input methods (keyboard, speech, other input devices).</span></span>  
  
 <span data-ttu-id="e1989-572"><xref:System.Windows.UIElement3D.IsInputMethodEnabled%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-572"><xref:System.Windows.UIElement3D.IsInputMethodEnabled%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-573">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-573">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocused : bool" Usage="System.Windows.UIElement3D.IsKeyboardFocused" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-574">この要素にキーボード フォーカスがあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-574">Gets a value indicating whether this element has keyboard focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-575">この要素にキーボード フォーカスが設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-575">
              <see langword="true" /> if this element has keyboard focus; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-576">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-576">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-577">フォーカスに関連するイベントは、このプロパティの値への変更を伴うことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-577">Changes to the determined value of this property may be accompanied by focus-related events.</span></span>  
  
 <span data-ttu-id="e1989-578"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>一般的に使用されるクラスのイベント ハンドラー内で他の入力関連のイベントでは、インスタンスの要素が既に、キーボード フォーカスとマウスを決定するイベントとキーボード イベントが発生すると組み合わせてかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e1989-578"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
 <span data-ttu-id="e1989-579"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-579"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-580">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-580">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-581">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-581">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-582">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-582">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty>|  
|<span data-ttu-id="e1989-583">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-583">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-584">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-584">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotFocus" />
        <altmember cref="E:System.Windows.UIElement3D.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-585">この要素の <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-585">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-586">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-586">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-587"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-587"><xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-588">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-588">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsKeyboardFocusedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-589">
            <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-589">Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocused" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-590"><xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-590"><xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-591">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-591">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithin : bool" Usage="System.Windows.UIElement3D.IsKeyboardFocusWithin" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-592">キーボード フォーカスがその要素またはそのビジュアル ツリーの子要素内の任意の場所にあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-592">Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-593">キーボード フォーカスが要素またはその子要素上に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-593">
              <see langword="true" /> if keyboard focus is on the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-594">このプロパティの値の変更が通常発生させる、<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>イベント、派生クラスがオーバーライドされない限り<xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A>イベントを抑制します。</span><span class="sxs-lookup"><span data-stu-id="e1989-594">Changes to the value of this property typically raise the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.</span></span>  
  
 <span data-ttu-id="e1989-595">このプロパティを直接設定しないでください、呼び出すことによって要素にフォーカスを設定することができますが、 <xref:System.Windows.UIElement3D.Focus%2A>、か行うことによって、<xref:System.Windows.UIElement3D.MoveFocus%2A>要求。</span><span class="sxs-lookup"><span data-stu-id="e1989-595">You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement3D.Focus%2A>, or by making a <xref:System.Windows.UIElement3D.MoveFocus%2A> request.</span></span> <span data-ttu-id="e1989-596">このプロパティの値を変更するこれらのメソッド呼び出しのいずれかの可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-596">Either of these method calls might change this property value.</span></span>  
  
 <span data-ttu-id="e1989-597"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>は通常クラス イベント ハンドラー内での使用その他の入力に関連するイベントのインスタンス要素は既に、キーボード フォーカスとマウスを決定するイベントとキーボード イベントが発生すると組み合わせてかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e1989-597"><xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.</span></span>  
  
 <span data-ttu-id="e1989-598"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-598"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-599">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-599">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-600">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-600">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-601">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-601">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty>|  
|<span data-ttu-id="e1989-602">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-602">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-603">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-603">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-604">この要素の <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-604">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-605">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-605">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-606"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-606"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-607">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-607">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsKeyboardFocusWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsKeyboardFocusWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-608">
            <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-608">Identifies the <see cref="P:System.Windows.UIElement3D.IsKeyboardFocusWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-609"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-609"><xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-610">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-610">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptured : bool" Usage="System.Windows.UIElement3D.IsMouseCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-611">この要素にマウスがキャプチャされるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-611">Gets a value indicating whether the mouse is captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-612">要素がマウスのキャプチャを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-612">
              <see langword="true" /> if the element has mouse capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-613">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-613">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-614">マウス キャプチャの状態は、インプロセス ドラッグ アンド ドロップ操作に関連しています。</span><span class="sxs-lookup"><span data-stu-id="e1989-614">Mouse capture state is related to in-process drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="e1989-615"><xref:System.Windows.UIElement3D.IsMouseCaptured%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-615"><xref:System.Windows.UIElement3D.IsMouseCaptured%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-616">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-616">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-617">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-617">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-618">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-618">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseCapturedProperty>|  
|<span data-ttu-id="e1989-619">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-619">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-620">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-620">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement3D.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement3D.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-621">この要素の <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-621">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-622">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-622">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-623"><xref:System.Windows.UIElement3D.IsMouseCapturedChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-623"><xref:System.Windows.UIElement3D.IsMouseCapturedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-624">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-624">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-625">
            <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-625">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-626"><xref:System.Windows.UIElement3D.IsMouseCapturedProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-626"><xref:System.Windows.UIElement3D.IsMouseCapturedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-627">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-627">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithin : bool" Usage="System.Windows.UIElement3D.IsMouseCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-628">この要素またはビジュアル ツリー内の子要素がマウスのキャプチャを保持するかどうかを決定する値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-628">Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-629">この要素または格納されている要素がマウスのキャプチャを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-629">
              <see langword="true" /> if this element or a contained element has mouse capture; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-630"><xref:System.Windows.UIElement3D.IsMouseCaptureWithin%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-630"><xref:System.Windows.UIElement3D.IsMouseCaptureWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-631">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-631">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-632">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-632">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-633">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-633">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty>|  
|<span data-ttu-id="e1989-634">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-634">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-635">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-635">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement3D.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-636">この要素の <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-636">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-637">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-637">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-638"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-638"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-639">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-639">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-640">
            <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-640">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-641"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-641"><xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-642">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-642">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOver : bool" Usage="System.Windows.UIElement3D.IsMouseDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-643">マウス ポインターの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-643">Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-644">
            <see langword="true" /> マウス ポインターがヒット テストと同じ要素結果上にある場合それ以外の場合、<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-644">
              <see langword="true" /> if the mouse pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-645">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-645">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-646">異なり<xref:System.Windows.UIElement3D.IsMouseOver%2A>、このプロパティはのみ`true`literal 要素上にマウス ポインターが場合などはヒット テストの。</span><span class="sxs-lookup"><span data-stu-id="e1989-646">Unlike <xref:System.Windows.UIElement3D.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test.</span></span> <span data-ttu-id="e1989-647">代わりに子要素の上にマウス ポインターが、このプロパティになります`false`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-647">If the mouse pointer is instead over a child element, this property will be `false`.</span></span> <span data-ttu-id="e1989-648">コントロールをいない作成はほとんどのシナリオを使用して、<xref:System.Windows.UIElement3D.IsMouseOver%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-648">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement3D.IsMouseOver%2A> instead.</span></span>  
  
 <span data-ttu-id="e1989-649">この要素によって、マウスがキャプチャされていて、このプロパティは`true`のキャプチャ時に、このプロパティを返し続けます`true`までマウス キャプチャが失われ、その境界上にポインターがありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-649">If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.</span></span>  
  
 <span data-ttu-id="e1989-650"><xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-650"><xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-651">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-651">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-652">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-652">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-653">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-653">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty>|  
|<span data-ttu-id="e1989-654">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-654">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-655">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-655">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-656">この要素の <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-656">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-657">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-657">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-658"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-658"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-659">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-659">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-660">
            <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-660">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-661"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-661"><xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-662">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-662">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMouseOver : bool" Usage="System.Windows.UIElement3D.IsMouseOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-663">マウス ポインターがこの要素 (ビジュアル ツリー内の子要素を含む) の上にあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-663">Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-664">マウス ポインターが要素またはその子要素上に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-664">
              <see langword="true" /> if mouse pointer is over the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-665">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-665">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-666">通常、コントロールは複合ことなど、すべてのコントロール (ビジュアル ツリー) 内のさまざまな要素が格納しているコントロールのマウスの状態が報告されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-666">Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.</span></span> <span data-ttu-id="e1989-667">たとえば、<xref:System.Windows.Controls.ListBox>スタイルのコントロールがレポートされます<xref:System.Windows.UIElement3D.IsMouseOver%2A>として`true`の geometry 上にマウスが任意の場所である場合も含めて<xref:System.Windows.Controls.ListBoxItem>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-667">For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement3D.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.</span></span>  
  
 <span data-ttu-id="e1989-668">類似の"IsMouseOverChanged"イベントが存在しないがいくつかの類似イベントの操作を行います。</span><span class="sxs-lookup"><span data-stu-id="e1989-668">Although an analogous "IsMouseOverChanged" event does not exist, several similar events do.</span></span> <span data-ttu-id="e1989-669">たとえば、処理<xref:System.Windows.UIElement3D.MouseEnter>、 <xref:System.Windows.UIElement3D.MouseMove>、および<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-669">For example, you can handle <xref:System.Windows.UIElement3D.MouseEnter>, <xref:System.Windows.UIElement3D.MouseMove>, and <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>.</span></span>  
  
 <span data-ttu-id="e1989-670">この要素がマウスをキャプチャする場合は、このプロパティの値`true`マウス キャプチャが失われ、マウス ポインターが要素の境界を離れるまでです。</span><span class="sxs-lookup"><span data-stu-id="e1989-670">If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.</span></span>  
  
 <span data-ttu-id="e1989-671">一部のコントロールは、意図的に、マウスに直接関係しない特定の操作上にマウス ポインターをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="e1989-671">Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.</span></span> <span data-ttu-id="e1989-672">これにより、<xref:System.Windows.UIElement3D.IsMouseOver%2A>される`true`マウスが移動したように見えていない場合でもです。</span><span class="sxs-lookup"><span data-stu-id="e1989-672">This can lead to <xref:System.Windows.UIElement3D.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.</span></span>  
  
 <span data-ttu-id="e1989-673"><xref:System.Windows.UIElement3D.IsMouseOver%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-673"><xref:System.Windows.UIElement3D.IsMouseOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-674">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-674">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-675">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-675">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-676">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-676">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsMouseOverProperty>|  
|<span data-ttu-id="e1989-677">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-677">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-678">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-678">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsMouseOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsMouseOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-679">
            <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-679">Identifies the <see cref="P:System.Windows.UIElement3D.IsMouseOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-680"><xref:System.Windows.UIElement3D.IsMouseOverProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-680"><xref:System.Windows.UIElement3D.IsMouseOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-681">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-681">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptured : bool" Usage="System.Windows.UIElement3D.IsStylusCaptured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-682">この要素によってスタイラスがキャプチャされるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-682">Gets a value indicating whether the stylus is captured by this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-683">要素がスタイラスのキャプチャを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-683">
              <see langword="true" /> if the element has stylus capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-684">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-684">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-685">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-685">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-686">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-686">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-687"><xref:System.Windows.UIElement3D.IsStylusCaptured%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-687"><xref:System.Windows.UIElement3D.IsStylusCaptured%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-688">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-688">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-689">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-689">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-690">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-690">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusCapturedProperty>|  
|<span data-ttu-id="e1989-691">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-691">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-692">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-692">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement3D.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement3D.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-693">この要素の <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-693">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-694">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-694">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-695"><xref:System.Windows.UIElement3D.IsStylusCapturedChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-695"><xref:System.Windows.UIElement3D.IsStylusCapturedChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-696">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-696">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCapturedProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusCapturedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-697">
            <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-697">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptured" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-698"><xref:System.Windows.UIElement3D.IsStylusCapturedProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-698"><xref:System.Windows.UIElement3D.IsStylusCapturedProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-699">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-699">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithin : bool" Usage="System.Windows.UIElement3D.IsStylusCaptureWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-700">この要素、または要素の境界とそのビジュアル ツリー内の要素がスタイラス キャプチャを保持するかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-700">Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-701">この要素または格納されている要素がスタイラスのキャプチャを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-701">
              <see langword="true" /> if this element or a contained element has stylus capture; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-702">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-702">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-703">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-703">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-704">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-704">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-705"><xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-705"><xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-706">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-706">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-707">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-707">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-708">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-708">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty>|  
|<span data-ttu-id="e1989-709">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-709">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-710">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-710">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement3D.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-711">この要素の <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-711">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-712">これは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-712">This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-713"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-713"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-714">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-714">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusCaptureWithinProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusCaptureWithinProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-715">
            <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-715">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusCaptureWithin" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-716"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-716"><xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-717">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-717">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOver : bool" Usage="System.Windows.UIElement3D.IsStylusDirectlyOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-718">スタイラスの位置が、要素の構成を考慮したヒット テストの結果に対応しているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-718">Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-719">ヒット テストと同じ要素結果上にスタイラス ポインターがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-719">
              <see langword="true" /> if the stylus pointer is over the same element result as a hit test; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-720">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-720">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-721">異なり<xref:System.Windows.UIElement3D.IsStylusOver%2A>、このプロパティはのみ`true`要素の上にスタイラスがある場合。</span><span class="sxs-lookup"><span data-stu-id="e1989-721">Unlike <xref:System.Windows.UIElement3D.IsStylusOver%2A>, this property is only `true` if the stylus is over the element.</span></span> <span data-ttu-id="e1989-722">スタイラスの代わりに子要素または要素のより深い複合 (ビジュアル ツリー) の一部である要素を場合、このプロパティになります`false`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-722">If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.</span></span>  
  
 <span data-ttu-id="e1989-723">コントロールが合成する方法がわかっていない限り、(たとえば、このプロパティ テンプレートで使用する、カスタム コントロールを定義するコントロールの)、このプロパティは、予期しない結果を返す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-723">Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.</span></span> <span data-ttu-id="e1989-724">コントロールをいない作成はほとんどのシナリオを使用して、<xref:System.Windows.UIElement3D.IsStylusOver%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-724">For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement3D.IsStylusOver%2A> instead.</span></span>  
  
 <span data-ttu-id="e1989-725">この要素がスタイラス キャプチャされ、このプロパティが`true`のキャプチャ時に、このプロパティの値`true`までスタイラスのキャプチャが失われ、その境界上にスタイラスがありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-725">If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.</span></span>  
  
 <span data-ttu-id="e1989-726">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-726">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-727">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-727">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-728"><xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-728"><xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-729">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-729">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-730">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-730">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-731">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-731">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty>|  
|<span data-ttu-id="e1989-732">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-732">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-733">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-733">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="F#" Value="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-734">この要素の <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-734">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-735">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-735">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-736"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-736"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-737">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-737">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusDirectlyOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusDirectlyOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-738">
            <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-738">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusDirectlyOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-739"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-739"><xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-740">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-740">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStylusOver : bool" Usage="System.Windows.UIElement3D.IsStylusOver" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-741">スタイラスのカーソルがこの要素 (子ビジュアル要素を含む) の上にあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-741">Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-742">スタイラス カーソルが要素またはその子要素上に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-742">
              <see langword="true" /> if stylus cursor is over the element or its child elements; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e1989-743">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-743">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-744">この要素にスタイラスのキャプチャがある場合は、このプロパティは返す引き続き`true`スタイラスのキャプチャが失われ、ポインターがその範囲外までです。</span><span class="sxs-lookup"><span data-stu-id="e1989-744">If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.</span></span>  
  
 <span data-ttu-id="e1989-745">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-745">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-746">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-746">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-747"><xref:System.Windows.UIElement3D.IsStylusOver%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-747"><xref:System.Windows.UIElement3D.IsStylusOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-748">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-748">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-749">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-749">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-750">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-750">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsStylusOverProperty>|  
|<span data-ttu-id="e1989-751">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-751">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-752">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-752">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsStylusOverProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsStylusOverProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-753">
            <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-753">Identifies the <see cref="P:System.Windows.UIElement3D.IsStylusOver" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-754"><xref:System.Windows.UIElement3D.IsStylusOverProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-754"><xref:System.Windows.UIElement3D.IsStylusOverProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-755">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-755">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Windows.UIElement3D.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-756">この要素が[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] に表示されるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-756">Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-757">要素が表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-757">
              <see langword="true" /> if the element is visible; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-758">決定、<xref:System.Windows.UIElement3D.IsVisible%2A>値は多くの要因が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-758">Determination of the <xref:System.Windows.UIElement3D.IsVisible%2A> value takes many factors into account.</span></span> <span data-ttu-id="e1989-759">これに対し、 <xref:System.Windows.UIElement3D.Visibility%2A>、表示または非表示に要素をプログラムで作成するという意図は、設定可能なプロパティのみを示します。</span><span class="sxs-lookup"><span data-stu-id="e1989-759">In contrast, <xref:System.Windows.UIElement3D.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.</span></span>  
  
 <span data-ttu-id="e1989-760">このプロパティの値の変更が通常発生、<xref:System.Windows.UIElement3D.IsVisibleChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-760">Changes to the value of this property will typically raise the <xref:System.Windows.UIElement3D.IsVisibleChanged> event.</span></span> <span data-ttu-id="e1989-761">一致がない[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]"で \*"動作をオーバーライドして、イベントを処理するクラスを派生一部処理できるようにするメソッドをオーバーライドするクラスがクラス ハンドラーと直接接続されている可能性があります<xref:System.Windows.EventManager.RegisterClassHandler%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-761">There is no matching [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] "On\*" class handling override method that would allow some derived class to override that behavior and handle the event, but a class handler could still be attached directly with <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-762">要素を<xref:System.Windows.UIElement3D.IsVisible%2A>は`false`いない入力イベント (またはコマンド) に参加、しないメジャーのいずれかに影響を与えるまたは配置レイアウトのパスがフォーカスを設定できる、タブの順序でないおよびヒット テストでは報告されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-762">Elements where <xref:System.Windows.UIElement3D.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.</span></span> <span data-ttu-id="e1989-763">これに対して、要素、<xref:System.Windows.UIElement3D.IsEnabled%2A>は`false`イベントとコマンド、およびヒット テストには参加してこれにフォーカスを設定できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-763">In contrast, elements where <xref:System.Windows.UIElement3D.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.</span></span>  
  
 <span data-ttu-id="e1989-764"><xref:System.Windows.UIElement3D.IsVisible%2A> スタイルのトリガーとして使用するものはありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-764"><xref:System.Windows.UIElement3D.IsVisible%2A> is not intended to be used as a style trigger.</span></span> <span data-ttu-id="e1989-765">使用して<xref:System.Windows.UIElement3D.IsVisible%2A>スタイルとしてトリガーが予期しない結果を必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-765">Using <xref:System.Windows.UIElement3D.IsVisible%2A> as a style trigger might have unpredictable results.</span></span> <span data-ttu-id="e1989-766"><xref:System.Windows.UIElement3D.IsVisible%2A> 下位レベルの入力実装により、確認の状態に対するものです。</span><span class="sxs-lookup"><span data-stu-id="e1989-766"><xref:System.Windows.UIElement3D.IsVisible%2A> is intended for state checking by lower level input implementations.</span></span>  
  
 <span data-ttu-id="e1989-767"><xref:System.Windows.UIElement3D.IsVisible%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-767"><xref:System.Windows.UIElement3D.IsVisible%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-768">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-768">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-769">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-769">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-770">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-770">Identifier field</span></span>|<xref:System.Windows.UIElement3D.IsVisibleProperty>|  
|<span data-ttu-id="e1989-771">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-771">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-772">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-772">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsVisibleChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-773">この要素の <see cref="P:System.Windows.UIElement3D.IsVisible" /> プロパティの値が変更されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-773">Occurs when the value of the <see cref="P:System.Windows.UIElement3D.IsVisible" /> property changes on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-774">このメンバーは、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]イベントのルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-774">This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.</span></span>  
  
 <span data-ttu-id="e1989-775"><xref:System.Windows.UIElement3D.IsVisibleChanged> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-775"><xref:System.Windows.UIElement3D.IsVisibleChanged> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-776">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-776">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsVisibleProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.IsVisibleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-777">
            <see cref="P:System.Windows.UIElement3D.IsVisible" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-777">Identifies the <see cref="P:System.Windows.UIElement3D.IsVisible" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-778"><xref:System.Windows.UIElement3D.IsVisibleProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-778"><xref:System.Windows.UIElement3D.IsVisibleProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-779">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-779">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-780">この要素にキーボード フォーカスがある状態でいずれかのキーが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-780">Occurs when a key is pressed while the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-781">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>添付イベントをこのクラスのように<xref:System.Windows.UIElement3D.KeyDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-781">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.KeyDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-782">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.KeyDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-782">Event handlers that are attached to the <xref:System.Windows.UIElement3D.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-783"><xref:System.Windows.UIElement3D.KeyDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-783"><xref:System.Windows.UIElement3D.KeyDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-784">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-784">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-785">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-785">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-786">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-786">Identifier field</span></span>|<xref:System.Windows.UIElement3D.KeyDownEvent>|  
|<span data-ttu-id="e1989-787">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-787">Routing strategy</span></span>|<span data-ttu-id="e1989-788">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-788">Bubbling</span></span>|  
|<span data-ttu-id="e1989-789">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-789">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="e1989-790">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewKeyDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-790">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewKeyDown>.</span></span>  
  
-   <span data-ttu-id="e1989-791">オーバーライド<xref:System.Windows.UIElement3D.OnKeyDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-791">Override <xref:System.Windows.UIElement3D.OnKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.KeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-792">
            <see cref="E:System.Windows.UIElement3D.KeyDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-792">Identifies the <see cref="E:System.Windows.UIElement3D.KeyDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-793">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-793">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-794">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-794">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-795">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-795">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-796">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-796">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-797">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-797">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-798"><xref:System.Windows.UIElement3D.KeyDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-798"><xref:System.Windows.UIElement3D.KeyDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-799">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-799">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-800">この要素にキーボード フォーカスがある状態でキーが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-800">Occurs when a key is released while the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-801">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>添付イベントをこのクラスのように<xref:System.Windows.UIElement3D.KeyUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-801">This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event for this class so that <xref:System.Windows.UIElement3D.KeyUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-802">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.KeyUp>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-802">Event handlers that are attached to the <xref:System.Windows.UIElement3D.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-803"><xref:System.Windows.UIElement3D.KeyUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-803"><xref:System.Windows.UIElement3D.KeyUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-804">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-804">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-805">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-805">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-806">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-806">Identifier field</span></span>|<xref:System.Windows.UIElement3D.KeyUpEvent>|  
|<span data-ttu-id="e1989-807">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-807">Routing strategy</span></span>|<span data-ttu-id="e1989-808">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-808">Bubbling</span></span>|  
|<span data-ttu-id="e1989-809">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-809">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="e1989-810">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewKeyUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-810">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewKeyUp>.</span></span>  
  
-   <span data-ttu-id="e1989-811">オーバーライド<xref:System.Windows.UIElement3D.OnKeyUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-811">Override <xref:System.Windows.UIElement3D.OnKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.KeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-812">
            <see cref="E:System.Windows.UIElement3D.KeyUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-812">Identifies the <see cref="E:System.Windows.UIElement3D.KeyUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-813">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-813">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-814">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-814">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-815">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-815">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-816">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-816">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-817">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-817">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-818"><xref:System.Windows.UIElement3D.KeyUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-818"><xref:System.Windows.UIElement3D.KeyUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-819">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-819">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.RoutedEventHandler " Usage="member this.LostFocus : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-820">この要素が論理フォーカスを失ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-820">Occurs when this element loses logical focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-821">メソッド呼び出しを使用して意図的にフォーカスを外しているにもかかわらず、直前のキーボード フォーカスが異なるスコープ内に存在する場合、論理フォーカスはキーボード フォーカスとは異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-821">Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.</span></span> <span data-ttu-id="e1989-822">ここでは、キーボード フォーカスのままですが、および要素の位置を<xref:System.Windows.UIElement3D.Focus%2A>メソッドが呼び出されますも論理フォーカスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e1989-822">In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement3D.Focus%2A> method is called still gets logical focus.</span></span>  
  
 <span data-ttu-id="e1989-823">このイベントをより正確に解釈がその it 発生する状況の値、<xref:System.Windows.UIElement3D.IsFocused%2A>からルート内の要素のプロパティが変更される`true`に`false`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-823">A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement3D.IsFocused%2A> property of an element in the route changes from `true` to `false`.</span></span>  
  
 <span data-ttu-id="e1989-824">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-824">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-825">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスを取得、実際の要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-825">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.</span></span>  
  
 <span data-ttu-id="e1989-826"><xref:System.Windows.UIElement3D.LostFocus> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-826"><xref:System.Windows.UIElement3D.LostFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-827">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-827">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-828">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-828">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-829">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-829">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostFocusEvent>|  
|<span data-ttu-id="e1989-830">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-830">Routing strategy</span></span>|<span data-ttu-id="e1989-831">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-831">Bubbling</span></span>|  
|<span data-ttu-id="e1989-832">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-832">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
-   <span data-ttu-id="e1989-833">対応するトンネル イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-833">There is no corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="e1989-834">オーバーライド<xref:System.Windows.UIElement3D.OnLostFocus%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-834">Override <xref:System.Windows.UIElement3D.OnLostFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-835">
            <see cref="E:System.Windows.UIElement3D.LostFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-835">Identifies the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-836">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-836">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-837">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-837">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-838">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-838">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-839">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-839">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-840">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-840">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-841"><xref:System.Windows.UIElement3D.LostFocusEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-841"><xref:System.Windows.UIElement3D.LostFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-842">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-842">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.LostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-843">この要素からキーボード フォーカスが離れたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-843">Occurs when the keyboard is no longer focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-844">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-844">Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-845">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスを失っている実際の要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-845">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="e1989-846">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.LostKeyboardFocus>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-846">This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-847">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.LostKeyboardFocus>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-847">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-848"><xref:System.Windows.UIElement3D.LostKeyboardFocus> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-848"><xref:System.Windows.UIElement3D.LostKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-849">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-849">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-850">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-850">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-851">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-851">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostKeyboardFocusEvent>|  
|<span data-ttu-id="e1989-852">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-852">Routing strategy</span></span>|<span data-ttu-id="e1989-853">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-853">Bubbling</span></span>|  
|<span data-ttu-id="e1989-854">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-854">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="e1989-855">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-855">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="e1989-856">オーバーライド<xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-856">Override <xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-857">
            <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-857">Identifies the <see cref="E:System.Windows.UIElement3D.LostKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-858">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-858">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-859">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-859">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-860">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-860">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-861">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-861">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-862">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-862">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-863"><xref:System.Windows.UIElement3D.LostKeyboardFocusEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-863"><xref:System.Windows.UIElement3D.LostKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-864">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-864">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberSignature Language="F#" Value="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " Usage="member this.LostMouseCapture : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-865">この要素がマウス キャプチャを失ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-865">Occurs when this element loses mouse capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-866">要素がマウスをキャプチャは、ポインターがその境界の外側にある場合でも、マウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="e1989-866">When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="e1989-867">マウスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="e1989-867">The mouse is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="e1989-868">このイベントは、バブル ルーティングを使用するため、キャプチャを失った要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-868">Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-869">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>キャプチャを失った実際の要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-869">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.</span></span>  
  
 <span data-ttu-id="e1989-870">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.LostMouseCapture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-870">This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-871">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.LostMouseCapture>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-871">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-872"><xref:System.Windows.UIElement3D.LostMouseCapture> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-872"><xref:System.Windows.UIElement3D.LostMouseCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-873">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-873">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-874">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-874">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-875">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-875">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostMouseCaptureEvent>|  
|<span data-ttu-id="e1989-876">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-876">Routing strategy</span></span>|<span data-ttu-id="e1989-877">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-877">Bubbling</span></span>|  
|<span data-ttu-id="e1989-878">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-878">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="e1989-879">定義済みの対応するトンネル イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-879">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="e1989-880">オーバーライド<xref:System.Windows.UIElement3D.OnLostMouseCapture%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-880">Override <xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-881">
            <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-881">Identifies the <see cref="E:System.Windows.UIElement3D.LostMouseCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-882">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-882">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-883">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-883">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-884">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-884">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-885">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-885">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-886">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-886">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-887"><xref:System.Windows.UIElement3D.LostMouseCaptureEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-887"><xref:System.Windows.UIElement3D.LostMouseCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-888">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-888">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberSignature Language="F#" Value="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " Usage="member this.LostStylusCapture : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-889">この要素がスタイラス キャプチャを失ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-889">Occurs when this element loses stylus capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-890">要素がスタイラスをキャプチャするときは、ポインターがその境界の外側にある場合でも、スタイラス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="e1989-890">When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.</span></span> <span data-ttu-id="e1989-891">スタイラスは通常、ドラッグ アンド ドロップ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="e1989-891">The stylus is typically captured only during drag-and-drop operations.</span></span>  
  
 <span data-ttu-id="e1989-892">このイベントは、バブル ルーティングを使用するため、フォーカスを失った要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-892">Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-893">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスを失っている実際の要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-893">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="e1989-894">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.LostStylusCapture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-894">This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-895">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.LostStylusCapture>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-895">Event handlers that are attached to the <xref:System.Windows.UIElement3D.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-896"><xref:System.Windows.UIElement3D.LostStylusCapture> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-896"><xref:System.Windows.UIElement3D.LostStylusCapture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-897">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-897">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-898">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-898">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-899">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-899">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostStylusCaptureEvent>|  
|<span data-ttu-id="e1989-900">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-900">Routing strategy</span></span>|<span data-ttu-id="e1989-901">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-901">Bubbling</span></span>|  
|<span data-ttu-id="e1989-902">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-902">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-903">定義済みの対応するトンネル イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-903">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="e1989-904">オーバーライド<xref:System.Windows.UIElement3D.OnLostStylusCapture%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-904">Override <xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostStylusCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostStylusCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-905">
            <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-905">Identifies the <see cref="E:System.Windows.UIElement3D.LostStylusCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-906">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-906">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-907">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-907">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-908">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-908">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-909">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-909">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-910">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-910">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-911"><xref:System.Windows.UIElement3D.LostStylusCaptureEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-911"><xref:System.Windows.UIElement3D.LostStylusCaptureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-912">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-912">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberSignature Language="F#" Value="member this.LostTouchCapture : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.LostTouchCapture : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-913">この要素がタッチのキャプチャを失うと発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-913">Occurs when this element loses a touch capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-914">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-914">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-915">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-915">Identifier field</span></span>|<xref:System.Windows.UIElement3D.LostTouchCaptureEvent>|  
|<span data-ttu-id="e1989-916">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-916">Routing strategy</span></span>|<span data-ttu-id="e1989-917">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-917">Bubbling</span></span>|  
|<span data-ttu-id="e1989-918">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-918">Delegate</span></span>|<span data-ttu-id="e1989-919"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-919"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-920">オーバーライド<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-920">Override <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostTouchCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.LostTouchCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-921">
            <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-921">Identifies the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-922">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-922">Occurs when any mouse button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-923">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.MouseDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-923">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-924">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.MouseDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-924">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-925"><xref:System.Windows.UIElement3D.MouseDown>イベントは、多くの場合、いずれかと共に発生<xref:System.Windows.UIElement3D.MouseLeftButtonDown>または<xref:System.Windows.UIElement3D.MouseRightButtonDown>に対応する 2 つの標準のマウス ボタンのいずれかのキーを押します。</span><span class="sxs-lookup"><span data-stu-id="e1989-925">The <xref:System.Windows.UIElement3D.MouseDown> event is often raised together with either <xref:System.Windows.UIElement3D.MouseLeftButtonDown> or <xref:System.Windows.UIElement3D.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="e1989-926"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> <xref:System.Windows.UIElement3D.MouseRightButtonDown>も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベントがイベント ルート上には、この要素に到達します。</span><span class="sxs-lookup"><span data-stu-id="e1989-926"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> and <xref:System.Windows.UIElement3D.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="e1989-927">「解説」を参照してください。<xref:System.Windows.UIElement3D.MouseLeftButtonDown>または<xref:System.Windows.UIElement3D.MouseRightButtonDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-927">See Remarks for <xref:System.Windows.UIElement3D.MouseLeftButtonDown> or <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e1989-928">一部のコントロールは、固有のクラスのマウス ボタンのイベント処理があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-928">Some controls might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="e1989-929">左マウス ボタンを押すイベントは、クラス、コントロールの処理が最も可能性の高いイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-929">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="e1989-930">多くの場合、処理するクラスは、基になるをマーク<xref:System.Windows.Input.Mouse>クラス イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="e1989-930">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="e1989-931">イベントが処理済みマークされると、その要素にアタッチされている他のインスタンス ハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="e1989-931">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="e1989-932">その他のクラスまたはインスタンス ハンドラー UI ツリーのルートに向かうバブルの方向に要素にアタッチされているが通常も発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-932">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="e1989-933">前の重要なに記載されている問題を解決でき、それでも<xref:System.Windows.UIElement3D.MouseDown>をこれらのソリューションのいずれかを使用して処理するクラスを持つ派生クラスでイベントをマウスの左ボタンのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-933">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement3D.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="e1989-934">ハンドラーのアタッチ、<xref:System.Windows.UIElement3D.PreviewMouseDown>イベントで、コントロールによって処理済みとしてマークされていません。</span><span class="sxs-lookup"><span data-stu-id="e1989-934">Attach handlers for the <xref:System.Windows.UIElement3D.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="e1989-935">これは、プレビュー イベントであるため、ルートがルートをトンネリングをコントロールに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-935">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="e1989-936">コントロールのハンドラーを呼び出すことによって手続き登録<xref:System.Windows.UIElement3D.AddHandler%2A>とルーティング イベントのデータの処理としてマークされている場合でも、イベントをリッスンするハンドラーの有効な署名オプションを選択します。</span><span class="sxs-lookup"><span data-stu-id="e1989-936">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement3D.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
 <span data-ttu-id="e1989-937"><xref:System.Windows.UIElement3D.MouseDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-937"><xref:System.Windows.UIElement3D.MouseDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-938">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-938">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-939">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-939">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-940">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-940">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseDownEvent>|  
|<span data-ttu-id="e1989-941">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-941">Routing strategy</span></span>|<span data-ttu-id="e1989-942">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-942">Bubbling</span></span>|  
|<span data-ttu-id="e1989-943">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-943">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-944">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewMouseDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-944">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseDown>.</span></span>  
  
-   <span data-ttu-id="e1989-945">オーバーライド<xref:System.Windows.UIElement3D.OnMouseDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-945">Override <xref:System.Windows.UIElement3D.OnMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-946">
            <see cref="E:System.Windows.UIElement3D.MouseDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-946">Identifies the <see cref="E:System.Windows.UIElement3D.MouseDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-947">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-947">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-948">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-948">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-949">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-949">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-950">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-950">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-951">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-951">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-952"><xref:System.Windows.UIElement3D.MouseDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-952"><xref:System.Windows.UIElement3D.MouseDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-953">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-953">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : System.Windows.Input.MouseEventHandler " Usage="member this.MouseEnter : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-954">マウス ポインターがこの要素の境界内に入ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-954">Occurs when the mouse pointer enters the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-955"><xref:System.Windows.UIElement3D.MouseEnter> [ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)直接イベント ルーティング方法の処理を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-955"><xref:System.Windows.UIElement3D.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="e1989-956">ルート; は直接ルーティング イベントは発生しません代わりが処理される同じ要素で発生した場所。</span><span class="sxs-lookup"><span data-stu-id="e1989-956">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span>  
  
 <span data-ttu-id="e1989-957"><xref:System.Windows.UIElement3D.MouseEnter>マウス ポインターがこのイベントの詳細、要素の境界内に入る時点を追跡しますが文字どおり報告された、<xref:System.Windows.UIElement3D.IsMouseOver%2A>からプロパティ値が変更された`false`に`true`この要素にします。</span><span class="sxs-lookup"><span data-stu-id="e1989-957">Although <xref:System.Windows.UIElement3D.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsMouseOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="e1989-958">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.MouseEnter>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-958">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-959">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.MouseEnter>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-959">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-960"><xref:System.Windows.UIElement3D.MouseEnter> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-960"><xref:System.Windows.UIElement3D.MouseEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-961">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-961">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-962">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-962">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-963">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-963">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseEnterEvent>|  
|<span data-ttu-id="e1989-964">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-964">Routing strategy</span></span>|<span data-ttu-id="e1989-965">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-965">Direct</span></span>|  
|<span data-ttu-id="e1989-966">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-966">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="e1989-967">オーバーライド<xref:System.Windows.UIElement3D.OnMouseEnter%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-967">Override <xref:System.Windows.UIElement3D.OnMouseEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-968">
            <see cref="E:System.Windows.UIElement3D.MouseEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-968">Identifies the <see cref="E:System.Windows.UIElement3D.MouseEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-969">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-969">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-970">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-970">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-971">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-971">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-972">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-972">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-973">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-973">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-974"><xref:System.Windows.UIElement3D.MouseEnterEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-974"><xref:System.Windows.UIElement3D.MouseEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-975">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-975">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Input.MouseEventHandler " Usage="member this.MouseLeave : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-976">マウス ポインターがこの要素の境界内から出たときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-976">Occurs when the mouse pointer leaves the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-977"><xref:System.Windows.UIElement3D.MouseLeave> [ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)直接イベント ルーティング方法の処理を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-977"><xref:System.Windows.UIElement3D.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="e1989-978">ルート; は直接ルーティング イベントは発生しません代わりが処理される同じ要素で発生した場所。</span><span class="sxs-lookup"><span data-stu-id="e1989-978">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span>  
  
 <span data-ttu-id="e1989-979"><xref:System.Windows.UIElement3D.MouseLeave>マウスが離れるときに、要素では、このイベントの詳細は、トラックが文字どおり報告された、<xref:System.Windows.UIElement3D.IsMouseOver%2A>からプロパティ値が変更された`true`に`false`この要素。</span><span class="sxs-lookup"><span data-stu-id="e1989-979">Although <xref:System.Windows.UIElement3D.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="e1989-980">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.MouseLeave>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-980">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-981">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.MouseLeave>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-981">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-982"><xref:System.Windows.UIElement3D.MouseLeave> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-982"><xref:System.Windows.UIElement3D.MouseLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-983">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-983">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-984">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-984">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-985">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-985">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeaveEvent>|  
|<span data-ttu-id="e1989-986">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-986">Routing strategy</span></span>|<span data-ttu-id="e1989-987">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-987">Direct</span></span>|  
|<span data-ttu-id="e1989-988">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-988">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="e1989-989">オーバーライド<xref:System.Windows.UIElement3D.OnMouseLeave%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-989">Override <xref:System.Windows.UIElement3D.OnMouseLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-990">
            <see cref="E:System.Windows.UIElement3D.MouseLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-990">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-991">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-991">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-992">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-992">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-993">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-993">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-994">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-994">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-995">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-995">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-996"><xref:System.Windows.UIElement3D.MouseLeaveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-996"><xref:System.Windows.UIElement3D.MouseLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-997">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-997">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-998">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-998">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-999">この[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)要素ツリー ルートをバブルに従うよう、直接ルーティング イベントが発生し、それぞれで、要素ツリーに沿って reraised を実際には<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-999">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-1000">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントのいずれかの<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>添付イベントをイベント ルート上の各要素によって処理されるは、そのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1000">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="e1989-1001">このイベントのイベント データは、基になるイベントのデータを公開<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1001">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="e1989-1002">そのイベントがイベント ルート上で処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement3D.AddHandler%2A>、処理済みとしてマークされているイベントを処理するために、イベント リスナーをするためには、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1002">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="e1989-1003">マークした場合<xref:System.Windows.UIElement3D.MouseLeftButtonDown>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーは自動的に処理およびすべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1003">If you mark <xref:System.Windows.UIElement3D.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="e1989-1004">これは、可能性がありますが含まれていますクラス ハンドラーが生成されたイベントにはなど<xref:System.Windows.Controls.Control.MouseDoubleClick>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1004">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="e1989-1005">概念的には、このイベントと考える (とその他のマウス ボタンのイベントの<xref:System.Windows.UIElement3D>) マウス「サービス」にする (によって提供されるサービスの定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-1005">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="e1989-1006">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左、右、上下) を確認する必要がないという利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1006">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="e1989-1007">非標準のボタンの状態のチェックより高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1007">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e1989-1008">多くの場合、処理するクラスは、基になるをマーク<xref:System.Windows.Input.Mouse>クラス イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1008">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="e1989-1009">イベントが処理済みマークされると、その要素にアタッチされている他のインスタンス ハンドラーは通常は発生しません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1009">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="e1989-1010">その他のクラスまたはインスタンス ハンドラー UI ツリーのルートに向かうバブルの方向に要素にアタッチされているが通常も発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1010">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="e1989-1011">前の重要なに記載されている問題を解決でき、それでも<xref:System.Windows.UIElement3D.MouseLeftButtonDown>をこれらのソリューションのいずれかを使用して処理するクラスを持つ派生クラスでイベントをマウスの左ボタンのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1011">You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement3D.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="e1989-1012">ハンドラーのアタッチ、<xref:System.Windows.UIElement3D.PreviewMouseDown>イベントで、コントロールによって処理済みとしてマークされていません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1012">Attach handlers for the <xref:System.Windows.UIElement3D.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="e1989-1013">これは、プレビュー イベントであるため、ルートがルートをトンネリングをコントロールに注意してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1013">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="e1989-1014">コントロールのハンドラーを呼び出すことによって手続き登録<xref:System.Windows.UIElement3D.AddHandler%2A>とルーティング イベントのデータの処理としてマークされている場合でも、イベントをリッスンするハンドラーの有効な署名オプションを選択します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1014">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement3D.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
 <span data-ttu-id="e1989-1015"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1015"><xref:System.Windows.UIElement3D.MouseLeftButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1016">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1016">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-1017">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-1017">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-1018">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1018">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent>|  
|<span data-ttu-id="e1989-1019">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-1019">Routing strategy</span></span>|<span data-ttu-id="e1989-1020">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-1020">Direct</span></span>|  
|<span data-ttu-id="e1989-1021">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-1021">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-1022">オーバーライド<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1022">Override <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1023">
            <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1023">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1024">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1024">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-1025">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1025">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-1026">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1026">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-1027">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1027">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-1028">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1028">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1029"><xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1029"><xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1030">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1030">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1031">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1031">Occurs when the left mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1032">この[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)要素ツリー ルートをバブルに従うよう、直接ルーティング イベントが発生し、それぞれで、要素ツリーに沿って reraised を実際には<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1032">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-1033">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントのいずれかの<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>添付イベントをイベント ルート上の各要素によって処理されるは、そのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1033">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="e1989-1034">このイベントのイベント データは、基になるイベントのデータを公開<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1034">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="e1989-1035">そのイベントがイベント ルート上で処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement3D.AddHandler%2A>、処理済みとしてマークされているイベントを処理するために、イベント リスナーをするためには、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1035">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="e1989-1036">マークした場合<xref:System.Windows.UIElement3D.MouseLeftButtonUp>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>経路、さらにすべてのリスナーは自動的に処理およびすべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1036">If you mark <xref:System.Windows.UIElement3D.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="e1989-1037">概念的には、このイベントと考える (とその他のマウス ボタンのイベントの<xref:System.Windows.UIElement3D>) マウス「サービス」にする (によって提供されるサービスの定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-1037">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="e1989-1038">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左、右、上下) を確認する必要がないという利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1038">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="e1989-1039">非標準のボタンの状態のチェックより高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1039">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-1040"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1040"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1041">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1041">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-1042">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-1042">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-1043">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1043">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent>|  
|<span data-ttu-id="e1989-1044">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-1044">Routing strategy</span></span>|<span data-ttu-id="e1989-1045">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-1045">Direct</span></span>|  
|<span data-ttu-id="e1989-1046">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-1046">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-1047">オーバーライド<xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1047">Override <xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1048">
            <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1048">Identifies the <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1049">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1049">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-1050">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1050">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-1051">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1051">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-1052">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1052">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-1053">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1053">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1054"><xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1054"><xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1055">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1055">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1056">この要素の上でマウス ポインターが動かされたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1056">Occurs when the mouse pointer moves while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1057">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.MouseMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1057">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-1058">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.MouseMove>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1058">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-1059"><xref:System.Windows.UIElement3D.MouseMove> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1059"><xref:System.Windows.UIElement3D.MouseMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1060">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1060">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-1061">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-1061">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-1062">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1062">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseMoveEvent>|  
|<span data-ttu-id="e1989-1063">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-1063">Routing strategy</span></span>|<span data-ttu-id="e1989-1064">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-1064">Bubbling</span></span>|  
|<span data-ttu-id="e1989-1065">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-1065">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="e1989-1066">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewMouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1066">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseMove>.</span></span>  
  
-   <span data-ttu-id="e1989-1067">オーバーライド<xref:System.Windows.UIElement3D.OnMouseMove%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1067">Override <xref:System.Windows.UIElement3D.OnMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1068">
            <see cref="E:System.Windows.UIElement3D.MouseMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1068">Identifies the <see cref="E:System.Windows.UIElement3D.MouseMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1069">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1069">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-1070">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1070">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-1071">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1071">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-1072">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1072">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-1073">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1073">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1074"><xref:System.Windows.UIElement3D.MouseMoveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1074"><xref:System.Windows.UIElement3D.MouseMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1075">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1075">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1076">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1076">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1077">この[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)要素ツリー ルートをバブルに従うよう、直接ルーティング イベントが発生し、それぞれで、要素ツリーに沿って reraised を実際には<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1077">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-1078">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントのいずれかの<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>添付イベントをイベント ルート上の各要素によって処理されるは、そのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1078">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="e1989-1079">このイベントのイベント データは、基になるイベントのデータを公開<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1079">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="e1989-1080">そのイベントがイベント ルート上で処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement3D.AddHandler%2A>、処理済みとしてマークされているイベントを処理するために、イベント リスナーをするためには、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1080">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="e1989-1081">マークした場合<xref:System.Windows.UIElement3D.MouseRightButtonDown>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーは自動的に処理およびすべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1081">If you mark <xref:System.Windows.UIElement3D.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="e1989-1082">これは、可能性がありますが含まれていますクラス ハンドラーが生成されたイベントにはなど<xref:System.Windows.Controls.Control.MouseDoubleClick>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1082">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="e1989-1083">概念的には、このイベントと考える (とその他のマウス ボタンのイベントの<xref:System.Windows.UIElement3D>) マウス「サービス」にする (によって提供されるサービスの定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-1083">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="e1989-1084">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左、右、上下) を確認する必要がないという利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1084">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="e1989-1085">非標準のボタンの状態のチェックより高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1085">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-1086">右側のボタンのマウス イベントは、アプリケーションのシナリオでネイティブ処理を頻繁にあります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1086">Right button mouse events frequently have native handling in application scenarios.</span></span> <span data-ttu-id="e1989-1087">たとえば、マウスの右ボタンを押したままは、コンテキスト メニューを表示することがあります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1087">For instance, a right mouse button down might display a context menu.</span></span> <span data-ttu-id="e1989-1088">参照してください[ContextMenu の概要](~/docs/framework/wpf/controls/contextmenu-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1088">See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-1089"><xref:System.Windows.UIElement3D.MouseRightButtonDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1089"><xref:System.Windows.UIElement3D.MouseRightButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1090">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1090">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-1091">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-1091">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-1092">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1092">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseRightButtonDownEvent>|  
|<span data-ttu-id="e1989-1093">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-1093">Routing strategy</span></span>|<span data-ttu-id="e1989-1094">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-1094">Direct</span></span>|  
|<span data-ttu-id="e1989-1095">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-1095">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-1096">オーバーライド<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1096">Override <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1097">
            <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1097">Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1098">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1098">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-1099">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1099">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-1100">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1100">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-1101">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1101">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-1102">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1102">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1103"><xref:System.Windows.UIElement3D.MouseRightButtonDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1103"><xref:System.Windows.UIElement3D.MouseRightButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1104">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1104">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1105">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1105">Occurs when the right mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1106">この[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)要素ツリー ルートをバブルに従うよう、直接ルーティング イベントが発生し、それぞれで、要素ツリーに沿って reraised を実際には<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1106">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-1107">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントのいずれかの<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>添付イベントをイベント ルート上の各要素によって処理されるは、そのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1107">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="e1989-1108">このイベントのイベント データは、基になるイベントのデータを公開<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1108">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="e1989-1109">そのイベントがイベント ルート上で処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement3D.AddHandler%2A>、処理済みとしてマークされているイベントを処理するために、イベント リスナーをするためには、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1109">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="e1989-1110">マークした場合<xref:System.Windows.UIElement3D.MouseRightButtonUp>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーは自動的に処理およびすべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1110">If you mark <xref:System.Windows.UIElement3D.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="e1989-1111">概念的には、このイベントと考える (とその他のマウス ボタンのイベントの<xref:System.Windows.UIElement3D>) マウス「サービス」にする (によって提供されるサービスの定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-1111">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="e1989-1112">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左、右、上下) を確認する必要がないという利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1112">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="e1989-1113">非標準のボタンの状態のチェックより高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1113">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-1114"><xref:System.Windows.UIElement3D.MouseRightButtonUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1114"><xref:System.Windows.UIElement3D.MouseRightButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1115">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1115">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-1116">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-1116">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-1117">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1117">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseRightButtonUpEvent>|  
|<span data-ttu-id="e1989-1118">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-1118">Routing strategy</span></span>|<span data-ttu-id="e1989-1119">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-1119">Direct</span></span>|  
|<span data-ttu-id="e1989-1120">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-1120">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-1121">オーバーライド<xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1121">Override <xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1122">
            <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1122">Identifies the <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1123">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1123">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-1124">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1124">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-1125">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1125">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-1126">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1126">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-1127">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1127">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1128"><xref:System.Windows.UIElement3D.MouseRightButtonUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1128"><xref:System.Windows.UIElement3D.MouseRightButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1129">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1129">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.MouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1130">この要素の上でいずれかのマウス ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1130">Occurs when any mouse button is released over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1131">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.MouseUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1131">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-1132">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.MouseUp>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1132">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-1133"><xref:System.Windows.UIElement3D.MouseUp>イベントは、多くの場合、いずれかと共に発生<xref:System.Windows.UIElement3D.MouseLeftButtonUp>または<xref:System.Windows.UIElement3D.MouseRightButtonUp>、2 つの標準のマウス ボタンのいずれかのリリースに対応します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1133">The <xref:System.Windows.UIElement3D.MouseUp> event is often raised together with either <xref:System.Windows.UIElement3D.MouseLeftButtonUp> or <xref:System.Windows.UIElement3D.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons.</span></span> <span data-ttu-id="e1989-1134"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> <xref:System.Windows.UIElement3D.MouseRightButtonUp>も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベントがイベント ルート上には、この要素に到達します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1134"><xref:System.Windows.UIElement3D.MouseLeftButtonUp> and <xref:System.Windows.UIElement3D.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="e1989-1135">「解説」を参照してください。<xref:System.Windows.UIElement3D.MouseLeftButtonUp>または<xref:System.Windows.UIElement3D.MouseRightButtonUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1135">See Remarks for <xref:System.Windows.UIElement3D.MouseLeftButtonUp> or <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span>  
  
 <span data-ttu-id="e1989-1136"><xref:System.Windows.UIElement3D.MouseUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1136"><xref:System.Windows.UIElement3D.MouseUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1137">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1137">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-1138">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-1138">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-1139">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1139">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseUpEvent>|  
|<span data-ttu-id="e1989-1140">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-1140">Routing strategy</span></span>|<span data-ttu-id="e1989-1141">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-1141">Bubbling</span></span>|  
|<span data-ttu-id="e1989-1142">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-1142">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-1143">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewMouseUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1143">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseUp>.</span></span>  
  
-   <span data-ttu-id="e1989-1144">オーバーライド<xref:System.Windows.UIElement3D.OnMouseUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1144">Override <xref:System.Windows.UIElement3D.OnMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1145">
            <see cref="E:System.Windows.UIElement3D.MouseUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1145">Identifies the <see cref="E:System.Windows.UIElement3D.MouseUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1146">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1146">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-1147">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1147">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-1148">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1148">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-1149">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1149">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-1150">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1150">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1151"><xref:System.Windows.UIElement3D.MouseUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1151"><xref:System.Windows.UIElement3D.MouseUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1152">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1152">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.MouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1153">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1153">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1154">フォーカスおよびマウスのキャプチャ、マウス ポインターが; よりも優先します。そのため、発生した場合、<xref:System.Windows.UIElement3D.MouseWheel>フォーカスがあるか、キャプチャした要素からのイベント、マウス ポインター実際にもあります別の要素。</span><span class="sxs-lookup"><span data-stu-id="e1989-1154">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement3D.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="e1989-1155">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.MouseWheel>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1155">This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-1156">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.MouseWheel>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1156">Event handlers that are attached to the <xref:System.Windows.UIElement3D.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-1157"><xref:System.Windows.UIElement3D.MouseWheel> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1157"><xref:System.Windows.UIElement3D.MouseWheel> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1158">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1158">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-1159">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-1159">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-1160">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1160">Identifier field</span></span>|<xref:System.Windows.UIElement3D.MouseWheelEvent>|  
|<span data-ttu-id="e1989-1161">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-1161">Routing strategy</span></span>|<span data-ttu-id="e1989-1162">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-1162">Bubbling</span></span>|  
|<span data-ttu-id="e1989-1163">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-1163">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="e1989-1164">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewMouseWheel>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1164">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewMouseWheel>.</span></span>  
  
-   <span data-ttu-id="e1989-1165">オーバーライド<xref:System.Windows.UIElement3D.OnMouseWheel%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1165">Override <xref:System.Windows.UIElement3D.OnMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1166">
            <see cref="E:System.Windows.UIElement3D.MouseWheel" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1166">Identifies the <see cref="E:System.Windows.UIElement3D.MouseWheel" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1167">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1167">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-1168">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1168">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-1169">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1169">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-1170">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1170">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-1171">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1171">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1172"><xref:System.Windows.UIElement3D.MouseWheelEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1172"><xref:System.Windows.UIElement3D.MouseWheelEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1173">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1173">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="abstract member MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool&#xA;override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="uIElement3D.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="e1989-1174">既存のタブ オーダーを検査するモード、または視覚的な移動方向を示すプロパティを含む検査要求。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1174">A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1175">この要素から別の要素へのフォーカスの移動を試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1175">Attempts to move focus from this element to another element.</span>
          </span>
          <span data-ttu-id="e1989-1176">フォーカスの移動方向は、ガイドラインの方向によって指定され、この要素のビジュアル親の編成内で解釈されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1176">The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-1177">要求した検査が実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1177">
              <see langword="true" /> if the requested traversal was performed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1178">このメソッドの戻り値を確認してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1178">Make sure you check the return value of this method.</span></span> <span data-ttu-id="e1989-1179">戻り値`false`コントロールの複合で定義されているタブ ストップの検査が実行され、検査要求を要求をラップしていないかどうかに返される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1179">A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.</span></span>  
  
 <span data-ttu-id="e1989-1180"><xref:System.Windows.UIElement3D.MoveFocus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1180"><xref:System.Windows.UIElement3D.MoveFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1181">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1181">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit&#xA;override this.OnAccessKey : System.Windows.Input.AccessKeyEventArgs -&gt; unit" Usage="uIElement3D.OnAccessKey e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1182">アクセス キー イベントのイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1182">The event data to the access key event.</span>
          </span>
          <span data-ttu-id="e1989-1183">イベント データは、呼び出されたキーを報告し、これらのイベントの送信を制御する <see cref="T:System.Windows.Input.AccessKeyManager" /> オブジェクトが、このアクセス キーの呼び出しを他の要素にも送信したかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1183">The event data reports which key was invoked, and indicate whether the <see cref="T:System.Windows.Input.AccessKeyManager" /> object that controls the sending of these events also sent this access key invocation to other elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1184">この要素に対して有効なアクセス キーが呼び出されたときのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1184">Provides class handling for when an access key that is meaningful for this element is invoked.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1185">実際のアクセス キー イベントではありません、<xref:System.Windows.UIElement3D>クラス、またはその他のハンドラーをアタッチすることができますか。</span><span class="sxs-lookup"><span data-stu-id="e1989-1185">There is no actual AccessKey event in the <xref:System.Windows.UIElement3D> class, or elsewhere, which you can raise or attach handlers for.</span></span> <span data-ttu-id="e1989-1186">専任マネージャー クラスを使用して、イベントが発生した代わりに、 <xref:System.Windows.Input.AccessKeyManager>、後に入力モデル全体に適用されるアクセス キーを検索するすべての入力を処理します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1186">Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.</span></span>  
  
 <span data-ttu-id="e1989-1187"><xref:System.Windows.UIElement3D.OnAccessKey%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1187"><xref:System.Windows.UIElement3D.OnAccessKey%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1188">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1188">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e1989-1189">
            <para>このメソッドの既定の実装<see cref="T:System.Windows.UIElement3D" />キーボード フォーカスをこの要素のセット (呼び出して<see cref="M:System.Windows.UIElement3D.Focus" />)。実装は、ユーザー補助のシナリオで期待される動作のために、フォーカスを設定できるいる場合、この動作を永続化する必要があります。基本の実装では、渡されたイベント データで何も行いません、他のイベントは発生しません同様に、フォーカスを設定します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1189">
              <para>The default implementation of this method in <see cref="T:System.Windows.UIElement3D" /> sets keyboard focus to this element (by calling <see cref="M:System.Windows.UIElement3D.Focus" />). Implementations should perpetuate this behavior if they are focusable, because it is an expected behavior for accessibility scenarios. Note that the base implementation does nothing with the passed event data and raises no further event; it just sets the focus.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer&#xA;override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="uIElement3D.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-1190">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] インフラストラクチャの、クラス固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1190">Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-1191">型固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1191">The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1192"><xref:System.Windows.UIElement3D.OnCreateAutomationPeer%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1192"><xref:System.Windows.UIElement3D.OnCreateAutomationPeer%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1193">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1193">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e1989-1194">
            <para>通常このメソッドの実装は、特定のコンス トラクターを呼び出す<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />実装では、戻り値として返すとします。すべて<see cref="T:System.Windows.UIElement3D" />派生クラスは、独自の特定の提供するためにこのメソッドを実装する必要があります<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />を実装する、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]インフラストラクチャ。このパターンの実装の詳細については、「<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1194">
              <para>The implementation of this method is typically to call the constructor of a specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation, and return it as the return value.  All <see cref="T:System.Windows.UIElement3D" /> derived classes should implement this method in order to provide their own specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations to the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure. For details on implementing this pattern, see <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1195">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1195">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1196">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1196">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1197">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1197">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1198">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1198">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1199">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1199">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1200">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1200">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1201">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1201">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1202">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1202">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1203">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1203">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1204">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1204">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1205">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1205">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1206">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1206">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1207"><xref:System.Windows.UIElement3D.OnDragEnter%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1207"><xref:System.Windows.UIElement3D.OnDragEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1208">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1208">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1209">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1209">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1210">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragLeave" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1210">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragLeave" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1211">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1211">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1212">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1212">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1213">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1213">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1214">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1214">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1215">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1215">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1216">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1216">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1217">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1217">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1218">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1218">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1219">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1219">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1220">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1220">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1221"><xref:System.Windows.UIElement3D.OnDragLeave%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1221"><xref:System.Windows.UIElement3D.OnDragLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1222">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1222">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1223">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1223">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1224">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.DragOver" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1224">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.DragOver" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1225">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1225">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1226">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1226">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1227">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1227">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1228">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1228">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1229">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1229">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1230">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1230">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1231">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1231">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1232">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1232">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1233">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1233">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1234">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1234">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1235"><xref:System.Windows.UIElement3D.OnDragOver%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1235"><xref:System.Windows.UIElement3D.OnDragOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1236">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1236">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1237">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1237">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1238">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.Drop" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1238">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.Drop" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1239">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1239">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1240">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1240">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1241">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1241">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1242">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1242">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1243">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1243">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1244">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1244">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1245">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1245">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1246">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1246">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1247">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1247">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1248">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1248">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1249"><xref:System.Windows.UIElement3D.OnDrop%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1249"><xref:System.Windows.UIElement3D.OnDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1250">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1250">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement3D.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1251">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1251">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1252">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.GiveFeedback" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1252">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.GiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1253">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1253">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1254">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1254">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1255">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1255">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1256">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1256">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1257">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1257">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1258">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1258">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1259">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1259">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1260">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1260">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1261">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1261">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1262">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1262">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1263"><xref:System.Windows.UIElement3D.OnGiveFeedback%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1263"><xref:System.Windows.UIElement3D.OnGiveFeedback%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1264">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1264">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1265">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1265">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span>
          </span>
          <span data-ttu-id="e1989-1266">このイベント データは、<see cref="E:System.Windows.UIElement3D.GotFocus" /> イベントの識別子を含む必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1266">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.GotFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1267">提供されたイベント データを使用して、<see cref="E:System.Windows.UIElement3D.GotFocus" /> ルーティング イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1267">Raises the <see cref="E:System.Windows.UIElement3D.GotFocus" /> routed event by using the event data provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1268">このメソッドは、仮想は、イベントを発生させる既定の実装。</span><span class="sxs-lookup"><span data-stu-id="e1989-1268">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="e1989-1269">これを \* メソッドの実装は、イベントを発生させる、およびイベントを発生させる、この同じメソッドの実装が内部的に呼び出されるときに、<xref:System.Windows.UIElement3D.IsFocused%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1269">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="e1989-1270"><xref:System.Windows.UIElement3D.OnGotFocus%2A>からその他の実装とは異なる[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]で \* のみそのイベントのクラス処理を追加する便利な手段を提供するには、実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1270">The <xref:System.Windows.UIElement3D.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 <span data-ttu-id="e1989-1271"><xref:System.Windows.UIElement3D.OnGotFocus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1271"><xref:System.Windows.UIElement3D.OnGotFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1272">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1272">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e1989-1273">
            <para>フォーカス イベントを発生させないする意図とは異なる必要がない限り、実装が、基本実装を呼び出すことを確認します。それ以外の場合、<see cref="E:System.Windows.UIElement3D.GotFocus" />イベントは通常、この要素にフォーカスを設定する一般的なユーザー操作中に発生しません。要素にフォーカスを設定しない場合は、設定されない要素を防ぐことができます<see cref="P:System.Windows.UIElement3D.Focusable" />に<see langword="false" />します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1273">
              <para>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation. Otherwise, the <see cref="E:System.Windows.UIElement3D.GotFocus" /> event is not raised during typical user operations that ordinarily set focus to this element. If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement3D.Focusable" /> to <see langword="false" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Windows.UIElement3D.Focusable" />
        <altmember cref="E:System.Windows.UIElement3D.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1274">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1274">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1275">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1275">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1276">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1276">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1277">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1277">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1278">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1278">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1279">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1279">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1280">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1280">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1281">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1281">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1282">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1282">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1283">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1283">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1284">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1284">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1285">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1285">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1286"><xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1286"><xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1287">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1287">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnGotMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnGotMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1288">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1288">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1289">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1289">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1290">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1290">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1291">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1291">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1292">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1292">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1293">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1293">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1294">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1294">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1295">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1295">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1296">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1296">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1297">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1297">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1298">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1298">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1299">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1299">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1300"><xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1300"><xref:System.Windows.UIElement3D.OnGotMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1301">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1301">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnGotStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnGotStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1302">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1302">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1303">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1303">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1304">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1304">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1305">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1305">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1306">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1306">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1307">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1307">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1308">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1308">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1309">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1309">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1310">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1310">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1311">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1311">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1312">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1312">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1313">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1313">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1314"><xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1314"><xref:System.Windows.UIElement3D.OnGotStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1315">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1315">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnGotTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnGotTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1316">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1316">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1317">タッチがこの要素にキャプチャされているときに発生する <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1317">Provides class handling for the <see cref="E:System.Windows.UIElement3D.GotTouchCapture" /> routed event that occurs when a touch is captured to this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1318"><xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1318">The <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-1319">オーバーライド<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.GotTouchCapture>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1319">Override <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.GotTouchCapture> event.</span></span> <span data-ttu-id="e1989-1320">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1320">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsKeyboardFocusedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1321">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1321">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1322">未処理の <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1322">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1323">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1323">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1324">この仮想メソッドを呼び出すときの値、<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>依存関係プロパティの変更。</span><span class="sxs-lookup"><span data-stu-id="e1989-1324">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> dependency property changes.</span></span> <span data-ttu-id="e1989-1325">仮想メソッドでは、最初に呼び出され、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1325">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="e1989-1326">次に、<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1326">Then the <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="e1989-1327">なお、<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>イベントがルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1327">Notice that the  <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> event is not a routed event.</span></span> <span data-ttu-id="e1989-1328">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1328">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="e1989-1329">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1329">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1330">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1330">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1331">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1331">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1332"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1332"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1333">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1333">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsKeyboardFocusWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsKeyboardFocusWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1334">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1334">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1335">この要素が <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" /> イベントを発生させる直前に呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1335">Invoked just before the <see cref="E:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged" /> event is raised by this element.</span>
          </span>
          <span data-ttu-id="e1989-1336">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1336">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1337">この仮想メソッドを呼び出すときの値、<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>依存関係プロパティの値が変化します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1337">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="e1989-1338">仮想メソッドでは、最初に呼び出され、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1338">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="e1989-1339">次に、<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1339">Then the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="e1989-1340">なお、<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>イベントがルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1340">Notice that the <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> event is not a routed event.</span></span> <span data-ttu-id="e1989-1341">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1341">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="e1989-1342">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1342">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1343">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1343">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1344">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1344">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1345"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1345"><xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1346">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1346">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1347">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1347">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1348">未処理の <see cref="E:System.Windows.UIElement3D.IsMouseCapturedChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1348">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCapturedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1349">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1349">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1350">この仮想メソッドを呼び出すときの値、<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>依存関係プロパティの値が変化します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1350">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="e1989-1351">仮想メソッドでは、最初に呼び出され、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1351">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="e1989-1352">次に、<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1352">Then the <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="e1989-1353">なお、<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>イベントがルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1353">Notice that the <xref:System.Windows.UIElement3D.IsMouseCapturedChanged> event is not a routed event.</span></span> <span data-ttu-id="e1989-1354">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1354">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="e1989-1355">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1355">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1356">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1356">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1357">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1357">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1358"><xref:System.Windows.UIElement3D.OnIsMouseCapturedChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1358"><xref:System.Windows.UIElement3D.OnIsMouseCapturedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1359">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1359">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1360">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1360">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1361">未処理の <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1361">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1362">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1362">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1363"><xref:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1363"><xref:System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1364">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1364">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e1989-1365">
            <para>この仮想メソッドを呼び出すときの値、<see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" />依存関係プロパティの値が変化します。仮想メソッドでは、最初に呼び出され、必要に応じて、イベント データを操作できます。次に、<see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" />同じイベント データ インスタンスをイベントが発生します。イベントがルーティング イベントで; ではないことに注意してください。そのため、クラス ハンドラーで処理されるようにマークすることはできません。このメソッドには、既定の実装がありません。継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1365">
              <para>This virtual method is called when the value of the <see cref="P:System.Windows.UIElement3D.IsMouseCaptureWithin" /> dependency property changes its value. The virtual method is called first and can manipulate the event data as necessary. Then the <see cref="E:System.Windows.UIElement3D.IsMouseCaptureWithinChanged" /> event is raised with that same event data instance. Notice that the event is not a routed event; Therefore,  you cannot mark it as handled in the class handler.  This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsMouseDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsMouseDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1366">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1366">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1367">未処理の <see cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1367">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsMouseDirectlyOverChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1368">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1368">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1369">この仮想メソッドを呼び出すときの値、<xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A>依存関係プロパティの値が変化します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1369">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="e1989-1370">仮想メソッドでは、最初に呼び出され、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1370">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="e1989-1371">次に、<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1371">Then the <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="e1989-1372">なお、<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>イベントがルーティング イベントではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1372">Notice that the <xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> event is not a routed event.</span></span> <span data-ttu-id="e1989-1373">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1373">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="e1989-1374">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1374">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1375">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1375">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1376">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1376">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1377"><xref:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1377"><xref:System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1378">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1378">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCapturedChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusCapturedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1379">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1379">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1380">未処理の <see cref="E:System.Windows.UIElement3D.IsStylusCapturedChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1380">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCapturedChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1381">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1381">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1382">この仮想メソッドを呼び出すときの値、<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>依存関係プロパティの値が変化します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1382">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> dependency property changes its value.</span></span> <span data-ttu-id="e1989-1383">仮想メソッドでは、最初に呼び出され、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1383">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="e1989-1384">次に、<xref:System.Windows.UIElement3D.IsStylusCapturedChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1384">Then the <xref:System.Windows.UIElement3D.IsStylusCapturedChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="e1989-1385">イベントは、ルーティング イベントではないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1385">Notice that the event is not a routed event.</span></span> <span data-ttu-id="e1989-1386">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1386">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="e1989-1387">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1387">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1388">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1388">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1389">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1389">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1390"><xref:System.Windows.UIElement3D.OnIsStylusCapturedChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1390"><xref:System.Windows.UIElement3D.OnIsStylusCapturedChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1391">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1391">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusCaptureWithinChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusCaptureWithinChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1392">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1392">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1393">未処理の <see cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1393">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusCaptureWithinChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1394">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1394">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1395">この仮想メソッドを呼び出すときの値、<xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A>依存関係プロパティの値が変化します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1395">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> dependency property changes its value.</span></span> <span data-ttu-id="e1989-1396">仮想メソッドでは、最初に呼び出され、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1396">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="e1989-1397">次に、<xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1397">Then the <xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="e1989-1398">イベントは、ルーティング イベントではないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1398">Notice that the event is not a routed event.</span></span> <span data-ttu-id="e1989-1399">そのため、クラス ハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1399">Therefore, you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="e1989-1400">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1400">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1401">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1401">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1402">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1402">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1403"><xref:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1403"><xref:System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1404">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1404">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnIsStylusDirectlyOverChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="uIElement3D.OnIsStylusDirectlyOverChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1405">イベント データを格納している <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1405">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1406">未処理の <see cref="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" /> イベントがこの要素で発生すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1406">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.IsStylusDirectlyOverChanged" /> event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1407">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1407">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1408">この仮想メソッドを呼び出すときの値、<xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A>依存関係プロパティの値が変化します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1408">This virtual method is called when the value of the <xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> dependency property changes its value.</span></span> <span data-ttu-id="e1989-1409">仮想メソッドでは、最初に呼び出され、必要に応じて、イベント データを操作できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1409">The virtual method is called first and can manipulate the event data as necessary.</span></span> <span data-ttu-id="e1989-1410">次に、<xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged>同じイベント データ インスタンスをイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1410">Then the <xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> event is raised with that same event data instance.</span></span> <span data-ttu-id="e1989-1411">イベントは、ルーティング イベントではないことを確認します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1411">Notice that the event is not a routed event.</span></span> <span data-ttu-id="e1989-1412">そのため、クラスのハンドラーで処理されるようにマークすることはできません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1412">Therefore you cannot mark it as handled in the class handler.</span></span>  
  
 <span data-ttu-id="e1989-1413">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1413">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1414">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1414">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1415">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1415">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1416"><xref:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1416"><xref:System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1417">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1417">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1418">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1418">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1419">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1419">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1420">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1420">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1421">キーストロークは、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1421">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="e1989-1422">その他のプログラミングに依存する機能キーストローク、たとえば、入力とコマンドのバインドは、一般的なキーストロークとして公開される前にキーストロークを処理する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1422">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="e1989-1423">これらの入力システムの機能、イベントを処理し、としてマークする場合<xref:System.Windows.UIElement3D.OnKeyDown%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1423">If these input system features mark the event as handled, then <xref:System.Windows.UIElement3D.OnKeyDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1424">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1424">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1425">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1425">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1426">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1426">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1427">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1427">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1428">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1428">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1429">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1429">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1430">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1430">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1431">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1431">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1432">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1432">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1433"><xref:System.Windows.UIElement3D.OnKeyDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1433"><xref:System.Windows.UIElement3D.OnKeyDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1434">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1434">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1435">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1435">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1436">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1436">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1437">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1437">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1438">キーストロークは、専用の入力マネージャーによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1438">Keystrokes are handled by a dedicated input manager.</span></span> <span data-ttu-id="e1989-1439">その他のプログラミングに依存する機能キーストローク、たとえば、入力とコマンドのバインドは、一般的なキーストロークとして公開される前にキーストロークを処理する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1439">Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.</span></span> <span data-ttu-id="e1989-1440">これらの入力システムの機能、イベントを処理し、としてマークする場合<xref:System.Windows.UIElement3D.OnKeyUp%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1440">If these input system features mark the event as handled, then <xref:System.Windows.UIElement3D.OnKeyUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1441">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1441">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1442">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1442">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1443">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1443">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1444">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1444">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1445">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1445">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1446">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1446">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1447">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1447">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1448">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1448">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1449">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1449">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1450"><xref:System.Windows.UIElement3D.OnKeyUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1450"><xref:System.Windows.UIElement3D.OnKeyUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1451">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1451">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.OnLostFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1452">イベント データを格納している <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1452">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains event data.</span>
          </span>
          <span data-ttu-id="e1989-1453">このイベント データは、<see cref="E:System.Windows.UIElement3D.LostFocus" /> イベントの識別子を含む必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1453">This event data must contain the identifier for the <see cref="E:System.Windows.UIElement3D.LostFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1454">提供されたイベント データを使って、<see cref="E:System.Windows.UIElement3D.LostFocus" /> ルーティング イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1454">Raises the <see cref="E:System.Windows.UIElement3D.LostFocus" /> routed event by using the event data that is provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1455">このメソッドは、仮想は、イベントを発生させる既定の実装。</span><span class="sxs-lookup"><span data-stu-id="e1989-1455">This method, although virtual, does have a default implementation that raises the event.</span></span>  
  
 <span data-ttu-id="e1989-1456">これを \* メソッドの実装は、イベントを発生させる、およびイベントを発生させる、この同じメソッドの実装が内部的に呼び出されるときに、<xref:System.Windows.UIElement3D.IsFocused%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1456">This On\* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes.</span></span> <span data-ttu-id="e1989-1457">この実装が異なるその他の[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]で \* のみそのイベントのクラス処理を追加する便利な手段を提供するには、実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1457">This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On\* implementations, which only provide a convenient way to add class handling for that event.</span></span>  
  
 <span data-ttu-id="e1989-1458"><xref:System.Windows.UIElement3D.OnLostFocus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1458"><xref:System.Windows.UIElement3D.OnLostFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1459">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1459">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e1989-1460">
            <para>フォーカス イベントを発生させないする意図とは異なる必要がない限り、実装が、基本実装を呼び出すことを確認します。それ以外の場合、<see cref="E:System.Windows.UIElement3D.LostFocus" />イベントは通常、この要素にフォーカスを設定する一般的なユーザー操作中に発生しません。要素にフォーカスを設定しない場合は、設定されない要素を防ぐことができます<see cref="P:System.Windows.UIElement3D.Focusable" />に<see langword="false" />します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1460">
              <para>Unless you have a deliberate and unusual need to not raise the focus events, make sure that your implementation calls the base implementation. Otherwise, the <see cref="E:System.Windows.UIElement3D.LostFocus" /> event is not raised during typical user operations that ordinarily set focus to this element. If you do not intend your element to be focusable, you can prevent the element from being focusable by setting <see cref="P:System.Windows.UIElement3D.Focusable" /> to <see langword="false" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1461">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1461">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1462">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1462">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1463">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1463">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1464">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1464">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1465">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1465">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1466">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1466">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1467">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1467">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1468">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1468">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1469">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1469">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1470">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1470">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1471">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1471">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1472">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1472">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1473"><xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1473"><xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1474">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1474">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnLostMouseCapture : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnLostMouseCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1475">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1475">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1476">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1476">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1477">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1477">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1478">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1478">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1479">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1479">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1480">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1480">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1481">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1481">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1482">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1482">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1483">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1483">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1484">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1484">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1485">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1485">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1486">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1486">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1487"><xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1487"><xref:System.Windows.UIElement3D.OnLostMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1488">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1488">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnLostStylusCapture : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnLostStylusCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1489">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1489">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1490">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1490">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1491">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1491">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1492">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1492">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1493">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1493">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1494">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1494">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1495">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1495">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1496">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1496">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1497">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1497">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1498">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1498">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1499">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1499">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1500">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1500">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1501"><xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1501"><xref:System.Windows.UIElement3D.OnLostStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1502">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1502">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnLostTouchCapture : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnLostTouchCapture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1503">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1503">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1504">この要素がタッチのキャプチャを失ったときに発生する <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1504">Provides class handling for the <see cref="E:System.Windows.UIElement3D.LostTouchCapture" /> routed event that occurs when this element loses a touch capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1505"><xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1505">The <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-1506">オーバーライド<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.LostTouchCapture>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1506">Override <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.LostTouchCapture> event.</span></span> <span data-ttu-id="e1989-1507">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1507">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1508">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1508">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1509">このイベント データは、押されたマウス ボタンおよび処理済み状態に関する詳細を報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1509">This event data reports details about the mouse button that was pressed and the handled state.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1510">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1510">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1511">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1511">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1512">マウス ボタンの動作は、専用の入力マネージャーによって処理もされます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1512">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="e1989-1513">一般的なマウス ボタンの操作として公開される前に、入力などのマウス ボタンの動作に依存しており、コマンドのバインド、その他のプログラミング機能は、アクションのハンドラーを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1513">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="e1989-1514">これらの入力システム機能のマークがある場合、<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>イベントを処理するには、<xref:System.Windows.UIElement3D.OnMouseDown%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1514">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1515">このクラス ハンドラーを使用して、イベントを処理済みとしてマークする場合、次のイベントに影響する可能性があります:<xref:System.Windows.UIElement3D.MouseLeftButtonDown>と<xref:System.Windows.UIElement3D.MouseRightButtonDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1515">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonDown> and <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="e1989-1516">これらのイベントのいずれかは、受信側の要素で発生する可能性がありますと<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>を受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1516">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="e1989-1517">このイベントを処理するクラスで処理済みとしてマークする、サブイベントがも発生します。ただし、これらはイベント データの処理済みの状態を渡します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1517">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="e1989-1518">明示的に使用する場合を除き、サブイベントのインスタンス ハンドラーが呼び出されませんクラス処理でイベントを処理すると場合、<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo``true`ハンドラーをアタッチするためにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1518">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="e1989-1519">クラス ハンドラーも呼び出されませんにこれらのクラス ハンドラーが登録されていない限り、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>を使用して署名`handledEventsToo``true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1519">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="e1989-1520">処理することによって<xref:System.Windows.UIElement3D.OnMouseDown%2A>処理の速度のすべての可能なマウス ボタンをクラス処理を記述することを示すは。</span><span class="sxs-lookup"><span data-stu-id="e1989-1520">By handling <xref:System.Windows.UIElement3D.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="e1989-1521">この動作が望ましくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1521">This behavior might be unwanted.</span></span> <span data-ttu-id="e1989-1522">そのため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1522">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="e1989-1523">各ボタンに固有の直接イベントもに、仮想 \* メソッドかどうか、これらのボタンに固有のクラス ハンドラーをオーバーライドするとより適切な可能性がありますを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1523">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="e1989-1524">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1524">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1525">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1525">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1526">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1526">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1527">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1527">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1528">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1528">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1529">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1529">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1530">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1530">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1531">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1531">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1532">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1532">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1533"><xref:System.Windows.UIElement3D.OnMouseDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1533"><xref:System.Windows.UIElement3D.OnMouseDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1534">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1534">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1535">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1535">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1536">未処理の <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1536">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1537">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1537">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1538">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1538">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1539">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1539">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1540">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1540">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1541">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1541">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1542">ここで一致するイベントは、直接ルーティング戦略のルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1542">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="e1989-1543">一般的なインスタンス ハンドラーの場合にも役立ちますが、イベントを処理済みとしてマーク (指定されていないもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1543">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1544"><xref:System.Windows.UIElement3D.OnMouseEnter%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1544"><xref:System.Windows.UIElement3D.OnMouseEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1545">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1545">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseLeave : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1546">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1546">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1547">未処理の <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1547">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1548">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1548">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1549">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1549">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1550">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1550">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-1551">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-1551">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-1552">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1552">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1553">ここで一致するイベントは、直接ルーティング戦略のルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1553">In this case the matching event is a routed event, with a direct routing strategy.</span></span> <span data-ttu-id="e1989-1554">一般的なインスタンス ハンドラーの場合にも役立ちますが、イベントを処理済みとしてマーク (指定されていないもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1554">Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1555"><xref:System.Windows.UIElement3D.OnMouseLeave%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1555"><xref:System.Windows.UIElement3D.OnMouseLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1556">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1556">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1557">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1557">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1558">このイベント データは、マウスの左ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1558">The event data reports that the left mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1559">この要素上で未処理の <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> ルーティング イベントが発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1559">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" /> routed event is raised on this element.</span>
          </span>
          <span data-ttu-id="e1989-1560">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1560">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1561"><xref:System.Windows.UIElement3D.MouseLeftButtonDown>イベントはバブル ルートの移動に見えますが、実際には、間接的な方法で送信されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1561">The <xref:System.Windows.UIElement3D.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="e1989-1562"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 基になるイベントはバブル ルーティング、および各<xref:System.Windows.UIElement3D>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement3D.MouseLeftButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="e1989-1562"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseLeftButtonDown>.</span></span> <span data-ttu-id="e1989-1563">マークすることができますが、<xref:System.Windows.UIElement3D.MouseLeftButtonDown>この要素の目的は、イベントを処理済みの状態はイベント ルート上の他の要素には永続化されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1563">Although you can mark the <xref:System.Windows.UIElement3D.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="e1989-1564">イベントをインスタンスの一般的なハンドラーを防ぐために処理済みとしてマークするただし、(指定しなかったもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1564">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1565">処理の一般的なマウス イベントの既定の実装<xref:System.Windows.UIElement3D>リッスン<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1565">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="e1989-1566">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1566">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="e1989-1567">派生クラスの静的コンス トラクター内の別のクラス ハンドラーを登録<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1567">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1989-1568">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement3D>オーバーライドすることで<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1568">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1569">または、特定のマウスの状態のイベント処理を変更するには、このメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1569">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="e1989-1570">基本の実装を呼び出すを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1570">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="e1989-1571">呼び出すことも期待する先祖クラスにそのマウス イベントの既定の入力処理を無効に呼び出しに失敗<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1571">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="e1989-1572">派生するなど、<xref:System.Windows.Controls.Button>オーバーライドと<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>、派生クラスで、基本実装を呼び出さずにただし、このオーバーライドを無効にします、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1572">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="e1989-1573"><xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1573"><xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1574">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1574">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1575">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1575">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1576">このイベント データは、マウスの左ボタンが放されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1576">The event data reports that the left mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1577">未処理の <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1577">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1578">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1578">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1579"><xref:System.Windows.UIElement3D.MouseLeftButtonUp>イベントはバブル ルートの移動に見えますが、実際には、間接的な方法で送信されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1579">The <xref:System.Windows.UIElement3D.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="e1989-1580"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 基になるイベントはバブル ルーティング、および各<xref:System.Windows.UIElement3D>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement3D.MouseLeftButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="e1989-1580"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseLeftButtonUp>.</span></span> <span data-ttu-id="e1989-1581">マークすることができますが、<xref:System.Windows.UIElement3D.MouseLeftButtonUp>この要素の目的は、イベントを処理済みの状態はイベント ルート上の他の要素には永続化されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1581">Although you can mark the <xref:System.Windows.UIElement3D.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="e1989-1582">イベントをインスタンスの一般的なハンドラーを防ぐために処理済みとしてマークするただし、(指定しなかったもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1582">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1583">処理の一般的なマウス イベントの既定の実装<xref:System.Windows.UIElement3D>リッスン<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1583">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="e1989-1584">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1584">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="e1989-1585">派生クラスの静的コンス トラクター内の別のクラス ハンドラーを登録<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1585">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1989-1586">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement3D>オーバーライドすることで<xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1586">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1587"><xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1587"><xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1588">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1588">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1589">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1589">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1590">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1590">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1591">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1591">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1592">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1592">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1593">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1593">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1594">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1594">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1595">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1595">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1596">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1596">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1597">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1597">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1598">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1598">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1599">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1599">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1600">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1600">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1601"><xref:System.Windows.UIElement3D.OnMouseMove%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1601"><xref:System.Windows.UIElement3D.OnMouseMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1602">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1602">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1603">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1603">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1604">このイベント データは、マウスの右ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1604">The event data reports that the right mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1605">未処理の <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1605">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1606">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1606">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1607"><xref:System.Windows.UIElement3D.MouseRightButtonDown>イベントはバブル ルートの移動に見えますが、実際には、間接的な方法で送信されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1607">The <xref:System.Windows.UIElement3D.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="e1989-1608"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> 基になるイベントはバブル ルーティング、および各<xref:System.Windows.UIElement3D>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement3D.MouseRightButtonDown>。</span><span class="sxs-lookup"><span data-stu-id="e1989-1608"><xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="e1989-1609">マークすることができますが、<xref:System.Windows.UIElement3D.MouseRightButtonDown>この要素の目的は、イベントを処理済みの状態はイベント ルート上の他の要素には永続化されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1609">Although you can mark the <xref:System.Windows.UIElement3D.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="e1989-1610">イベントをインスタンスの一般的なハンドラーを防ぐために処理済みとしてマークするただし、(指定しなかったもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1610">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1611">処理の一般的なマウス イベントの既定の実装<xref:System.Windows.UIElement3D>リッスン<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1611">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="e1989-1612">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1612">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="e1989-1613">派生クラスの静的コンス トラクター内の別のクラス ハンドラーを登録<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1613">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1989-1614">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement3D>オーバーライドすることで<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1614">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1615">または、特定のマウスの状態のイベント処理を変更するには、このメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1615">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="e1989-1616">基本の実装を呼び出すを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1616">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="e1989-1617">呼び出すことも期待する先祖クラスにそのマウス イベントの既定の入力処理を無効に呼び出しに失敗<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1617">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="e1989-1618">派生するなど、<xref:System.Windows.Controls.Control>オーバーライドと<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>ない; 呼び出し元のベースは、派生クラスでただし、この上書きを無効にしますに含まれる、コントロール上のコンテキスト] メニューの [サービスの<xref:System.Windows.Controls.Control>既定の動作。</span><span class="sxs-lookup"><span data-stu-id="e1989-1618">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 <span data-ttu-id="e1989-1619"><xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1619"><xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1620">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1620">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1621">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1621">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1622">このイベント データは、マウスの右ボタンが離されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1622">The event data reports that the right mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1623">未処理の <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1623">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.MouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1624">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1624">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1625"><xref:System.Windows.UIElement3D.MouseRightButtonUp>イベントはバブル ルートの移動に見えますが、実際には、間接的な方法で送信されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1625">The <xref:System.Windows.UIElement3D.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way.</span></span> <span data-ttu-id="e1989-1626"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> 基になるイベントはバブル ルーティング、および各<xref:System.Windows.UIElement3D>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement3D.MouseRightButtonUp>。</span><span class="sxs-lookup"><span data-stu-id="e1989-1626"><xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span> <span data-ttu-id="e1989-1627">マークすることができますが、<xref:System.Windows.UIElement3D.MouseRightButtonUp>この要素の目的は、イベントを処理済みの状態はイベント ルート上の他の要素には永続化されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1627">Although you can mark the <xref:System.Windows.UIElement3D.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="e1989-1628">イベントをインスタンスの一般的なハンドラーを防ぐために処理済みとしてマークするただし、(指定しなかったもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1628">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1629">処理の一般的なマウス イベントの既定の実装<xref:System.Windows.UIElement3D>リッスン<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1629">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="e1989-1630">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1630">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="e1989-1631">派生クラスの静的コンス トラクター内の別のクラス ハンドラーを登録<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1631">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1989-1632">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement3D>オーバーライドすることで<xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1632">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1633"><xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1633"><xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1634">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1634">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1635">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1635">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1636">このイベント データは、マウス ボタンが離されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1636">The event data reports that the mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1637">未処理の <see cref="E:System.Windows.Input.Mouse.MouseUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1637">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1638">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1638">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1639">マウス ボタンの動作は、専用の入力マネージャーによって処理もされます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1639">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="e1989-1640">一般的なマウス ボタンの操作として公開される前に、入力などのマウス ボタンの動作に依存しており、コマンドのバインド、その他のプログラミング機能は、アクションのハンドラーを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1640">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="e1989-1641">これらの入力システム機能のマークがある場合、<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>イベントを処理するには、<xref:System.Windows.UIElement3D.OnMouseUp%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1641">If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1642">このクラス ハンドラーを使用して、イベントを処理済みとしてマークする場合、次のイベントに影響する可能性があります:<xref:System.Windows.UIElement3D.MouseLeftButtonUp>と<xref:System.Windows.UIElement3D.MouseRightButtonUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1642">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonUp> and <xref:System.Windows.UIElement3D.MouseRightButtonUp>.</span></span> <span data-ttu-id="e1989-1643">これらのイベントのいずれかは、受信側の要素で発生する可能性がありますと<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>を受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1643">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="e1989-1644">このイベントを処理するクラスで処理済みとしてマークする、サブイベントがも発生します。ただし、これらはイベント データの処理済みの状態を渡します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1644">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="e1989-1645">明示的に使用する場合を除き、サブイベントのインスタンス ハンドラーが呼び出されませんクラス処理でイベントを処理すると場合、<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo``true`ハンドラーをアタッチするためにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1645">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="e1989-1646">クラス ハンドラーも呼び出されませんにこれらのクラス ハンドラーが登録されていない限り、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>を使用して署名`handledEventsToo``true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1646">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="e1989-1647">処理することによって<xref:System.Windows.UIElement3D.OnMouseUp%2A>、クラス処理は、すべての可能なマウスのボタンのアクションを記述することを示すは。</span><span class="sxs-lookup"><span data-stu-id="e1989-1647">By handling <xref:System.Windows.UIElement3D.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="e1989-1648">この動作が望ましくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1648">This behavior might be unwanted.</span></span> <span data-ttu-id="e1989-1649">そのため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1649">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="e1989-1650">各ボタンに固有の直接イベントもに、仮想 \* メソッドかどうか、これらのボタンに固有のクラス ハンドラーをオーバーライドするとより適切な可能性がありますを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1650">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="e1989-1651">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1651">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1652">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1652">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1653">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1653">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1654">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1654">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1655">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1655">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1656">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1656">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1657">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1657">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1658">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1658">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1659">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1659">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1660"><xref:System.Windows.UIElement3D.OnMouseUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1660"><xref:System.Windows.UIElement3D.OnMouseUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1661">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1661">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement3D.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1662">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1662">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1663">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1663">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1664">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1664">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1665">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1665">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1666">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1666">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1667">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1667">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1668">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1668">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1669">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1669">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1670">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1670">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1671">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1671">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1672">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1672">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1673">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1673">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1674"><xref:System.Windows.UIElement3D.OnMouseWheel%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1674"><xref:System.Windows.UIElement3D.OnMouseWheel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1675">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1675">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragEnter : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1676">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1676">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1677">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1677">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1678">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1678">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1679">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1679">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1680">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1680">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1681">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1681">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1682">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1682">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1683">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1683">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1684">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1684">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1685">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1685">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1686">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1686">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1687">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1687">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1688">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1688">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1689"><xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1689"><xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1690">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1690">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragLeave : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1691">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1691">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1692">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1692">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1693">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1693">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1694">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1694">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1695">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1695">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1696">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1696">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1697">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1697">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1698">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1698">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1699">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1699">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1700">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1700">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1701">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1701">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1702">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1702">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1703">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1703">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1704"><xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1704"><xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1705">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1705">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDragOver : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1706">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1706">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1707">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1707">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1708">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1708">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1709">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1709">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1710">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1710">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1711">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1711">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1712">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1712">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1713">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1713">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1714">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1714">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1715">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1715">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1716">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1716">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1717">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1717">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1718">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1718">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1719"><xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1719"><xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1720">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1720">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit&#xA;override this.OnPreviewDrop : System.Windows.DragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1721">イベント データを格納している <see cref="T:System.Windows.DragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1721">The <see cref="T:System.Windows.DragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1722">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewDrop" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1722">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewDrop" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1723">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1723">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1724">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1724">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1725">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1725">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1726">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1726">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1727">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1727">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1728">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1728">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1729">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1729">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1730">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1730">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1731">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1731">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1732">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1732">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1733">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1733">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1734"><xref:System.Windows.UIElement3D.OnPreviewDrop%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1734"><xref:System.Windows.UIElement3D.OnPreviewDrop%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1735">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1735">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnPreviewGiveFeedback : System.Windows.GiveFeedbackEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1736">イベント データを格納している <see cref="T:System.Windows.GiveFeedbackEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1736">The <see cref="T:System.Windows.GiveFeedbackEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1737">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1737">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1738">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1738">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1739">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1739">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1740">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1740">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1741">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1741">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1742">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1742">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1743">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1743">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1744">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1744">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1745">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1745">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1746">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1746">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1747">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1747">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1748">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1748">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1749"><xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1749"><xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1750">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1750">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewGotKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1751">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1751">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1752">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1752">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1753">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1753">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1754">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1754">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1755">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1755">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1756">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1756">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1757">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1757">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1758">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1758">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1759">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1759">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1760">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1760">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1761">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1761">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1762">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1762">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1763">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1763">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1764"><xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1764"><xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1765">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1765">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1766">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1766">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1767">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1767">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1768">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1768">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1769">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1769">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1770">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1770">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1771">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1771">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1772">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1772">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1773">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1773">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1774">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1774">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1775">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1775">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1776">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1776">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1777">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1777">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1778">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1778">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1779"><xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1779"><xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1780">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1780">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit&#xA;override this.OnPreviewKeyUp : System.Windows.Input.KeyEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1781">イベント データを格納している <see cref="T:System.Windows.Input.KeyEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1781">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1782">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1782">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1783">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1783">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1784">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1784">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1785">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1785">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1786">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1786">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1787">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1787">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1788">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1788">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1789">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1789">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1790">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1790">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1791">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1791">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1792">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1792">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1793">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1793">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1794"><xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1794"><xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1795">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1795">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit&#xA;override this.OnPreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewLostKeyboardFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1796">イベント データを格納している <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1796">The <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1797">アタッチされた未処理の <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1797">Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1798">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1798">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1799">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1799">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1800">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1800">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1801">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1801">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1802">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1802">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1803">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1803">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1804">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1804">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1805">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1805">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1806">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1806">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1807">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1807">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1808">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1808">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1809"><xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1809"><xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1810">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1810">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1811">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1811">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1812">このイベント データは、1 つ以上のマウス ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1812">The event data reports that one or more mouse buttons were pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1813">未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 添付ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1813">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1814">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1814">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1815">マウス ボタンの動作は、専用の入力マネージャーによって処理もされます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1815">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="e1989-1816">一般的なマウス ボタンの操作として公開される前に、入力などのマウス ボタンの動作に依存しており、コマンドのバインド、その他のプログラミング機能は、アクションのハンドラーを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1816">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="e1989-1817">これらの入力システム機能のマークがある場合、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベントを処理するには、<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1817">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1818">このクラス ハンドラーを使用して、イベントを処理済みとしてマークする場合、次のイベントに影響する可能性があります:<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>と<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1818">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="e1989-1819">これらのイベントのいずれかは、受信側の要素で発生する可能性がありますと<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>を受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1819">Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="e1989-1820">このイベントを処理するクラスで処理済みとしてマークする、サブイベントがも発生します。ただし、これらはイベント データの処理済みの状態を渡します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1820">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="e1989-1821">明示的に使用する場合を除き、サブイベントのインスタンス ハンドラーが呼び出されませんクラス処理でイベントを処理すると場合、<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo``true`ハンドラーをアタッチするためにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1821">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="e1989-1822">クラス ハンドラーも呼び出されませんにこれらのクラス ハンドラーが登録されていない限り、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>を使用して署名`handledEventsToo``true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1822">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="e1989-1823">処理することによって<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>処理の速度のすべての可能なマウス ボタンをクラス処理を記述することを示すは。</span><span class="sxs-lookup"><span data-stu-id="e1989-1823">By handling <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions.</span></span> <span data-ttu-id="e1989-1824">この動作が望ましくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1824">This behavior might be unwanted.</span></span> <span data-ttu-id="e1989-1825">そのため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1825">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="e1989-1826">各ボタンに固有の直接イベントもに、仮想 \* メソッドかどうか、これらのボタンに固有のクラス ハンドラーをオーバーライドするとより適切な可能性がありますを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1826">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="e1989-1827">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1827">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1828">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1828">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1829">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1829">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1830">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1830">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1831">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1831">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1832">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1832">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1833">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1833">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1834">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1834">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1835">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1835">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1836">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1836">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1837"><xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1837"><xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1838">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1838">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseLeftButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1839">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1839">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1840">このイベント データは、マウスの左ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1840">The event data reports that the left mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1841">未処理の <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1841">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1842">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1842">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1843"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>イベントのトンネリングのルートを移動するが表示されますが、間接的な方法で実際に移動します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1843">The <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="e1989-1844"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 基になるイベントに、ルーティング、トンネルとは、<xref:System.Windows.UIElement3D>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1844"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>.</span></span> <span data-ttu-id="e1989-1845">マークすることができますが、<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>この要素の目的は、イベントを処理済みの状態はイベント ルート上の他の要素には永続化されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1845">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="e1989-1846">イベントをインスタンスの一般的なハンドラーを防ぐために処理済みとしてマークするただし、(指定しなかったもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1846">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1847">処理の一般的なマウス イベントの既定の実装<xref:System.Windows.UIElement3D>リッスン<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1847">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="e1989-1848">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1848">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="e1989-1849">派生クラスの静的コンス トラクター内の別のクラス ハンドラーを登録<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1849">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1989-1850">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement3D>オーバーライドすることで<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1850">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1851">または、特定のマウスの状態のイベント処理を変更するには、このメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1851">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="e1989-1852">基本の実装を呼び出すを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1852">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="e1989-1853">呼び出すことも期待する先祖クラスにそのマウス イベントの既定の入力処理を無効に呼び出しに失敗<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1853">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>.</span></span> <span data-ttu-id="e1989-1854">派生するなど、<xref:System.Windows.Controls.Button>オーバーライドと<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>、派生クラスで、基本実装を呼び出さずにただし、このオーバーライドを無効にします、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-1854">For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="e1989-1855"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1855"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1856">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1856">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseLeftButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1857">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1857">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1858">このイベント データは、マウスの左ボタンが放されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1858">The event data reports that the left mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1859">未処理の <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1859">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1860">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1860">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1861"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>イベントのトンネリングのルートを移動するが表示されますが、間接的な方法で実際に移動します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1861">The <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="e1989-1862"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 基になるイベントに、ルーティング、トンネルとは、<xref:System.Windows.UIElement3D>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1862"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>.</span></span> <span data-ttu-id="e1989-1863">マークすることができますが、<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>この要素の目的は、イベントを処理済みの状態はイベント ルート上の他の要素には永続化されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1863">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="e1989-1864">イベントをインスタンスの一般的なハンドラーを防ぐために処理済みとしてマークするただし、(指定しなかったもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1864">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1865">処理の一般的なマウス イベントの既定の実装<xref:System.Windows.UIElement3D>リッスン<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1865">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="e1989-1866">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1866">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="e1989-1867">派生クラスの静的コンス トラクター内の別のクラス ハンドラーを登録<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1867">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1989-1868">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement3D>オーバーライドすることで<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1868">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1869"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1869"><xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1870">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1870">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit&#xA;override this.OnPreviewMouseMove : System.Windows.Input.MouseEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1871">イベント データを格納している <see cref="T:System.Windows.Input.MouseEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1871">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1872">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1872">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1873">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1873">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1874">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1874">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1875">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1875">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1876">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1876">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1877">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1877">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1878">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1878">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1879">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1879">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1880">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1880">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1881">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1881">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1882">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1882">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1883">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1883">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1884"><xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1884"><xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1885">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1885">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseRightButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1886">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1886">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1887">このイベント データは、マウスの右ボタンが押されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1887">The event data reports that the right mouse button was pressed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1888">未処理の <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1888">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1889">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1889">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1890"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>イベントのトンネリングのルートを移動するが表示されますが、間接的な方法で実際に移動します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1890">The <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="e1989-1891"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> 基になるイベントに、ルーティング、トンネルとは、<xref:System.Windows.UIElement3D>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement3D.MouseRightButtonDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1891"><xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.MouseRightButtonDown>.</span></span> <span data-ttu-id="e1989-1892">マークすることができますが、<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>この要素の目的は、イベントを処理済みの状態はイベント ルート上の他の要素には永続化されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1892">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="e1989-1893">イベントをインスタンスの一般的なハンドラーを防ぐために処理済みとしてマークするただし、(指定しなかったもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1893">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1894">処理の一般的なマウス イベントの既定の実装<xref:System.Windows.UIElement3D>リッスン<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1894">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="e1989-1895">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1895">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="e1989-1896">派生クラスの静的コンス トラクター内の別のクラス ハンドラーを登録<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1896">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1989-1897">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement3D>オーバーライドすることで<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1897">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1898">または、特定のマウスの状態のイベント処理を変更するには、このメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1898">Alternatively, you can override this method in order to change event handling for a specific mouse state.</span></span> <span data-ttu-id="e1989-1899">基本の実装を呼び出すを選択するかどうかは、シナリオによって異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1899">Whether you choose to call the base implementation depends on your scenario.</span></span> <span data-ttu-id="e1989-1900">呼び出すことも期待する先祖クラスにそのマウス イベントの既定の入力処理を無効に呼び出しに失敗<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1900">Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>.</span></span> <span data-ttu-id="e1989-1901">派生するなど、<xref:System.Windows.Controls.Control>オーバーライドと<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>ない; 呼び出し元のベースは、派生クラスでただし、この上書きを無効にしますに含まれる、コントロール上のコンテキスト] メニューの [サービスの<xref:System.Windows.Controls.Control>既定の動作。</span><span class="sxs-lookup"><span data-stu-id="e1989-1901">For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.</span></span>  
  
 <span data-ttu-id="e1989-1902"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1902"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1903">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1903">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseRightButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1904">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1904">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1905">このイベント データは、マウスの右ボタンが離されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1905">The event data reports that the right mouse button was released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1906">未処理の <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> ルーティング イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1906">Invoked when an unhandled <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1907">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1907">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1908"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>イベントのトンネリングのルートを移動するが表示されますが、間接的な方法で実際に移動します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1908">The <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way.</span></span> <span data-ttu-id="e1989-1909"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> 基になるイベントに、ルーティング、トンネルとは、<xref:System.Windows.UIElement3D>ルートが直接ルーティング イベントを発生させると同じ処理を使用、イベントに沿った<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1909"><xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement3D> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="e1989-1910">マークすることができますが、<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>この要素の目的は、イベントを処理済みの状態はイベント ルート上の他の要素には永続化されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1910">Although you can mark the <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.</span></span> <span data-ttu-id="e1989-1911">イベントをインスタンスの一般的なハンドラーを防ぐために処理済みとしてマークするただし、(指定しなかったもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1911">However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-1912">処理の一般的なマウス イベントの既定の実装<xref:System.Windows.UIElement3D>リッスン<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>適切なローカル イベントに変換します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1912">The default implementation for general mouse event handling in <xref:System.Windows.UIElement3D> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> and converts it to an appropriate local event.</span></span> <span data-ttu-id="e1989-1913">このロジックをオーバーライドする場合は、派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1913">If you want to override this logic, you must create a derived class.</span></span> <span data-ttu-id="e1989-1914">派生クラスの静的コンス トラクター内の別のクラス ハンドラーを登録<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1914">In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1989-1915">マウスの処理の動作を変更することはできません<xref:System.Windows.UIElement3D>オーバーライドすることで<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1915">You cannot change the mouse handling behavior of <xref:System.Windows.UIElement3D> by overriding <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>.</span></span>  
  
 <span data-ttu-id="e1989-1916"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1916"><xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1917">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1917">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit&#xA;override this.OnPreviewMouseUp : System.Windows.Input.MouseButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1918">イベント データを格納している <see cref="T:System.Windows.Input.MouseButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1918">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="e1989-1919">このイベント データは、1 つ以上のマウス ボタンが離されたことを報告します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1919">The event data reports that one or more mouse buttons were released.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1920">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1920">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1921">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1921">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1922">マウス ボタンの動作は、専用の入力マネージャーによって処理もされます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1922">Mouse button actions are also handled by a dedicated input manager.</span></span> <span data-ttu-id="e1989-1923">一般的なマウス ボタンの操作として公開される前に、入力などのマウス ボタンの動作に依存しており、コマンドのバインド、その他のプログラミング機能は、アクションのハンドラーを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1923">Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.</span></span> <span data-ttu-id="e1989-1924">これらの入力システム機能のマークがある場合、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベントを処理するには、<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>は呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1924">If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event as handled, <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> is not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1925">このクラス ハンドラーを使用して、イベントを処理済みとしてマークする場合、次のイベントに影響する可能性があります:<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>と<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1925">If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="e1989-1926">これらのイベントのいずれかは、受信側の要素で発生する可能性がありますと<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>を受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1926">Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> is received.</span></span>  
  
 <span data-ttu-id="e1989-1927">このイベントを処理するクラスで処理済みとしてマークする、サブイベントがも発生します。ただし、これらはイベント データの処理済みの状態を渡します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1927">If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.</span></span> <span data-ttu-id="e1989-1928">明示的に使用する場合を除き、サブイベントのインスタンス ハンドラーが呼び出されませんクラス処理でイベントを処理すると場合、<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo``true`ハンドラーをアタッチするためにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1928">If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers.</span></span> <span data-ttu-id="e1989-1929">クラス ハンドラーも呼び出されませんにこれらのクラス ハンドラーが登録されていない限り、<xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>を使用して署名`handledEventsToo``true`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1929">Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`.</span></span> <span data-ttu-id="e1989-1930">処理することによって<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>、クラス処理は、すべての可能なマウスのボタンのアクションを記述することを示すは。</span><span class="sxs-lookup"><span data-stu-id="e1989-1930">By handling <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions.</span></span> <span data-ttu-id="e1989-1931">この動作が望ましくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1931">This behavior might be unwanted.</span></span> <span data-ttu-id="e1989-1932">そのため、この仮想メソッドを使用してイベントを処理済みとしてマークする場合は、注意を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1932">Therefore, use caution when you use this virtual method to mark events as handled.</span></span>  
  
 <span data-ttu-id="e1989-1933">各ボタンに固有の直接イベントもに、仮想 \* メソッドかどうか、これらのボタンに固有のクラス ハンドラーをオーバーライドするとより適切な可能性がありますを検討してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1933">Each of the button-specific direct events also has a virtual On\* method; consider whether overriding these button-specific class handlers might be more appropriate.</span></span>  
  
 <span data-ttu-id="e1989-1934">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1934">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1935">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1935">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1936">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1936">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1937">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1937">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1938">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1938">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1939">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1939">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1940">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1940">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1941">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1941">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1942">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1942">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-1943"><xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1943"><xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1944">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1944">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit&#xA;override this.OnPreviewMouseWheel : System.Windows.Input.MouseWheelEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1945">イベント データを格納している <see cref="T:System.Windows.Input.MouseWheelEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1945">The <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1946">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1946">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1947">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1947">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1948">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1948">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1949">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1949">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1950">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1950">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1951">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1951">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1952">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1952">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1953">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1953">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1954">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1954">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1955">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1955">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1956">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1956">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1957">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1957">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1958"><xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1958"><xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1959">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1959">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnPreviewQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1960">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1960">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1961">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1961">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1962">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1962">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1963">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1963">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1964">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1964">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1965">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1965">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1966">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1966">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1967">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1967">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1968">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1968">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1969">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1969">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1970">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1970">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1971">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1971">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1972">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1972">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1973"><xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1973"><xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1974">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1974">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1975">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1975">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1976">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1976">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1977">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1977">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1978">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1978">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1979">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1979">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1980">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1980">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1981">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1981">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1982">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1982">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1983">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1983">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1984">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1984">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-1985">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-1985">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-1986">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1986">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-1987">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1987">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-1988"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-1988"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-1989">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1989">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnPreviewStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-1990">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1990">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-1991">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1991">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-1992">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-1992">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-1993">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-1993">This method has no default implementation.</span></span> <span data-ttu-id="e1989-1994">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-1994">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-1995">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-1995">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-1996">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-1996">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-1997">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1997">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-1998">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-1998">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-1999">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-1999">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2000">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2000">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2001">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2001">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2002">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2002">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2003"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2003"><xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2004">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2004">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnPreviewStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2005">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2005">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2006">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2006">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2007">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2007">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2008">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2008">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2009">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2009">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2010">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2010">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2011">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2011">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2012">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2012">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2013">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2013">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2014">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2014">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2015">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2015">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2016">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2016">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2017">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2017">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2018"><xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2018"><xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2019">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2019">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2020">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2020">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2021">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2021">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2022">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2022">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2023">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2023">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2024">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2024">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2025">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2025">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2026">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2026">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2027">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2027">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2028">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2028">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2029">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2029">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2030">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2030">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2031">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2031">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2032">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2032">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2033"><xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2033"><xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2034">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2034">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2035">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2035">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2036">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2036">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2037">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2037">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2038">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2038">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2039">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2039">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2040">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2040">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2041">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2041">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2042">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2042">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2043">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2043">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2044">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2044">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2045">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2045">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2046">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2046">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2047">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2047">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2048"><xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2048"><xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2049">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2049">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2050">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2050">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2051">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2051">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2052">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2052">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2053">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2053">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2054">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2054">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2055">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2055">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2056">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2056">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2057">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2057">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2058">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2058">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2059">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2059">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2060">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2060">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2061">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2061">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2062">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2062">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2063"><xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2063"><xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2064">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2064">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2065">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2065">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2066">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2066">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2067">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2067">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2068">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2068">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2069">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2069">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2070">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2070">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2071">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2071">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2072">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2072">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2073">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2073">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2074">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2074">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2075">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2075">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2076">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2076">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2077">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2077">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2078"><xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2078"><xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2079">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2079">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnPreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2080">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2080">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2081">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2081">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2082">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2082">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2083">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2083">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2084">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2084">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2085">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2085">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2086">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2086">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2087">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2087">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2088">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2088">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2089">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2089">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2090">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2090">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2091">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2091">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2092">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2092">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2093"><xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2093"><xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2094">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2094">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnPreviewStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2095">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2095">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2096">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2096">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2097">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2097">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2098">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2098">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2099">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2099">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2100">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2100">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2101">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2101">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2102">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2102">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2103">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2103">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2104">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2104">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2105">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2105">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2106">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2106">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2107">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2107">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2108"><xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2108"><xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2109">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2109">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnPreviewTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2110">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2110">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2111">アタッチされた未処理の <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2111">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2112">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2112">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2113">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2113">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2114">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2114">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2115">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2115">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2116">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2116">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2117">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2117">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2118">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2118">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2119">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2119">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2120">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2120">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2121">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2121">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span> <span data-ttu-id="e1989-2122">プレビュー イベントを具体的には、もう 1 つのシナリオでは、対応するバブル クラス ハンドラーが呼び出されないように処理済みとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2122">Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.</span></span>  
  
 <span data-ttu-id="e1989-2123"><xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2123"><xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2124">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2124">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement3D.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2125">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2125">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2126">この要素がタッチで押されたときに発生する <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2126">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event that occurs when a touch presses this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2127"><xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2127">The <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-2128">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.PreviewTouchDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2128">Override <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchDown> event.</span></span> <span data-ttu-id="e1989-2129">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2129">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2130">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2130">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2131">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2131">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event that occurs when a touch moves while inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2132"><xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2132">The <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-2133">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.PreviewTouchMove>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2133">Override <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchMove> event.</span></span> <span data-ttu-id="e1989-2134">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2134">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnPreviewTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnPreviewTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2135">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2135">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2136">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2136">Provides class handling for the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event that occurs when a touch is released inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2137"><xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2137">The <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-2138">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.PreviewTouchUp>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2138">Override <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.PreviewTouchUp> event.</span></span> <span data-ttu-id="e1989-2139">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2139">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.QueryContinueDragEventArgs -&gt; unit" Usage="uIElement3D.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2140">イベント データを格納している <see cref="T:System.Windows.QueryContinueDragEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2140">The <see cref="T:System.Windows.QueryContinueDragEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2141">アタッチされた未処理の <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2141">Invoked when an unhandled <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2142">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2142">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2143">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2143">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2144">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2144">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2145">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2145">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2146">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2146">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2147">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2147">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2148">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2148">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2149">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2149">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2150">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2150">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2151">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2151">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2152"><xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2152"><xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2153">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2153">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected internal virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit&#xA;override this.OnQueryCursor : System.Windows.Input.QueryCursorEventArgs -&gt; unit" Usage="uIElement3D.OnQueryCursor e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2154">イベント データを格納している <see cref="T:System.Windows.Input.QueryCursorEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2154">The <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2155">アタッチされた未処理の <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2155">Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2156">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2156">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2157">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2157">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2158">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2158">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2159">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2159">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2160">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2160">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2161">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2161">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2162">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2162">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2163">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2163">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2164">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2164">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2165">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2165">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2166"><xref:System.Windows.UIElement3D.OnQueryCursor%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2166"><xref:System.Windows.UIElement3D.OnQueryCursor%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2167">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2167">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonDown : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnStylusButtonDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2168">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2168">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2169">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2169">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2170">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2170">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2171">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2171">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2172">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2172">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2173">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2173">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2174">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2174">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2175">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2175">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2176">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2176">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2177">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2177">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2178">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2178">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2179">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2179">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2180"><xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2180"><xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2181">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2181">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit&#xA;override this.OnStylusButtonUp : System.Windows.Input.StylusButtonEventArgs -&gt; unit" Usage="uIElement3D.OnStylusButtonUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2182">イベント データを格納している <see cref="T:System.Windows.Input.StylusButtonEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2182">The <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2183">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2183">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2184">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2184">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2185">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2185">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2186">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2186">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2187">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2187">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2188">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2188">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2189">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2189">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2190">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2190">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2191">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2191">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2192">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2192">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2193">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2193">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2194"><xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2194"><xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2195">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2195">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit&#xA;override this.OnStylusDown : System.Windows.Input.StylusDownEventArgs -&gt; unit" Usage="uIElement3D.OnStylusDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2196">イベント データを格納している <see cref="T:System.Windows.Input.StylusDownEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2196">The <see cref="T:System.Windows.Input.StylusDownEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2197">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusDown" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2197">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusDown" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2198">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2198">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2199">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2199">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2200">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2200">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2201">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2201">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2202">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2202">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2203">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2203">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2204">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2204">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2205">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2205">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2206">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2206">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2207">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2207">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2208"><xref:System.Windows.UIElement3D.OnStylusDown%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2208"><xref:System.Windows.UIElement3D.OnStylusDown%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2209">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2209">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusEnter : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2210">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2210">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2211">未処理の <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> 添付イベントがこの要素で発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2211">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> attached event is raised by this element.</span>
          </span>
          <span data-ttu-id="e1989-2212">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2212">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2213">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2213">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2214">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2214">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-2215">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-2215">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-2216">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2216">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2217">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2217">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2218">一般的なインスタンス ハンドラーの場合にも役立ちますが、イベントを処理済みとしてマーク (指定されていないもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2218">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-2219"><xref:System.Windows.UIElement3D.OnStylusEnter%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2219"><xref:System.Windows.UIElement3D.OnStylusEnter%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2220">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2220">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInAirMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusInAirMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2221">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2221">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2222">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2222">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2223">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2223">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2224">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2224">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2225">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2225">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2226">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2226">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2227">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2227">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2228">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2228">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2229">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2229">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2230">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2230">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2231">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2231">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2232">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2232">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2233"><xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2233"><xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2234">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2234">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusInRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusInRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2235">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2235">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2236">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2236">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2237">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2237">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2238">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2238">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2239">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2239">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2240">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2240">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2241">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2241">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2242">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2242">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2243">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2243">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2244">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2244">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2245">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2245">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2246">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2246">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2247"><xref:System.Windows.UIElement3D.OnStylusInRange%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2247"><xref:System.Windows.UIElement3D.OnStylusInRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2248">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2248">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusLeave : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2249">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2249">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2250">未処理の <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> 添付イベントがこの要素で発生したときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2250">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> attached event is raised by this element.</span>
          </span>
          <span data-ttu-id="e1989-2251">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2251">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2252">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2252">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2253">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2253">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span> <span data-ttu-id="e1989-2254">呼び出すことができます基本前に、または後、特別な処理の要件に応じて。</span><span class="sxs-lookup"><span data-stu-id="e1989-2254">You may call base either before or after your special handling, depending on your requirements.</span></span>  
  
 <span data-ttu-id="e1989-2255">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2255">The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2256">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2256">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2257">一般的なインスタンス ハンドラーの場合にも役立ちますが、イベントを処理済みとしてマーク (指定されていないもの`handledEventsToo`) 呼び出されないようにします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2257">Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.</span></span>  
  
 <span data-ttu-id="e1989-2258"><xref:System.Windows.UIElement3D.OnStylusLeave%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2258"><xref:System.Windows.UIElement3D.OnStylusLeave%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2259">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2259">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusMove : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2260">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2260">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2261">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusMove" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2261">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusMove" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2262">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2262">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2263">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2263">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2264">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2264">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2265">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2265">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2266">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2266">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2267">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2267">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2268">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2268">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2269">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2269">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2270">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2270">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2271">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2271">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2272"><xref:System.Windows.UIElement3D.OnStylusMove%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2272"><xref:System.Windows.UIElement3D.OnStylusMove%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2273">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2273">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusOutOfRange : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusOutOfRange e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2274">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2274">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2275">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2275">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2276">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2276">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2277">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2277">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2278">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2278">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2279">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2279">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2280">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2280">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2281">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2281">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2282">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2282">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2283">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2283">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2284">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2284">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2285">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2285">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2286"><xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2286"><xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2287">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2287">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit&#xA;override this.OnStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventArgs -&gt; unit" Usage="uIElement3D.OnStylusSystemGesture e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2288">イベント データを格納している <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2288">The <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2289">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2289">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2290">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2290">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2291">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2291">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2292">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2292">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2293">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2293">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2294">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2294">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2295">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2295">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2296">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2296">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2297">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2297">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2298">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2298">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2299">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2299">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2300"><xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2300"><xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2301">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2301">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit&#xA;override this.OnStylusUp : System.Windows.Input.StylusEventArgs -&gt; unit" Usage="uIElement3D.OnStylusUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2302">イベント データを格納している <see cref="T:System.Windows.Input.StylusEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2302">The <see cref="T:System.Windows.Input.StylusEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2303">アタッチされた未処理の <see cref="E:System.Windows.Input.Stylus.StylusUp" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2303">Invoked when an unhandled <see cref="E:System.Windows.Input.Stylus.StylusUp" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2304">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2304">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2305">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2305">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2306">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2306">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2307">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2307">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2308">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2308">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2309">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2309">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2310">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2310">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2311">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2311">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2312">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2312">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2313">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2313">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2314"><xref:System.Windows.UIElement3D.OnStylusUp%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2314"><xref:System.Windows.UIElement3D.OnStylusUp%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2315">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2315">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit&#xA;override this.OnTextInput : System.Windows.Input.TextCompositionEventArgs -&gt; unit" Usage="uIElement3D.OnTextInput e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2316">イベント データを格納している <see cref="T:System.Windows.Input.TextCompositionEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2316">The <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2317">アタッチされた未処理の <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> イベントが、そのルート上で、このクラスから派生した要素に到達すると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2317">Invoked when an unhandled <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> attached event reaches an element in its route that is derived from this class.</span>
          </span>
          <span data-ttu-id="e1989-2318">このイベントに対するクラス処理を追加するには、このメソッドを実装します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2318">Implement this method to add class handling for this event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2319">このメソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2319">This method has no default implementation.</span></span> <span data-ttu-id="e1989-2320">継承の中間クラスには、このメソッドを実装があります、ために、実装の基本実装を呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2320">Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.</span></span>  
  
 <span data-ttu-id="e1989-2321">このメソッドの目的は、のような[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベント パターンで \* メソッド: このメソッドは、インスタンス ハンドラーではなく、クラス ハンドラーを確立することにより、派生クラスから一致するイベントを処理する手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2321">The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.</span></span> <span data-ttu-id="e1989-2322">ここで一致するイベントは、ルーティング イベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2322">In this case the matching event is a routed event.</span></span> <span data-ttu-id="e1989-2323">On のメソッドの実装パターンは、ルーティング イベント ハンドラーを呼び出すの要素とは限りませんが、子要素によって発生するためのルーティング イベントに異なります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2323">The implementation pattern of the On\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="e1989-2324">そのため、実装では、イベント データのソースのプロパティを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2324">Therefore, your implementation needs to examine the source properties of the event data.</span></span> <span data-ttu-id="e1989-2325">ほとんどの場合、イベントが再発生する必要がありますください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2325">It should not try to reraise the event in most cases.</span></span>  
  
 <span data-ttu-id="e1989-2326">このメソッドをオーバーライドすることで、または登録することでクラスのハンドラーを<xref:System.Windows.EventManager.RegisterClassHandler%2A>、派生クラスの<xref:System.Windows.UIElement3D>イベント ルート上のイベントが受信したときに、プライベート クラス ハンドラー メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2326">Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route.</span></span> <span data-ttu-id="e1989-2327">クラス処理が適切なシナリオの 1 つは、イベント データを操作し、ルーティング イベントを処理済みとしてマークすることです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2327">One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.</span></span>  
  
 <span data-ttu-id="e1989-2328"><xref:System.Windows.UIElement3D.OnTextInput%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2328"><xref:System.Windows.UIElement3D.OnTextInput%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2329">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2329">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchDown : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2330">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2330">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2331">この要素の内部がタッチで押されたときに発生する <see cref="E:System.Windows.UIElement3D.TouchDown" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2331">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event that occurs when a touch presses inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2332"><xref:System.Windows.UIElement3D.OnTouchDown%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2332">The <xref:System.Windows.UIElement3D.OnTouchDown%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-2333">オーバーライド<xref:System.Windows.UIElement3D.OnTouchDown%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.TouchDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2333">Override <xref:System.Windows.UIElement3D.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchDown> event.</span></span> <span data-ttu-id="e1989-2334">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnTouchDown%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2334">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnTouchDown%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchEnter : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2335">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2335">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2336">この要素の境界の外部から内部にタッチが移動したときに発生する <see cref="E:System.Windows.UIElement3D.TouchEnter" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2336">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event that occurs when a touch moves from outside to inside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2337"><xref:System.Windows.UIElement3D.OnTouchEnter%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2337">The <xref:System.Windows.UIElement3D.OnTouchEnter%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-2338">オーバーライド<xref:System.Windows.UIElement3D.OnTouchEnter%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.TouchEnter>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2338">Override <xref:System.Windows.UIElement3D.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchEnter> event.</span></span> <span data-ttu-id="e1989-2339">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnTouchEnter%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2339">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnTouchEnter%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchLeave : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2340">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2340">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2341">この要素の境界の内部から外部にタッチが移動したときに発生する <see cref="E:System.Windows.UIElement3D.TouchLeave" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2341">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event that occurs when a touch moves from inside to outside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2342"><xref:System.Windows.UIElement3D.OnTouchLeave%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2342">The <xref:System.Windows.UIElement3D.OnTouchLeave%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-2343">オーバーライド<xref:System.Windows.UIElement3D.OnTouchLeave%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.TouchLeave>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2343">Override <xref:System.Windows.UIElement3D.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchLeave> event.</span></span> <span data-ttu-id="e1989-2344">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnTouchLeave%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2344">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnTouchLeave%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchMove : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2345">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2345">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2346">タッチがこの要素の内部にある間にタッチが移動すると発生する <see cref="E:System.Windows.UIElement3D.TouchMove" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2346">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event that occurs when a touch moves while inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2347"><xref:System.Windows.UIElement3D.OnTouchMove%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2347">The <xref:System.Windows.UIElement3D.OnTouchMove%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-2348">オーバーライド<xref:System.Windows.UIElement3D.OnTouchMove%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.TouchMove>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2348">Override <xref:System.Windows.UIElement3D.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchMove> event.</span></span> <span data-ttu-id="e1989-2349">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnTouchMove%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2349">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnTouchMove%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected internal virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit&#xA;override this.OnTouchUp : System.Windows.Input.TouchEventArgs -&gt; unit" Usage="uIElement3D.OnTouchUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-2350">イベント データを格納している <see cref="T:System.Windows.Input.TouchEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2350">A <see cref="T:System.Windows.Input.TouchEventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2351">この要素の内部のタッチが解放されたときに発生する <see cref="E:System.Windows.UIElement3D.TouchUp" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2351">Provides class handling for the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event that occurs when a touch is released inside this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2352"><xref:System.Windows.UIElement3D.OnTouchUp%2A>メソッドには、既定の実装がありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2352">The <xref:System.Windows.UIElement3D.OnTouchUp%2A> method has no default implementation.</span></span> <span data-ttu-id="e1989-2353">オーバーライド<xref:System.Windows.UIElement3D.OnTouchUp%2A>を処理する派生クラスで、<xref:System.Windows.UIElement3D.TouchUp>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2353">Override <xref:System.Windows.UIElement3D.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement3D.TouchUp> event.</span></span> <span data-ttu-id="e1989-2354">基本クラスの呼び出しを必ず<xref:System.Windows.UIElement3D.OnTouchUp%2A>を基本クラス メソッドがイベントを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2354">Be sure to call the base class’s <xref:System.Windows.UIElement3D.OnTouchUp%2A> method so that base classes receive the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUpdateModel">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdateModel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdateModel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnUpdateModel" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUpdateModel ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUpdateModel();" />
      <MemberSignature Language="F#" Value="abstract member OnUpdateModel : unit -&gt; unit&#xA;override this.OnUpdateModel : unit -&gt; unit" Usage="uIElement3D.OnUpdateModel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2355">派生クラスでオーバーライドした場合に、レンダリング操作に関与します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2355">Participates in rendering operations when overridden in a derived class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2356">クラスを派生するときに、<xref:System.Windows.UIElement3D>クラスと共にこのメソッドを使用することができます、<xref:System.Windows.UIElement3D.InvalidateModel%2A>要素のモデルを更新する方法。</span><span class="sxs-lookup"><span data-stu-id="e1989-2356">When you derive a class from the <xref:System.Windows.UIElement3D> class, you can use this method together with the <xref:System.Windows.UIElement3D.InvalidateModel%2A> method to refresh the model of the element.</span></span>  
  
 <span data-ttu-id="e1989-2357">高度なシナリオでこのメソッドを呼び出す必要があるだけです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2357">You only need to call this method in advanced scenarios.</span></span> <span data-ttu-id="e1989-2358">このような 1 つの高度なシナリオは、派生クラスには、外観に影響を与える複数のプロパティと、1 回だけ、基になるモデルを更新するかどうかは。</span><span class="sxs-lookup"><span data-stu-id="e1989-2358">One such advanced scenario is if the derived class has multiple properties that affect the appearance, and you want to update the underlying model only once.</span></span> <span data-ttu-id="e1989-2359">内で、<xref:System.Windows.UIElement3D.OnUpdateModel%2A>メソッドを更新することが、<xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A>のプロパティ、<xref:System.Windows.Media.Media3D.Visual3D>クラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-2359">Within the <xref:System.Windows.UIElement3D.OnUpdateModel%2A> method you could update the <xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A> property of the <xref:System.Windows.Media.Media3D.Visual3D> class.</span></span>  
  
 <span data-ttu-id="e1989-2360">このメソッド既定の実装ではない、<xref:System.Windows.UIElement3D>クラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-2360">This method has no default implementation in the <xref:System.Windows.UIElement3D> class.</span></span>  
  
 <span data-ttu-id="e1989-2361"><xref:System.Windows.UIElement3D.OnUpdateModel%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2361"><xref:System.Windows.UIElement3D.OnUpdateModel%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2362">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2362">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1989-2363">次の例から派生させる方法を示しています、<xref:System.Windows.UIElement3D>クラスを作成する、`Sphere`クラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-2363">The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:</span></span>  
  
 [!code-csharp[Shapes#Sphere](~/samples/snippets/csharp/VS_Snippets_Wpf/Shapes/CSharp/Sphere.cs#sphere)]
 [!code-vb[Shapes#Sphere](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Shapes/visualbasic/sphere.vb#sphere)]  
  
 <span data-ttu-id="e1989-2364">サンプル全体については、次を参照してください。 [UIElement3D 球サンプル](http://go.microsoft.com/fwlink/?LinkID=160044)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2364">For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="uIElement3D.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">
          <span data-ttu-id="e1989-2365">直前の親。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2365">The previous parent.</span>
          </span>
          <span data-ttu-id="e1989-2366">
            <see cref="T:System.Windows.DependencyObject" /> に直前の親要素がなかった場合は、<see langword="null" /> を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2366">This may be provided as <see langword="null" /> if the <see cref="T:System.Windows.DependencyObject" /> did not have a parent element previously.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2367">この <see cref="T:System.Windows.UIElement3D" /> の親要素によって、基になるビジュアル親に対する変更が報告されると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2367">Invoked when the parent element of this <see cref="T:System.Windows.UIElement3D" /> reports a change to its underlying visual parent.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2368"><xref:System.Windows.UIElement3D.OnVisualParentChanged%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2368"><xref:System.Windows.UIElement3D.OnVisualParentChanged%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2369">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2369">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e1989-2370">
            <para>このメソッドをオーバーライドする場合は、常に基本の実装を呼び出します。既定の基本実装では、逆継承されたプロパティの状態の一部の内部メンテナンスを実行します。基本の実装の呼び出しに失敗すると、この状態が無効になります。このメソッドは<see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />します。<see cref="T:System.Windows.FrameworkElement" />と<see cref="T:System.Windows.Window" />オーバーライド両方も、<see cref="T:System.Windows.UIElement3D" />の実装<see cref="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />、および<see cref="T:System.Windows.Window" />シールすることです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2370">
              <para>If you override this method, always call the base implementation. The default base implementation performs some internal maintenance of reverse-inherited property state. Failing to call the base implementation will invalidate this state.  This method overrides <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" /> and <see cref="T:System.Windows.Window" /> both also override the <see cref="T:System.Windows.UIElement3D" /> implementation of <see cref="M:System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)" />, and <see cref="T:System.Windows.Window" /> seals it.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="abstract member PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject&#xA;override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="uIElement3D.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">
          <span data-ttu-id="e1989-2371">要求したフォーカス検査の方向。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2371">The direction of the requested focus traversal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-2372">派生クラスでオーバーライドされると、指定したフォーカス検査方向のフォーカスを受け取ることになる要素を返します。実際にはフォーカスはその要素に移動しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2372">When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-2373">
            <see cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" /> が実際に呼び出された場合にフォーカスを受け取る要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2373">The element that would have received focus if <see cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" /> were actually invoked.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2374">このクラスでこのメソッドの既定の実装が完了していないと、常に返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2374">The default implementation of this method in this class is incomplete, and always returns `null`.</span></span>  
  
 <span data-ttu-id="e1989-2375"><xref:System.Windows.UIElement3D.PredictFocus%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2375"><xref:System.Windows.UIElement3D.PredictFocus%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2376">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2376">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragEnter : System.Windows.DragEventHandler " Usage="member this.PreviewDragEnter : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2377">この要素をドラッグ先とする、基になるドラッグ イベントが入力システムによって報告されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2377">Occurs when the input system reports an underlying drag event with this element as the drag target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2378">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewDragEnter>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2378">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2379">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewDragEnter>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2379">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2380"><xref:System.Windows.UIElement3D.PreviewDragEnter> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2380"><xref:System.Windows.UIElement3D.PreviewDragEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2381">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2381">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2382">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2382">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2383">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2383">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragEnterEvent>|  
|<span data-ttu-id="e1989-2384">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2384">Routing strategy</span></span>|<span data-ttu-id="e1989-2385">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2385">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2386">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2386">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="e1989-2387">対応するバブル イベントが<xref:System.Windows.UIElement3D.DragEnter>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2387">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragEnter>.</span></span>  
  
-   <span data-ttu-id="e1989-2388">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2388">Override <xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2389">
            <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2389">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2390">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2390">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2391">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2391">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2392">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2392">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2393">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2393">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2394">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2394">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2395"><xref:System.Windows.UIElement3D.PreviewDragEnterEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2395"><xref:System.Windows.UIElement3D.PreviewDragEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2396">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2396">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragLeave : System.Windows.DragEventHandler " Usage="member this.PreviewDragLeave : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2397">入力システムが、この要素をドラッグ元とする、基になるドラッグ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2397">Occurs when the input system reports an underlying drag event with this element as the drag origin.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2398">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewDragLeave>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2398">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2399">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewDragLeave>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2399">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2400"><xref:System.Windows.UIElement3D.PreviewDragLeave> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2400"><xref:System.Windows.UIElement3D.PreviewDragLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2401">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2401">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2402">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2402">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2403">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2403">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragLeaveEvent>|  
|<span data-ttu-id="e1989-2404">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2404">Routing strategy</span></span>|<span data-ttu-id="e1989-2405">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2405">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2406">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2406">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="e1989-2407">対応するバブル イベントが<xref:System.Windows.UIElement3D.DragLeave>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2407">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragLeave>.</span></span>  
  
-   <span data-ttu-id="e1989-2408">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2408">Override <xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2409">
            <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2409">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2410">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2410">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2411">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2411">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2412">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2412">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2413">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2413">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2414">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2414">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2415"><xref:System.Windows.UIElement3D.PreviewDragLeaveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2415"><xref:System.Windows.UIElement3D.PreviewDragLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2416">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2416">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberSignature Language="F#" Value="member this.PreviewDragOver : System.Windows.DragEventHandler " Usage="member this.PreviewDragOver : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2417">この要素がドロップ先となる可能性のある、基になるドラッグ イベントを入力システムが報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2417">Occurs when the input system reports an underlying drag event with this element as the potential drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2418">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewDragOver>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2418">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2419">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewDragOver>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2419">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2420"><xref:System.Windows.UIElement3D.PreviewDragOver> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2420"><xref:System.Windows.UIElement3D.PreviewDragOver> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2421">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2421">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2422">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2422">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2423">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2423">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDragOverEvent>|  
|<span data-ttu-id="e1989-2424">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2424">Routing strategy</span></span>|<span data-ttu-id="e1989-2425">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2425">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2426">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2426">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="e1989-2427">対応するバブル イベントが<xref:System.Windows.UIElement3D.DragOver>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2427">The corresponding bubbling event is <xref:System.Windows.UIElement3D.DragOver>.</span></span>  
  
-   <span data-ttu-id="e1989-2428">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewDragOver%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2428">Override <xref:System.Windows.UIElement3D.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDragOverEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDragOverEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2429">
            <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2429">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDragOver" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2430">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2430">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2431">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2431">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2432">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2432">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2433">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2433">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2434">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2434">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2435"><xref:System.Windows.UIElement3D.PreviewDragOverEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2435"><xref:System.Windows.UIElement3D.PreviewDragOverEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2436">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2436">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberSignature Language="F#" Value="member this.PreviewDrop : System.Windows.DragEventHandler " Usage="member this.PreviewDrop : System.Windows.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2437">入力システムがこの要素をドロップ先とするドロップ イベントを報告したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2437">Occurs when the input system reports an underlying drop event with this element as the drop target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2438">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewDrop>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2438">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2439">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewDrop>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2439">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2440"><xref:System.Windows.UIElement3D.PreviewDrop> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2440"><xref:System.Windows.UIElement3D.PreviewDrop> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2441">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2441">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2442">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2442">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2443">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2443">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewDropEvent>|  
|<span data-ttu-id="e1989-2444">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2444">Routing strategy</span></span>|<span data-ttu-id="e1989-2445">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2445">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2446">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2446">Delegate</span></span>|<xref:System.Windows.DragEventHandler>|  
  
-   <span data-ttu-id="e1989-2447">対応するバブル イベントが<xref:System.Windows.UIElement3D.Drop>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2447">The corresponding bubbling event is <xref:System.Windows.UIElement3D.Drop>.</span></span>  
  
-   <span data-ttu-id="e1989-2448">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewDrop%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2448">Override <xref:System.Windows.UIElement3D.OnPreviewDrop%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewDropEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewDropEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2449">
            <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2449">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewDrop" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2450">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2450">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2451">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2451">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2452">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2452">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2453">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2453">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2454">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2454">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2455"><xref:System.Windows.UIElement3D.PreviewDropEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2455"><xref:System.Windows.UIElement3D.PreviewDropEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2456">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2456">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " Usage="member this.PreviewGiveFeedback : System.Windows.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2457">ドラッグ アンド ドロップ操作が開始されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2457">Occurs when a drag-and-drop operation is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2458"><xref:System.Windows.UIElement3D.PreviewGiveFeedback>イベントにより、ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するために、マウス ポインターの外観を変更するドラッグ イベントのソース。</span><span class="sxs-lookup"><span data-stu-id="e1989-2458">The <xref:System.Windows.UIElement3D.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="e1989-2459">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewGiveFeedback>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2459">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2460">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewGiveFeedback>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2460">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2461"><xref:System.Windows.UIElement3D.PreviewGiveFeedback> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2461"><xref:System.Windows.UIElement3D.PreviewGiveFeedback> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2462">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2462">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2463">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2463">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2464">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2464">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent>|  
|<span data-ttu-id="e1989-2465">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2465">Routing strategy</span></span>|<span data-ttu-id="e1989-2466">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2466">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2467">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2467">Delegate</span></span>|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   <span data-ttu-id="e1989-2468">対応するバブル イベントが<xref:System.Windows.UIElement3D.GiveFeedback>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2468">The corresponding bubbling event is <xref:System.Windows.UIElement3D.GiveFeedback>.</span></span>  
  
-   <span data-ttu-id="e1989-2469">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2469">Override <xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGiveFeedbackEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewGiveFeedbackEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2470">
            <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2470">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGiveFeedback" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2471">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2471">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2472">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2472">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2473">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2473">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2474">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2474">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2475">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2475">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2476"><xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2476"><xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2477">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2477">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewGotKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2478">この要素にキーボード フォーカスが移動したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2478">Occurs when the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2479">このイベントは、ルーティングのトンネリングを使用するため、フォーカスを持つ要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2479">Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-2480">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスのある実際の要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-2480">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.</span></span>  
  
 <span data-ttu-id="e1989-2481">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2481">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2482">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2482">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2483"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2483"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2484">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2484">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2485">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2485">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2486">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2486">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent>|  
|<span data-ttu-id="e1989-2487">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2487">Routing strategy</span></span>|<span data-ttu-id="e1989-2488">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2488">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2489">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2489">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="e1989-2490">対応するバブル イベントが<xref:System.Windows.UIElement3D.GotKeyboardFocus>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2490">The corresponding bubbling event is <xref:System.Windows.UIElement3D.GotKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="e1989-2491">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2491">Override <xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewGotKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2492">
            <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2492">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2493">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2493">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2494">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2494">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2495">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2495">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2496">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2496">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2497">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2497">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2498"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2498"><xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2499">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2499">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2500">この要素にキーボード フォーカスがある状態でいずれかのキーが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2500">Occurs when a key is pressed while the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2501">キーの処理は、コマンドを実行し、テキストの合成などその他のプラットフォーム機能と対話します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2501">Key handling interacts with other platform features such as commanding and text composition.</span></span> <span data-ttu-id="e1989-2502">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewKeyDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2502">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2503">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewKeyDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2503">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2504"><xref:System.Windows.UIElement3D.PreviewKeyDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2504"><xref:System.Windows.UIElement3D.PreviewKeyDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2505">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2505">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2506">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2506">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2507">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2507">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewKeyDownEvent>|  
|<span data-ttu-id="e1989-2508">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2508">Routing strategy</span></span>|<span data-ttu-id="e1989-2509">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2509">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2510">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2510">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="e1989-2511">対応するバブル イベントが<xref:System.Windows.UIElement3D.KeyDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2511">The corresponding bubbling event is <xref:System.Windows.UIElement3D.KeyDown>.</span></span>  
  
-   <span data-ttu-id="e1989-2512">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2512">Override <xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewKeyDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2513">
            <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2513">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2514">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2514">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2515">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2515">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2516">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2516">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2517">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2517">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2518">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2518">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2519"><xref:System.Windows.UIElement3D.PreviewKeyDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2519"><xref:System.Windows.UIElement3D.PreviewKeyDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2520">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2520">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " Usage="member this.PreviewKeyUp : System.Windows.Input.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2521">この要素にキーボード フォーカスがある状態でキーが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2521">Occurs when a key is released while the keyboard is focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2522">キーの処理は、コマンドを実行し、テキストの合成などその他のプラットフォーム機能と対話します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2522">Key handling interacts with other platform features such as commanding and text composition.</span></span>  
  
 <span data-ttu-id="e1989-2523">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewKeyUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2523">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2524">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewKeyUp>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2524">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2525"><xref:System.Windows.UIElement3D.PreviewKeyUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2525"><xref:System.Windows.UIElement3D.PreviewKeyUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2526">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2526">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2527">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2527">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2528">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2528">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewKeyUpEvent>|  
|<span data-ttu-id="e1989-2529">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2529">Routing strategy</span></span>|<span data-ttu-id="e1989-2530">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2530">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2531">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2531">Delegate</span></span>|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   <span data-ttu-id="e1989-2532">対応するバブル イベントが<xref:System.Windows.UIElement3D.KeyUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2532">The corresponding bubbling event is <xref:System.Windows.UIElement3D.KeyUp>.</span></span>  
  
-   <span data-ttu-id="e1989-2533">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2533">Override <xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewKeyUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewKeyUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2534">
            <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2534">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewKeyUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2535">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2535">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2536">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2536">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2537">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2537">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2538">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2538">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2539">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2539">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2540"><xref:System.Windows.UIElement3D.PreviewKeyUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2540"><xref:System.Windows.UIElement3D.PreviewKeyUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2541">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2541">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberSignature Language="F#" Value="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " Usage="member this.PreviewLostKeyboardFocus : System.Windows.Input.KeyboardFocusChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2542">この要素からキーボード フォーカスが離れたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2542">Occurs when the keyboard is no longer focused on this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2543">このイベントは、ルーティングのトンネリングを使用しているために、フォーカスを失った要素は、イベント ハンドラーが実際にアタッチされている場合、要素ではなく子要素である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2543">Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.</span></span> <span data-ttu-id="e1989-2544">チェック、<xref:System.Windows.RoutedEventArgs.Source%2A>フォーカスを失っている実際の要素を決定するためにイベント データ。</span><span class="sxs-lookup"><span data-stu-id="e1989-2544">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.</span></span>  
  
 <span data-ttu-id="e1989-2545">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2545">This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2546">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2546">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2547"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2547"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2548">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2548">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2549">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2549">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2550">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2550">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent>|  
|<span data-ttu-id="e1989-2551">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2551">Routing strategy</span></span>|<span data-ttu-id="e1989-2552">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2552">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2553">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2553">Delegate</span></span>|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   <span data-ttu-id="e1989-2554">対応するバブル イベントが<xref:System.Windows.UIElement3D.LostKeyboardFocus>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2554">The corresponding bubbling event is <xref:System.Windows.UIElement3D.LostKeyboardFocus>.</span></span>  
  
-   <span data-ttu-id="e1989-2555">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2555">Override <xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewLostKeyboardFocusEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2556">
            <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2556">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewLostKeyboardFocus" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2557">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2557">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2558">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2558">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2559">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2559">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2560">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2560">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2561">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2561">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2562"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2562"><xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2563">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2563">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2564">この要素の上にポインターがある状態でマウス ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2564">Occurs when any mouse button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2565">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewMouseDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2565">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2566">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewMouseDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2566">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2567"><xref:System.Windows.UIElement3D.PreviewMouseDown>イベントは、多くの場合、いずれかと共に発生<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>または<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>に対応する 2 つの標準のマウス ボタンのいずれかのキーを押します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2567">The <xref:System.Windows.UIElement3D.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="e1989-2568"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベントがイベント ルート上には、この要素に到達します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2568"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="e1989-2569">「解説」を参照してください。<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>または<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2569">See Remarks for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>.</span></span>  
  
 <span data-ttu-id="e1989-2570"><xref:System.Windows.UIElement3D.PreviewMouseDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2570"><xref:System.Windows.UIElement3D.PreviewMouseDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2571">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2571">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2572">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2572">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2573">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2573">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseDownEvent>|  
|<span data-ttu-id="e1989-2574">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2574">Routing strategy</span></span>|<span data-ttu-id="e1989-2575">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2575">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2576">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2576">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-2577">対応するバブル イベントが<xref:System.Windows.UIElement3D.MouseDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2577">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseDown>.</span></span>  
  
-   <span data-ttu-id="e1989-2578">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2578">Override <xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2579">
            <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2579">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2580">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2580">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2581">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2581">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2582">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2582">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2583">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2583">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2584">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2584">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2585"><xref:System.Windows.UIElement3D.PreviewMouseDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2585"><xref:System.Windows.UIElement3D.PreviewMouseDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2586">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2586">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2587">この要素の上にマウス ポインターがある状態でマウスの左ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2587">Occurs when the left mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2588">この[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)要素ツリーを通じてトンネリングのルートに従うよう、直接ルーティング イベントが発生し、それぞれで、要素ツリーに沿って reraised を実際には<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2588">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-2589">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントのいずれかの<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>添付イベントをイベント ルート上の各要素によって処理されるは、そのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2589">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="e1989-2590">このイベントのイベント データは、基になるイベントのデータを公開<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2590">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="e1989-2591">そのイベントがイベント ルート上で処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement3D.AddHandler%2A>、処理済みとしてマークされているイベントを処理するために、イベント リスナーをするためには、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2591">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="e1989-2592">マークした場合<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーは自動的に処理およびすべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2592">If you mark <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="e1989-2593">これは、可能性がありますが含まれていますクラス ハンドラーが生成されたイベントにはなど<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2593">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="e1989-2594">概念的には、このイベントと考える (とその他のマウス ボタンのイベントの<xref:System.Windows.UIElement3D>) マウス「サービス」にする (によって提供されるサービスの定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-2594">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="e1989-2595">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左、右、上下) を確認する必要がないという利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2595">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="e1989-2596">非標準のボタンの状態のチェックより高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2596">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-2597"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2597"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2598">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2598">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2599">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2599">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2600">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2600">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent>|  
|<span data-ttu-id="e1989-2601">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2601">Routing strategy</span></span>|<span data-ttu-id="e1989-2602">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-2602">Direct</span></span>|  
|<span data-ttu-id="e1989-2603">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2603">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-2604">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2604">Override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2605">
            <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2605">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2606">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2606">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2607">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2607">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2608">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2608">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2609">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2609">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2610">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2610">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2611"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2611"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2612">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2612">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseLeftButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2613">この要素の上にマウス ポインターがある状態でマウスの左ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2613">Occurs when the left mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2614">この[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)要素ツリーを通じてトンネリングのルートに従うよう、直接ルーティング イベントが発生し、それぞれで、要素ツリーに沿って reraised を実際には<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2614">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-2615">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントのいずれかの<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>添付イベントをイベント ルート上の各要素によって処理されるは、そのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2615">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="e1989-2616">このイベントのイベント データは、基になるイベントのデータを公開<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2616">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="e1989-2617">そのイベントがイベント ルート上で処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement3D.AddHandler%2A>、処理済みとしてマークされているイベントを処理するために、イベント リスナーをするためには、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2617">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="e1989-2618">マークした場合<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>経路、さらにすべてのリスナーは自動的に処理およびすべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2618">If you mark <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="e1989-2619">概念的には、このイベントと考える (とその他のマウス ボタンのイベントの<xref:System.Windows.UIElement3D>) マウス「サービス」にする (によって提供されるサービスの定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-2619">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="e1989-2620">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左、右、上下) を確認する必要がないという利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2620">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="e1989-2621">非標準のボタンの状態のチェックより高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2621">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-2622"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2622"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2623">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2623">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2624">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2624">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2625">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2625">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent>|  
|<span data-ttu-id="e1989-2626">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2626">Routing strategy</span></span>|<span data-ttu-id="e1989-2627">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-2627">Direct</span></span>|  
|<span data-ttu-id="e1989-2628">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2628">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-2629">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2629">Override <xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseLeftButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2630">
            <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2630">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseLeftButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2631">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2631">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2632">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2632">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2633">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2633">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2634">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2634">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2635">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2635">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2636"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2636"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2637">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2637">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " Usage="member this.PreviewMouseMove : System.Windows.Input.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2638">この要素上でマウス ポインターが動かされたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2638">Occurs when the mouse pointer moves while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2639">このイベントは、どちらも、要素の境界にマウス ポインターが最初にマウス ポインターが要素の境界内に残っているときに移動したときにもとします。</span><span class="sxs-lookup"><span data-stu-id="e1989-2639">This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.</span></span>  
  
 <span data-ttu-id="e1989-2640">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewMouseMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2640">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2641">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewMouseMove>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2641">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2642"><xref:System.Windows.UIElement3D.PreviewMouseMove> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2642"><xref:System.Windows.UIElement3D.PreviewMouseMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2643">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2643">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2644">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2644">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2645">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2645">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseMoveEvent>|  
|<span data-ttu-id="e1989-2646">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2646">Routing strategy</span></span>|<span data-ttu-id="e1989-2647">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2647">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2648">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2648">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="e1989-2649">対応するバブル イベントが<xref:System.Windows.UIElement3D.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2649">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseMove>.</span></span>  
  
-   <span data-ttu-id="e1989-2650">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2650">Override <xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2651">
            <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2651">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2652">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2652">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2653">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2653">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2654">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2654">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2655">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2655">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2656">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2656">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2657"><xref:System.Windows.UIElement3D.PreviewMouseMoveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2657"><xref:System.Windows.UIElement3D.PreviewMouseMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2658">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2658">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonDown : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2659">この要素の上にマウス ポインターがある状態でマウスの右ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2659">Occurs when the right mouse button is pressed while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2660">この[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)要素ツリーを通じてトンネリングのルートに従うよう、直接ルーティング イベントが発生し、それぞれで、要素ツリーに沿って reraised を実際には<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2660">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-2661">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントのいずれかの<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>添付イベントをイベント ルート上の各要素によって処理されるは、そのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2661">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="e1989-2662">このイベントのイベント データは、基になるイベントのデータを公開<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2662">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="e1989-2663">そのイベントがイベント ルート上で処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement3D.AddHandler%2A>、処理済みとしてマークされているイベントを処理するために、イベント リスナーをするためには、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2663">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="e1989-2664">マークした場合<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>経路、さらにすべてのリスナーは自動的に処理およびすべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2664">If you mark <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span> <span data-ttu-id="e1989-2665">これは、可能性がありますが含まれていますクラス ハンドラーが生成されたイベントにはなど<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2665">This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</span></span>  
  
 <span data-ttu-id="e1989-2666">概念的には、このイベントと考える (とその他のマウス ボタンのイベントの<xref:System.Windows.UIElement3D>) マウス「サービス」にする (によって提供されるサービスの定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-2666">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="e1989-2667">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左、右、上下) を確認する必要がないという利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2667">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="e1989-2668">非標準のボタンの状態のチェックより高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2668">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-2669"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2669"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2670">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2670">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2671">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2671">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2672">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2672">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent>|  
|<span data-ttu-id="e1989-2673">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2673">Routing strategy</span></span>|<span data-ttu-id="e1989-2674">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-2674">Direct</span></span>|  
|<span data-ttu-id="e1989-2675">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2675">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-2676">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2676">Override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2677">
            <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2677">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2678">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2678">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2679">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2679">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2680">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2680">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2681">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2681">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2682">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2682">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2683"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2683"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2684">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2684">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseRightButtonUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2685">この要素の上にマウス ポインターがある状態でマウスの右ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2685">Occurs when the right mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2686">この[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)要素ツリーを通じてトンネリングのルートに従うよう、直接ルーティング イベントが発生し、それぞれで、要素ツリーに沿って reraised を実際には<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2686">Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-2687">このイベントは、基になるのマウス ボタンの詳細を報告する複数の関連イベントのいずれかの<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>添付イベントをイベント ルート上の各要素によって処理されるは、そのイベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2687">This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event, which is an attached event that is processed by each element along an event route.</span></span>  
  
 <span data-ttu-id="e1989-2688">このイベントのイベント データは、基になるイベントのデータを公開<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-2688">The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="e1989-2689">そのイベントがイベント ルート上で処理済みとしてマークすると、マウス ボタンの特定のイベントも発生します。ただし、明示的に呼び出すことによって、マウス ボタンの特定のイベント ハンドラーを追加する必要があります<xref:System.Windows.UIElement3D.AddHandler%2A>、処理済みとしてマークされているイベントを処理するために、イベント リスナーをするためには、オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2689">If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement3D.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.</span></span> <span data-ttu-id="e1989-2690">マークした場合<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>、処理は本質的にマークして<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>経路、さらにすべてのリスナーは自動的に処理およびすべての関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2690">If you mark <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> handled for all further listeners along the route, and on all related events.</span></span>  
  
 <span data-ttu-id="e1989-2691">概念的には、このイベントと考える (とその他のマウス ボタンのイベントの<xref:System.Windows.UIElement3D>) マウス「サービス」にする (によって提供されるサービスの定義で、<xref:System.Windows.Input.Mouse>クラス)。</span><span class="sxs-lookup"><span data-stu-id="e1989-2691">Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement3D>) to be a mouse "service" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class).</span></span> <span data-ttu-id="e1989-2692">イベントは、イベント データの元のマウス イベントのマウス ボタンの状態 (左、右、上下) を確認する必要がないという利便性を追加します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2692">The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.</span></span> <span data-ttu-id="e1989-2693">非標準のボタンの状態のチェックより高度なシナリオを使用する必要があります、[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]上、<xref:System.Windows.Input.Mouse>ものではなくクラスに対する<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2693">For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-2694"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2694"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2695">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2695">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2696">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2696">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2697">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2697">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent>|  
|<span data-ttu-id="e1989-2698">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2698">Routing strategy</span></span>|<span data-ttu-id="e1989-2699">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-2699">Direct</span></span>|  
|<span data-ttu-id="e1989-2700">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2700">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-2701">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2701">Override <xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseRightButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2702">
            <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2702">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseRightButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2703">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2703">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2704">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2704">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2705">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2705">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2706">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2706">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2707">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2707">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2708"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2708"><xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2709">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2709">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " Usage="member this.PreviewMouseUp : System.Windows.Input.MouseButtonEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2710">この要素の上にマウス ポインターがある状態でいずれかのマウス ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2710">Occurs when any mouse button is released while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2711">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewMouseUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2711">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2712">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewMouseUp>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2712">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2713"><xref:System.Windows.UIElement3D.PreviewMouseUp>イベントは、多くの場合、いずれかと共に発生<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>または<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>に対応する 2 つの標準のマウス ボタンのいずれかのキーを押します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2713">The <xref:System.Windows.UIElement3D.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons.</span></span> <span data-ttu-id="e1989-2714"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>も、ルーティング イベントをしています直接ルーティング イベントを適切なボタンに固有のイベントが発生したときに、<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>イベントがイベント ルート上には、この要素に到達します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2714"><xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> event reaches this element along the event route.</span></span> <span data-ttu-id="e1989-2715">「解説」を参照してください。<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>または<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2715">See Remarks for <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</span></span>  
  
 <span data-ttu-id="e1989-2716"><xref:System.Windows.UIElement3D.PreviewMouseUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2716"><xref:System.Windows.UIElement3D.PreviewMouseUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2717">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2717">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2718">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2718">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2719">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2719">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseUpEvent>|  
|<span data-ttu-id="e1989-2720">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2720">Routing strategy</span></span>|<span data-ttu-id="e1989-2721">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2721">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2722">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2722">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-2723">対応するバブル イベントが<xref:System.Windows.UIElement3D.MouseUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2723">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseUp>.</span></span>  
  
-   <span data-ttu-id="e1989-2724">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2724">Override <xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2725">
            <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2725">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2726">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2726">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2727">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2727">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2728">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2728">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2729">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2729">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2730">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2730">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2731"><xref:System.Windows.UIElement3D.PreviewMouseUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2731"><xref:System.Windows.UIElement3D.PreviewMouseUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2732">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2732">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberSignature Language="F#" Value="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " Usage="member this.PreviewMouseWheel : System.Windows.Input.MouseWheelEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2733">この要素の上にマウス ポインターがある状態でユーザーがマウス ホイールを使用したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2733">Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2734">フォーカスおよびマウスのキャプチャ、マウス ポインターが; よりも優先します。フォーカスがあるか、キャプチャした要素からこのイベントを受信する場合、マウス ポインター可能性が実際にある別の要素上。</span><span class="sxs-lookup"><span data-stu-id="e1989-2734">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.</span></span>  
  
 <span data-ttu-id="e1989-2735">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewMouseMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2735">This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2736">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewMouseMove>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2736">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2737"><xref:System.Windows.UIElement3D.PreviewMouseWheel> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2737"><xref:System.Windows.UIElement3D.PreviewMouseWheel> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2738">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2738">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2739">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2739">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2740">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2740">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewMouseWheelEvent>|  
|<span data-ttu-id="e1989-2741">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2741">Routing strategy</span></span>|<span data-ttu-id="e1989-2742">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2742">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2743">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2743">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="e1989-2744">対応するバブル イベントが<xref:System.Windows.UIElement3D.MouseWheel>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2744">The corresponding bubbling event is <xref:System.Windows.UIElement3D.MouseWheel>.</span></span>  
  
-   <span data-ttu-id="e1989-2745">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2745">Override <xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2746">
            <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2746">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewMouseWheel" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2747">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2747">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2748">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2748">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2749">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2749">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2750">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2750">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2751">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2751">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2752"><xref:System.Windows.UIElement3D.PreviewMouseWheelEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2752"><xref:System.Windows.UIElement3D.PreviewMouseWheelEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2753">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2753">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.PreviewQueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2754">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2754">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2755"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>イベントにより、ドラッグ ソースがドラッグ アンド ドロップ操作を取り消す必要があるかどうかを宣言します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2755">The <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="e1989-2756">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2756">This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2757">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2757">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2758"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2758"><xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2759">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2759">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2760">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2760">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2761">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2761">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent>|  
|<span data-ttu-id="e1989-2762">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2762">Routing strategy</span></span>|<span data-ttu-id="e1989-2763">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2763">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2764">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2764">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="e1989-2765">対応するバブル イベントが<xref:System.Windows.UIElement3D.QueryContinueDrag>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2765">The corresponding bubbling event is <xref:System.Windows.UIElement3D.QueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="e1989-2766">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2766">Override <xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewQueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewQueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2767">
            <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2767">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewQueryContinueDrag" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2768">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2768">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2769">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2769">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2770">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2770">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2771">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2771">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2772">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2772">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2773"><xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2773"><xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2774">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2774">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2775">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2775">Occurs when the stylus button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2776">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusButtonDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2776">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2777">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusButtonDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2777">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2778">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2778">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2779">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2779">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2780"><xref:System.Windows.UIElement3D.PreviewStylusButtonDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2780"><xref:System.Windows.UIElement3D.PreviewStylusButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2781">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2781">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2782">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2782">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2783">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2783">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent>|  
|<span data-ttu-id="e1989-2784">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2784">Routing strategy</span></span>|<span data-ttu-id="e1989-2785">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2785">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2786">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2786">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-2787">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusButtonDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2787">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="e1989-2788">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2788">Override <xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2789">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2789">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2790">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2790">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2791">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2791">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2792">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2792">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2793">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2793">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2794">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2794">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2795"><xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2795"><xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2796">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2796">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.PreviewStylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2797">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2797">Occurs when the stylus button is released while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2798">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusButtonUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2798">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2799">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusButtonUp>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2799">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2800">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2800">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2801">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2801">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2802"><xref:System.Windows.UIElement3D.PreviewStylusButtonUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2802"><xref:System.Windows.UIElement3D.PreviewStylusButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2803">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2803">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2804">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2804">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2805">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2805">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent>|  
|<span data-ttu-id="e1989-2806">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2806">Routing strategy</span></span>|<span data-ttu-id="e1989-2807">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2807">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2808">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2808">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-2809">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusButtonUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2809">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="e1989-2810">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2810">Override <xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2811">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2811">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2812">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2812">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2813">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2813">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2814">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2814">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2815">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2815">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2816">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2816">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2817"><xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2817"><xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2818">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2818">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.PreviewStylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2819">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2819">Occurs when the stylus touches the digitizer while it is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2820">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2820">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2821">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2821">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2822">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2822">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2823">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2823">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2824"><xref:System.Windows.UIElement3D.PreviewStylusDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2824"><xref:System.Windows.UIElement3D.PreviewStylusDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2825">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2825">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2826">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2826">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2827">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2827">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusDownEvent>|  
|<span data-ttu-id="e1989-2828">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2828">Routing strategy</span></span>|<span data-ttu-id="e1989-2829">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2829">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2830">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2830">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="e1989-2831">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2831">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusDown>.</span></span>  
  
-   <span data-ttu-id="e1989-2832">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2832">Override <xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2833">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2833">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2834">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2834">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2835">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2835">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2836">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2836">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2837">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2837">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2838">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2838">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2839"><xref:System.Windows.UIElement3D.PreviewStylusDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2839"><xref:System.Windows.UIElement3D.PreviewStylusDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2840">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2840">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2841">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2841">Occurs when the stylus moves over an element without actually touching the digitizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2842">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusInAirMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2842">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2843">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusInAirMove>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2843">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2844">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2844">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2845">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2845">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2846"><xref:System.Windows.UIElement3D.PreviewStylusInAirMove> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2846"><xref:System.Windows.UIElement3D.PreviewStylusInAirMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2847">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2847">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2848">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2848">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2849">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2849">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent>|  
|<span data-ttu-id="e1989-2850">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2850">Routing strategy</span></span>|<span data-ttu-id="e1989-2851">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2851">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2852">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2852">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-2853">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusInAirMove>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2853">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="e1989-2854">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2854">Override <xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2855">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2855">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2856">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2856">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2857">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2857">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2858">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2858">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2859">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2859">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2860">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2860">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2861"><xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2861"><xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2862">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2862">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2863">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2863">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2864">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusInRange>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2864">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2865">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusInRange>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2865">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2866">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2866">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2867">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2867">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2868"><xref:System.Windows.UIElement3D.PreviewStylusInRange> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2868"><xref:System.Windows.UIElement3D.PreviewStylusInRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2869">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2869">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2870">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2870">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2871">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2871">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent>|  
|<span data-ttu-id="e1989-2872">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2872">Routing strategy</span></span>|<span data-ttu-id="e1989-2873">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2873">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2874">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2874">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-2875">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusInRange>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2875">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusInRange>.</span></span>  
  
-   <span data-ttu-id="e1989-2876">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2876">Override <xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2877">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2877">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusInRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2878">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2878">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2879">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2879">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2880">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2880">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2881">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2881">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2882">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2882">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2883"><xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2883"><xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2884">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2884">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2885">要素上にある間にスタイラスが移動すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2885">Occurs when the stylus moves while over the element.</span>
          </span>
          <span data-ttu-id="e1989-2886">このイベントを発生させるためには、デジタイザーによって検出されている間にスタイラスが移動する必要があります。それ以外の場合には、代わりに <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2886">The stylus must move while being detected by the digitizer to raise this event, otherwise, <see cref="E:System.Windows.UIElement3D.PreviewStylusInAirMove" /> is raised instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2887">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2887">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2888">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusMove>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2888">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2889">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2889">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2890">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2890">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2891"><xref:System.Windows.UIElement3D.PreviewStylusMove> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2891"><xref:System.Windows.UIElement3D.PreviewStylusMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2892">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2892">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2893">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2893">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2894">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2894">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusMoveEvent>|  
|<span data-ttu-id="e1989-2895">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2895">Routing strategy</span></span>|<span data-ttu-id="e1989-2896">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2896">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2897">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2897">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-2898">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusMove>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2898">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusMove>.</span></span>  
  
-   <span data-ttu-id="e1989-2899">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2899">Override <xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2900">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2900">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2901">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2901">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2902">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2902">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2903">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2903">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2904">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2904">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2905">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2905">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2906"><xref:System.Windows.UIElement3D.PreviewStylusMoveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2906"><xref:System.Windows.UIElement3D.PreviewStylusMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2907">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2907">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2908">スタイラスがデジタイザーから離れすぎているために検出されないときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2908">Occurs when the stylus is too far from the digitizer to be detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2909">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2909">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2910">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2910">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2911">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2911">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2912">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2912">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2913"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2913"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2914">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2914">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2915">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2915">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2916">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2916">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent>|  
|<span data-ttu-id="e1989-2917">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2917">Routing strategy</span></span>|<span data-ttu-id="e1989-2918">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2918">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2919">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2919">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-2920">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusOutOfRange>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2920">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="e1989-2921">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2921">Override <xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2922">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2922">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusOutOfRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2923">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2923">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2924">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2924">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2925">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2925">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2926">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2926">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2927">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2927">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2928"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2928"><xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2929">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2929">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.PreviewStylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2930">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2930">Occurs when a user performs one of several stylus gestures.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2931">スタイラス ジェスチャについては、次を参照してください。<xref:System.Windows.Input.SystemGesture>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2931">For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="e1989-2932">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2932">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2933">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2933">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2934">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2934">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2935">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2935">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2936"><xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2936"><xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2937">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2937">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2938">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2938">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2939">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2939">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent>|  
|<span data-ttu-id="e1989-2940">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2940">Routing strategy</span></span>|<span data-ttu-id="e1989-2941">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2941">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2942">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2942">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="e1989-2943">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusSystemGesture>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2943">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="e1989-2944">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2944">Override <xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2945">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2945">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusSystemGesture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2946">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2946">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2947">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2947">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2948">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2948">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2949">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2949">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2950">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2950">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2951"><xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2951"><xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2952">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2952">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.PreviewStylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2953">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2953">Occurs when the user raises the stylus off the digitizer while the stylus is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2954">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewStylusDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2954">This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2955">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewStylusDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2955">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2956">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2956">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-2957">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2957">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-2958"><xref:System.Windows.UIElement3D.PreviewStylusUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2958"><xref:System.Windows.UIElement3D.PreviewStylusUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2959">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2959">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2960">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2960">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2961">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2961">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewStylusUpEvent>|  
|<span data-ttu-id="e1989-2962">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2962">Routing strategy</span></span>|<span data-ttu-id="e1989-2963">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2963">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2964">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2964">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-2965">対応するバブル イベントが<xref:System.Windows.UIElement3D.StylusUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2965">The corresponding bubbling event is <xref:System.Windows.UIElement3D.StylusUp>.</span></span>  
  
-   <span data-ttu-id="e1989-2966">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2966">Override <xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewStylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewStylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2967">
            <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2967">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewStylusUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2968">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2968">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2969">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2969">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2970">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2970">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2971">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2971">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2972">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2972">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2973"><xref:System.Windows.UIElement3D.PreviewStylusUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2973"><xref:System.Windows.UIElement3D.PreviewStylusUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2974">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2974">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberSignature Language="F#" Value="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.PreviewTextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2975">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2975">Occurs when this element gets text in a device-independent manner.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2976"><xref:System.Windows.UIElement3D.PreviewTextInput>イベントでは、コンポーネントまたはデバイスに依存しない方法でテキスト入力をリッスンするアプリケーション。</span><span class="sxs-lookup"><span data-stu-id="e1989-2976">The <xref:System.Windows.UIElement3D.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="e1989-2977">キーボードの主要な手段は、 <xref:System.Windows.UIElement3D.PreviewTextInput>; が、音声認識、手書き入力、およびその他の入力デバイスも<xref:System.Windows.UIElement3D.PreviewTextInput>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2977">The keyboard is the primary means of <xref:System.Windows.UIElement3D.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement3D.PreviewTextInput>.</span></span>  
  
 <span data-ttu-id="e1989-2978">キーの組み合わせのため、既定のキーボードまたは入力方式エディターを通じて、複数のキー イベントが 1 つだけのテキスト入力イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-2978">Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.</span></span>  
  
 <span data-ttu-id="e1989-2979">このイベントのエイリアスを作成する、<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.PreviewTextInput>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2979">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-2980">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.PreviewTextInput>イベントは、基になるに関連付けられている<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2980">Event handlers that are attached to the <xref:System.Windows.UIElement3D.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-2981"><xref:System.Windows.UIElement3D.PreviewTextInput> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2981"><xref:System.Windows.UIElement3D.PreviewTextInput> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2982">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2982">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-2983">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-2983">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-2984">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-2984">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTextInputEvent>|  
|<span data-ttu-id="e1989-2985">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-2985">Routing strategy</span></span>|<span data-ttu-id="e1989-2986">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-2986">Tunneling</span></span>|  
|<span data-ttu-id="e1989-2987">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-2987">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="e1989-2988">対応するバブル イベントが<xref:System.Windows.UIElement3D.TextInput>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2988">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TextInput>.</span></span>  
  
-   <span data-ttu-id="e1989-2989">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewTextInput%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-2989">Override <xref:System.Windows.UIElement3D.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2990">
            <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2990">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTextInput" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2991">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2991">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-2992">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2992">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-2993">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-2993">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-2994">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2994">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-2995">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2995">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-2996"><xref:System.Windows.UIElement3D.PreviewTextInputEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-2996"><xref:System.Windows.UIElement3D.PreviewTextInputEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-2997">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-2997">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-2998">指がこの要素の上にある間に、その指で画面に触れると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-2998">Occurs when a finger touches the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-2999">既定で、<xref:System.Windows.UIElement3D.PreviewTouchDown>と<xref:System.Windows.UIElement3D.TouchDown>指が画面をタッチし、移動するまで、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="e1989-2999">By default, the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="e1989-3000">画面に指を押すと、により、キーを押して移動せずに保持しているとの動作を保持する<xref:System.Windows.Input.Stylus>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3000">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="e1989-3001">プレス アンド ホールド動作では、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3001">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="e1989-3002">発生する、<xref:System.Windows.UIElement3D.PreviewTouchDown>と<xref:System.Windows.UIElement3D.TouchDown>、画面に触れると、すぐに発生するイベントの設定、<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>添付プロパティを`false`この要素の。</span><span class="sxs-lookup"><span data-stu-id="e1989-3002">To cause the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3003">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3003">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3004">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3004">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchDownEvent>|  
|<span data-ttu-id="e1989-3005">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3005">Routing strategy</span></span>|<span data-ttu-id="e1989-3006">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-3006">Tunneling</span></span>|  
|<span data-ttu-id="e1989-3007">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3007">Delegate</span></span>|<span data-ttu-id="e1989-3008"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-3008"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-3009">対応するバブル イベントが<xref:System.Windows.UIElement3D.TouchDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3009">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchDown>.</span></span>  
  
-   <span data-ttu-id="e1989-3010">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3010">Override <xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3011">
            <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3011">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3012">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3012">Occurs when a finger moves on the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3013">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3013">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3014">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3014">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchMoveEvent>|  
|<span data-ttu-id="e1989-3015">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3015">Routing strategy</span></span>|<span data-ttu-id="e1989-3016">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-3016">Tunneling</span></span>|  
|<span data-ttu-id="e1989-3017">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3017">Delegate</span></span>|<span data-ttu-id="e1989-3018"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-3018"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-3019">対応するバブル イベントが<xref:System.Windows.UIElement3D.TouchMove>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3019">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchMove>.</span></span>  
  
-   <span data-ttu-id="e1989-3020">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3020">Override <xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3021">
            <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3021">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberSignature Language="F#" Value="member this.PreviewTouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.PreviewTouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3022">この要素の上に指があるときに、その指が画面から離れると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3022">Occurs when a finger is raised off of the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3023">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3023">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3024">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3024">Identifier field</span></span>|<xref:System.Windows.UIElement3D.PreviewTouchUpEvent>|  
|<span data-ttu-id="e1989-3025">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3025">Routing strategy</span></span>|<span data-ttu-id="e1989-3026">トンネリング</span><span class="sxs-lookup"><span data-stu-id="e1989-3026">Tunneling</span></span>|  
|<span data-ttu-id="e1989-3027">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3027">Delegate</span></span>|<span data-ttu-id="e1989-3028"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-3028"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-3029">対応するバブル イベントが<xref:System.Windows.UIElement3D.TouchUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3029">The corresponding bubbling event is <xref:System.Windows.UIElement3D.TouchUp>.</span></span>  
  
-   <span data-ttu-id="e1989-3030">オーバーライド<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3030">Override <xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewTouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.PreviewTouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3031">
            <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3031">Identifies the <see cref="E:System.Windows.UIElement3D.PreviewTouchUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3032">ドラッグ アンド ドロップ操作の実行中にキーボードまたはマウス ボタンの状態が変化したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3032">Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3033"><xref:System.Windows.UIElement3D.QueryContinueDrag>イベントにより、ドラッグ ソースがドラッグ アンド ドロップ操作を取り消す必要があるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3033">The <xref:System.Windows.UIElement3D.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="e1989-3034">このイベントのエイリアスを作成する、<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.QueryContinueDrag>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3034">This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3035">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.QueryContinueDrag>イベントは、基になるに関連付けられている<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3035">Event handlers that are attached to the <xref:System.Windows.UIElement3D.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3036"><xref:System.Windows.UIElement3D.QueryContinueDrag> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3036"><xref:System.Windows.UIElement3D.QueryContinueDrag> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3037">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3037">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3038">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3038">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3039">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3039">Identifier field</span></span>|<xref:System.Windows.UIElement3D.QueryContinueDragEvent>|  
|<span data-ttu-id="e1989-3040">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3040">Routing strategy</span></span>|<span data-ttu-id="e1989-3041">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3041">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3042">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3042">Delegate</span></span>|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   <span data-ttu-id="e1989-3043">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3043">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>.</span></span>  
  
-   <span data-ttu-id="e1989-3044">オーバーライド<xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3044">Override <xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryContinueDragEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.QueryContinueDragEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3045">
            <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3045">Identifies the <see cref="E:System.Windows.UIElement3D.QueryContinueDrag" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3046">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3046">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3047">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3047">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3048">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3048">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3049">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3049">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3050">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3050">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3051"><xref:System.Windows.UIElement3D.QueryContinueDragEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3051"><xref:System.Windows.UIElement3D.QueryContinueDragEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3052">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3052">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberSignature Language="F#" Value="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " Usage="member this.QueryCursor : System.Windows.Input.QueryCursorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3053">カーソルの表示が要求されると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3053">Occurs when the cursor is requested to display.</span>
          </span>
          <span data-ttu-id="e1989-3054">このイベントは、マウス ポインターが別の位置へ移動するたびに要素上で発生します。したがって、場合によってはカーソル オブジェクトを移動先の位置に基づいて変更する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3054">This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3055">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.QueryCursor>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3055">This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3056">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.QueryCursor>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3056">Event handlers that are attached to the <xref:System.Windows.UIElement3D.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3057">このイベントの名前で参照されているカーソルは、必ずしも (挿入ポイントとも呼ばれる) にテキスト カーソルではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3057">The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).</span></span> <span data-ttu-id="e1989-3058">代わりに、このコンテキストでのカーソルは、いくつかの可能な入力に関連するデバイスまたは Windows プログラミングの概念に関連する画面上のグラフィカル表示を宣言するオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3058">Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in Windows programming.</span></span> <span data-ttu-id="e1989-3059">そのオブジェクトがによって表される、 <xref:System.Windows.Input.Cursor> wpf クラスです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3059">That object is represented by the <xref:System.Windows.Input.Cursor> class in WPF.</span></span> <span data-ttu-id="e1989-3060">WPF 入力システムでは、画面上にマウス ポインターの位置を表す場合は、このカーソルを変更することができます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3060">The WPF input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.</span></span> <span data-ttu-id="e1989-3061">定義済みの値を使用することができます、<xref:System.Windows.Input.Cursors>列挙型、または画像ファイルとしてカスタム カーソルを宣言できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3061">You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.</span></span>  
  
 <span data-ttu-id="e1989-3062">リッスン、<xref:System.Windows.UIElement3D.QueryCursor>イベントは、カーソルの管理のための効率的な手法ではありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3062">Listening for the <xref:System.Windows.UIElement3D.QueryCursor> event is not an efficient technique for cursor management.</span></span> <span data-ttu-id="e1989-3063">各要素が、独自のカーソルの動作を定義する代わりに、<xref:System.Windows.FrameworkContentElement.Cursor%2A>と<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3063">Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</span></span> <span data-ttu-id="e1989-3064">のみに依存しないでください<xref:System.Windows.UIElement3D.QueryCursor>WPF フレームワーク レベルの基本要素を使用していないかで異常な場合に、カーソルの動作を定義する要素ごとの単位ではニーズに合わないかどうか。</span><span class="sxs-lookup"><span data-stu-id="e1989-3064">You should only rely on <xref:System.Windows.UIElement3D.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.</span></span> <span data-ttu-id="e1989-3065">応答でのカーソルの動作の実装の詳細については<xref:System.Windows.UIElement3D.QueryCursor>を参照してください<xref:System.Windows.Input.QueryCursorEventHandler>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3065">For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement3D.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.</span></span>  
  
 <span data-ttu-id="e1989-3066"><xref:System.Windows.UIElement3D.QueryCursor> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3066"><xref:System.Windows.UIElement3D.QueryCursor> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3067">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3067">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3068">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3068">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3069">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3069">Identifier field</span></span>|<xref:System.Windows.UIElement3D.QueryCursorEvent>|  
|<span data-ttu-id="e1989-3070">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3070">Routing strategy</span></span>|<span data-ttu-id="e1989-3071">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3071">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3072">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3072">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   <span data-ttu-id="e1989-3073">定義済みの対応するトンネル イベントはありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3073">There is no defined corresponding tunneling event.</span></span>  
  
-   <span data-ttu-id="e1989-3074">オーバーライド<xref:System.Windows.UIElement3D.OnQueryCursor%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3074">Override <xref:System.Windows.UIElement3D.OnQueryCursor%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3075">
            <see cref="E:System.Windows.UIElement3D.QueryCursor" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3075">Identifies the <see cref="E:System.Windows.UIElement3D.QueryCursor" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3076">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3076">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3077">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3077">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3078">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3078">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3079">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3079">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3080">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3080">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3081"><xref:System.Windows.UIElement3D.QueryCursorEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3081"><xref:System.Windows.UIElement3D.QueryCursorEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3082">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3082">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit&#xA;override this.RaiseEvent : System.Windows.RoutedEventArgs -&gt; unit" Usage="uIElement3D.RaiseEvent e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e1989-3083">イベント データを格納し、発生させるイベントを識別する <see cref="T:System.Windows.RoutedEventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3083">A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data and also identifies the event to raise.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-3084">特定のルーティング イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3084">Raises a specific routed event.</span>
          </span>
          <span data-ttu-id="e1989-3085">発生する <see cref="T:System.Windows.RoutedEvent" /> は、指定した <see cref="T:System.Windows.RoutedEventArgs" /> インスタンス内で (そのイベント データの <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> プロパティとして) 識別されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3085">The <see cref="T:System.Windows.RoutedEvent" /> to be raised is identified within the <see cref="T:System.Windows.RoutedEventArgs" /> instance that is provided (as the <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> property of that event data).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3086">`e`パラメーターは、一般的なルーティング イベントのすべてのデータの基本型として型指定ただし、イベント データは、ために発生するイベントに使用される最も固有のイベント データの種類として指定する必要があります<xref:System.Windows.RoutedEventArgs>派生クラスが含まれて、。特定のイベントが発生したときは、特定の実際のデータ プロパティ。</span><span class="sxs-lookup"><span data-stu-id="e1989-3086">The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.</span></span>  
  
 <span data-ttu-id="e1989-3087"><xref:System.Windows.RoutedEventArgs> イベントの状態のプロパティだけではありません。ルーティング イベントを発生させるも識別します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3087"><xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise.</span></span> <span data-ttu-id="e1989-3088">このイベントの発生パターンと、ルーティング イベントのデータの両方とは異なる[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]イベントに関連するプロパティを通常だけが含まれるイベントやデータのクラス。</span><span class="sxs-lookup"><span data-stu-id="e1989-3088">This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.</span></span>  
  
 <span data-ttu-id="e1989-3089"><xref:System.Windows.UIElement3D.RaiseEvent%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3089"><xref:System.Windows.UIElement3D.RaiseEvent%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3090">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3090">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberSignature Language="F#" Value="member this.ReleaseAllTouchCaptures : unit -&gt; unit" Usage="uIElement3D.ReleaseAllTouchCaptures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3091">キャプチャされているすべてのタッチ デバイスをこの要素から解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3091">Releases all captured touch devices from this element.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseMouseCapture : unit -&gt; unit&#xA;override this.ReleaseMouseCapture : unit -&gt; unit" Usage="uIElement3D.ReleaseMouseCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3092">この要素がマウス キャプチャを保持していた場合、キャプチャを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3092">Releases the mouse capture, if this element held the capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3093">この要素がキャプチャを保持していない場合は、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3093">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="e1989-3094">値をチェック<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>このメソッドを呼び出す前にします。</span><span class="sxs-lookup"><span data-stu-id="e1989-3094">Consider checking the value of <xref:System.Windows.UIElement3D.IsMouseCaptured%2A> before you call this method.</span></span>  
  
 <span data-ttu-id="e1989-3095"><xref:System.Windows.UIElement3D.ReleaseMouseCapture%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3095"><xref:System.Windows.UIElement3D.ReleaseMouseCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3096">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3096">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseStylusCapture : unit -&gt; unit&#xA;override this.ReleaseStylusCapture : unit -&gt; unit" Usage="uIElement3D.ReleaseStylusCapture " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3097">この要素がスタイラス デバイス キャプチャを保持していた場合、キャプチャを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3097">Releases the stylus device capture, if this element held the capture.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3098">この要素がキャプチャを保持していない場合は、このメソッドを呼び出しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3098">If this element did not hold the capture, calling this method has no effect.</span></span> <span data-ttu-id="e1989-3099">値をチェック<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>このメソッドを呼び出す前にします。</span><span class="sxs-lookup"><span data-stu-id="e1989-3099">Consider checking the value of <xref:System.Windows.UIElement3D.IsStylusCaptured%2A> before you call this method.</span></span>  
  
 <span data-ttu-id="e1989-3100"><xref:System.Windows.UIElement3D.ReleaseStylusCapture%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3100"><xref:System.Windows.UIElement3D.ReleaseStylusCapture%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3101">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3101">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberSignature Language="F#" Value="member this.ReleaseTouchCapture : System.Windows.Input.TouchDevice -&gt; bool" Usage="uIElement3D.ReleaseTouchCapture touchDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">
          <span data-ttu-id="e1989-3102">解放の対象となるデバイス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3102">The device to release.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-3103">指定されたタッチ デバイスをこの要素から解放することを試みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3103">Attempts to release the specified touch device from this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-3104">タッチ デバイスが解放された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3104">
              <see langword="true" /> if the touch device is released; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e1989-3105">
            <paramref name="touchDevice" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3105">
              <paramref name="touchDevice" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit&#xA;override this.RemoveHandler : System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="uIElement3D.RemoveHandler (routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <span data-ttu-id="e1989-3106">ハンドラーがアタッチされているルーティング イベントの識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3106">The identifier of the routed event for which the handler is attached.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="e1989-3107">この要素のイベント ハンドラー コレクションから削除する特定のハンドラー実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3107">The specific handler implementation to remove from the event handler collection on this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1989-3108">指定したルーティング イベント ハンドラーをこの要素から削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3108">Removes the specified routed event handler from this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3109">これを使用するための最も一般的なシナリオ[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]を実装する場合は、 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 「ラッパー」イベントに関連付けられたカスタム ルーティング イベントをハンドラーでの「削除」するロジックを実装するときに具体的には、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]レベル。</span><span class="sxs-lookup"><span data-stu-id="e1989-3109">The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] "wrapper" event that is associated with a custom routed event, specifically when you implement the "remove" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level.</span></span>  
  
 <span data-ttu-id="e1989-3110">このメソッドを呼び出しても何も起こりませんメソッド呼び出しの入力パラメーターと一致する条件で登録されたハンドラーがない場合。</span><span class="sxs-lookup"><span data-stu-id="e1989-3110">Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.</span></span>  
  
 <span data-ttu-id="e1989-3111">複数のイベント ハンドラー ストアが削除される最初のハンドラーにのみ、条件に一致する 1 つのハンドラーがアタッチされます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3111">If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.</span></span> <span data-ttu-id="e1989-3112">この動作は整合[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]の動作、`-=`演算子。</span><span class="sxs-lookup"><span data-stu-id="e1989-3112">This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.</span></span>  
  
 <span data-ttu-id="e1989-3113">どちらも`routedEvent`も`handler`あります`null`します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3113">Neither `routedEvent` nor `handler` may be `null`.</span></span> <span data-ttu-id="e1989-3114">いずれかの値として提供しようとしています。`null`で例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3114">Attempting to provide either value as `null` will raise an exception.</span></span>  
  
 <span data-ttu-id="e1989-3115">このメソッドは無視、`handledEventsToo`場合は、ハンドラーが最初に提供されているパラメーターについては、追加、<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>処理済みイベントの処理を有効に署名します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3115">This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events.</span></span> <span data-ttu-id="e1989-3116">ハンドラーのいずれかの型が削除されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3116">Either type of handler is removed.</span></span>  
  
 <span data-ttu-id="e1989-3117"><xref:System.Windows.UIElement3D.RemoveHandler%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3117"><xref:System.Windows.UIElement3D.RemoveHandler%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3118">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3118">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeCommandBindings : unit -&gt; bool" Usage="uIElement3D.ShouldSerializeCommandBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3119">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.UIElement3D.CommandBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3119">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-3120">
            <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.UIElement3D.CommandBindings" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3120">
              <see langword="true" /> if the <see cref="P:System.Windows.UIElement3D.CommandBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3121">これにより返されます`true`場合<xref:System.Windows.UIElement3D.CommandBindings%2A>がローカルに設定します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3121">This will return `true` if <xref:System.Windows.UIElement3D.CommandBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="e1989-3122">これは、`ShouldSerialize`メソッドが提供されますので、<xref:System.Windows.UIElement3D.CommandBindings%2A>プロパティには、単純な既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3122">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement3D.CommandBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="e1989-3123">このメソッドは、プロパティが既定値から変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3123">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="e1989-3124">デザイナーを開発またはコントロールを組み込む独自に開発する場合に通常、このメソッドが呼び出す、<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3124">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-3125">詳細については、次を参照してください。 [ShouldSerialize メソッドとリセット メソッドによる既定値を定義する](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3125">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 <span data-ttu-id="e1989-3126"><xref:System.Windows.UIElement3D.ShouldSerializeCommandBindings%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3126"><xref:System.Windows.UIElement3D.ShouldSerializeCommandBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3127">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3127">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement3D.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeInputBindings : unit -&gt; bool" Usage="uIElement3D.ShouldSerializeInputBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3128">シリアル化プロセスが、このクラスのインスタンスに関する <see cref="P:System.Windows.UIElement3D.InputBindings" /> プロパティの内容をシリアル化する必要があるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3128">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property on instances of this class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1989-3129">
            <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.Windows.UIElement3D.InputBindings" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3129">
              <see langword="true" /> if the <see cref="P:System.Windows.UIElement3D.InputBindings" /> property value should be serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3130">これにより返されます`true`場合<xref:System.Windows.UIElement3D.InputBindings%2A>がローカルに設定します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3130">This will return `true` if <xref:System.Windows.UIElement3D.InputBindings%2A> is locally set.</span></span>  
  
 <span data-ttu-id="e1989-3131">これは、`ShouldSerialize`メソッドが提供されますので、<xref:System.Windows.UIElement3D.InputBindings%2A>プロパティには、単純な既定値はありません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3131">This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement3D.InputBindings%2A> property does not have a simple default value.</span></span> <span data-ttu-id="e1989-3132">このメソッドは、プロパティが既定値から変更されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3132">This method indicates whether the property has changed from its default value.</span></span> <span data-ttu-id="e1989-3133">デザイナーを開発またはコントロールを組み込む独自に開発する場合に通常、このメソッドが呼び出す、<xref:System.Windows.UIElement3D>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3133">You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement3D>.</span></span>  
  
 <span data-ttu-id="e1989-3134">詳細については、次を参照してください。 [ShouldSerialize メソッドとリセット メソッドによる既定値を定義する](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3134">For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).</span></span>  
  
 <span data-ttu-id="e1989-3135"><xref:System.Windows.UIElement3D.ShouldSerializeInputBindings%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3135"><xref:System.Windows.UIElement3D.ShouldSerializeInputBindings%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3136">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3136">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonDown : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3137">この要素の上にポインターがある状態でスタイラス ボタンが押されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3137">Occurs when the stylus button is pressed while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3138">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusButtonDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3138">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3139">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusButtonDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3139">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3140">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3140">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3141">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3141">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3142"><xref:System.Windows.UIElement3D.StylusButtonDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3142"><xref:System.Windows.UIElement3D.StylusButtonDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3143">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3143">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3144">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3144">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3145">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3145">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusButtonDownEvent>|  
|<span data-ttu-id="e1989-3146">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3146">Routing strategy</span></span>|<span data-ttu-id="e1989-3147">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3147">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3148">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3148">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-3149">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusButtonDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3149">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusButtonDown>.</span></span>  
  
-   <span data-ttu-id="e1989-3150">オーバーライド<xref:System.Windows.UIElement3D.OnStylusButtonDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3150">Override <xref:System.Windows.UIElement3D.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusButtonDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3151">
            <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3151">Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3152">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3152">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3153">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3153">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3154">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3154">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3155">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3155">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3156">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3156">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3157"><xref:System.Windows.UIElement3D.StylusButtonDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3157"><xref:System.Windows.UIElement3D.StylusButtonDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3158">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3158">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberSignature Language="F#" Value="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " Usage="member this.StylusButtonUp : System.Windows.Input.StylusButtonEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3159">この要素の上にポインターがある状態でスタイラス ボタンが離されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3159">Occurs when the stylus button is released while the pointer is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3160">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusButtonUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3160">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3161">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusButtonUp>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3161">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3162">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3162">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3163">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3163">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3164"><xref:System.Windows.UIElement3D.StylusButtonUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3164"><xref:System.Windows.UIElement3D.StylusButtonUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3165">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3165">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3166">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3166">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3167">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3167">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusButtonUpEvent>|  
|<span data-ttu-id="e1989-3168">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3168">Routing strategy</span></span>|<span data-ttu-id="e1989-3169">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3169">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3170">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3170">Delegate</span></span>|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   <span data-ttu-id="e1989-3171">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusButtonUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3171">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusButtonUp>.</span></span>  
  
-   <span data-ttu-id="e1989-3172">オーバーライド<xref:System.Windows.UIElement3D.OnStylusButtonUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3172">Override <xref:System.Windows.UIElement3D.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement3D.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusButtonUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusButtonUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3173">
            <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3173">Identifies the <see cref="E:System.Windows.UIElement3D.StylusButtonUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3174">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3174">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3175">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3175">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3176">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3176">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3177">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3177">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3178">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3178">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3179"><xref:System.Windows.UIElement3D.StylusButtonUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3179"><xref:System.Windows.UIElement3D.StylusButtonUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3180">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3180">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberSignature Language="F#" Value="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " Usage="member this.StylusDown : System.Windows.Input.StylusDownEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3181">この要素上でスタイラスがデジタイザーに触れたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3181">Occurs when the stylus touches the digitizer while the stylus is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3182">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusDown>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3182">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusDown> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3183">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusDown>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3183">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3184">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3184">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3185">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3185">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3186"><xref:System.Windows.UIElement3D.StylusDown> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3186"><xref:System.Windows.UIElement3D.StylusDown> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3187">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3187">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3188">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3188">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3189">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3189">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusDownEvent>|  
|<span data-ttu-id="e1989-3190">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3190">Routing strategy</span></span>|<span data-ttu-id="e1989-3191">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3191">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3192">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3192">Delegate</span></span>|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   <span data-ttu-id="e1989-3193">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3193">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusDown>.</span></span>  
  
-   <span data-ttu-id="e1989-3194">オーバーライド<xref:System.Windows.UIElement3D.OnStylusDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3194">Override <xref:System.Windows.UIElement3D.OnStylusDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3195">
            <see cref="E:System.Windows.UIElement3D.StylusDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3195">Identifies the <see cref="E:System.Windows.UIElement3D.StylusDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3196">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3196">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3197">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3197">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3198">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3198">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3199">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3199">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3200">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3200">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3201"><xref:System.Windows.UIElement3D.StylusDownEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3201"><xref:System.Windows.UIElement3D.StylusDownEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3202">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3202">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberSignature Language="F#" Value="member this.StylusEnter : System.Windows.Input.StylusEventHandler " Usage="member this.StylusEnter : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3203">スタイラスがこの要素の境界内に入ったときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3203">Occurs when the stylus enters the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3204"><xref:System.Windows.UIElement3D.StylusEnter> [ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)直接イベント ルーティング方法の処理を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3204"><xref:System.Windows.UIElement3D.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="e1989-3205">ルート; は直接ルーティング イベントは発生しません代わりが処理される同じ要素で発生した場所。</span><span class="sxs-lookup"><span data-stu-id="e1989-3205">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="e1989-3206">ただし、ルーティング イベントの動作、スタイルのイベント トリガーなどの他の側面は有効にします。</span><span class="sxs-lookup"><span data-stu-id="e1989-3206">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="e1989-3207"><xref:System.Windows.UIElement3D.StylusEnter>スタイラスがこのイベントの詳細、要素の境界内に入る時点を追跡しますが文字どおり報告された、<xref:System.Windows.UIElement3D.IsStylusOver%2A>からプロパティ値が変更された`false`に`true`この要素。</span><span class="sxs-lookup"><span data-stu-id="e1989-3207">Although <xref:System.Windows.UIElement3D.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsStylusOver%2A> property value has changed from `false` to `true` on this element.</span></span>  
  
 <span data-ttu-id="e1989-3208">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusEnter>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3208">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3209">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusEnter>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3209">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3210">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3210">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3211">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3211">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3212"><xref:System.Windows.UIElement3D.StylusEnter> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3212"><xref:System.Windows.UIElement3D.StylusEnter> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3213">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3213">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3214">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3214">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3215">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3215">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusEnterEvent>|  
|<span data-ttu-id="e1989-3216">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3216">Routing strategy</span></span>|<span data-ttu-id="e1989-3217">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-3217">Direct</span></span>|  
|<span data-ttu-id="e1989-3218">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3218">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-3219">オーバーライド<xref:System.Windows.UIElement3D.OnStylusEnter%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3219">Override <xref:System.Windows.UIElement3D.OnStylusEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3220">
            <see cref="E:System.Windows.UIElement3D.StylusEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3220">Identifies the <see cref="E:System.Windows.UIElement3D.StylusEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3221">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3221">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3222">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3222">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3223">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3223">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3224">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3224">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3225">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3225">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3226"><xref:System.Windows.UIElement3D.StylusEnterEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3226"><xref:System.Windows.UIElement3D.StylusEnterEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3227">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3227">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberSignature Language="F#" Value="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInAirMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3228">デジタイザーに実際に触れることなく、要素上でスタイラスを動かしたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3228">Occurs when the stylus moves over an element without actually touching the digitizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3229">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusInAirMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3229">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3230">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusInAirMove>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3230">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3231">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3231">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3232">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3232">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3233"><xref:System.Windows.UIElement3D.StylusInAirMove> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3233"><xref:System.Windows.UIElement3D.StylusInAirMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3234">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3234">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3235">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3235">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3236">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3236">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusInAirMoveEvent>|  
|<span data-ttu-id="e1989-3237">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3237">Routing strategy</span></span>|<span data-ttu-id="e1989-3238">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3238">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3239">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3239">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-3240">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusInAirMove>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3240">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusInAirMove>.</span></span>  
  
-   <span data-ttu-id="e1989-3241">オーバーライド<xref:System.Windows.UIElement3D.OnStylusInAirMove%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3241">Override <xref:System.Windows.UIElement3D.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInAirMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusInAirMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3242">
            <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3242">Identifies the <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3243">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3243">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3244">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3244">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3245">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3245">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3246">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3246">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3247">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3247">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3248"><xref:System.Windows.UIElement3D.StylusInAirMoveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3248"><xref:System.Windows.UIElement3D.StylusInAirMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3249">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3249">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberSignature Language="F#" Value="member this.StylusInRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusInRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3250">この要素上で検出可能になるまでスタイラスがデジタイザーに近づいたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3250">Occurs when the stylus is close enough to the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3251">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusInRange>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3251">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3252">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusInRange>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3252">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3253">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3253">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3254">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3254">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3255"><xref:System.Windows.UIElement3D.StylusInRange> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3255"><xref:System.Windows.UIElement3D.StylusInRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3256">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3256">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3257">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3257">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3258">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3258">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusInRangeEvent>|  
|<span data-ttu-id="e1989-3259">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3259">Routing strategy</span></span>|<span data-ttu-id="e1989-3260">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3260">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3261">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3261">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-3262">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusInRange>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3262">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusInRange>.</span></span>  
  
-   <span data-ttu-id="e1989-3263">オーバーライド<xref:System.Windows.UIElement3D.OnStylusInRange%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3263">Override <xref:System.Windows.UIElement3D.OnStylusInRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusInRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusInRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3264">
            <see cref="E:System.Windows.UIElement3D.StylusInRange" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3264">Identifies the <see cref="E:System.Windows.UIElement3D.StylusInRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3265">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3265">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3266">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3266">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3267">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3267">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3268">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3268">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3269">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3269">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3270"><xref:System.Windows.UIElement3D.StylusInRangeEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3270"><xref:System.Windows.UIElement3D.StylusInRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3271">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3271">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberSignature Language="F#" Value="member this.StylusLeave : System.Windows.Input.StylusEventHandler " Usage="member this.StylusLeave : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3272">スタイラスが要素の境界内から出たときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3272">Occurs when the stylus leaves the bounds of the element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3273"><xref:System.Windows.UIElement3D.StylusLeave> [ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)直接イベント ルーティング方法の処理を使用します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3273"><xref:System.Windows.UIElement3D.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy.</span></span> <span data-ttu-id="e1989-3274">ルート; は直接ルーティング イベントは発生しません代わりが処理される同じ要素で発生した場所。</span><span class="sxs-lookup"><span data-stu-id="e1989-3274">Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.</span></span> <span data-ttu-id="e1989-3275">ただし、ルーティング イベントの動作、スタイルのイベント トリガーなどの他の側面は有効にします。</span><span class="sxs-lookup"><span data-stu-id="e1989-3275">However, they do enable other aspects of routed event behavior, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="e1989-3276"><xref:System.Windows.UIElement3D.StylusLeave> 、スタイラスがこのイベントの要素の境界の詳細は時点を追跡しますが文字どおり報告された、<xref:System.Windows.UIElement3D.IsStylusOver%2A>からプロパティ値が変更された`true`に`false`この要素にします。</span><span class="sxs-lookup"><span data-stu-id="e1989-3276">Although <xref:System.Windows.UIElement3D.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement3D.IsStylusOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
 <span data-ttu-id="e1989-3277">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusLeave>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3277">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3278">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusLeave>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3278">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3279">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3279">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3280">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3280">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3281"><xref:System.Windows.UIElement3D.StylusLeave> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3281"><xref:System.Windows.UIElement3D.StylusLeave> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3282">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3282">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3283">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3283">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3284">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3284">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusLeaveEvent>|  
|<span data-ttu-id="e1989-3285">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3285">Routing strategy</span></span>|<span data-ttu-id="e1989-3286">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-3286">Direct</span></span>|  
|<span data-ttu-id="e1989-3287">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3287">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-3288">オーバーライド<xref:System.Windows.UIElement3D.OnStylusLeave%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3288">Override <xref:System.Windows.UIElement3D.OnStylusLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3289">
            <see cref="E:System.Windows.UIElement3D.StylusLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3289">Identifies the <see cref="E:System.Windows.UIElement3D.StylusLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3290">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3290">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3291">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3291">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3292">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3292">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3293">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3293">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3294">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3294">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3295"><xref:System.Windows.UIElement3D.StylusLeaveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3295"><xref:System.Windows.UIElement3D.StylusLeaveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3296">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3296">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberSignature Language="F#" Value="member this.StylusMove : System.Windows.Input.StylusEventHandler " Usage="member this.StylusMove : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3297">スタイラスがこの要素上を移動すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3297">Occurs when the stylus moves over this element.</span>
          </span>
          <span data-ttu-id="e1989-3298">このイベントを発生させるには、デジタイザー上でスタイラスを移動する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3298">The stylus must move while on the digitizer to raise this event.</span>
          </span>
          <span data-ttu-id="e1989-3299">それ以外の場合は、代わりに <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3299">Otherwise, <see cref="E:System.Windows.UIElement3D.StylusInAirMove" /> is raised instead.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3300">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusMove>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3300">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusMove> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3301">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusMove>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3301">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3302">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3302">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3303">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3303">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3304"><xref:System.Windows.UIElement3D.StylusMove> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3304"><xref:System.Windows.UIElement3D.StylusMove> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3305">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3305">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3306">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3306">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3307">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3307">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusMoveEvent>|  
|<span data-ttu-id="e1989-3308">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3308">Routing strategy</span></span>|<span data-ttu-id="e1989-3309">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3309">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3310">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3310">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-3311">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusMove>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3311">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusMove>.</span></span>  
  
-   <span data-ttu-id="e1989-3312">オーバーライド<xref:System.Windows.UIElement3D.OnStylusMove%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3312">Override <xref:System.Windows.UIElement3D.OnStylusMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3313">
            <see cref="E:System.Windows.UIElement3D.StylusMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3313">Identifies the <see cref="E:System.Windows.UIElement3D.StylusMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3314">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3314">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3315">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3315">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3316">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3316">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3317">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3317">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3318">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3318">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3319"><xref:System.Windows.UIElement3D.StylusMoveEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3319"><xref:System.Windows.UIElement3D.StylusMoveEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3320">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3320">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberSignature Language="F#" Value="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " Usage="member this.StylusOutOfRange : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3321">この要素上でスタイラスが検出可能になるにはデジタイザーから離れすぎているときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3321">Occurs when the stylus is too far from the digitizer to be detected, while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3322">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusOutOfRange>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3322">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3323">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusOutOfRange>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3323">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3324">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3324">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3325">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3325">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3326"><xref:System.Windows.UIElement3D.StylusOutOfRange> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3326"><xref:System.Windows.UIElement3D.StylusOutOfRange> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3327">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3327">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3328">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3328">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3329">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3329">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusOutOfRangeEvent>|  
|<span data-ttu-id="e1989-3330">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3330">Routing strategy</span></span>|<span data-ttu-id="e1989-3331">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3331">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3332">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3332">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-3333">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3333">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>.</span></span>  
  
-   <span data-ttu-id="e1989-3334">オーバーライド<xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3334">Override <xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusOutOfRangeEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusOutOfRangeEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3335">
            <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3335">Identifies the <see cref="E:System.Windows.UIElement3D.StylusOutOfRange" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3336">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3336">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3337">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3337">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3338">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3338">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3339">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3339">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3340">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3340">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3341"><xref:System.Windows.UIElement3D.StylusOutOfRangeEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3341"><xref:System.Windows.UIElement3D.StylusOutOfRangeEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3342">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3342">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberSignature Language="F#" Value="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " Usage="member this.StylusSystemGesture : System.Windows.Input.StylusSystemGestureEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3343">ユーザーがいずれかのスタイラス ジェスチャを実行したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3343">Occurs when a user performs one of several stylus gestures.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3344">スタイラス ジェスチャの詳細については、次を参照してください。<xref:System.Windows.Input.SystemGesture>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3344">For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.</span></span>  
  
 <span data-ttu-id="e1989-3345">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusSystemGesture>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3345">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3346">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusSystemGesture>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3346">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3347">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3347">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3348">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3348">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3349"><xref:System.Windows.UIElement3D.StylusSystemGesture> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3349"><xref:System.Windows.UIElement3D.StylusSystemGesture> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3350">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3350">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3351">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3351">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3352">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3352">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusSystemGestureEvent>|  
|<span data-ttu-id="e1989-3353">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3353">Routing strategy</span></span>|<span data-ttu-id="e1989-3354">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3354">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3355">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3355">Delegate</span></span>|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   <span data-ttu-id="e1989-3356">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3356">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>.</span></span>  
  
-   <span data-ttu-id="e1989-3357">オーバーライド<xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3357">Override <xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusSystemGestureEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusSystemGestureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3358">
            <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3358">Identifies the <see cref="E:System.Windows.UIElement3D.StylusSystemGesture" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3359">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3359">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3360">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3360">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3361">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3361">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3362">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3362">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3363">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3363">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3364"><xref:System.Windows.UIElement3D.StylusSystemGestureEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3364"><xref:System.Windows.UIElement3D.StylusSystemGestureEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3365">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3365">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberSignature Language="F#" Value="member this.StylusUp : System.Windows.Input.StylusEventHandler " Usage="member this.StylusUp : System.Windows.Input.StylusEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3366">ユーザーがこの要素上でスタイラスをデジタイザーから離したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3366">Occurs when the user raises the stylus off the digitizer while it is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3367">このイベントのエイリアスを作成する、<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.StylusUp>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3367">This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.StylusUp> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3368">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.StylusUp>イベントは、基になるに関連付けられている<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3368">Event handlers that are attached to the <xref:System.Windows.UIElement3D.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3369">タッチ、マウス、およびスタイラス入力には、特定のリレーションシップに存在します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3369">Touch, mouse, and stylus input exist in a particular relationship.</span></span> <span data-ttu-id="e1989-3370">詳細については、次を参照してください。 [Windows Vista でタッチ入力のサポート](http://go.microsoft.com/fwlink/?LinkId=160818)と[入力の概要](~/docs/framework/wpf/advanced/input-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3370">For more information, see [Touch Input Support in Windows Vista](http://go.microsoft.com/fwlink/?LinkId=160818) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="e1989-3371"><xref:System.Windows.UIElement3D.StylusUp> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3371"><xref:System.Windows.UIElement3D.StylusUp> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3372">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3372">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3373">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3373">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3374">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3374">Identifier field</span></span>|<xref:System.Windows.UIElement3D.StylusUpEvent>|  
|<span data-ttu-id="e1989-3375">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3375">Routing strategy</span></span>|<span data-ttu-id="e1989-3376">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3376">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3377">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3377">Delegate</span></span>|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   <span data-ttu-id="e1989-3378">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewStylusUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3378">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewStylusUp>.</span></span>  
  
-   <span data-ttu-id="e1989-3379">オーバーライド<xref:System.Windows.UIElement3D.OnStylusUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3379">Override <xref:System.Windows.UIElement3D.OnStylusUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable StylusUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.StylusUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3380">
            <see cref="E:System.Windows.UIElement3D.StylusUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3380">Identifies the <see cref="E:System.Windows.UIElement3D.StylusUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3381">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3381">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3382">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3382">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3383">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3383">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3384">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3384">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3385">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3385">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3386"><xref:System.Windows.UIElement3D.StylusUpEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3386"><xref:System.Windows.UIElement3D.StylusUpEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3387">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3387">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberSignature Language="F#" Value="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " Usage="member this.TextInput : System.Windows.Input.TextCompositionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3388">この要素がデバイスに依存しない方法でテキストを取得したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3388">Occurs when this element gets text in a device-independent manner.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3389"><xref:System.Windows.UIElement3D.TextInput>イベントでは、コンポーネントまたはデバイスに依存しない方法でテキスト入力をリッスンするアプリケーション。</span><span class="sxs-lookup"><span data-stu-id="e1989-3389">The <xref:System.Windows.UIElement3D.TextInput> event allows a component or application to listen for text input in a device-independent manner.</span></span> <span data-ttu-id="e1989-3390">キーボードの主要な手段は、 <xref:System.Windows.UIElement3D.TextInput>、音声認識、手書き入力、およびその他の入力デバイスにもに上げることができますが、<xref:System.Windows.UIElement3D.TextInput>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3390">The keyboard is the primary means of <xref:System.Windows.UIElement3D.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement3D.TextInput>.</span></span>  
  
 <span data-ttu-id="e1989-3391">キーの組み合わせが原因: 既定のキーボードまたは入力方式エディターを通じて-複数のキー イベントが 1 つだけのテキスト入力イベントを発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e1989-3391">Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.</span></span>  
  
 <span data-ttu-id="e1989-3392">このイベントのエイリアスを作成する、<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>添付イベントは、このクラスのように<xref:System.Windows.UIElement3D.TextInput>一部であるクラスのメンバーのリスト<xref:System.Windows.UIElement3D>は基本要素として継承されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3392">This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event for this class, so that <xref:System.Windows.UIElement3D.TextInput> is part of the class members list when <xref:System.Windows.UIElement3D> is inherited as a base element.</span></span> <span data-ttu-id="e1989-3393">イベント ハンドラーに関連付けられている、<xref:System.Windows.UIElement3D.TextInput>イベントは、基になるに関連付けられている<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType>添付イベントと同じイベント データ インスタンスを受信します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3393">Event handlers that are attached to the <xref:System.Windows.UIElement3D.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> attached event and receive the same event data instance.</span></span>  
  
 <span data-ttu-id="e1989-3394"><xref:System.Windows.UIElement3D.TextInput> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3394"><xref:System.Windows.UIElement3D.TextInput> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3395">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3395">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3396">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3396">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3397">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3397">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TextInputEvent>|  
|<span data-ttu-id="e1989-3398">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3398">Routing strategy</span></span>|<span data-ttu-id="e1989-3399">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3399">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3400">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3400">Delegate</span></span>|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   <span data-ttu-id="e1989-3401">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewTextInput>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3401">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTextInput>.</span></span>  
  
-   <span data-ttu-id="e1989-3402">オーバーライド<xref:System.Windows.UIElement3D.OnTextInput%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3402">Override <xref:System.Windows.UIElement3D.OnTextInput%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextInputEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TextInputEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3403">
            <see cref="E:System.Windows.UIElement3D.TextInput" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3403">Identifies the <see cref="E:System.Windows.UIElement3D.TextInput" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3404">ルーティング イベントの識別子は、ルーティング イベントの登録時に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3404">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="e1989-3405">これらの識別子には、識別名、所有者の種類、ハンドラーの型、ルーティング方法、およびイベントの所有者を追加するためのユーティリティ メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3405">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="e1989-3406">これらの識別子を使用して、クラスのハンドラーを追加できます。</span><span class="sxs-lookup"><span data-stu-id="e1989-3406">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="e1989-3407">ルーティング イベントの登録方法の詳細については、<xref:System.Windows.EventManager.RegisterRoutedEvent%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3407">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="e1989-3408">ルーティング イベントの識別子を使用して、クラス ハンドラーを追加する方法の詳細については、<xref:System.Windows.EventManager.RegisterClassHandler%2A> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3408">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 <span data-ttu-id="e1989-3409"><xref:System.Windows.UIElement3D.TextInputEvent> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3409"><xref:System.Windows.UIElement3D.TextInputEvent> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3410">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3410">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchDown : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3411">指がこの要素の上にある間に、その指で画面に触れると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3411">Occurs when a finger touches the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3412">既定で、<xref:System.Windows.UIElement3D.PreviewTouchDown>と<xref:System.Windows.UIElement3D.TouchDown>指が画面をタッチし、移動するまで、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3412">By default, the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events do not occur until a finger touches the screen and moves.</span></span> <span data-ttu-id="e1989-3413">画面に指を押すと、により、キーを押して移動せずに保持しているとの動作を保持する<xref:System.Windows.Input.Stylus>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3413">Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>.</span></span> <span data-ttu-id="e1989-3414">プレス アンド ホールド動作では、マウスの右クリックに相当します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3414">The press and hold behavior is equivalent to a mouse right-click.</span></span>  
  
 <span data-ttu-id="e1989-3415">発生する、<xref:System.Windows.UIElement3D.PreviewTouchDown>と<xref:System.Windows.UIElement3D.TouchDown>、画面に触れると、すぐに発生するイベントの設定、<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType>添付プロパティを`false`この要素の。</span><span class="sxs-lookup"><span data-stu-id="e1989-3415">To cause the <xref:System.Windows.UIElement3D.PreviewTouchDown> and <xref:System.Windows.UIElement3D.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> attached property to `false` for this element.</span></span>  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3416">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3416">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3417">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3417">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchDownEvent>|  
|<span data-ttu-id="e1989-3418">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3418">Routing strategy</span></span>|<span data-ttu-id="e1989-3419">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3419">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3420">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3420">Delegate</span></span>|<span data-ttu-id="e1989-3421"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-3421"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-3422">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewTouchDown>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3422">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchDown>.</span></span>  
  
-   <span data-ttu-id="e1989-3423">オーバーライド<xref:System.Windows.UIElement3D.OnTouchDown%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3423">Override <xref:System.Windows.UIElement3D.OnTouchDown%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3424">
            <see cref="E:System.Windows.UIElement3D.TouchDown" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3424">Identifies the <see cref="E:System.Windows.UIElement3D.TouchDown" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberSignature Language="F#" Value="member this.TouchEnter : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchEnter : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3425">タッチがこの要素の境界の外部から内部に移動すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3425">Occurs when a touch moves from outside to inside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3426">常に、このイベントが発生しますが、タッチ デバイスがこの要素にキャプチャされるかどうか。</span><span class="sxs-lookup"><span data-stu-id="e1989-3426">This event is always raised, whether or not the touch device is captured to this element.</span></span>  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3427">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3427">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3428">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3428">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchEnterEvent>|  
|<span data-ttu-id="e1989-3429">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3429">Routing strategy</span></span>|<span data-ttu-id="e1989-3430">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-3430">Direct</span></span>|  
|<span data-ttu-id="e1989-3431">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3431">Delegate</span></span>|<span data-ttu-id="e1989-3432"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-3432"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-3433">オーバーライド<xref:System.Windows.UIElement3D.OnTouchEnter%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3433">Override <xref:System.Windows.UIElement3D.OnTouchEnter%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3434">
            <see cref="E:System.Windows.UIElement3D.TouchEnter" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3434">Identifies the <see cref="E:System.Windows.UIElement3D.TouchEnter" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCaptured : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesCaptured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3435">この要素にキャプチャされているすべてのタッチ デバイスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3435">Gets all touch devices that are captured to this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-3436">この要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3436">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesCapturedWithin : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesCapturedWithin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3437">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされているすべてのタッチ デバイスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3437">Gets all touch devices that are captured to this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-3438">この要素またはそのビジュアル ツリー内のいずれかの子要素にキャプチャされている <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3438">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are captured to this element or any child elements in its visual tree.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesDirectlyOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesDirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3439">この要素上にあるすべてのタッチ デバイスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3439">Gets all touch devices that are over this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-3440">この要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3440">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TouchesOver : seq&lt;System.Windows.Input.TouchDevice&gt;" Usage="System.Windows.UIElement3D.TouchesOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3441">この要素またはそのビジュアル ツリー内のいずれかの子要素上にあるすべてのタッチ デバイスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3441">Gets all touch devices that are over this element or any child elements in its visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-3442">この要素またはそのビジュアル ツリー内のいずれかの子要素上にある <see cref="T:System.Windows.Input.TouchDevice" /> オブジェクトの列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3442">An enumeration of <see cref="T:System.Windows.Input.TouchDevice" /> objects that are over this element or any child elements in its visual tree.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberSignature Language="F#" Value="member this.TouchLeave : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchLeave : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3443">タッチがこの要素の境界の内部から外部に移動すると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3443">Occurs when a touch moves from inside to outside the bounds of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3444">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3444">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3445">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3445">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchLeaveEvent>|  
|<span data-ttu-id="e1989-3446">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3446">Routing strategy</span></span>|<span data-ttu-id="e1989-3447">直接</span><span class="sxs-lookup"><span data-stu-id="e1989-3447">Direct</span></span>|  
|<span data-ttu-id="e1989-3448">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3448">Delegate</span></span>|<span data-ttu-id="e1989-3449"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-3449"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-3450">オーバーライド<xref:System.Windows.UIElement3D.OnTouchLeave%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3450">Override <xref:System.Windows.UIElement3D.OnTouchLeave%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3451">
            <see cref="E:System.Windows.UIElement3D.TouchLeave" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3451">Identifies the <see cref="E:System.Windows.UIElement3D.TouchLeave" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberSignature Language="F#" Value="member this.TouchMove : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchMove : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3452">この要素の上に指があるときに、その指を画面上で動かすと発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3452">Occurs when a finger moves on the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3453">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3453">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3454">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3454">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchMoveEvent>|  
|<span data-ttu-id="e1989-3455">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3455">Routing strategy</span></span>|<span data-ttu-id="e1989-3456">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3456">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3457">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3457">Delegate</span></span>|<span data-ttu-id="e1989-3458"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-3458"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-3459">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewTouchMove>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3459">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchMove>.</span></span>  
  
-   <span data-ttu-id="e1989-3460">オーバーライド<xref:System.Windows.UIElement3D.OnTouchMove%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3460">Override <xref:System.Windows.UIElement3D.OnTouchMove%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3461">
            <see cref="E:System.Windows.UIElement3D.TouchMove" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3461">Identifies the <see cref="E:System.Windows.UIElement3D.TouchMove" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement3D.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberSignature Language="F#" Value="member this.TouchUp : EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " Usage="member this.TouchUp : System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3462">この要素の上に指があるときに、その指が画面から離れると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3462">Occurs when a finger is raised off of the screen while the finger is over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="e1989-3463">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3463">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3464">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3464">Identifier field</span></span>|<xref:System.Windows.UIElement3D.TouchUpEvent>|  
|<span data-ttu-id="e1989-3465">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="e1989-3465">Routing strategy</span></span>|<span data-ttu-id="e1989-3466">バブル</span><span class="sxs-lookup"><span data-stu-id="e1989-3466">Bubbling</span></span>|  
|<span data-ttu-id="e1989-3467">Delegate</span><span class="sxs-lookup"><span data-stu-id="e1989-3467">Delegate</span></span>|<span data-ttu-id="e1989-3468"><xref:System.EventHandler%601> 型の <xref:System.Windows.Input.TouchEventArgs>。</span><span class="sxs-lookup"><span data-stu-id="e1989-3468"><xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.</span></span>|  
  
-   <span data-ttu-id="e1989-3469">対応するトンネル イベントは<xref:System.Windows.UIElement3D.PreviewTouchUp>します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3469">The corresponding tunneling event is <xref:System.Windows.UIElement3D.PreviewTouchUp>.</span></span>  
  
-   <span data-ttu-id="e1989-3470">オーバーライド<xref:System.Windows.UIElement3D.OnTouchUp%2A>派生クラスでは、このイベントに対するクラス処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e1989-3470">Override <xref:System.Windows.UIElement3D.OnTouchUp%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable TouchUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.UIElement3D.TouchUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3471">
            <see cref="E:System.Windows.UIElement3D.TouchUp" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3471">Identifies the <see cref="E:System.Windows.UIElement3D.TouchUp" /> routed event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement3D.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberSignature Language="F#" Value="member this.Visibility : System.Windows.Visibility with get, set" Usage="System.Windows.UIElement3D.Visibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3472">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] でのこの要素の可視性を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3472">Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1989-3473">列挙体の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3473">A value of the enumeration.</span>
          </span>
          <span data-ttu-id="e1989-3474">既定値は <see cref="F:System.Windows.Visibility.Visible" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3474">The default value is <see cref="F:System.Windows.Visibility.Visible" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3475">このプロパティの設定の値に影響を与えます<xref:System.Windows.UIElement3D.IsVisible%2A>が発生する可能性がさらに、<xref:System.Windows.UIElement3D.IsVisibleChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="e1989-3475">Setting this property affects the value of <xref:System.Windows.UIElement3D.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement3D.IsVisibleChanged> event.</span></span> <span data-ttu-id="e1989-3476">ただし、<xref:System.Windows.UIElement3D.IsVisible%2A>が他の要因に影響を与える、それが含まれる親の可視性の設定のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="e1989-3476">However, <xref:System.Windows.UIElement3D.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.</span></span>  
  
 <span data-ttu-id="e1989-3477">要素で<xref:System.Windows.UIElement3D.Visibility%2A>ない<xref:System.Windows.Visibility.Visible>入力イベント (またはコマンド) に参加していないと、ヒット テストでは報告されません。</span><span class="sxs-lookup"><span data-stu-id="e1989-3477">Elements where <xref:System.Windows.UIElement3D.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands) and are not reported in hit testing.</span></span>  
  
 <span data-ttu-id="e1989-3478"><xref:System.Windows.UIElement3D.Visibility%2A> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3478"><xref:System.Windows.UIElement3D.Visibility%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3479">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3479">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="e1989-3480">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="e1989-3480">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="e1989-3481">識別子フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e1989-3481">Identifier field</span></span>|<xref:System.Windows.UIElement3D.VisibilityProperty>|  
|<span data-ttu-id="e1989-3482">メタデータのプロパティを設定するには `true`</span><span class="sxs-lookup"><span data-stu-id="e1989-3482">Metadata properties set to `true`</span></span>|<span data-ttu-id="e1989-3483">なし</span><span class="sxs-lookup"><span data-stu-id="e1989-3483">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement3D.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement3D.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisibilityProperty : System.Windows.DependencyProperty" Usage="System.Windows.UIElement3D.VisibilityProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1989-3484">
            <see cref="P:System.Windows.UIElement3D.Visibility" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1989-3484">Identifies the <see cref="P:System.Windows.UIElement3D.Visibility" /> dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1989-3485"><xref:System.Windows.UIElement3D.VisibilityProperty> .NET Framework version 3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="e1989-3485"><xref:System.Windows.UIElement3D.VisibilityProperty> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="e1989-3486">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e1989-3486">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>