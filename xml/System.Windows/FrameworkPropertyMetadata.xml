<Type Name="FrameworkPropertyMetadata" FullName="System.Windows.FrameworkPropertyMetadata">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50e37bc8286c8ba1961d7a1c298161a3c9e3100c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37492939" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FrameworkPropertyMetadata : System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkPropertyMetadata extends System.Windows.UIPropertyMetadata" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkPropertyMetadata" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkPropertyMetadata&#xA;Inherits UIPropertyMetadata" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkPropertyMetadata : System::Windows::UIPropertyMetadata" />
  <TypeSignature Language="F#" Value="type FrameworkPropertyMetadata = class&#xA;    inherit UIPropertyMetadata" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIPropertyMetadata</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="0d03c-101">依存関係プロパティのメタデータを報告または適用します。特に、フレームワークに固有のプロパティのシステム特性を追加します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="0d03c-101">Reports or applies metadata for a dependency property, specifically adding framework-specific property system characteristics.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-102">このクラスから派生<xref:System.Windows.PropertyMetadata>(を通じて<xref:System.Windows.UIPropertyMetadata>)。</span><span class="sxs-lookup"><span data-stu-id="0d03c-102">This class derives from <xref:System.Windows.PropertyMetadata> (through <xref:System.Windows.UIPropertyMetadata>) .</span></span> <span data-ttu-id="0d03c-103">ほとんどの WPF フレームワーク レベルのアプリケーション開発目的の<xref:System.Windows.FrameworkPropertyMetadata>基本メタデータ型ではなく、依存関係プロパティのメタデータに使用される型<xref:System.Windows.PropertyMetadata>または<xref:System.Windows.UIPropertyMetadata>します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-103">For most WPF framework-level application development purposes, <xref:System.Windows.FrameworkPropertyMetadata> is the type used for dependency property metadata, rather than the base metadata types <xref:System.Windows.PropertyMetadata> or <xref:System.Windows.UIPropertyMetadata>.</span></span> <span data-ttu-id="0d03c-104">これは、既存の依存関係プロパティとカスタム依存関係プロパティのほとんどのシナリオの両方に当てはまります。</span><span class="sxs-lookup"><span data-stu-id="0d03c-104">This is true both for existing dependency properties and for most custom dependency property scenarios.</span></span>  
  
 <span data-ttu-id="0d03c-105">これで宣言されたメンバーのクラスを補足、<xref:System.Windows.PropertyMetadata>基底クラスが指定するか、プロパティの継承、データ バインディング、レイアウトなどの WPF フレームワーク レベルのプロパティ システム動作を報告するさまざまなブール型プロパティが含まれます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-105">The members declared by this class that supplement the <xref:System.Windows.PropertyMetadata> base class include various Boolean properties that specify or report WPF framework-level property system behavior such as property inheritance, data binding, and layout.</span></span>  
  
 <span data-ttu-id="0d03c-106">作成するためのいくつかのコンス トラクター シグネチャを<xref:System.Windows.FrameworkPropertyMetadata>インスタンスを<xref:System.Windows.FrameworkPropertyMetadataOptions>パラメーター。</span><span class="sxs-lookup"><span data-stu-id="0d03c-106">Several constructor signatures for creating a <xref:System.Windows.FrameworkPropertyMetadata> instance take a <xref:System.Windows.FrameworkPropertyMetadataOptions> parameter.</span></span> <span data-ttu-id="0d03c-107"><xref:System.Windows.FrameworkPropertyMetadataOptions>列挙体コンス トラクターの最初の動作を指定するだけ使用され、後はそれ以外の場合は公開されません<xref:System.Windows.FrameworkPropertyMetadata>を構築します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-107">The <xref:System.Windows.FrameworkPropertyMetadataOptions> enumeration is used only to specify initial behavior in the constructor, and is not otherwise exposed after <xref:System.Windows.FrameworkPropertyMetadata> is constructed.</span></span> <span data-ttu-id="0d03c-108">構築されたインスタンスを取得またはコンス トラクターの呼び出しで使用する列挙値の名前を共有するさまざまなプロパティから対応する情報を設定できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-108">From a constructed instance, you can get or set the corresponding information through various properties that share the name of the enumeration values used in the constructor call.</span></span>  
  
<a name="xamlTextUsage_FrameworkPropertyMetadata"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-109">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-109">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-110">このクラスは、通常では使用されません[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-110">This class is not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-111">次の例では、依存関係プロパティのメタデータを特定の所有者のとして取得初期基本<xref:System.Windows.PropertyMetadata>型。</span><span class="sxs-lookup"><span data-stu-id="0d03c-111">The following example gets metadata for a dependency property on a particular owner as the initial base <xref:System.Windows.PropertyMetadata> type.</span></span> <span data-ttu-id="0d03c-112">そのメタデータは<xref:System.Windows.FrameworkPropertyMetadata>します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-112">That metadata is cast to <xref:System.Windows.FrameworkPropertyMetadata>.</span></span> <span data-ttu-id="0d03c-113">有効なキャストが返された場合<xref:System.Windows.FrameworkPropertyMetadata>、し、さまざまな<xref:System.Windows.FrameworkPropertyMetadata>プロパティの値は、シンプルな UI を (非表示) で報告されます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-113">If the cast returned a valid <xref:System.Windows.FrameworkPropertyMetadata>, then various <xref:System.Windows.FrameworkPropertyMetadata> property values are reported through a simple UI (not shown).</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.PropertyMetadata" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-114">
            <see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-114">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-115">
            <see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-115">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-116">このシグネチャのすべての値を初期化する<xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A>がプロパティの既定値にします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-116">This signature initializes all values of <xref:System.Windows.FrameworkPropertyMetadata.%23ctor%2A> to their property defaults.</span></span> <span data-ttu-id="0d03c-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> `null`とさまざまな<xref:System.Windows.FrameworkPropertyMetadata>ブール型プロパティになります`false`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-117"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> will be `null`, and the various <xref:System.Windows.FrameworkPropertyMetadata> Boolean properties will be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata defaultValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="0d03c-118">依存関係プロパティの既定値。通常、特定の型の値として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-118">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-119">指定した既定値を使用して、<see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-119">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified default value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-120">指定された値の型`defaultValue`と一致するか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-120">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0d03c-121">メタデータの既定値の型に適用される依存関係プロパティの型の間に不一致がある場合は、コンパイル時に、不一致が検出できないため、デバッグが困難できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-121">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0d03c-122">既定値の型/プロパティ型の不一致の結果が実行時エラーであるために、プロパティ システムは、実行時までプロパティの有効な値を評価しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-122">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0d03c-123">値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムで特別な意味があり、依存関係プロパティの既定値として使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-123">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-124">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-124">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-125">
            <paramref name="defaultValue" /> が <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-125">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata propertyChangedCallback" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="0d03c-126">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-126">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-127">指定した <see cref="T:System.Windows.FrameworkPropertyMetadata" /> コールバックを使用して、<see cref="T:System.Windows.PropertyChangedCallback" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-127">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0d03c-128">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-128">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor1paramcallback)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (defaultValue As Object, flags As FrameworkPropertyMetadataOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="0d03c-129">依存関係プロパティの既定値。通常、特定の型の値として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-129">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="0d03c-130">メタデータ オプション フラグ (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 値の組み合わせ)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-130">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="0d03c-131">これらのオプションは、システムと対話する依存関係プロパティの特性 (レイアウトやデータ バインディングなど) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-131">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-132">指定した既定値とフレームワーク レベルのメタデータ オプションを使用して、<see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-132">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework-level metadata options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-133">指定された値の型`defaultValue`と一致するか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-133">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0d03c-134">メタデータの既定値の型に適用される依存関係プロパティの型の間に不一致がある場合は、コンパイル時に、不一致が検出できないため、デバッグが困難できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-134">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0d03c-135">既定値の型/プロパティ型の不一致の結果が実行時エラーであるために、プロパティ システムは、実行時までプロパティの有効な値を評価しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-135">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0d03c-136">値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムで特別な意味があり、依存関係プロパティの既定値として使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-136">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0d03c-137">値がセット flags でフラグとしてマークされている、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-137">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0d03c-138">メタデータが特定のプロパティ システム操作に適用されていない限り、その後、メタデータでは、プロパティの値を変更できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-138">You can subsequently change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-139">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-139">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-140">
            <paramref name="defaultValue" /> が <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-140">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="0d03c-141">依存関係プロパティの既定値。通常、特定の型の値として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-141">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="0d03c-142">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-142">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-143">指定した既定値と <see cref="T:System.Windows.FrameworkPropertyMetadata" /> コールバックを使用して、<see cref="T:System.Windows.PropertyChangedCallback" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-143">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-144">指定された値の型`defaultValue`と一致するか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-144">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0d03c-145">メタデータの既定値の型に適用される依存関係プロパティの型の間に不一致がある場合は、コンパイル時に、不一致が検出できないため、デバッグが困難できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-145">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0d03c-146">既定値の型/プロパティ型の不一致の結果が実行時エラーであるために、プロパティ システムは、実行時までプロパティの有効な値を評価しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-146">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0d03c-147">値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムで特別な意味があり、依存関係プロパティの既定値として使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-147">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-148">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-148">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor2param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-149">
            <paramref name="defaultValue" /> が <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-149">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="propertyChangedCallback">
          <span data-ttu-id="0d03c-150">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-150">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="0d03c-151">プロパティ システムがこの依存関係プロパティに対して <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> を呼び出すときに必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-151">A reference to a handler implementation will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-152">指定したコールバックを使用して、<see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-152">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-153">この実装の基本の初期化子を呼び出すし、追加、`coerceValueCallback`ベースのインスタンスでプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-153">This implementation calls a base initializer and then adds the `coerceValueCallback` by setting the property on the base instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-154">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-154">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="0d03c-155">依存関係プロパティの既定値。通常、特定の型の値として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-155">The default value of the dependency property, usually provided as a value of a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="0d03c-156">メタデータ オプション フラグ (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 値の組み合わせ)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-156">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="0d03c-157">これらのオプションは、システムと対話する依存関係プロパティの特性 (レイアウトやデータ バインディングなど) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-157">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="0d03c-158">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-158">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-159">指定した既定値、フレームワークのメタデータ オプション、および <see cref="T:System.Windows.FrameworkPropertyMetadata" /> コールバックを使用して、<see cref="T:System.Windows.PropertyChangedCallback" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-159">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified <see cref="T:System.Windows.PropertyChangedCallback" /> callback.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-160">指定された値の型`defaultValue`と一致するか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-160">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0d03c-161">メタデータの既定値の型に適用される依存関係プロパティの型の間に不一致がある場合は、コンパイル時に、不一致が検出できないため、デバッグが困難できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-161">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0d03c-162">既定値の型/プロパティ型の不一致の結果が実行時エラーであるために、プロパティ システムは、実行時までプロパティの有効な値を評価しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-162">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0d03c-163">値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムで特別な意味があり、依存関係プロパティの既定値として使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-163">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0d03c-164">値がセット flags でフラグとしてマークされている、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-164">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0d03c-165">メタデータでは、プロパティの値は、メタデータが特定のプロパティ システム操作に適用されていない限り、引き続き変更できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-165">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-166">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-166">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-167">
            <paramref name="defaultValue" /> が <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-167">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="0d03c-168">依存関係プロパティの既定値。通常、特定の型として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-168">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="0d03c-169">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-169">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="0d03c-170">プロパティ システムがこの依存関係プロパティに対して <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> を呼び出すときに必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-170">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> for this dependency property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-171">指定した既定値とコールバックを使用して、<see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-171">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-172">指定された値の型`defaultValue`と一致するか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-172">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0d03c-173">メタデータの既定値の型に適用される依存関係プロパティの型の間に不一致がある場合は、コンパイル時に、不一致が検出できないため、デバッグが困難できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-173">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0d03c-174">既定値の型/プロパティ型の不一致の結果が実行時エラーであるために、プロパティ システムは、実行時までプロパティの有効な値を評価しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-174">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0d03c-175">値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムで特別な意味があり、依存関係プロパティの既定値として使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-175">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-176">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-176">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor3param)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-177">
            <paramref name="defaultValue" /> が <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-177">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="0d03c-178">依存関係プロパティの既定値。通常、特定の型として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-178">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="0d03c-179">メタデータ オプション フラグ (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 値の組み合わせ)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-179">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="0d03c-180">これらのオプションは、システムと対話する依存関係プロパティの特性 (レイアウトやデータ バインディングなど) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-180">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="0d03c-181">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-181">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="0d03c-182">プロパティ システムがこのプロパティに対して <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> を呼び出すときに必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-182">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-183">指定した既定値、フレームワークのメタデータ オプション、およびコールバックを使用して、<see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-183">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, and specified callbacks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-184">指定された値の型`defaultValue`と一致するか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-184">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0d03c-185">メタデータの既定値の型に適用される依存関係プロパティの型の間に不一致がある場合は、コンパイル時に、不一致が検出できないため、デバッグが困難できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-185">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0d03c-186">既定値の型/プロパティ型の不一致の結果が実行時エラーであるために、プロパティ システムは、実行時までプロパティの有効な値を評価しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-186">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0d03c-187">値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムで特別な意味があり、依存関係プロパティの既定値として使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-187">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0d03c-188">値がセット flags でフラグとしてマークされている、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-188">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0d03c-189">メタデータでは、プロパティの値は、メタデータが特定のプロパティ システム操作に適用されていない限り、引き続き変更できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-189">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-190">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-190">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-191">
            <paramref name="defaultValue" /> が <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-191">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="0d03c-192">依存関係プロパティの既定値。通常、特定の型として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-192">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="0d03c-193">メタデータ オプション フラグ (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 値の組み合わせ)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-193">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="0d03c-194">これらのオプションは、システムと対話する依存関係プロパティの特性 (レイアウトやデータ バインディングなど) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-194">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="0d03c-195">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-195">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="0d03c-196">プロパティ システムがこの依存関係プロパティに対して <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> を呼び出すときに必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-196">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> on this dependency property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="0d03c-197">該当するメタデータが適用されるプロパティがプロパティ システムによってアニメーション化されないようにする場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-197">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="0d03c-198">このようなプロパティのアニメーション化を試みると、プロパティ システムでランタイム例外が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-198">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="0d03c-199">プロパティのアニメーション化を許可する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-199">
              <see langword="false" /> to permit animating the property.</span>
          </span>
          <span data-ttu-id="0d03c-200">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-200">The default is <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-201">指定した既定値、フレームワークのメタデータ オプション、指定したコールバック、およびプロパティでのアニメーションを無効にするブール値を使用して、<see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-201">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, and a Boolean that can be used to prevent animation of the property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-202">指定された値の型`defaultValue`と一致するか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-202">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0d03c-203">メタデータの既定値の型に適用される依存関係プロパティの型の間に不一致がある場合は、コンパイル時に、不一致が検出できないため、デバッグが困難できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-203">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0d03c-204">既定値の型/プロパティ型の不一致の結果が実行時エラーであるために、プロパティ システムは、実行時までプロパティの有効な値を評価しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-204">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0d03c-205">値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムで特別な意味があり、依存関係プロパティの既定値として使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-205">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0d03c-206">`isAnimationProhibited`パラメーターの初期値の設定、<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>即時ベースで宣言されたプロパティ<xref:System.Windows.UIPropertyMetadata>クラス。</span><span class="sxs-lookup"><span data-stu-id="0d03c-206">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="0d03c-207">値がセット flags でフラグとしてマークされている、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-207">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0d03c-208">メタデータでは、プロパティの値は、メタデータが特定のプロパティ システム操作に適用されていない限り、引き続き変更できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-208">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-209">次の例では、このコンス トラクターのシグネチャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-209">The following example calls this constructor signature:</span></span>  
  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-210">
            <paramref name="defaultValue" /> が <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-210">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkPropertyMetadata (object defaultValue, System.Windows.FrameworkPropertyMetadataOptions flags, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object defaultValue, valuetype System.Windows.FrameworkPropertyMetadataOptions flags, class System.Windows.PropertyChangedCallback propertyChangedCallback, class System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited, valuetype System.Windows.Data.UpdateSourceTrigger defaultUpdateSourceTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.#ctor(System.Object,System.Windows.FrameworkPropertyMetadataOptions,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback,System.Boolean,System.Windows.Data.UpdateSourceTrigger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkPropertyMetadata(System::Object ^ defaultValue, System::Windows::FrameworkPropertyMetadataOptions flags, System::Windows::PropertyChangedCallback ^ propertyChangedCallback, System::Windows::CoerceValueCallback ^ coerceValueCallback, bool isAnimationProhibited, System::Windows::Data::UpdateSourceTrigger defaultUpdateSourceTrigger);" />
      <MemberSignature Language="F#" Value="new System.Windows.FrameworkPropertyMetadata : obj * System.Windows.FrameworkPropertyMetadataOptions * System.Windows.PropertyChangedCallback * System.Windows.CoerceValueCallback * bool * System.Windows.Data.UpdateSourceTrigger -&gt; System.Windows.FrameworkPropertyMetadata" Usage="new System.Windows.FrameworkPropertyMetadata (defaultValue, flags, propertyChangedCallback, coerceValueCallback, isAnimationProhibited, defaultUpdateSourceTrigger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Object" />
        <Parameter Name="flags" Type="System.Windows.FrameworkPropertyMetadataOptions" />
        <Parameter Name="propertyChangedCallback" Type="System.Windows.PropertyChangedCallback" />
        <Parameter Name="coerceValueCallback" Type="System.Windows.CoerceValueCallback" />
        <Parameter Name="isAnimationProhibited" Type="System.Boolean" />
        <Parameter Name="defaultUpdateSourceTrigger" Type="System.Windows.Data.UpdateSourceTrigger" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="0d03c-211">依存関係プロパティの既定値。通常、特定の型として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-211">The default value of the dependency property, usually provided as a specific type.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="0d03c-212">メタデータ オプション フラグ (<see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> 値の組み合わせ)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-212">The metadata option flags (a combination of <see cref="T:System.Windows.FrameworkPropertyMetadataOptions" /> values).</span>
          </span>
          <span data-ttu-id="0d03c-213">これらのオプションは、システムと対話する依存関係プロパティの特性 (レイアウトやデータ バインディングなど) を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-213">These options specify characteristics of the dependency property that interact with systems such as layout or data binding.</span>
          </span>
        </param>
        <param name="propertyChangedCallback">
          <span data-ttu-id="0d03c-214">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-214">A reference to a handler implementation that the property system will call whenever the effective value of the property changes.</span>
          </span>
        </param>
        <param name="coerceValueCallback">
          <span data-ttu-id="0d03c-215">プロパティ システムがこのプロパティに対して <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> を呼び出すときに必ず呼び出されるハンドラー実装への参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-215">A reference to a handler implementation that will be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> against this property.</span>
          </span>
        </param>
        <param name="isAnimationProhibited">
          <span data-ttu-id="0d03c-216">該当するメタデータが適用されるプロパティがプロパティ システムによってアニメーション化されないようにする場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-216">
              <see langword="true" /> to prevent the property system from animating the property that this metadata is applied to.</span>
          </span>
          <span data-ttu-id="0d03c-217">このようなプロパティのアニメーション化を試みると、プロパティ システムでランタイム例外が発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-217">Such properties will raise a run-time exception originating from the property system if animations of them are attempted.</span>
          </span>
          <span data-ttu-id="0d03c-218">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-218">The default is <see langword="false" />.</span>
          </span>
        </param>
        <param name="defaultUpdateSourceTrigger">
          <span data-ttu-id="0d03c-219">
            <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> が <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> に設定されているバインディングをこのプロパティに対して適用するときに使用する <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-219">The <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for this property are applied that have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-220">指定した既定値、フレームワークのメタデータ オプション、指定したコールバック、プロパティでのアニメーションを無効にするブール値、および既定のデータ バインディング更新トリガーを使用して、<see cref="T:System.Windows.FrameworkPropertyMetadata" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-220">Initializes a new instance of the <see cref="T:System.Windows.FrameworkPropertyMetadata" /> class with the provided default value and framework metadata options, specified callbacks, a Boolean that can be used to prevent animation of the property, and a data-binding update trigger default.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-221">指定された値の型`defaultValue`と一致するか、このメタデータに適用される依存関係プロパティの元の登録で指定された型に関連しています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-221">The type of the value provided for `defaultValue` must match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.</span></span> <span data-ttu-id="0d03c-222">メタデータの既定値の型に適用される依存関係プロパティの型の間に不一致がある場合は、コンパイル時に、不一致が検出できないため、デバッグが困難できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-222">Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation.</span></span> <span data-ttu-id="0d03c-223">既定値の型/プロパティ型の不一致の結果が実行時エラーであるために、プロパティ システムは、実行時までプロパティの有効な値を評価しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-223">The property system does not evaluate the effective value of a property until run time, so the result of a default value type/property type mismatch is a run-time error.</span></span>  
  
 <span data-ttu-id="0d03c-224">値<xref:System.Windows.DependencyProperty.UnsetValue>プロパティ システムで特別な意味があり、依存関係プロパティの既定値として使用できません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-224">The value <xref:System.Windows.DependencyProperty.UnsetValue> has special meaning in the property system, and cannot be used as a dependency property default value.</span></span>  
  
 <span data-ttu-id="0d03c-225">`isAnimationProhibited`パラメーターの初期値の設定、<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>即時ベースで宣言されたプロパティ<xref:System.Windows.UIPropertyMetadata>クラス。</span><span class="sxs-lookup"><span data-stu-id="0d03c-225">The `isAnimationProhibited` parameter sets the initial value of the <xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> property declared by the immediate base <xref:System.Windows.UIPropertyMetadata> class.</span></span>  
  
 <span data-ttu-id="0d03c-226">バインドの更新ソースの動作の詳細については、次を参照してください。[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-226">For more information about the update source behavior for bindings, see [Data Binding Overview](~/docs/framework/wpf/data/data-binding-overview.md).</span></span>  
  
 <span data-ttu-id="0d03c-227">値がセット flags でフラグとしてマークされている、`flags`パラメーターのブール値が設定されます<xref:System.Windows.FrameworkPropertyMetadata>と一致しているプロパティ<xref:System.Windows.FrameworkPropertyMetadataOptions>フラグの名前を`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-227">Values marked as set flags in the `flags` parameter will set the Boolean value of <xref:System.Windows.FrameworkPropertyMetadata> properties that match that <xref:System.Windows.FrameworkPropertyMetadataOptions> flag's name to `true`.</span></span> <span data-ttu-id="0d03c-228">メタデータでは、プロパティの値は、メタデータが特定のプロパティ システム操作に適用されていない限り、引き続き変更できます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-228">You can still change the values of the properties in the metadata, as long as the metadata has not yet been applied to a specific property system operation.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertyMetadataAPIs#Initfpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initfpm)]  
[!code-csharp[PropertyMetadataAPIs#FPMCtor_DV_FPMO_PCC_CVC_IAP_DUST](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#fpmctor_dv_fpmo_pcc_cvc_iap_dust)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-229">
            <paramref name="defaultValue" /> が <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-229">
              <paramref name="defaultValue" /> is set to <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.PropertyMetadata" />
      </Docs>
    </Member>
    <Member MemberName="AffectsArrange">
      <MemberSignature Language="C#" Value="public bool AffectsArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-230">レイアウト エンジンの操作中に、依存関係プロパティが配置パスに潜在的に影響するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-230">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-231">このメタデータが存在する依存関係プロパティが配置パスに影響を及ぼす可能性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-231">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-232">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-232">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-233"><xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-233"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0d03c-234">ロジックの一部として、依存関係プロパティを変更する有効な値し、を使用してメタデータがある<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>設定`true`がその要素のビジュアルを無効にするための遅延要求を開始 (呼び出し<xref:System.Windows.UIElement.InvalidateArrange%2A>)。</span><span class="sxs-lookup"><span data-stu-id="0d03c-234">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element (a call to <xref:System.Windows.UIElement.InvalidateArrange%2A>).</span></span> <span data-ttu-id="0d03c-235">この実装は WPF フレームワーク レベルが既に設定されている、ため、通常必要はありませんで依存関係プロパティを検索する<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>大幅に交換または WPF フレームワーク レベルのレイアウト動作を変更する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-235">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0d03c-236">カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更と同様の動作を選択、<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-236">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0d03c-237">派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-237">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-238">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-238">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-239">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-239">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-240">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-240">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-241">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-241">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-242">このクラスのメンバーは、通常では使用か[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-242">Members of this class are either not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-243">次の例では、プロパティ フィールドをさまざまな依存関係から、既定のメタデータを取得、さまざまな値をクエリ<xref:System.Windows.FrameworkPropertyMetadata>プロパティを情報を使用して、「メタデータ ブラウザー」を実装するためにテーブルを作成するとします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-243">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-244">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-244">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-245">レイアウト エンジンの操作中に、依存関係プロパティが測定パスに影響する可能性があるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-245">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-246">このメタデータが存在する依存関係プロパティが測定パスに影響を及ぼす可能性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-246">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-247">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-247">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-248"><xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-248"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0d03c-249">ロジックの一部として、依存関係プロパティを変更する有効な値し、を使用してメタデータがある<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>設定`true`がその要素のビジュアルを無効にするための遅延要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-249">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="0d03c-250">この実装は WPF フレームワーク レベルが既に設定されている、ため、通常必要はありませんで依存関係プロパティを検索する<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>大幅に交換または WPF フレームワーク レベルのレイアウト動作を変更する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-250">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0d03c-251">カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更と同様の動作を選択、<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-251">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0d03c-252">派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-252">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-253">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-253">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-254">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-254">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-255">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-255">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-256">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-256">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-257">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-257">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-258">次の例では、プロパティ フィールドをさまざまな依存関係から、既定のメタデータを取得、さまざまな値をクエリ<xref:System.Windows.FrameworkPropertyMetadata>プロパティを情報を使用して、「メタデータ ブラウザー」を実装するためにテーブルを作成するとします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-258">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-259">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-259">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentArrange">
      <MemberSignature Language="C#" Value="public bool AffectsParentArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentArrange : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-260">レイアウト エンジンの操作中に、依存関係プロパティがその親要素のレイアウトの配置パスに潜在的に影響するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-260">Gets or sets a value that indicates whether a dependency property potentially affects the arrange pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-261">このメタデータが存在する可能性のある依存関係プロパティが特にその親要素の配置パスに影響する可能性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-261">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the arrange pass specifically on its parent element; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-262">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-262">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-263"><xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-263"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0d03c-264">ロジックの一部として、依存関係プロパティを変更する有効な値し、を使用してメタデータがある<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>設定`true`が親要素のビジュアルを無効にするための遅延要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-264">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span>  
  
 <span data-ttu-id="0d03c-265">変更を報告する必要がない一般に、<xref:System.Windows.FrameworkElement>プロパティを使用して親要素を<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>要素自体は既に存在して、独自ため<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>として`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-265">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> as `true`.</span></span> <span data-ttu-id="0d03c-266">該当する場合に、親が整列子要素の変化を一般に開始するので、通常で十分です。</span><span class="sxs-lookup"><span data-stu-id="0d03c-266">That is usually sufficient, because changes in the child element generally initiate a parent arrange when appropriate.</span></span> <span data-ttu-id="0d03c-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> ため、<xref:System.Windows.FrameworkContentElement>クラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-267"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="0d03c-268">この場合、子要素のセットが、プロパティ、<xref:System.Windows.FrameworkContentElement>派生クラスでは、自身のレンダリングを制御しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-268">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="0d03c-269">によって、レンダリングが処理される、<xref:System.Windows.FrameworkElement>コンテンツのホストとして機能する親要素。</span><span class="sxs-lookup"><span data-stu-id="0d03c-269">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="0d03c-270">値の変更など、<xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType>子要素で添付プロパティを無効化、親の子の位置を変更する必要がありますので、親の配置。</span><span class="sxs-lookup"><span data-stu-id="0d03c-270">For instance, a change to the value of the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property by a child element invalidates arrange of the parent, because the position of the child in the parent must be changed.</span></span> <span data-ttu-id="0d03c-271">そのため、<xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType>添付プロパティがメタデータで<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-271">Therefore, the <xref:System.Windows.Documents.FixedPage.Left%2A?displayProperty=nameWithType> attached property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span> <span data-ttu-id="0d03c-272">別の例は<xref:System.Windows.Controls.Control.Padding%2A>とき、このプロパティの変更では、親の可能性があります変更に使用可能な領域に応じて、子の位置します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-272">Another example is <xref:System.Windows.Controls.Control.Padding%2A>; when this property changes, the parent might change the positioning of the child, depending on available space.</span></span>  
  
 <span data-ttu-id="0d03c-273">この実装は WPF フレームワーク レベルが既に設定されている、ため、通常必要はありませんで依存関係プロパティを検索する<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>大幅に交換または WPF フレームワーク レベルのレイアウト動作を変更する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-273">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0d03c-274">カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更と同様の動作を選択、<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-274">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0d03c-275">プロパティをいずれかのクラスの派生<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-275">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-276">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-276">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-277">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-277">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-278">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-278">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentArrange"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-279">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-279">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-280">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-280">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-281">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-281">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsParentMeasure">
      <MemberSignature Language="C#" Value="public bool AffectsParentMeasure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsParentMeasure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsParentMeasure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsParentMeasure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsParentMeasure : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-282">レイアウト エンジンの操作中に、依存関係プロパティがその親要素のレイアウトの測定パスに潜在的に影響するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-282">Gets or sets a value that indicates whether a dependency property potentially affects the measure pass of its parent element's layout during layout engine operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-283">このメタデータが存在する依存関係プロパティが特にその親要素の測定パスに影響する可能性がある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。既定値は <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-283">
              <see langword="true" /> if the dependency property on which this metadata exists potentially affects the measure pass specifically on its parent element; otherwise, <see langword="false" />.The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-284"><xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-284"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0d03c-285">ロジックの一部として、依存関係プロパティを変更する有効な値し、を使用してメタデータがある<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>設定`true`が親要素のビジュアルを無効にするための遅延要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-285">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> set to `true` will initiate a deferred request to invalidate the visuals for the parent element.</span></span> <span data-ttu-id="0d03c-286">この実装は WPF フレームワーク レベルが既に設定されている、ため、通常必要はありませんで依存関係プロパティを検索する<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>大幅に交換または WPF フレームワーク レベルのレイアウト動作を変更する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-286">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0d03c-287">変更を報告する必要がない一般に、<xref:System.Windows.FrameworkElement>プロパティを使用して親要素を<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>要素自体は既に存在して、独自ため<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>として`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-287">Generally, you do not need to report changes of a <xref:System.Windows.FrameworkElement> property to a parent element using <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> because the element itself would already have its own <xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> as `true`.</span></span> <span data-ttu-id="0d03c-288">子要素の変更は一般的に該当する場合に、親測定パスを開始するため、通常で十分です。</span><span class="sxs-lookup"><span data-stu-id="0d03c-288">That is usually sufficient, because changes in the child element generally initiate a parent measure pass when appropriate.</span></span> <span data-ttu-id="0d03c-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> ため、<xref:System.Windows.FrameworkContentElement>クラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-289"><xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is sometimes used for a <xref:System.Windows.FrameworkContentElement> derived class.</span></span> <span data-ttu-id="0d03c-290">この場合、子要素のセットが、プロパティ、<xref:System.Windows.FrameworkContentElement>派生クラスでは、自身のレンダリングを制御しません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-290">In this case, the child element sets a property, but a <xref:System.Windows.FrameworkContentElement> derived class does not control its own rendering.</span></span> <span data-ttu-id="0d03c-291">によって、レンダリングが処理される、<xref:System.Windows.FrameworkElement>コンテンツのホストとして機能する親要素。</span><span class="sxs-lookup"><span data-stu-id="0d03c-291">The rendering is handled by a <xref:System.Windows.FrameworkElement> parent element that serves as the content host.</span></span> <span data-ttu-id="0d03c-292">値の変更など、<xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType>子要素でプロパティを段落の相対的な間隔から変更可能性がありますとを増やす可能性があります、またはコンテンツ ホストのサイズを小さくために、親のメジャーを無効にします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-292">For instance, a change to the value of the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property by a child element invalidates measure of the parent, because the relative spacing of paragraphs might change and might increase or decrease the content host size.</span></span> <span data-ttu-id="0d03c-293">そのため、<xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType>プロパティがメタデータで<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-293">Therefore, the <xref:System.Windows.Documents.Paragraph.KeepWithNext%2A?displayProperty=nameWithType> property has metadata where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0d03c-294">コンテンツのホスト要素に依存関係プロパティの変更についてもよくなります、<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>は`true`、コンテンツのホストのレンダリング ロジックの一部として。</span><span class="sxs-lookup"><span data-stu-id="0d03c-294">Content host elements also frequently look for changes in dependency properties where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`, as part of content host rendering logic.</span></span> <span data-ttu-id="0d03c-295">たとえば、<xref:System.Windows.Controls.TextBox>要素を必要となるテキスト内で特定の変更の境界ボックスとの対応の必要があります、<xref:System.Windows.Controls.TextBox>自体を変更します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-295">For instance, the <xref:System.Windows.Controls.TextBox> element must respond to certain changes within text that might require that the bounding box of the <xref:System.Windows.Controls.TextBox> itself be changed.</span></span>  
  
 <span data-ttu-id="0d03c-296">カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更と同様の動作を選択、<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-296">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0d03c-297">プロパティをいずれかのクラスの派生<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-297">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-298">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-298">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-299">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-299">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-300">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-300">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsParentMeasure"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-301">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-301">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-302">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-302">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-303">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-303">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="AffectsRender">
      <MemberSignature Language="C#" Value="public bool AffectsRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AffectsRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberSignature Language="VB.NET" Value="Public Property AffectsRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AffectsRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AffectsRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.AffectsRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-304">依存関係プロパティが一般的なレイアウトに何らかの形で影響する (配置や測定に特に影響を与えないが再描画が必要になる) 可能性があるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-304">Gets or sets a value that indicates whether a dependency property potentially affects the general layout in some way that does not specifically influence arrangement or measurement, but would require a redraw.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-305">このメタデータが存在する依存関係プロパティがレンダリングに影響を及ぼす場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-305">
              <see langword="true" /> if the dependency property on which this metadata exists affects rendering; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-306">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-306">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-307"><xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement>の実装が含まれて<xref:System.Windows.FrameworkElement.OnPropertyChanged%2A>要素に存在するすべての依存関係プロパティに対する有効な値の変更を監視します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-307"><xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> include an implementation of <xref:System.Windows.FrameworkElement.OnPropertyChanged%2A> that monitors effective value changes to all dependency properties that exist on an element.</span></span> <span data-ttu-id="0d03c-308">ロジックの一部として、依存関係プロパティを変更する有効な値し、を使用してメタデータがある<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>設定`true`がその要素のビジュアルを無効にするための遅延要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-308">As part of that logic, dependency properties that change effective value and have metadata with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> set to `true` will initiate a deferred request to invalidate the visuals for that element.</span></span> <span data-ttu-id="0d03c-309">この実装は WPF フレームワーク レベルが既に設定されている、ため、通常必要はありませんで依存関係プロパティを検索する<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>大幅に交換または WPF フレームワーク レベルのレイアウト動作を変更する場合を除き、します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-309">Because this WPF framework-level implementation is already in place, you typically do not need to look for dependency properties with <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> unless you are substantially replacing or modifying the WPF framework-level layout behavior.</span></span>  
  
 <span data-ttu-id="0d03c-310">カスタム<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>実装の依存関係プロパティの変更と同様の動作を選択、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-310">Custom <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> implementations might choose to have similar behavior for dependency property changes where <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> is `true`.</span></span>  
  
 <span data-ttu-id="0d03c-311">プロパティをいずれかのクラスの派生<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-311">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-312">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-312">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-313">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-313">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-314">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-314">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_AffectsRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-315">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-315">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-316">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-316">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-317">次の例では、プロパティ フィールドをさまざまな依存関係から、既定のメタデータを取得、さまざまな値をクエリ<xref:System.Windows.FrameworkPropertyMetadata>プロパティを情報を使用して、「メタデータ ブラウザー」を実装するためにテーブルを作成するとします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-317">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-318">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-318">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="BindsTwoWayByDefault">
      <MemberSignature Language="C#" Value="public bool BindsTwoWayByDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsTwoWayByDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property BindsTwoWayByDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BindsTwoWayByDefault { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BindsTwoWayByDefault : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-319">プロパティが既定で双方向をバインドするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-319">Gets or sets a value that indicates whether the property binds two-way by default.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-320">既定でこのメタデータが存在する依存関係プロパティが双方向をバインドする場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-320">
              <see langword="true" /> if the dependency property on which this metadata exists binds two-way by default; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-321">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-321">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-322">このプロパティがない場合に`true`、バインドの更新プログラムがの既定の動作に基づいて、既定で一方向、<xref:System.Windows.Data.Binding>コンス トラクターまたはそれと同等[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]構文。</span><span class="sxs-lookup"><span data-stu-id="0d03c-322">In absence of this property being `true`, binding updates are one-way by default, based on the default behavior of the <xref:System.Windows.Data.Binding> constructors or equivalent [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span>  
  
 <span data-ttu-id="0d03c-323">既存の要素では、このプロパティを通常検索は`true`両方の状態をレポートし、ユーザーの操作によって変更することなどは、依存関係プロパティのメタデータで<xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-323">In existing elements, you will usually find this property set to `true` in metadata for dependency properties that both report state and are modifiable by user action, for example <xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="0d03c-324">このプロパティはのみ、依存関係プロパティの既定のバインディング更新特性を一般に報告します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-324">This property only reports the default binding update characteristics of the dependency property in general.</span></span> <span data-ttu-id="0d03c-325">任意のバインディング インスタンスでこのプロパティを設定できるローカルに設定された、<xref:System.Windows.Data.Binding.Mode%2A>バインディングのプロパティと、この既定の設定を変更します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-325">Any binding set to this property on an instance can locally set the <xref:System.Windows.Data.Binding.Mode%2A> property of the binding and change this default.</span></span>  
  
 <span data-ttu-id="0d03c-326">プロパティをいずれかのクラスの派生<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-326">Properties on any derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-327">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-327">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-328">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-328">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-329">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-329">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_BindsTwoWayByDefault"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-330">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-330">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-331">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-331">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-332">次の例では、プロパティ フィールドをさまざまな依存関係から、既定のメタデータを取得、さまざまな値をクエリ<xref:System.Windows.FrameworkPropertyMetadata>プロパティを情報を使用して、「メタデータ ブラウザー」を実装するためにテーブルを作成するとします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-332">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-333">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-333">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="DefaultUpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger DefaultUpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultUpdateSourceTrigger As UpdateSourceTrigger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::UpdateSourceTrigger DefaultUpdateSourceTrigger { System::Windows::Data::UpdateSourceTrigger get(); void set(System::Windows::Data::UpdateSourceTrigger value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUpdateSourceTrigger : System.Windows.Data.UpdateSourceTrigger with get, set" Usage="System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-334">このメタデータを含むプロパティに対して、<see cref="T:System.Windows.Data.UpdateSourceTrigger" /> が <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> に設定されているバインディングを適用するときに使用する <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> の既定値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-334">Gets or sets the default for <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> to use when bindings for the property with this metadata are applied, which have their <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-335">
            <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> 以外の列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-335">A value of the enumeration, other than <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-336">派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-336">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-337">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-337">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-338">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-338">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-339">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-339">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_DefaultUpdateSourceTrigger"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-340">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-340">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-341">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-341">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="0d03c-342">このプロパティが <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> に設定されています。設定した値は、バインディングで要求されたときの既定値になります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-342">This property is set to <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" />; the value you set is supposed to become the default when requested by bindings.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-343">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-343">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Inherits">
      <MemberSignature Language="C#" Value="public bool Inherits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherits" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherits As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherits { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherits : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Inherits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-344">依存関係プロパティの値が継承可能かどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-344">Gets or sets a value that indicates whether the value of the dependency property is inheritable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-345">プロパティ値が継承可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-345">
              <see langword="true" /> if the property value is inheritable; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-346">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-346">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-347">プロパティ値の継承の機能である、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]という特定の依存関係プロパティはローカル要素で設定するのルートに近い、WPF フレームワーク レベルのプロパティ システムを[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]要素ツリーし、その値によって継承されますまた、そのプロパティを処理する子要素の論理ツリー内ですべての要素。</span><span class="sxs-lookup"><span data-stu-id="0d03c-347">Property value inheritance is a feature of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system at the WPF framework level, whereby certain dependency properties can be locally set on an element at or near the root of a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element tree and then have their value inherited by all elements within the logical tree of child elements that also possess that property.</span></span> <span data-ttu-id="0d03c-348">既定では、プロパティ値の継承が有効になっていないと、パフォーマンスへの影響が有効にすることです。</span><span class="sxs-lookup"><span data-stu-id="0d03c-348">Property value inheritance is not enabled by default, and enabling it does have some performance implications.</span></span> <span data-ttu-id="0d03c-349">詳細については、「[プロパティ値の継承](~/docs/framework/wpf/advanced/property-value-inheritance.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="0d03c-349">For details, see [Property Value Inheritance](~/docs/framework/wpf/advanced/property-value-inheritance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0d03c-350">プロパティ値の継承は、非添付依存関係プロパティに見える場合があります、ランタイム ツリーで特定オブジェクト間の分割を使用して非添付プロパティの継承動作は定義されていません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-350">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain object-object divisions in the runtime tree is undefined.</span></span> <span data-ttu-id="0d03c-351">常に使用する<xref:System.Windows.DependencyProperty.RegisterAttached%2A>に指定したプロパティを登録する<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>メタデータにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-351">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span>  
  
 <span data-ttu-id="0d03c-352">派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-352">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-353">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-353">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-354">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-354">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-355">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-355">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Inherits"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-356">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-356">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-357">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-357">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-358">次の例では、プロパティ フィールドをさまざまな依存関係から、既定のメタデータを取得、さまざまな値をクエリ<xref:System.Windows.FrameworkPropertyMetadata>プロパティを情報を使用して、「メタデータ ブラウザー」を実装するためにテーブルを作成するとします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-358">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-359">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-359">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsDataBindingAllowed">
      <MemberSignature Language="C#" Value="public bool IsDataBindingAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDataBindingAllowed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDataBindingAllowed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDataBindingAllowed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDataBindingAllowed : bool" Usage="System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-360">依存関係プロパティのデータ バインディングがサポートされているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-360">Gets a value that indicates whether data binding is supported for the dependency property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-361">このメタデータを適用する依存関係プロパティでデータ バインディングがサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-361">
              <see langword="true" /> if data binding is supported on the dependency property to which this metadata applies; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-362">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-362">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-363">このプロパティは、報告`false`2 つの可能な条件のいずれかの: 依存関係プロパティには、(に示される依存関係プロパティの識別子、メタデータではなく)、読み取り専用の依存関係プロパティのいずれかのデータ バインディングは許可されませんまたはの値別のメタデータ プロパティ<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>に設定されている`true`このメタデータにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-363">This property reports `false` for one of two possible conditions: either data binding to a dependency property is not allowed because the dependency property is read-only (as reported in the dependency property identifier, not the metadata), or the value of another metadata property, <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>, is set to `true` in this metadata.</span></span> <span data-ttu-id="0d03c-364">呼び出し元は両方を確認する必要があるないように、便利なようにこのプロパティが公開されている<xref:System.Windows.DependencyProperty.ReadOnly%2A>と<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-364">This property is exposed as a convenience so that callers do not have to check both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span>  
  
 <span data-ttu-id="0d03c-365">それ以外の場合の読み取り/書き込みプロパティがデータ バインディングをサポートされていないことを指定するメタデータを作成しようとする場合は、フラグを指定<xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable>(とわずかな名前付け規則違いに注意してください<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>)。</span><span class="sxs-lookup"><span data-stu-id="0d03c-365">If you are attempting to create metadata that specifies that an otherwise read/write property should not support data binding, specify the flag <xref:System.Windows.FrameworkPropertyMetadataOptions.NotDataBindable> (note the slight naming convention difference versus <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>).</span></span>  
  
<a name="xamlTextUsage_IsDataBindingAllowed"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-366">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-366">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-367">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-367">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d03c-368">次の例では、プロパティ フィールドをさまざまな依存関係から、既定のメタデータを取得、さまざまな値をクエリ<xref:System.Windows.FrameworkPropertyMetadata>プロパティを情報を使用して、「メタデータ ブラウザー」を実装するためにテーブルを作成するとします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-368">The following example obtains the default metadata from various dependency property fields, queries the value of various <xref:System.Windows.FrameworkPropertyMetadata> properties on it, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#FPMProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#fpmproperties)]
[!code-vb[PropertySystemEsoterics#FPMProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#fpmproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsNotDataBindable">
      <MemberSignature Language="C#" Value="public bool IsNotDataBindable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotDataBindable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNotDataBindable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotDataBindable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNotDataBindable : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.IsNotDataBindable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-369">依存関係プロパティがデータ バインディングをサポートしているかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-369">Gets or sets a value that indicates whether the dependency property supports data binding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-370">プロパティがデータ バインディングをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-370">
              <see langword="true" /> if the property does not support data binding; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-371">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-371">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-372">このメタデータ プロパティに設定されている注`true`専用のプロパティを読み取り/書き込みプロパティであるにもかかわらず、データ バインディングをサポートする必要があります。</span><span class="sxs-lookup"><span data-stu-id="0d03c-372">Note that this metadata property is set to `true` specifically for properties that should not support data binding, despite being read-write properties.</span></span> <span data-ttu-id="0d03c-373">想定されるが、ことで、依存関係プロパティが宣言されているほとんどの場合、データ バインディングが必要なデータ バインディングは、依存関係プロパティが役立つ主要なシナリオのいずれかのためであることです。</span><span class="sxs-lookup"><span data-stu-id="0d03c-373">The expectation is that in most cases where a dependency property is declared, data binding is desired, because data binding is one of the key scenarios where a dependency property is useful.</span></span> <span data-ttu-id="0d03c-374">異なり<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>、このだけでは変更後で、特定のバインドを変更できる既定されません。</span><span class="sxs-lookup"><span data-stu-id="0d03c-374">Unlike <xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>, this does not merely change a default that can later be changed on a specific binding.</span></span> <span data-ttu-id="0d03c-375">このプロパティの設定`true`メタデータ依存関係プロパティのメタデータ内にその依存関係プロパティの値を式を適用したすべてのバインドが無効になります。</span><span class="sxs-lookup"><span data-stu-id="0d03c-375">Setting this property `true` in the metadata for a dependency property metadata will disable all bindings from applying their values through expressions to that dependency property.</span></span>  
  
 <span data-ttu-id="0d03c-376">読み取り専用の依存関係プロパティは (変更後の値を適用可能な set アクセス操作子がない) ため、データをバインディングをサポートしていませんが、レポートではまだ`false`の<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-376">Read-only dependency properties do not support data binding (because they have no setter that can apply changed values), but will still report `false` for <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>.</span></span> <span data-ttu-id="0d03c-377">これは、プロパティに対応するため、<xref:System.Windows.FrameworkPropertyMetadataOptions>方法、メタデータが実際に確立された、プロパティの名前を付けることを示唆する最後の結果の動作を常にレポートではなくと同等の値を報告します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-377">This is because properties that correspond to a <xref:System.Windows.FrameworkPropertyMetadataOptions> values will report parity with how the metadata was actually established, rather than always reporting the end result behavior that the naming of the property might imply.</span></span> <span data-ttu-id="0d03c-378">指定された依存関係プロパティがデータ バインディングを許可するかどうかを確認するのには、通常確認してください<xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-378">To determine whether a given dependency property permits data binding, you should usually check <xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> instead.</span></span> <span data-ttu-id="0d03c-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> 両方をチェックするための便利なは<xref:System.Windows.DependencyProperty.ReadOnly%2A>と<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>1 回の操作には、予期される結果を生成します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-379"><xref:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed%2A> is a convenience for checking both <xref:System.Windows.DependencyProperty.ReadOnly%2A> and <xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A> as a single operation, yielding the expected result.</span></span>  
  
 <span data-ttu-id="0d03c-380">派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-380">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-381">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-381">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-382">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-382">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-383">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-383">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_IsNotDataBindable"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-384">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-384">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-385">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-385">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-386">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-386">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.FrameworkPropertyMetadata.IsDataBindingAllowed" />
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="Journal">
      <MemberSignature Language="C#" Value="public bool Journal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Journal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberSignature Language="VB.NET" Value="Public Property Journal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Journal { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Journal : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.Journal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-387">ジャーナル実装の一部としてアプリケーションが格納できる、または格納する必要のあるジャーナル情報がこのプロパティに格納されているかどうか示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-387">Gets or sets a value that indicates whether this property contains journaling information that applications can or should store as part of a journaling implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-388">
            <see langword="true" /> ジャーナリング; にこのメタデータが適用される依存関係プロパティに対して実行する場合それ以外の場合、<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-388">
              <see langword="true" /> if journaling should be performed on the dependency property that this metadata is applied to; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-389">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-389">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-390">派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-390">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-391">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-391">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-392">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-392">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-393">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-393">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_Journal"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-394">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-394">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-395">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-395">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-396">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-396">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
        <altmember cref="T:System.Windows.Navigation.JournalEntry" />
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="protected override void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Merge(class System.Windows.PropertyMetadata baseMetadata, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Merge (baseMetadata As PropertyMetadata, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Merge(System::Windows::PropertyMetadata ^ baseMetadata, System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit&#xA;override this.Merge : System.Windows.PropertyMetadata * System.Windows.DependencyProperty -&gt; unit" Usage="frameworkPropertyMetadata.Merge (baseMetadata, dp)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="baseMetadata">
          <span data-ttu-id="0d03c-397">マージする基本のメタデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-397">The base metadata to merge.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="0d03c-398">このメタデータが適用されている依存関係プロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-398">The dependency property this metadata is being applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-399">ソース メタデータと基本メタデータのマージを有効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-399">Enables a merge of the source metadata with base metadata.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-400">このメソッドは、メタデータが上書きされているときに内部的に使用されます。</span><span class="sxs-lookup"><span data-stu-id="0d03c-400">This method is used internally when metadata is being overridden.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="0d03c-401">
            <para>派生するクラス<see cref="T:System.Windows.PropertyMetadata" />(またはこれが特にクラス)、実装に追加したすべてのメタデータ プロパティに対応するには、このメソッドをオーバーライドする必要があります。たとえば、実装追加可能性が新しいフラグ列挙値、および<see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />実装できる必要がありますし、それらのフラグを正しく結合します。常にマージする前の型階層内に既に定義されているすべてのプロパティの基本の実装が自動的に処理は、独自の実装の前に、基本実装を呼び出します。によって追加された動作、<see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />で実装<see cref="T:System.Windows.FrameworkPropertyMetadata" />は、特定の WPF フレームワーク レベル プロパティなどのメタデータで<see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" />演算で結合されますまたは操作。<see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />動作は、呼び出すことによって既存の依存関係プロパティのプロパティのメタデータをオーバーライドする場合も、動作を実装<see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />.、オーバーライドのメタデータを使用して<see cref="T:System.Windows.FrameworkPropertyMetadata" />します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-401">
              <para>Classes that derive from <see cref="T:System.Windows.PropertyMetadata" /> (or this class particularly) should override this method to account for any metadata properties they have added in their implementations. For instance, your implementation might have added a new flagwise enumeration value, and the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation should then be able to combine those flags correctly.  Always call the base implementation prior to your own implementation, because the base implementation takes care of merging all the properties already defined on previous types in the hierarchy.  The behavior added by the <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> implementation in <see cref="T:System.Windows.FrameworkPropertyMetadata" /> is that specific WPF framework-level properties in the metadata such as <see cref="P:System.Windows.FrameworkPropertyMetadata.AffectsRender" /> are combined in a bitwise or operation.  The <see cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" /> behavior also implements the behavior when you override the property metadata on an existing dependency property by calling <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />., using override metadata that is <see cref="T:System.Windows.FrameworkPropertyMetadata" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OnApply">
      <MemberSignature Language="C#" Value="protected override void OnApply (System.Windows.DependencyProperty dp, Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnApply(class System.Windows.DependencyProperty dp, class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkPropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnApply (dp As DependencyProperty, targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnApply(System::Windows::DependencyProperty ^ dp, Type ^ targetType);" />
      <MemberSignature Language="F#" Value="abstract member OnApply : System.Windows.DependencyProperty * Type -&gt; unit&#xA;override this.OnApply : System.Windows.DependencyProperty * Type -&gt; unit" Usage="frameworkPropertyMetadata.OnApply (dp, targetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="0d03c-402">メタデータが適用された依存関係プロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-402">The dependency property to which the metadata has been applied.</span>
          </span>
        </param>
        <param name="targetType">
          <span data-ttu-id="0d03c-403">該当するメタデータが型固有のメタデータの場合、このメタデータに関連付けられている型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-403">The type associated with this metadata if this is type-specific metadata.</span>
          </span>
          <span data-ttu-id="0d03c-404">これが既定のメタデータである場合は、この値に <see langword="null" /> を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-404">If this is default metadata, this value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="0d03c-405">このメタデータがプロパティに適用されたときに呼び出され、メタデータがシールされることを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-405">Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-406">データ構造のすべての変更可能性を<xref:System.Windows.FrameworkPropertyMetadata>インスタンスに設定されなければなりません変更不可としてこのメソッドが呼び出されるとします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-406">Any mutability of the data structure of a <xref:System.Windows.FrameworkPropertyMetadata> instance should be marked as immutable when this method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="0d03c-407">
            <para>
              <see cref="T:System.Windows.FrameworkPropertyMetadata" />このメソッドの実装は基本実装を呼び出す以外何も行いません。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-407">
              <para>The <see cref="T:System.Windows.FrameworkPropertyMetadata" /> implementation of this method does nothing beyond calling the base implementation.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)" />
        <altmember cref="P:System.Windows.PropertyMetadata.IsSealed" />
        <altmember cref="M:System.Windows.FrameworkPropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesInheritanceBehavior">
      <MemberSignature Language="C#" Value="public bool OverridesInheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesInheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesInheritanceBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesInheritanceBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesInheritanceBehavior : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-408">要素の論理ツリー内の特定のコンテンツ境界にまたがってプロパティ値の継承を評価するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-408">Gets or sets a value that indicates whether the property value inheritance evaluation should span across certain content boundaries in the logical tree of elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-409">プロパティ値の継承が特定のコンテンツ境界をまたがる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-409">
              <see langword="true" /> if the property value inheritance should span across certain content boundaries; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-410">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-410">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-411">このメタデータは、特別な親要素の子要素の境界を越えてプロパティ値継承の動作をほとんど適用の変更を報告します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-411">This metadata reports a seldom-applied modification to property value inheritance behavior across special parent element-child element boundaries.</span></span> <span data-ttu-id="0d03c-412">このような境界の標準的な例は、の内容を<xref:System.Windows.Controls.Frame>ここで、<xref:System.Windows.Controls.Frame>の存在とは無関係に、コンテンツを再読み込み取得可能性があります、<xref:System.Windows.Controls.Frame>します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-412">The canonical example of such a boundary is the contents of a <xref:System.Windows.Controls.Frame>, where the <xref:System.Windows.Controls.Frame> content might get reloaded independently of the existence of the <xref:System.Windows.Controls.Frame>.</span></span> <span data-ttu-id="0d03c-413">目的のプロパティ システムの動作は、プロパティ値の継承の内容を経由する必要があります、 <xref:System.Windows.Controls.Frame>、これらの内容の要素をフレームをホストするアプリケーションが所有または管理していない可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="0d03c-413">The desired property system behavior is that property value inheritance should not traverse into the contents of the <xref:System.Windows.Controls.Frame>, because these contents might be elements that the application hosting the frame does not own or control.</span></span> <span data-ttu-id="0d03c-414">使用してメタデータを指定する<xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A>に設定`true`も指定することと、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>として`true`、プロパティを継承可能でも、メタデータが適用されると、<xref:System.Windows.Controls.Frame>境界または境界が似ています。</span><span class="sxs-lookup"><span data-stu-id="0d03c-414">Specifying metadata with <xref:System.Windows.FrameworkPropertyMetadata.OverridesInheritanceBehavior%2A> set to `true`, as well as specifying <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> as `true`, will cause the property on which the metadata is applied to be inheritable even across the <xref:System.Windows.Controls.Frame> boundary or similar boundaries.</span></span>  
  
 <span data-ttu-id="0d03c-415">派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-415">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-416">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-416">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-417">ただし後の呼び出しの一部として、メタデータが消費される<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-417">However, after the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-418">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-418">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_OverridesInheritanceBehavior"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-419">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-419">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-420">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-420">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-421">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-421">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.FrameworkPropertyMetadataOptions" />
      </Docs>
    </Member>
    <Member MemberName="SubPropertiesDoNotAffectRender">
      <MemberSignature Language="C#" Value="public bool SubPropertiesDoNotAffectRender { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberSignature Language="VB.NET" Value="Public Property SubPropertiesDoNotAffectRender As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SubPropertiesDoNotAffectRender { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SubPropertiesDoNotAffectRender : bool with get, set" Usage="System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0d03c-422">依存関係プロパティのサブプロパティが格納オブジェクトのレンダリングに影響しないかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-422">Gets or sets a value that indicates whether sub-properties of the dependency property do not affect the rendering of the containing object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0d03c-423">サブプロパティ値の変更がレンダリングに影響を及ぼさない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-423">
              <see langword="true" /> if changes to sub-property values do not affect rendering if changed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="0d03c-424">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-424">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d03c-425">このメタデータ オプションは、関連する型が、独自のプロパティの値を参照型の場合に依存関係プロパティです。</span><span class="sxs-lookup"><span data-stu-id="0d03c-425">This metadata option is pertinent for dependency properties that are reference types, where that type has property values of its own.</span></span> <span data-ttu-id="0d03c-426">通常、レイアウト システムのロジックは、サブプロパティを含む任意の依存関係プロパティは可能性のあるレイアウトを影響は、別の描画パスの変更のすべてのサブプロパティをチェックすることが実際に実行されているよりも時間がかかるためのことを想定することです。</span><span class="sxs-lookup"><span data-stu-id="0d03c-426">Typically, the layout system logic is to assume that any dependency property with sub-properties potentially will affect layout, because checking all sub-properties for changes is more time consuming than actually running another render pass.</span></span> <span data-ttu-id="0d03c-427">このオプションを設定`true`は WPF フレームワーク レベルのレイアウト システムの実装のパフォーマンスを最適化するために便利です。</span><span class="sxs-lookup"><span data-stu-id="0d03c-427">Setting this option to `true` is useful for optimizing performance of the WPF framework level layout system implementation.</span></span>  
  
 <span data-ttu-id="0d03c-428">派生クラスでプロパティ<xref:System.Windows.PropertyMetadata>通常は読み取り/書き込みとしてオブジェクト モデルで定義します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-428">Properties on derived classes of <xref:System.Windows.PropertyMetadata> are typically defined in the object model as read-write.</span></span> <span data-ttu-id="0d03c-429">これは、インスタンスの初期化後に調整できるようにします。</span><span class="sxs-lookup"><span data-stu-id="0d03c-429">This is so they can be adjusted after initialization of the instance.</span></span> <span data-ttu-id="0d03c-430">ただし、呼び出しの一部として使用されるメタデータと<xref:System.Windows.DependencyProperty.Register%2A>、 <xref:System.Windows.DependencyProperty.AddOwner%2A>、または<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、プロパティ システムはそのメタデータ インスタンスを封印およびメタデータの詳細を伝えるためのプロパティを変更できないと見なされますようになりました。</span><span class="sxs-lookup"><span data-stu-id="0d03c-430">However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and properties that convey the specifics of the metadata are now considered immutable.</span></span> <span data-ttu-id="0d03c-431">後は、このプロパティを設定しようとしています。<xref:System.Windows.PropertyMetadata.IsSealed%2A>は`true`でこのメタデータ インスタンスで例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-431">Attempting to set this property after <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.</span></span>  
  
<a name="xamlTextUsage_SubPropertiesDoNotAffectRender"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="0d03c-432">XAML テキストの使用状況</span><span class="sxs-lookup"><span data-stu-id="0d03c-432">XAML Text Usage</span></span>  
 <span data-ttu-id="0d03c-433">このクラスのメンバーは、通常では使用しない[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="0d03c-433">Members of this class are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="0d03c-434">メタデータがシールされるよう、かつメタデータのプロパティを設定できないように、メタデータは依存関係プロパティの操作に既に適用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="0d03c-434">The metadata has already been applied to a dependency property operation, so that metadata is sealed and properties of the metadata cannot be set.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Freezable" />
      </Docs>
    </Member>
  </Members>
</Type>