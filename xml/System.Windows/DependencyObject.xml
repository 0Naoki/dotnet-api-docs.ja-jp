<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DependencyObject.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac593e067f8bf97d79f7e4525a57db08a4a8d5109c2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93e067f8bf97d79f7e4525a57db08a4a8d5109c2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Represents an object that participates in the dependency property system.</source>
          <target state="translated">依存関係プロパティ システムに参加しているオブジェクトを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> class enables <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> property system services on its many derived classes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>クラスにより<ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>その派生クラスでプロパティのシステム サービスです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</source>
          <target state="translated">プロパティ システムの主な機能は、変更された値に関するシステム通知を提供して、プロパティの値を計算するには。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Another key class that participates in the property system is <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
          <target state="translated">プロパティ システムに参加している別のキー クラスは<ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph> as a base class enables objects to use the dependency properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> プロパティ システムに依存関係プロパティの登録を有効にし、識別し、各依存関係プロパティに関する情報を提供<ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>基底クラス オブジェクトの依存関係プロパティを使用することができます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> services and characteristics include the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> サービスと特性次に示します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Dependency property hosting support.</source>
          <target state="translated">依存関係プロパティのサポートをホストします。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>You register a dependency property by calling the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> method, and storing the method's return value as a public static field in your class.</source>
          <target state="translated">呼び出すことによって、依存関係プロパティを登録する、<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>メソッド、およびクラスのパブリックな静的フィールドとメソッドの戻り値を格納します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Attached property hosting support.</source>
          <target state="translated">添付プロパティのサポートをホストします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>You register an attached property by calling the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph> method, and storing the method's return value as a public static read-only field in your class.</source>
          <target state="translated">呼び出して添付プロパティを登録する、<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph>メソッド、およびクラスのパブリック静的な読み取り専用フィールドとして、メソッドの戻り値を格納します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>(There are also additional member requirements; note that this represents a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> specific implementation for attached properties.</source>
          <target state="translated">(その他のメンバーの要件もあります。 これを表すことに注意してください、<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>添付プロパティの特定の実装です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>For details, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/docs/framework/wpf/advanced/attached-properties-overview.md)</ept>.) Your attached property can then be set on any class that derives from <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>添付プロパティの概要<ept id="p1">](~/docs/framework/wpf/advanced/attached-properties-overview.md)</ept>)。派生した任意のクラス、添付プロパティを設定することができますし、<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Get, set, and clear utility methods for values of any dependency properties that exist on the <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">Get、set、およびユーティリティ メソッドの上に存在する依存関係プロパティの値をクリア、<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</source>
          <target state="translated">メタデータ、値のサポート、プロパティの変更通知、および依存関係プロパティのオーバーライドのコールバックを強制または、アタッチされるプロパティです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Also, the <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> class facilitates the per-owner property metadata for a dependency property.</source>
          <target state="translated">また、<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>クラスには、依存関係プロパティの所有者ごとのプロパティのメタデータが容易になります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>A common base class for classes derived from <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph>.</source>
          <target state="translated">クラスの共通の基本クラスから派生した<ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>、または<ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>(<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, another base element class, has a class hierarchy that includes <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>.)</source>
          <target state="translated">(<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>、別の基本要素のクラスがクラスの階層構造を含む<ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The following example derives from <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> to create a new abstract class.</source>
          <target state="translated">次の例に由来<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>新しい抽象クラスを作成します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The class then registers an attached property and includes support members for that attached property.</source>
          <target state="translated">クラスに、添付プロパティを登録し、その添付プロパティのサポートのメンバーが含まれています。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Clears the local value of a property.</source>
          <target state="translated">プロパティのローカル値をクリアします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The dependency property to be cleared, identified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> object reference.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> オブジェクト参照によって識別される、消去対象の依存関係プロパティ。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clears the local value of a property.</source>
          <target state="translated">プロパティのローカル値をクリアします。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The property to be cleared is specified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier.</source>
          <target state="translated">クリアするプロパティは <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> 識別子で指定されます。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clearing the property value by calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</source>
          <target state="translated">呼び出してプロパティの値をクリアする<ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>で必ずしも得られなければ、依存関係プロパティの依存関係プロパティのメタデータで指定されている既定値です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clearing the property only specifically clears whatever local value may have been applied.</source>
          <target state="translated">具体的にのみ、プロパティをクリアするは、どのようなローカル値が適用されている可能性がありますを消去します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティ値の優先順位<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The following example iterates all properties that have local values set on an object, then calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> to clear the values of each such property.</source>
          <target state="translated">次の例は、そのオブジェクトに対する設定ローカル値を持つすべてのプロパティを反復処理を呼び出して<ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>などの各プロパティの値をクリアします。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Attempted to call <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> on a sealed <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">シールされている <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> で <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> を呼び出そうとしました。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>The key for the dependency property to be cleared.</source>
          <target state="translated">消去する依存関係プロパティのキー。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clears the local value of a read-only property.</source>
          <target state="translated">読み取り専用プロパティのローカル値を消去します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>The property to be cleared is specified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph>.</source>
          <target state="translated">消去するプロパティは、<ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> で指定します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyKey&gt;</ph> identifies a read-only dependency property for property system operations.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.DependencyPropertyKey&gt;</ph>プロパティ システム操作用の読み取り専用の依存関係プロパティを識別します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Classes that define read-only dependency properties should not expose this key with public access.</source>
          <target state="translated">読み取り専用の依存関係プロパティを定義するクラスでは、パブリック アクセス権を持つこのキーは公開しないでください。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> could be called outside the class or assembly, referencing the key.</source>
          <target state="translated">場合、公開キーのプロパティの読み取り専用の文字を否定するパブリック コード パスが提供するなどのメソッド<ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>クラスまたはキーを参照するアセンブリの外部から呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clearing the property value by calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</source>
          <target state="translated">呼び出してプロパティの値をクリアする<ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>で必ずしも得られなければ、依存関係プロパティの依存関係プロパティのメタデータで指定されている既定値です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clearing the value only specifically clears whatever local value may have been applied.</source>
          <target state="translated">具体的にのみ値をクリアすると、ローカル値が適用されている可能性がありますを消去します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティ値の優先順位<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Attempted to call <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> on a sealed <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">シールされている <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> で <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> を呼び出そうとしました。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The identifier for the dependency property to coerce.</source>
          <target state="translated">強制する依存関係プロパティの識別子。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>Coerces the value of the specified dependency property.</source>
          <target state="translated">指定した依存関係プロパティの値を強制します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>This is accomplished by invoking any <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> function specified in property metadata for the dependency property as it exists on the calling <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">これは、呼び出し元の <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> の依存関係プロパティのプロパティ メタデータで指定されている <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> 関数を呼び出すことによって実現されます。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>In addition to being explicitly invoked through calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">呼び出し元を明示的に呼び出されているだけでなく<ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph>依存関係のプロパティ エディターが呼び出されます内部的に、依存関係プロパティの値がによって再評価されるたびに、<ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>プロパティ システムです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>When you invoke the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> method, you are ultimately invoking the coerce value callback for the property that you specify.</source>
          <target state="translated">呼び出した場合、<ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>メソッド、して、最終的に呼び出す、強制値プロパティのコールバックを指定します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>Typically you will invoke <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</source>
          <target state="translated">呼び出す通常<ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>強制値のコールバックが存在することがわかっている場合、および強制型変換のコールバックの条件を把握している場合のみです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The most common scenario for calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</source>
          <target state="translated">呼び出し元の最も一般的なシナリオ<ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>が依存する形で互いの値に影響を与える関連するプロパティのクラス処理、またはプロパティ変更のコールバック内で。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept>.</source>
          <target state="translated">詳しくは、「<bpt id="p1">[</bpt>依存関係プロパティのコールバックと検証<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> within a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> implementation that is used as the <ph id="ph3">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> for a different dependency properties on the same class.</source>
          <target state="translated">次の例では<ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>内で、<ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>実装として使用される、<ph id="ph3">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph>のさまざまな依存関係プロパティを同じクラスにします。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>This is a common pattern for introducing true value dependencies between dependency properties.</source>
          <target state="translated">これは、依存関係プロパティの間で true 値の依存関係を導入するための一般的なパターンです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The specified <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> or its value were invalid or do not exist.</source>
          <target state="translated">指定した <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> またはその値が無効であるか、存在しません。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> that wraps the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type of this instance.</source>
          <target state="translated">このインスタンスの <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 型をラップする <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> that wraps the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type of this instance.</source>
          <target state="translated">このインスタンスの <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> 型をラップする <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>This property is useful if an object that is returned from a method has a return value type of <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> and you want to perform property system specific operations on it depending on its type.</source>
          <target state="translated">このプロパティは、メソッドから返されるオブジェクトの戻り値の型がある場合に役立ちます。<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>プロパティは、その種類に応じてで特定操作にシステムを実行するとします。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>For example it is more efficient to call <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> rather than the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type.</source>
          <target state="translated">たとえばを呼び出すより効率的です<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29&gt;</ph>を使用して、<ph id="ph2">&lt;xref:System.Windows.DependencyObjectType&gt;</ph>ではなく、<ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>型です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> facilitates faster lookup.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> 高速の参照を容易になります。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>In the following pseudocode example, <ph id="ph1">`MySubClass`</ph> anticipates that additional derived classes might change the default value of the <ph id="ph2">`MyCustom`</ph> dependency property.</source>
          <target state="translated">例では、次の疑似コード、<ph id="ph1">`MySubClass`</ph>予測するその他の派生クラスがの既定値を変更する可能性があります、<ph id="ph2">`MyCustom`</ph>依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> value whenever that constructor is used as a derived class instantiator.</source>
          <target state="translated">クラスを活用して多態性、実際の派生クラスを決定できる既定のコンス トラクターを実装する、<ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph>値の派生クラスのインスタンスとしてそのコンス トラクターを使用するたびにします。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> to compare to the current instance.</source>
          <target state="translated">現在のインスタンスと比較する対象の <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>Determines whether a provided <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> が現在の <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> と等しいかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two instances are the same; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">2 つのインスタンスが同じである場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</source>
          <target state="translated">この実装は、参照の等価性のみで含まれているプロパティの値の等価性を評価しようとはしません。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> overrides and then seals two basic <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> methods: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> オーバーライドし、2 つの基本をシール<ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>メソッド:<ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph>と<ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The overrides call the <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementations, resulting in an object equality behavior.</source>
          <target state="translated">上書きを呼び出し、<ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>実装では、オブジェクトの等価性動作します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">これらの意図的なオーバーライドの目的は、派生クラスがの値の等価性を定義しようとしていることを防ぐため、<ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>Value equalities for <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> will never be accurate because of the innate property value-changing capabilities of a <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> and its dependency properties.</source>
          <target state="translated">値を等号<ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>の本質的なプロパティの値を変更する機能が原因で正確なできなくなります、<ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>とその依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>This includes fundamental <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> features such as data binding and the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">これを含む基本的な<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>データ バインドなどの機能と<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>プロパティ システムです。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>Gets a hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> のハッシュ コードを取得します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>A signed 32-bit integer hash code.</source>
          <target state="translated">32 ビット符号付き整数ハッシュ コード。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> overrides and then seals two <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> methods: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> オーバーライドし、2 つをシール<ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph>メソッド:<ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph>と<ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>The overrides call the <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementations, resulting in an object equality behavior.</source>
          <target state="translated">上書きを呼び出し、<ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>実装では、オブジェクトの等価性動作します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">これらの意図的なオーバーライドの目的は、派生クラスがの値の等価性を定義しようとしていることを防ぐため、<ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>Value equalities for <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> will never be accurate because of the innate property value-changing capabilities of a <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> and its dependency properties.</source>
          <target state="translated">値を等号<ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>の本質的なプロパティの値を変更する機能が原因で正確なできなくなります、<ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>とその依存関係プロパティです。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>This includes fundamental <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> features such as data binding and the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">これを含む基本的な<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>データ バインドなどの機能と<ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>プロパティ システムです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>Creates a specialized enumerator for determining which dependency properties have locally set values on this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">どの依存関係プロパティがこの <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> 上にローカルに設定された値を持つかを確認するための、専用の列挙子を作成します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>A specialized local value enumerator.</source>
          <target state="translated">専用のローカル値列挙子。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>A <bpt id="p1">*</bpt>local value<ept id="p1">*</ept> is any dependency property value that was set by <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>, as opposed to other aspects of the property system.</source>
          <target state="translated">A<bpt id="p1">*</bpt>ローカル値<ept id="p1">*</ept>によって設定された依存関係プロパティの値は、<ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>プロパティ システムの他の側面ではなく、します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> obtained by calling <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;</ph> can be used to enumerate properties that have a locally set value on a <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph>呼び出すことによって取得<ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;</ph>をローカルで設定されたプロパティを列挙するために使用する値を<ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>Each such property is represented in the enumerator by a <ph id="ph1">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> object, which has properties that reference the specific <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> and its values.</source>
          <target state="translated">このような各プロパティは、列挙子で表されます、 <ph id="ph1">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> 、固有の仕様を参照するプロパティを持つオブジェクト<ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph>とその値。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> would change if they were cleared.</source>
          <target state="translated">この手法をローカルに設定の列挙の値として使用できますの最適化またはローカルの値の他の処理などのプロパティ値を判断、<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>が変わってしまう場合、それらをクリアします。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The returned <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> might contain <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</source>
          <target state="translated">返された<ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph>が含まれます<ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph>は読み取り専用の依存関係プロパティまたは依存関係プロパティをプロパティ システムで値を計算する場所のレコードです。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>For example, a visual framework element that has an established width through layout will report a local value for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>.</source>
          <target state="translated">たとえばをレイアウトから確立の幅を持つ visual framework 要素がのローカル値をレポート<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>If you are getting local values in order to reset them, check the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</ph> value on the property identifier of each <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> to verify that the <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph> in question is not read-only.</source>
          <target state="translated">それらをリセットするためにローカルの値を取得する場合は、確認、<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</ph>の各プロパティの識別子の値<ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph>ことを確認する、<ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph>対象は読み取り専用です。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The following example iterates all properties that have local values set on an object, then calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> to clear the values of each such property.</source>
          <target state="translated">次の例は、そのオブジェクトに対する設定ローカル値を持つすべてのプロパティを反復処理を呼び出して<ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>などの各プロパティの値をクリアします。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to retrieve the value for.</source>
          <target state="translated">値を取得する対象のプロパティの <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> 識別子。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>Returns the current effective value of a dependency property on this instance of a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> のこのインスタンスにある依存関係プロパティの現在の有効値を返します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>Returns the current effective value.</source>
          <target state="translated">現在の有効値を返します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <bpt id="p1">*</bpt>effective value<ept id="p1">*</ept> is the value of the property that is returned by the property system to any caller that is requesting the value.</source>
          <target state="translated"><bpt id="p1">*</bpt>有効な値<ept id="p1">*</ept>プロパティ システムによって、値を要求している任意の呼び出し元に返されるプロパティの値です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</source>
          <target state="translated">有効な値は、プロパティのシステム値の優先順位に参加しているすべての可能な入力を評価したプロパティ システムの結果です。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>This includes coercion and animation.</source>
          <target state="translated">これには、強制とアニメーションが含まれます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティ値の優先順位<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>This method will never return <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</source>
          <target state="translated">このメソッドは返されません<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>内部的に、場合によってはも強制コールバックを通じて公開されるさまざまな容量で使用されているプロパティ システムの sentinel 値です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.PropertyType%2A&gt;</ph> that the return value can be converted to.</source>
          <target state="translated">プロパティの型にする必要がありますがわからない場合は、詳細ながあるかどうかを判断する、要求された依存関係プロパティの識別子を照会できます<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.PropertyType%2A&gt;</ph>戻り値に変換できます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The specified <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> or its value was invalid, or the specified <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> does not exist.</source>
          <target state="translated">指定した <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> またはその値が無効であるか、指定した <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> が存在しません。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to invalidate.</source>
          <target state="translated">無効にするプロパティの <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> 識別子。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Re-evaluates the effective value for the specified dependency property</source>
          <target state="translated">指定した依存関係プロパティの有効値を再評価します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>When you call <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>, any associated and applicable <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> functions registered for that dependency property might be invoked.</source>
          <target state="translated">呼び出すと<ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>、any 関連付けられている、該当する<ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph>または<ph id="ph3">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>関数に登録する依存関係プロパティを呼び出す可能性があります。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>をローカルの値の設定を持つプロパティでは効果がなく、ため、ローカルの値がアニメーションを除く他のプロパティのシステム入力より優先されます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>However, you could call <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>, then call <ph id="ph2">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>.</source>
          <target state="translated">ただし、呼び出すでした<ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>、呼び出して<ph id="ph2">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>依存関係プロパティ値の優先順位<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> is not necessarily applicable for many dependency property scenarios.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>は依存関係プロパティの多くのシナリオに必ずしも適用されません。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</source>
          <target state="translated">依存関係プロパティが、構成要素のいずれかの値が変更されたのため、無効になるプロパティのシステムは無効にし、依存関係プロパティを自動的に再評価します。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>However, there are still some appropriate scenarios where <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> is useful.</source>
          <target state="translated">ただし、シナリオは、まだいくつか適切な場所<ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>役に立ちます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>In particular, you can use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> inside the coerce value or property changed callback for a different dependency property.</source>
          <target state="translated">具体的には、使用することができます<ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>強制値またはプロパティの内部のコールバックを別の依存関係プロパティを変更します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>You can also use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> to force re-evaluation of a binding against a data source that is not able to implement the recommended <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</source>
          <target state="translated">使用することも<ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>推奨を実装するようになっているデータ ソースに対するバインドの再評価を強制的に<ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph>通知メカニズム (おそらくデータ クラスから派生できませんか、またはデータが静的メンバーを使用している場合)。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</source>
          <target state="translated">次の例では<ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>カスタム プロパティをするたびに、無効化されたプロパティの計算に関連するプロパティを変更します。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>This is an alternative technique to calling the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> method, because invalidating the property will also call any registered <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph>.</source>
          <target state="translated">これは、代替手法を呼び出すこと、<ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>メソッド、プロパティを無効には呼び出すことも、登録されているため<ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyObject.IsSealed">
          <source>Gets a value that indicates whether this instance is currently sealed (read-only).</source>
          <target state="translated">このインスタンスが現在シールされている (読み取り専用である) かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.IsSealed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this instance is sealed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このインスタンスがシールされている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.IsSealed">
          <source>This value is set internally.</source>
          <target state="translated">この値は、内部的に設定されます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</source>
          <target state="translated">関心のある依存関係プロパティの識別子、そのタイプのプロパティ メタデータ、新旧の値を含むイベント データ。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked whenever the effective value of any dependency property on this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> has been updated.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> の依存関係プロパティの有効値が更新されると、そのたびに呼び出されます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The specific dependency property that changed is reported in the event data.</source>
          <target state="translated">変更された特定の依存関係プロパティは、イベント データで報告されます。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</source>
          <target state="translated">このメソッドは、通常、個々 のプロパティの変更を検出するか、ケースごとにプロパティの無効化を実行するものではありません。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> 代わりに、一般的な無効化パターンの変更プロパティの広範な分類に関する特定の情報がわかっている場合です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>For example, changes in a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> might be changes in the value types of the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, or might be subproperties, where the changes are within other <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> references.</source>
          <target state="translated">たとえば、変更の<ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph>の値の型に変更可能性があります、 <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>、か可能性があります、サブプロパティを他の内に変更がある<ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph>参照します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> override implementation of <ph id="ph2">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph>の実装をオーバーライド<ph id="ph2">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph>かを判断するかどうか、プロパティ、サブプロパティをいずれの場合の適切な基本クラス ロジックを提供する内部情報を使用します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> is potentially invoked many times during the life of an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> オブジェクトの有効期間中に何度もを呼び出す可能性のあるは。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> functions for individual properties.</source>
          <target state="translated">したがって、特定のプロパティのメタデータをオーバーライドし、適用するを使用するプロパティの全体的なシステムのパフォーマンスが向上を実現できます<ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>個々 のプロパティです。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>However, you would use this method if a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</source>
          <target state="translated">場合にこのメソッドを使用すると、<ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>多数の値と相互に依存関係プロパティを含む動作をレンダリングする必要がありますを再実行関連のプロパティの無効化のケースのいくつかのようにロジックが含まれている場合またはします。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Always call the base implementation.</source>
          <target state="translated">常に基底の実装を呼び出します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Failure to do this will significantly disable the entire <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system, causing incorrect values to be reported.</source>
          <target state="translated">これを行うにはエラーには、全体が無効になりますが大幅に<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>プロパティ システム、正しくない値が報告されます。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to retrieve the value for.</source>
          <target state="translated">値を取得する対象のプロパティの <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> 識別子。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Returns the local value of a dependency property, if it exists.</source>
          <target state="translated">ローカルの依存関係プロパティの値を返します (存在する場合)。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Returns the local value, or returns the sentinel value <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> if no local value is set.</source>
          <target state="translated">ローカル値を返します。ローカル値が設定されていない場合は sentinel 値 <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> for most typical "get" operations for a dependency property.</source>
          <target state="translated">使用する必要があります<ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph>依存関係プロパティの「取得」操作で最も一般的です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A&gt;</ph> does not return the effective value for a variety of circumstances where the value was not locally set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A&gt;</ph> 返しません様々 な状況に対する有効な値、値がローカルに設定されていません。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</source>
          <target state="translated">スタイル、テーマ、テンプレートで設定されている値の場合は、メタデータ、またはプロパティ値の継承の既定値はローカル値は考慮されません。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>However, bindings and other expressions are considered to be local values, after they have been evaluated.</source>
          <target state="translated">ただし、束縛やその他の式が評価された後、ローカルの値であると見なされます。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>When no local value is set, this method returns <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</source>
          <target state="translated">このメソッドが戻るとき、ローカルの値が設定されていない<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>If the returned value is other than <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</source>
          <target state="translated">返された値が以外の場合は<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>、戻り値に変換できるより具体的な種類があるかどうかを判断する、要求された依存関係プロパティのメタデータをクエリを実行できます。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The identifier of the dependency property to set.</source>
          <target state="translated">設定する依存関係プロパティの識別子。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The new local value.</source>
          <target state="translated">新しいローカル値。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>Sets the value of a dependency property without changing its value source.</source>
          <target state="translated">依存関係プロパティ値のソースを変更せずにその値を設定します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</source>
          <target state="translated">このメソッドは、プログラムによって、アプリケーションの宣言されたプロパティを使用するを無効にしなくても、独自のプロパティのいずれかの値を設定するコンポーネントによって使用されます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph>メソッド、プロパティが既存のトリガーのデータ バインドの有効な値を変更して、スタイルは引き続き機能します。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>Attempted to modify a read-only dependency property, or a property on a sealed <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">読み取り専用の依存関係プロパティ、またはシールされている <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> 上のプロパティを変更しようとしました。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> was not the correct type as registered for the <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が、<ph id="ph2">&lt;paramref name="dp" /&gt;</ph> プロパティに登録されている正しい型ではありません。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Sets the local value of a dependency property.</source>
          <target state="translated">ローカルの依存関係プロパティの値を設定します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The identifier of the dependency property to set.</source>
          <target state="translated">設定する依存関係プロパティの識別子。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The new local value.</source>
          <target state="translated">新しいローカル値。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Sets the local value of a dependency property, specified by its dependency property identifier.</source>
          <target state="translated">依存関係プロパティ識別子を指定して、該当する依存関係プロパティのローカル値を設定します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</source>
          <target state="translated">指定された型が最初に登録されているとおりに、依存関係プロパティの宣言されている型が一致しない場合、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter should always be provided as the appropriate type.</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターを適切な型として常に指定する必要があります。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The exception conditions are potentially influenced by the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> callback that exists on the dependency property identifier of the dependency property being set.</source>
          <target state="translated">例外条件は、可能性のある影響を受けます、<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph>設定される依存関係プロパティの依存関係プロパティの識別子上に存在するコールバック。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</source>
          <target state="translated">それ以外の場合、指定された値に問題がある一般的な型チェックの条件をネイティブ型は Double と文字列を渡すなど)。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Attempted to modify a read-only dependency property, or a property on a sealed <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">読み取り専用の依存関係プロパティ、またはシールされている <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> 上のプロパティを変更しようとしました。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> was not the correct type as registered for the <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> が、<ph id="ph2">&lt;paramref name="dp" /&gt;</ph> プロパティに登録されている正しい型ではありません。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> identifier of the property to set.</source>
          <target state="translated">設定するプロパティの <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> 識別子。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The new local value.</source>
          <target state="translated">新しいローカル値。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>Sets the local value of a read-only dependency property, specified by the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> identifier of the dependency property.</source>
          <target state="translated">依存関係プロパティの <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> 識別子で指定した読み取り専用の依存関係プロパティのローカル値を設定します。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</source>
          <target state="translated">この署名は通常、カスタム クラスで定義されている読み取り専用の依存関係プロパティの値を設定するときに使用します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>Generally, <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</source>
          <target state="translated">一般に、<ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>依存関係プロパティの特定の値を提供する内部ロジックを実装して、その依存関係プロパティを登録する型からのみ呼び出されます。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Read-Only Dependency Properties<ept id="p1">](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>読み取り専用の依存関係プロパティ<ept id="p1">](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</source>
          <target state="translated">指定された型が最初に登録されているとおりに、依存関係プロパティの宣言されている型が一致しない場合、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter should always be provided as the appropriate type.</source>
          <target state="translated"><ph id="ph1">`value`</ph>パラメーターを適切な型として常に指定する必要があります。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The exception conditions are potentially influenced by the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> callback that exists on the dependency property identifier of the dependency property being set.</source>
          <target state="translated">例外条件は、可能性のある影響を受けます、<ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph>設定される依存関係プロパティの依存関係プロパティの識別子上に存在するコールバック。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The following example defines a read-only dependency property, along with a <ph id="ph1">`public static readonly`</ph> <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> that provides necessary read-only exposure to property consumers, and the get accessor for the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> wrapper.</source>
          <target state="translated">次の例では、読み取り専用の依存関係プロパティを定義と共に、 <ph id="ph1">`public static readonly`</ph> <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph>プロパティ コンシューマーとの get アクセサーに必要な読み取り専用の露出を提供する、<ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph>ラッパーです。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>The identifier for the dependency property that should be serialized.</source>
          <target state="translated">シリアル化する必要がある依存関係プロパティの識別子。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</source>
          <target state="translated">シリアル化プロセスが、指定された依存関係プロパティの値をシリアル化する必要があるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the dependency property that is supplied should be value-serialized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定された依存関係プロパティの値をシリアル化する必要がある場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>The default implementation returns <ph id="ph1">`true`</ph> for all cases in which a dependency property had a local value established on the <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">既定の実装を返します<ph id="ph1">`true`</ph>の依存関係プロパティをするには、上に確立されたローカル値を持っていたすべてのケースの<ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>Overrides for this method might handle specific dependency properties differently.</source>
          <target state="translated">このメソッドのオーバーライドの処理は、特定の依存関係プロパティに異なる可能性があります。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>