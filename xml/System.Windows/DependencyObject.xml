<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5652ff55f90cc72dcdbf7f830e6d730953e6168" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37550071" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="81831-101">Represents an object that participates in the dependency property system.</span>
      <span class="sxs-lookup">
        <span data-stu-id="81831-101">Represents an object that participates in the dependency property system.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-102"><xref:System.Windows.DependencyObject>クラスにより[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]その派生クラスでプロパティ システム サービスです。</span><span class="sxs-lookup"><span data-stu-id="81831-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="81831-103">プロパティ システムの主な機能は、システム通知が変更された値を提供して、プロパティの値を計算するには。</span><span class="sxs-lookup"><span data-stu-id="81831-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="81831-104">プロパティ システムに参加している別のキー クラスは<xref:System.Windows.DependencyProperty>します。</span><span class="sxs-lookup"><span data-stu-id="81831-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="81831-105"><xref:System.Windows.DependencyProperty> プロパティ システムに依存関係プロパティの登録を有効し、は識別し、各依存関係プロパティに関する情報に対し<xref:System.Windows.DependencyObject>基底クラスがオブジェクトの依存関係プロパティを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="81831-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="81831-106"><xref:System.Windows.DependencyObject> 次のサービスと特性があります。</span><span class="sxs-lookup"><span data-stu-id="81831-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="81831-107">依存関係プロパティのサポートをホストします。</span><span class="sxs-lookup"><span data-stu-id="81831-107">Dependency property hosting support.</span></span> <span data-ttu-id="81831-108">呼び出すことによって、依存関係プロパティを登録する、<xref:System.Windows.DependencyProperty.Register%2A>メソッド、およびメソッドの戻り値をクラスにパブリックな静的フィールドとして保存します。</span><span class="sxs-lookup"><span data-stu-id="81831-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="81831-109">ホストのサポートされている添付プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81831-109">Attached property hosting support.</span></span> <span data-ttu-id="81831-110">呼び出して添付プロパティを登録する、<xref:System.Windows.DependencyProperty.RegisterAttached%2A>メソッド、およびクラスのパブリック静的読み取り専用フィールドとしてメソッドの戻り値を格納します。</span><span class="sxs-lookup"><span data-stu-id="81831-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="81831-111">(メンバーの追加要件もあります。 これを表すことに注意してください、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]添付プロパティの特定の実装。</span><span class="sxs-lookup"><span data-stu-id="81831-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="81831-112">詳細については、次を参照してください[添付プロパティの概要](~/docs/framework/wpf/advanced/attached-properties-overview.md)。)。派生したクラスで添付プロパティを設定できます<xref:System.Windows.DependencyObject>します。</span><span class="sxs-lookup"><span data-stu-id="81831-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="81831-113">取得、設定、およびユーティリティ メソッドの上に存在する依存関係プロパティの値をクリア、<xref:System.Windows.DependencyObject>します。</span><span class="sxs-lookup"><span data-stu-id="81831-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="81831-114">メタデータは、値のサポート、プロパティ変更通知、および依存関係プロパティのオーバーライドのコールバックを強制または添付プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81831-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="81831-115">また、<xref:System.Windows.DependencyObject>クラスに依存関係プロパティの所有者ごとのプロパティのメタデータが容易になります。</span><span class="sxs-lookup"><span data-stu-id="81831-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="81831-116">クラスの共通基本クラスから派生した<xref:System.Windows.ContentElement>、 <xref:System.Windows.Freezable>、または<xref:System.Windows.Media.Visual>します。</span><span class="sxs-lookup"><span data-stu-id="81831-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="81831-117">(<xref:System.Windows.UIElement>、もう 1 つの基本要素クラスを含むクラス階層構造になって<xref:System.Windows.Media.Visual>)。</span><span class="sxs-lookup"><span data-stu-id="81831-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81831-118">派生した次の例では、<xref:System.Windows.DependencyObject>新しい抽象クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="81831-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="81831-119">クラスは、添付プロパティを登録し、その添付プロパティのサポート メンバーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="81831-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="81831-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="81831-121">Clears the local value of a property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-121">Clears the local value of a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="81831-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-123">Clears the local value of a property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-123">Clears the local value of a property.</span>
          </span>
          <span data-ttu-id="81831-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-125">呼び出すことによって、プロパティ値をクリアする<xref:System.Windows.DependencyObject.ClearValue%2A>必ずしも与えない依存関係プロパティの依存関係プロパティのメタデータで指定されている既定値。</span><span class="sxs-lookup"><span data-stu-id="81831-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="81831-126">に限って、プロパティをクリアするには、ローカル値が適用されている可能性がありますがクリアします。</span><span class="sxs-lookup"><span data-stu-id="81831-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="81831-127">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="81831-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81831-128">次の例では、設定、オブジェクトをローカルの値を持つすべてのプロパティを反復処理を呼び出して<xref:System.Windows.DependencyObject.ClearValue%2A>このような各プロパティの値をクリアします。</span><span class="sxs-lookup"><span data-stu-id="81831-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="81831-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="81831-130">The key for the dependency property to be cleared.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-130">The key for the dependency property to be cleared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-131">Clears the local value of a read-only property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-131">Clears the local value of a read-only property.</span>
          </span>
          <span data-ttu-id="81831-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-133">A<xref:System.Windows.DependencyPropertyKey>プロパティ システム操作の読み取り専用の依存関係プロパティを識別します。</span><span class="sxs-lookup"><span data-stu-id="81831-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="81831-134">読み取り専用の依存関係プロパティを定義するクラスは、パブリック アクセス権を持つには、このキーを公開する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81831-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="81831-135">場合、一般公開されているキーのプロパティの読み取り専用の文字を否定するパブリック コード パスが提供するなどのメソッド<xref:System.Windows.DependencyObject.ClearValue%2A>または<xref:System.Windows.DependencyObject.SetValue%2A>クラスまたはキーを参照するアセンブリの外部から呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="81831-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="81831-136">呼び出すことによって、プロパティ値をクリアする<xref:System.Windows.DependencyObject.ClearValue%2A>必ずしも与えない依存関係プロパティの依存関係プロパティのメタデータで指定されている既定値。</span><span class="sxs-lookup"><span data-stu-id="81831-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="81831-137">のみ具体的には、値をクリアするには、ローカル値が適用されている可能性がありますがクリアします。</span><span class="sxs-lookup"><span data-stu-id="81831-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="81831-138">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="81831-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="81831-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="81831-140">The identifier for the dependency property to coerce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-140">The identifier for the dependency property to coerce.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-141">Coerces the value of the specified dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-141">Coerces the value of the specified dependency property.</span>
          </span>
          <span data-ttu-id="81831-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-143">呼び出し元を明示的に呼び出されるだけでなく<xref:System.Windows.DependencyObject.CoerceValue%2A>、<xref:System.Windows.CoerceValueCallback>依存関係のプロパティも呼び出される内部で依存関係プロパティの値が再評価されるたびに、[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]プロパティ システム。</span><span class="sxs-lookup"><span data-stu-id="81831-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="81831-144">呼び出した場合、<xref:System.Windows.DependencyObject.CoerceValue%2A>メソッドでは、指定したプロパティの強制値コールバック呼び出す最終的にします。</span><span class="sxs-lookup"><span data-stu-id="81831-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="81831-145">通常は呼び出す<xref:System.Windows.DependencyObject.CoerceValue%2A>強制値コールバックが存在することがわかっている場合、および強制型変換のコールバックの条件がわかっている場合のみです。</span><span class="sxs-lookup"><span data-stu-id="81831-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="81831-146">呼び出し元の最も一般的なシナリオ<xref:System.Windows.DependencyObject.CoerceValue%2A>が依存している方法で他の値に影響を与える関連するプロパティのクラス処理またはプロパティ変更コールバック内で。</span><span class="sxs-lookup"><span data-stu-id="81831-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="81831-147">詳しくは、「[依存関係プロパティのコールバックと検証](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="81831-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81831-148">次の例では<xref:System.Windows.DependencyObject.CoerceValue%2A>内で、<xref:System.Windows.PropertyChangedCallback>として使用される実装、<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A>の同じクラスでさまざまな依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81831-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="81831-149">これは、依存関係プロパティ間の値が true の依存関係を導入するための一般的なパターンです。</span><span class="sxs-lookup"><span data-stu-id="81831-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="81831-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="81831-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="81831-152">A<see cref="T:System.Windows.DependencyObjectType" />をラップする、[!このインスタンスの型を INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]。</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-153">このプロパティは、メソッドから返されるオブジェクトの戻り値の型がある場合に役立ちます。<xref:System.Windows.DependencyObject>プロパティ システムで特定の操作がその型に応じてを実行したいとします。</span><span class="sxs-lookup"><span data-stu-id="81831-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="81831-154">呼び出す方が効率的ですたとえば<xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>を使用して、<xref:System.Windows.DependencyObjectType>なく[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]型。</span><span class="sxs-lookup"><span data-stu-id="81831-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="81831-155"><xref:System.Windows.DependencyObjectType> 高速参照を容易になります。</span><span class="sxs-lookup"><span data-stu-id="81831-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81831-156">次の擬似コード例では、`MySubClass`予測する追加の派生クラスがの既定値を変更する可能性があります、`MyCustom`依存関係プロパティ。</span><span class="sxs-lookup"><span data-stu-id="81831-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="81831-157">実際の派生クラスを判断するポリモーフィズムの活用を既定のコンス トラクターを実装するクラス、<xref:System.Windows.DependencyObjectType>コンス トラクターは派生クラスのインスタンスとして使用されるたびに値します。</span><span class="sxs-lookup"><span data-stu-id="81831-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="81831-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="81831-160">
            <see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-160">
              <see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-161">この実装は参照の等価性のみを含まれているプロパティの値の等価性を評価しようとはしません。</span><span class="sxs-lookup"><span data-stu-id="81831-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="81831-162">
            <para>
              <see cref="T:System.Windows.DependencyObject" /> オーバーライドし、2 つの基本をシールし<see cref="T:System.Object" />メソッド:<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" />と<see cref="M:System.Windows.DependencyObject.GetHashCode" />します。上書きを呼び出し、<see cref="T:System.Object" />実装では、オブジェクトの等価性動作します。これらの意図的な上書きの目的は、派生クラスがの値の等価性の定義を試行するを防ぐためには、<see cref="T:System.Windows.DependencyObject" />します。値を等号<see cref="T:System.Windows.DependencyObject" />の本質的なプロパティの値を変更する機能のため正確なことになります、<see cref="T:System.Windows.DependencyObject" />とその依存関係プロパティ。これを含む基本的な [!データ バインディングなどの機能を INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] と [です。INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティのシステムです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-162">
              <para>
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />. The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior. The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />. Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties. This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="81831-163">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-163">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="81831-164">A signed 32-bit integer hash code.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-164">A signed 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="81831-165">
            <para>
              <see cref="T:System.Windows.DependencyObject" /> オーバーライドし、2 つをシール<see cref="T:System.Object" />メソッド:<see cref="M:System.Windows.DependencyObject.Equals(System.Object)" />と<see cref="M:System.Windows.DependencyObject.GetHashCode" />します。上書きを呼び出し、<see cref="T:System.Object" />実装では、オブジェクトの等価性動作します。これらの意図的な上書きの目的は、派生クラスがの値の等価性の定義を試行するを防ぐためには、<see cref="T:System.Windows.DependencyObject" />します。値を等号<see cref="T:System.Windows.DependencyObject" />の本質的なプロパティの値を変更する機能のため正確なことになります、<see cref="T:System.Windows.DependencyObject" />とその依存関係プロパティ。これを含む基本的な [!データ バインディングなどの機能を INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] と [です。INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティのシステムです。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-165">
              <para>
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />. The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior. The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />. Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties. This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="81831-166">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-166">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="81831-167">A specialized local value enumerator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-167">A specialized local value enumerator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-168">A*ローカル値*によって設定された依存関係プロパティの値は、<xref:System.Windows.DependencyObject.SetValue%2A>プロパティ システムの他の側面ではなく、します。</span><span class="sxs-lookup"><span data-stu-id="81831-168">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="81831-169"><xref:System.Windows.LocalValueEnumerator>呼び出すことによって取得<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>ローカルに設定されたプロパティを列挙するために使用できる値を<xref:System.Windows.DependencyObject>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="81831-169">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="81831-170">このような各プロパティが、列挙子で表される、<xref:System.Windows.LocalValueEntry>オブジェクトは、特定の参照プロパティを持つ<xref:System.Windows.DependencyProperty>とその値。</span><span class="sxs-lookup"><span data-stu-id="81831-170">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="81831-171">この手法の列挙でローカルに設定値として使用できますの最適化またはローカルの値の他の処理などのプロパティ値を判断、<xref:System.Windows.DependencyObject>変更、消去された場合。</span><span class="sxs-lookup"><span data-stu-id="81831-171">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="81831-172">返された<xref:System.Windows.LocalValueEnumerator>あります<xref:System.Windows.LocalValueEntry>レコードは読み取り専用依存関係プロパティまたは依存関係プロパティの値がプロパティ システムによって計算されます。</span><span class="sxs-lookup"><span data-stu-id="81831-172">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="81831-173">レイアウトから確立の幅を持つ visual フレームワーク要素がのローカル値を報告するなど、<xref:System.Windows.FrameworkElement.ActualWidth%2A>します。</span><span class="sxs-lookup"><span data-stu-id="81831-173">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="81831-174">それらをリセットするにはローカル値を取得する場合は、確認、<xref:System.Windows.DependencyProperty.ReadOnly%2A>の各プロパティの識別子で値<xref:System.Windows.LocalValueEntry>ことを確認する、<xref:System.Windows.DependencyProperty>問題のない読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="81831-174">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81831-175">次の例では、設定、オブジェクトをローカルの値を持つすべてのプロパティを反復処理を呼び出して<xref:System.Windows.DependencyObject.ClearValue%2A>このような各プロパティの値をクリアします。</span><span class="sxs-lookup"><span data-stu-id="81831-175">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="81831-176">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-176">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-177">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-177">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="81831-178">Returns the current effective value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-178">Returns the current effective value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-179">*有効な値*プロパティ システムによって、値を要求している任意の呼び出し元に返されるプロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="81831-179">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="81831-180">有効な値では、プロパティ システムの値の優先順位に参加しているすべての入力を評価した、プロパティ システムの結果です。</span><span class="sxs-lookup"><span data-stu-id="81831-180">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="81831-181">これには、強制型変換とアニメーションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="81831-181">This includes coercion and animation.</span></span> <span data-ttu-id="81831-182">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="81831-182">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="81831-183">このメソッドは返されません<xref:System.Windows.DependencyProperty.UnsetValue>します。</span><span class="sxs-lookup"><span data-stu-id="81831-183">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="81831-184"><xref:System.Windows.DependencyProperty.UnsetValue>も内部的には、場合によっては強制型変換のコールバックを通じて公開されるさまざまな容量で使用されているプロパティ システムの sentinel 値です。</span><span class="sxs-lookup"><span data-stu-id="81831-184">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="81831-185">プロパティの型にする必要がありますがわからない場合は、詳細ながあるかどうかを判断する要求された依存関係プロパティの識別子をクエリできます<xref:System.Windows.DependencyProperty.PropertyType%2A>戻り値に変換できます。</span><span class="sxs-lookup"><span data-stu-id="81831-185">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="81831-186">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-186">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="81831-187">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-187">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-188">Re-evaluates the effective value for the specified dependency property</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-188">Re-evaluates the effective value for the specified dependency property</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-189">呼び出すと<xref:System.Windows.DependencyObject.InvalidateProperty%2A>、any 関連付けられている、該当する<xref:System.Windows.CoerceValueCallback>または<xref:System.Windows.PropertyChangedCallback>関数は、その依存関係プロパティが呼び出されるを登録します。</span><span class="sxs-lookup"><span data-stu-id="81831-189">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="81831-190">呼び出す<xref:System.Windows.DependencyObject.InvalidateProperty%2A>をローカルの値の設定を持つプロパティでは効果がありません、ため、ローカルの値のアニメーションを除く、他のプロパティ システム入力よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="81831-190">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="81831-191">ただし、呼び出すことができます<xref:System.Windows.DependencyObject.ClearValue%2A>、呼び出して<xref:System.Windows.DependencyObject.InvalidateProperty%2A>します。</span><span class="sxs-lookup"><span data-stu-id="81831-191">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="81831-192">詳細については、「[依存関係プロパティ値の優先順位](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="81831-192">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="81831-193">呼び出す<xref:System.Windows.DependencyObject.InvalidateProperty%2A>は依存関係プロパティの多くのシナリオに必ずしも適用されません。</span><span class="sxs-lookup"><span data-stu-id="81831-193">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="81831-194">依存関係プロパティが、構成要素のいずれかの値の変更のため無効になった場合、プロパティ システムは無効にし、依存関係プロパティを自動的に再評価します。</span><span class="sxs-lookup"><span data-stu-id="81831-194">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="81831-195">ただし、シナリオは、まだいくつか適切な場所<xref:System.Windows.DependencyObject.InvalidateProperty%2A>役に立ちます。</span><span class="sxs-lookup"><span data-stu-id="81831-195">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="81831-196">具体的には、使用することができます<xref:System.Windows.DependencyObject.InvalidateProperty%2A>強制値またはプロパティ内でさまざまな依存関係プロパティのコールバックを変更します。</span><span class="sxs-lookup"><span data-stu-id="81831-196">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="81831-197">使用することも<xref:System.Windows.DependencyObject.InvalidateProperty%2A>推奨を実装するようになっているデータ ソースに対して、バインドの再評価を強制する<xref:System.ComponentModel.INotifyPropertyChanged>通知メカニズム (おそらくから派生できませんをまたはデータが静的なデータ クラスを使用している場合メンバーの場合)。</span><span class="sxs-lookup"><span data-stu-id="81831-197">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81831-198">次の例では<xref:System.Windows.DependencyObject.InvalidateProperty%2A>カスタム プロパティをされるたびに、無効化されたプロパティの計算に関連するプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="81831-198">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="81831-199">これは、呼び出し元に別の手法、<xref:System.Windows.DependencyObject.CoerceValue%2A>メソッド、プロパティを無効には、呼び出されますもために登録<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>します。</span><span class="sxs-lookup"><span data-stu-id="81831-199">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="81831-200">Gets a value that indicates whether this instance is currently sealed (read-only).</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-200">Gets a value that indicates whether this instance is currently sealed (read-only).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="81831-201">
            <see langword="true" /> このインスタンスがシールされています。 場合、それ以外の場合、<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-201">
              <see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-202">この値は、内部的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="81831-202">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="81831-203">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-203">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-204">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-204">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span>
          </span>
          <span data-ttu-id="81831-205">The specific dependency property that changed is reported in the event data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-205">The specific dependency property that changed is reported in the event data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-206">このメソッドは、通常、個々 のプロパティの変更を検出するか、ケースごとにプロパティの無効化を実行するものではありません。</span><span class="sxs-lookup"><span data-stu-id="81831-206">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="81831-207"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 代わりに、変更、無効化の一般的なパターンのプロパティの広範な分類について特定の情報がわかっている場合です。</span><span class="sxs-lookup"><span data-stu-id="81831-207"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="81831-208">変更など、<xref:System.Windows.Freezable>の値の型の変更があります、 <xref:System.Windows.Freezable>、または可能性があります、サブプロパティ他内で変更された箇所<xref:System.Windows.Freezable>参照。</span><span class="sxs-lookup"><span data-stu-id="81831-208">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="81831-209"><xref:System.Windows.Freezable>の実装をオーバーライド<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>プロパティ、サブプロパティと、どちらの場合も適切な基本クラス ロジックを提供するかどうかを判断する内部情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="81831-209">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="81831-210"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> オブジェクトの有効期間中に何度もを呼び出す可能性のあります。</span><span class="sxs-lookup"><span data-stu-id="81831-210"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="81831-211">固有のプロパティのメタデータをオーバーライドし、適用する場合、全体的なプロパティ システムのパフォーマンスが向上を実現するそのため、<xref:System.Windows.CoerceValueCallback>または<xref:System.Windows.PropertyChangedCallback>個々 のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="81831-211">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="81831-212">場合にこのメソッドを使用すると、<xref:System.Windows.DependencyObject>多数値と相互に依存関係プロパティにはが含まれています動作をレンダリングする必要がありますを再実行するいくつかの関連プロパティの無効化のケースのようにロジックが含まれている場合またはします。</span><span class="sxs-lookup"><span data-stu-id="81831-212">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="81831-213">
            <para>常に、基本実装を呼び出します。これに失敗には、全体が無効になりますが大幅に [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティ システムに報告する不適切な値の原因です。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-213">
              <para>Always call the base implementation. Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="81831-214">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-214">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-215">Returns the local value of a dependency property, if it exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-215">Returns the local value of a dependency property, if it exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="81831-216">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-216">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-217">使用する必要があります<xref:System.Windows.DependencyObject.GetValue%2A>依存関係プロパティの"get"操作で最も一般的な。</span><span class="sxs-lookup"><span data-stu-id="81831-217">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="81831-218"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> 返さないさまざまな状況に対する有効な値、値がローカルに設定されていません。</span><span class="sxs-lookup"><span data-stu-id="81831-218"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="81831-219">スタイル、テーマ、テンプレートで設定されている値の場合は、メタデータまたはプロパティ値の継承の既定値はローカル値は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="81831-219">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="81831-220">ただし、バインディング、およびその他の式は、ローカルの値が評価された後と見なされます。</span><span class="sxs-lookup"><span data-stu-id="81831-220">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="81831-221">このメソッドが戻るときに、ローカルの値が設定されていない<xref:System.Windows.DependencyProperty.UnsetValue>します。</span><span class="sxs-lookup"><span data-stu-id="81831-221">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="81831-222">返される値が以外の場合は<xref:System.Windows.DependencyProperty.UnsetValue>、戻り値を変換できる具体的な型があるかどうかを判断する要求された依存関係プロパティのメタデータをクエリすることができます。</span><span class="sxs-lookup"><span data-stu-id="81831-222">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="81831-223">The identifier of the dependency property to set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-223">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="81831-224">The new local value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-224">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-225">Sets the value of a dependency property without changing its value source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-225">Sets the value of a dependency property without changing its value source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-226">このメソッドは、プログラムでプロパティをアプリケーションの宣言の使用を無効にしなくても、独自のプロパティのいずれかの値を設定するコンポーネントによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="81831-226">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="81831-227"><xref:System.Windows.DependencyObject.SetCurrentValue%2A>メソッド、プロパティが既存のトリガーのデータ バインディングの有効な値を変更して、スタイルは引き続き機能します。</span><span class="sxs-lookup"><span data-stu-id="81831-227">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="81831-228">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-228">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="81831-229">
            <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-229">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="81831-230">Sets the local value of a dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-230">Sets the local value of a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="81831-231">The identifier of the dependency property to set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-231">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="81831-232">The new local value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-232">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-233">Sets the local value of a dependency property, specified by its dependency property identifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-233">Sets the local value of a dependency property, specified by its dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-234">指定された型が最初に登録されているように、依存関係プロパティの宣言されている型が一致しない場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81831-234">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="81831-235">`value`常に適切な型としてパラメーターを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81831-235">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="81831-236">例外条件によって決まる可能性のある、<xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>設定される依存関係プロパティの依存関係プロパティの識別子上に存在するコールバック。</span><span class="sxs-lookup"><span data-stu-id="81831-236">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="81831-237">それ以外の場合、指定された値に (たとえば、ネイティブ型は Double と文字列を渡すなど) の一般的な型チェックの状態を失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="81831-237">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="81831-238">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-238">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="81831-239">
            <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-239">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="81831-240">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-240">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="81831-241">The new local value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-241">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-242">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-242">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-243">この署名は通常、カスタム クラスで定義されている読み取り専用の依存関係プロパティの値を設定するときに使用します。</span><span class="sxs-lookup"><span data-stu-id="81831-243">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="81831-244">一般に、<xref:System.Windows.DependencyObject.SetValue%2A>依存関係プロパティの特定の値を提供する内部ロジックを実装して、その依存関係プロパティを登録する型からのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="81831-244">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="81831-245">詳細については、「[読み取り専用の依存関係プロパティ](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="81831-245">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="81831-246">指定された型が最初に登録されているように、依存関係プロパティの宣言されている型が一致しない場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="81831-246">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="81831-247">`value`常に適切な型としてパラメーターを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="81831-247">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="81831-248">例外条件によって決まる可能性のある、<xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>設定される依存関係プロパティの依存関係プロパティの識別子上に存在するコールバック。</span><span class="sxs-lookup"><span data-stu-id="81831-248">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81831-249">次の例では、読み取り専用の依存関係プロパティを定義と共に、 `public static readonly` <xref:System.Windows.DependencyProperty>プロパティのコンシューマーとの get アクセサーに必要な読み取り専用の露出を提供する、[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]ラッパー。</span><span class="sxs-lookup"><span data-stu-id="81831-249">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="81831-250">The identifier for the dependency property that should be serialized.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-250">The identifier for the dependency property that should be serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="81831-251">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-251">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="81831-252">
            <see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-252">
              <see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81831-253">既定の実装を返します`true`を依存関係プロパティに確立されているローカル値の場合、<xref:System.Windows.DependencyObject>します。</span><span class="sxs-lookup"><span data-stu-id="81831-253">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="81831-254">
            <para>このメソッドのオーバーライドの処理は、特定の依存関係プロパティに異なる可能性があります。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="81831-254">
              <para>Overrides for this method might handle specific dependency properties differently.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>