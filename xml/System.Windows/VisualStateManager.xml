<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="98168fe8a5962d9aba67f7eb67ddd708a69e45ce" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69432792" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>コントロールの状態を遷移するための状態とロジックを管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を<xref:System.Windows.VisualStateManager>使用すると、コントロールの状態、コントロールが特定の状態にあるときの外観、およびコントロールが状態を変更したときの状態を指定できます。 たとえば、が押さ<xref:System.Windows.Controls.Button>れているときとは異なる方法で押されていると、が若干異なる場合があります。 が押された<xref:System.Windows.Controls.Button>とき (`"Pressed"`) と (`"Normal"`) ではない場合に、が定義する2つの状態。 コントロールが状態にある場合の外観は、 <xref:System.Windows.VisualState>によって定義されます。 には、コントロールが<xref:System.Windows.Media.Animation.Storyboard>その状態であるときにコントロールの外観がどのように変化するかを指定するオブジェクトのコレクションが含まれています。<xref:System.Windows.VisualState> コントロールの`VisualStateManager.VisualStateGroups`添付プロパティを設定することによって、コントロールに視覚的な状態を追加します。 各<xref:System.Windows.VisualStateGroup>には、相互<xref:System.Windows.VisualState>に排他的なオブジェクトのコレクションが含まれています。 つまり、コントロールの状態<xref:System.Windows.VisualStateGroup>は常に1つだけです。  
  
 で<xref:System.Windows.VisualStateManager>は、コントロールが特定の状態に入るタイミングを指定することもできます。 状態を変更するために呼び出す必要があるメソッドは、実際のシナリオによって異なります。 <xref:System.Windows.VisualStateManager> <xref:System.Windows.VisualStateManager.GoToState%2A>でを使用するコントロールを作成する場合は、メソッドを呼び出します。<xref:System.Windows.Controls.ControlTemplate> を使用<xref:System.Windows.VisualStateManager>するコントロールを作成する方法の詳細については、「[カスタマイズ可能な外観を持つコントロールの作成](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)」を参照してください。 <xref:System.Windows.VisualStateManager> <xref:System.Windows.VisualStateManager> <xref:System.Windows.Controls.UserControl> <xref:System.Windows.VisualStateManager.GoToElementState%2A>の外側でを使用する場合(たとえば、または1つの要素でを使用する場合)は、メソッドを呼び出します。<xref:System.Windows.Controls.ControlTemplate> どちらの場合も、 <xref:System.Windows.VisualStateManager>は、関連する状態に関連付けられているストーリーボードを適切に開始および停止するために必要なロジックを実行します。 たとえば、コントロールが状態を`State1`定義し、それぞれにストーリーボードが関連付けられていると`State2`します。 コントロールが`State1`内にあり、または`State2` <xref:System.Windows.VisualStateManager.GoToElementState%2A>に<xref:System.Windows.VisualStateManager.GoToState%2A>渡した場合<xref:System.Windows.VisualStateManager> 、はで`State2`ストーリーボードを開始し、 `State1`でストーリーボードを停止します。  
  
 に[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]含まれているコントロールは<xref:System.Windows.VisualStateManager> 、を使用して表示状態を変更します。 に<xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.VisualState> <xref:System.Windows.Controls.ControlTemplate>含まれるコントロールのを作成するときに、コントロールのにオブジェクトを追加して、コントロールの外観を特定の状態で指定することができます。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] に[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]含まれているコントロールの表示状態の名前を確認するには、「[コントロールのスタイルとテンプレート](~/docs/framework/wpf/controls/control-styles-and-templates.md)」を参照してください。 コントロールのロジックは、状態間の遷移を処理するので、新しい<xref:System.Windows.VisualState> <xref:System.Windows.Controls.ControlTemplate>でオブジェクトを定義する以外に何もする必要はありません。 既存のコントロールのコントロールテンプレートを作成する方法の詳細については、「 [ControlTemplate を作成して既存のコントロールの外観をカスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)する」を参照してください。  
  
 状態間の遷移のために独自のロジックを実装する場合は、から<xref:System.Windows.VisualStateManager>継承し、 <xref:System.Windows.VisualStateManager.GoToStateCore%2A> <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType>メソッドをオーバーライドし、カスタムロジックを使用するコントロールの添付プロパティを設定する必要があります。  
  
   
  
## Examples  
 次の例では<xref:System.Windows.Shapes.Rectangle> 、を作成し`CommonStates` 、と`VisualStateManager.VisualStatesGroups`いう名前のを<xref:System.Windows.VisualStateGroup>添付プロパティに追加します。 この例では`MouseOver` 、 `Normal` <xref:System.Windows.VisualState> 内のオブジェクト<xref:System.Windows.VisualStateGroup>およびオブジェクトを定義します。 `CommonStates` ユーザーがマウスポインターをの<xref:System.Windows.Shapes.Rectangle>上に移動すると、1秒間に赤から緑に変わります。 ユーザーがマウスを四角形の外に移動すると、 <xref:System.Windows.Controls.Grid>は直ちに赤に戻ります。 `Normal`状態では、 <xref:System.Windows.Media.Animation.Storyboard>が定義されていないことに注意してください。 <xref:System.Windows.Shapes.Rectangle> が状態`Normal`から<xref:System.Windows.Media.SolidColorBrush.Color%2A>状態に遷移する`MouseOver`と、のが停止し、のプロパティによってが返されるため、は必要<xref:System.Windows.Media.SolidColorBrush>ありません。 <xref:System.Windows.Media.Animation.Storyboard> `MouseOver` <xref:System.Windows.Media.Animation.Storyboard>赤にします。  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 次の例では、前の例で定義されているイベントハンドラー <xref:System.Windows.VisualStateManager.GoToElementState%2A>を示しています。メソッドを呼び出して、状態を遷移させることができます。 前の例の四角形がの<xref:System.Windows.Controls.ControlTemplate>一部であった場合、この例では<xref:System.Windows.VisualStateManager.GoToState%2A>メソッドを呼び出す必要があります。  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.VisualStateManager" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールの状態を遷移させる <see cref="T:System.Windows.VisualStateManager" /> オブジェクトを取得または設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager>が<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> の場合、は独自のロジックを使用して状態を遷移します。`null` 状態間の遷移のために独自のロジックを実装する場合は、から<xref:System.Windows.VisualStateManager>継承するクラスを作成し、 <xref:System.Windows.VisualStateManager.GoToStateCore%2A>メソッドをオーバーライドします。 カスタムクラスを使用するには、 <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>プロパティをカスタム型のオブジェクトに設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 添付プロパティの取得元の要素。</param>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 添付プロパティを取得します。</summary>
        <returns>コントロールの状態を切り替える表示状態マネージャー。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 添付プロパティの取得元の要素。</param>
        <summary><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 添付プロパティを取得します。</summary>
        <returns>指定したオブジェクトに関連付けられた <see cref="T:System.Windows.VisualStateGroup" /> オブジェクトのコレクション。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" /> を含んでいるルート要素。</param>
        <param name="stateName">切り替え先の状態。</param>
        <param name="useTransitions"><see cref="T:System.Windows.VisualTransition" /> オブジェクトを使用して状態を遷移させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>要素を 2 つの状態の間で遷移させます。 このメソッドを使用して、コントロールによって定義された状態ではなく、アプリケーションによって定義された状態に遷移します。</summary>
        <returns>コントロールが新しい状態に正常に遷移した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager> <xref:System.Windows.DataTemplate> <xref:System.Windows.Window>メソッドを呼び出して、 <xref:System.Windows.Controls.ControlTemplate>の外部の要素の状態を変更します (たとえば、またはでを使用する場合)。 <xref:System.Windows.VisualStateManager.GoToElementState%2A> のを<xref:System.Windows.VisualStateManager.GoToState%2A> <xref:System.Windows.VisualStateManager>使用するコントロールの状態を変更する場合は、メソッド<xref:System.Windows.Controls.ControlTemplate>を呼び出します。  
  
   
  
## Examples  
 次の例では、1 ~ 100 の数値を推測するようにユーザーに求めるアプリケーションを作成します。  ユーザーが数値を入力すると、アプリケーションは、推定値が大きすぎるか、少なすぎるか、または正しいかを示します。  次[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]の例では、アプリケーションのユーザーインターフェイスを作成し、 `TooLow`、、 `Correct`、および`Guessing`の4つの状態`TooHigh`を定義します。 アプリケーションが開始されると、 `Guessing`状態はになります。 .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 次のコードは、アプリケーションのロジックを示しています。  ユーザーが数値を入力してボタンをクリックすると、アプリケーション<xref:System.Windows.VisualStateManager.GoToElementState%2A>は、、 `TooHigh`、 `TooLow`または`Correct`への移行を呼び出して、推測についてユーザーにフィードバックを提供します。  この例を試すには、 `GenerateNumber`アプリケーションの開始時にメソッドを呼び出します。  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="stateName" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">状態を遷移するコントロール。</param>
        <param name="stateName">切り替え先の状態。</param>
        <param name="useTransitions"><see cref="T:System.Windows.VisualTransition" /> オブジェクトを使用して状態を遷移させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールを 2 つの状態間で切り替えます。 <see cref="T:System.Windows.Controls.ControlTemplate" /> を持つコントロールの状態を遷移させるには、このメソッドを使用します。</summary>
        <returns>コントロールが新しい状態に正常に遷移した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 のを<xref:System.Windows.VisualStateManager.GoToState%2A> <xref:System.Windows.VisualStateManager>使用するコントロールの状態を変更する場合は、メソッド<xref:System.Windows.Controls.ControlTemplate>を呼び出します。 メソッドを呼び出して、 <xref:System.Windows.Controls.ControlTemplate>の外部の要素の状態を変更します (たとえば、 <xref:System.Windows.Controls.UserControl>または<xref:System.Windows.VisualStateManager> 1 つの要素でを使用する場合)。 <xref:System.Windows.VisualStateManager.GoToElementState%2A>  
  
   
  
## Examples  
 次の例は、 <xref:System.Windows.VisualStateManager.GoToState%2A>メソッドを使用して状態を切り替えるコントロールを示しています。 全体の例については、「[カスタマイズ可能な外観を持つコントロールを作成](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)する」を参照してください。  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="stateName" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">状態を遷移するコントロール。</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" /> を含んでいるルート要素。</param>
        <param name="stateName">遷移後の状態の名前。</param>
        <param name="group">状態が属する <see cref="T:System.Windows.VisualStateGroup" />。</param>
        <param name="state">遷移後の状態の表現。</param>
        <param name="useTransitions"><see cref="T:System.Windows.VisualTransition" /> オブジェクトを使用して状態を遷移させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールは 2 つの状態の間で遷移します。</summary>
        <returns>コントロールが新しい状態に正常に遷移した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Windows.VisualStateManager.GoToStateCore%2A>は、遷移に関連付けられているストーリーボードを適切に開始および停止するために必要なロジックを実行します。 コントロールが状態を<xref:System.Windows.VisualStateManager.GoToState%2A>変更するためにを呼び<xref:System.Windows.VisualStateManager>出すと、は次の操作を実行します。  
  
-   まず、コントロールが<xref:System.Windows.VisualState>遷移<xref:System.Windows.Media.Animation.Storyboard>しているにがある場合は、ストーリーボードが開始されます。 次に、コントロール<xref:System.Windows.VisualState>の送信元のに<xref:System.Windows.Media.Animation.Storyboard>がある場合、ストーリーボードは終了します。  
  
-   コントロールが既に`stateName`状態にある場合、は何も実行せず、 <xref:System.Windows.VisualStateManager.GoToState%2A>を返し`true`ます。  
  
-   が`stateName` <xref:System.Windows.Controls.ControlTemplate>の<xref:System.Windows.VisualStateManager.GoToState%2A> `false`に存在しない場合、はアクションを実行せず、を返します。 `control`  
  
 独自<xref:System.Windows.VisualStateManager>のを実装して、状態間の遷移に別のロジックを提供できます。 たとえば、前に説明したロジックを変更したり、カスタムアニメーションの種類を切り替えるロジックを提供したりすることができます。  を実装<xref:System.Windows.VisualStateManager>するには、から<xref:System.Windows.VisualStateManager>継承するクラスを作成し<xref:System.Windows.VisualStateManager.GoToStateCore%2A> 、メソッドをオーバーライドします。 カスタムクラスを使用するには、 <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>プロパティをカスタム型のオブジェクトに設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup"><see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> イベントが発生したオブジェクト。</param>
        <param name="oldState">コントロールの遷移元の状態。</param>
        <param name="newState">コントロールの遷移先の状態。</param>
        <param name="control">状態が遷移しているコントロール。</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" /> を含んでいるルート要素。</param>
        <summary>指定された <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> オブジェクトで <see cref="T:System.Windows.VisualStateGroup" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 がコントロール<xref:System.Windows.Controls.ControlTemplate>のに設定されている場合<xref:System.Windows.Controls.ControlTemplate>、パラメーターはを所有するコントロールに設定されます。`control` <xref:System.Windows.VisualStateGroup>  `control` `null` `stateGroupsRoot`がに設定されている場合、はであり、パラメーターを使用する必要があります。<xref:System.Windows.FrameworkElement> <xref:System.Windows.VisualStateGroup>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="newState" /> が <see langword="null" /> です。</exception>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />でをオーバーライドする場合は、登録されているデリゲート<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />がイベントを受け取るように、基本クラスのメソッドを呼び出す必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup"><see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> イベントが発生したオブジェクト。</param>
        <param name="oldState">コントロールの遷移元の状態。</param>
        <param name="newState">コントロールの遷移先の状態。</param>
        <param name="control">状態が遷移しているコントロール。</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" /> を含んでいるルート要素。</param>
        <summary>指定された <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> オブジェクトで <see cref="T:System.Windows.VisualStateGroup" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 がコントロール<xref:System.Windows.Controls.ControlTemplate>のに設定されている場合<xref:System.Windows.Controls.ControlTemplate>、パラメーターはを所有するコントロールに設定されます。`control` <xref:System.Windows.VisualStateGroup>  `control` `null` `stateGroupsRoot`がに設定されている場合、はであり、パラメーターを使用する必要があります。<xref:System.Windows.FrameworkElement> <xref:System.Windows.VisualStateGroup>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="newState" /> は <see langword="null" />です。</exception>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />でをオーバーライドする場合は、登録されているデリゲート<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />がイベントを受け取るように、基本クラスのメソッドを呼び出す必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">プロパティを設定するオブジェクト。</param>
        <param name="value">コントロールの状態を切り替える表示状態マネージャー。</param>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 添付プロパティを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroups">
      <MemberSignature Language="C#" Value="see GetVisualStateGroups" />
      <MemberSignature Language="ILAsm" Value="see GetVisualStateGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.VisualStateGroups" />
      <MemberSignature Language="VB.NET" Value="see GetVisualStateGroups" />
      <MemberSignature Language="F#" Value="see GetVisualStateGroups" Usage="see GetVisualStateGroups" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.VisualStateGroup" /> オブジェクトのコレクションを取得または設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
 
## Remarks  
 各<xref:System.Windows.VisualStateGroup>には、オブジェクト<xref:System.Windows.VisualState>のコレクションが含まれています。 に<xref:System.Windows.VisualState>は、コントロールが<xref:System.Windows.Media.Animation.Storyboard>特定の状態にある場合に、コントロールの外観がどのように変化するかを指定するオブジェクトのコレクションが格納されます。 たとえば、が押さ<xref:System.Windows.Controls.Button>れているときとは異なる方法で押されていると、が若干異なる場合があります。 が押された<xref:System.Windows.Controls.Button>とき (`"Pressed"`) と (`"Normal"`) ではない場合に、が定義する2つの状態。  
  
 コントロールに<xref:System.Windows.VisualState>を追加するには、 <xref:System.Windows.VisualStateManager.VisualStateGroups%2A>コントロールの添付プロパティを設定します。 相互に排他的な状態を同じ<xref:System.Windows.VisualStateGroup>に配置します。 たとえば<xref:System.Windows.Controls.CheckBox> 、には、2 <xref:System.Windows.VisualStateGroup>つのオブジェクトがあります。 1つには、 `Normal`、 `MouseOver`、 `Pressed`、、 `Disabled`およびの各状態が含まれます。 もう1つは、、 `Checked`、 `UnChecked`、および`Indeterminate`の各状態を格納します。 は<xref:System.Windows.Controls.CheckBox> 、 `MouseOver` `MouseOver` `Pressed`状態でも同時にでもかまいませんが、との状態に同時に配置することはできません。`UnChecked`  
  
 任意の要素に<xref:System.Windows.VisualState>オブジェクトを追加できますが、他のユーザーがの視覚的な<xref:System.Windows.Controls.Control>動作を再定義できるようにするには、特に便利な方法です。 を<xref:System.Windows.Controls.ControlTemplate>使用するカスタムコントロールを作成する場合は、そのクラス定義にを<xref:System.Windows.TemplateVisualStateAttribute>追加することによって、コントロールの状態を指定できます。 コントロールに新しい<xref:System.Windows.Controls.ControlTemplate>を作成するすべてのユーザーは、 <xref:System.Windows.VisualState>テンプレートにオブジェクトを追加できます。 同じ<xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName>を持つ状態が同じ<xref:System.Windows.VisualStateGroup>に属しています。  
  
 でオブジェクトを使用<xref:System.Windows.VisualStateGroup>する方法の詳細については[](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md) 、「ControlTemplateを作成して既存のコントロールの外観をカスタマイズする」を参照して<xref:System.Windows.Controls.ControlTemplate>ください。 を使用<xref:System.Windows.VisualStateManager>するコントロールを作成する方法の詳細については、「[カスタマイズ可能な外観を持つコントロールの作成](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)」を参照してください。  
     
## Examples  
 次の例では、 <xref:System.Windows.Controls.ControlTemplate> 1 つ<xref:System.Windows.Controls.Button> <xref:System.Windows.Controls.Grid>のを含むの単純なを作成します。 また<xref:System.Windows.VisualStateGroup> 、と`CommonStates` `MouseOver`の状態を定義するという名前のが含まれています。`Normal` また<xref:System.Windows.VisualStateGroup> 、には<xref:System.Windows.VisualTransition> 、ユーザーがマウスポインターをの<xref:System.Windows.Controls.Button>上に移動<xref:System.Windows.Controls.Grid>したときに、が緑から赤に変化するように指定するがあります。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
