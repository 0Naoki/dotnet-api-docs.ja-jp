<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eaaf54ec86ecccd1fcac9d888cb6ecf44cd10fd6" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57939355" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>コントロールの状態を遷移するための状態とロジックを管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager>と特定の状態にあるときに、コントロールの状態が変更されたときに、コントロール、コントロールの外観の状態を指定することができます。 たとえば、<xref:System.Windows.Controls.Button>が押されていない場合よりもそれが押されたとき、少し異なる外観があります。 2 つの状態、<xref:System.Windows.Controls.Button>定義が押されたときに対応 (`"Pressed"`) ではない場合、(`"Normal"`)。 によって状態にあるときにコントロールの外観が定義されている、<xref:System.Windows.VisualState>します。 A<xref:System.Windows.VisualState>のコレクションを含む<xref:System.Windows.Media.Animation.Storyboard>コントロールがその状態のときに、コントロールの外観がどのように変化するかを指定するオブジェクト。 コントロールに設定して表示状態を追加する、`VisualStateManager.VisualStateGroups`コントロールのプロパティをアタッチします。 各<xref:System.Windows.VisualStateGroup>のコレクションを含む<xref:System.Windows.VisualState>相互に排他的であるオブジェクト。 つまり、コントロールは常に 1 つだけ状態の各<xref:System.Windows.VisualStateGroup>します。  
  
 <xref:System.Windows.VisualStateManager>コントロールが特定の状態に入ったときに指定することもできます。 状態の変更を呼び出す必要のあるメソッドは、シナリオによって異なります。 使用するコントロールを作成する場合、<xref:System.Windows.VisualStateManager>でその<xref:System.Windows.Controls.ControlTemplate>を呼び出し、<xref:System.Windows.VisualStateManager.GoToState%2A>メソッド。 作成する方法の詳細については、その使用をコントロールには、<xref:System.Windows.VisualStateManager>を参照してください[外観をカスタマイズできる作成、コントロールを持つ](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)します。 使用する場合、<xref:System.Windows.VisualStateManager>の外部、 <xref:System.Windows.Controls.ControlTemplate> (を使用する場合など、<xref:System.Windows.VisualStateManager>で、<xref:System.Windows.Controls.UserControl>または単一の要素) を呼び出す、<xref:System.Windows.VisualStateManager.GoToElementState%2A>メソッド。 どちらの場合、<xref:System.Windows.VisualStateManager>適切に開始および関連する状態に関連付けられているストーリー ボードを停止するために必要なロジックを実行します。 たとえば、コントロールが、状態を定義する`State1`と`State2`、それぞれが関連付けられているストーリー ボードを持ちます。 場合は、コントロールが`State1`渡す`State2`に<xref:System.Windows.VisualStateManager.GoToState%2A>または<xref:System.Windows.VisualStateManager.GoToElementState%2A>、<xref:System.Windows.VisualStateManager>でストーリー ボードを起動`State2`でストーリー ボードを停止して`State1`します。  
  
 コントロールに含まれている[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]を使用して、<xref:System.Windows.VisualStateManager>ビジュアル状態を変更します。 作成するとき、<xref:System.Windows.Controls.ControlTemplate>に含まれているコントロールの[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]、追加することができます<xref:System.Windows.VisualState>オブジェクトをコントロールの<xref:System.Windows.Controls.ControlTemplate>を特定の状態で、コントロールの外観を指定します。 含まれているコントロールの視覚的な状態の名前を検索する[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]を参照してください[コントロールのスタイルとテンプレート](~/docs/framework/wpf/controls/control-styles-and-templates.md)します。 コントロールのロジックのハンドルが他にも何もする必要はありませんので、状態を遷移を定義、 <xref:System.Windows.VisualState> 、新しいオブジェクト<xref:System.Windows.Controls.ControlTemplate>します。 既存のコントロールのコントロール テンプレートを作成する方法の詳細については、次を参照してください。 [ControlTemplate の作成による既存のコントロールの外観のカスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)します。  
  
 継承する必要がありますの状態を遷移するためのロジックを実装する場合は、 <xref:System.Windows.VisualStateManager>、オーバーライド、<xref:System.Windows.VisualStateManager.GoToStateCore%2A>メソッド、およびセット、<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType>添付プロパティのカスタム ロジックを使用するコントロール。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Windows.Shapes.Rectangle>を追加し、<xref:System.Windows.VisualStateGroup>という名前の`CommonStates`を`VisualStateManager.VisualStatesGroups`添付プロパティ。 例では、定義、`MouseOver`と`Normal`<xref:System.Windows.VisualState>内のオブジェクト、 `CommonStates`<xref:System.Windows.VisualStateGroup>します。 ユーザーが経由でマウス ポインターを移動したときに、 <xref:System.Windows.Shapes.Rectangle>、変更赤から緑の 0.5 秒です。 ユーザーが、四角形からマウスを移動すると、<xref:System.Windows.Controls.Grid>赤に変更がすぐにバックアップします。 なお、`Normal`状態が定義されていません、<xref:System.Windows.Media.Animation.Storyboard>します。 A<xref:System.Windows.Media.Animation.Storyboard>ため必要はないときに、<xref:System.Windows.Shapes.Rectangle>から遷移、`MouseOver`状態、 `Normal` 、状態、<xref:System.Windows.Media.Animation.Storyboard>の`MouseOver`が停止していると<xref:System.Windows.Media.SolidColorBrush.Color%2A>プロパティを<xref:System.Windows.Media.SolidColorBrush>を返します赤。  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 次の例では、イベント ハンドラーの呼び出しと前の例で定義されている、<xref:System.Windows.VisualStateManager.GoToElementState%2A>状態間を遷移するメソッド。 前の例の四角形の一部であったかどうか、 <xref:System.Windows.Controls.ControlTemplate>、例を呼び出す必要があります、<xref:System.Windows.VisualStateManager.GoToState%2A>メソッド。  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.VisualStateManager" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロールの状態を遷移させる <see cref="T:System.Windows.VisualStateManager" /> オブジェクトを取得または設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>は`null`、<xref:System.Windows.VisualStateManager>状態間の遷移を独自のロジックを使用します。 継承するクラスの作成状態を遷移するためのロジックを実装する場合は、<xref:System.Windows.VisualStateManager>をオーバーライドし、<xref:System.Windows.VisualStateManager.GoToStateCore%2A>メソッド。 カスタム クラスを使用する設定、<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>プロパティをカスタム型のオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 添付プロパティの取得元の要素。</param>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 添付プロパティを取得します。</summary>
        <returns>コントロールの状態を切り替える表示状態マネージャー。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj"><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 添付プロパティの取得元の要素。</param>
        <summary><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 添付プロパティを取得します。</summary>
        <returns>指定したオブジェクトに関連付けられた <see cref="T:System.Windows.VisualStateGroup" /> オブジェクトのコレクション。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" /> を含んでいるルート要素。</param>
        <param name="stateName">切り替え先の状態。</param>
        <param name="useTransitions"><see cref="T:System.Windows.VisualTransition" /> オブジェクトを使用して状態を遷移させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>要素を 2 つの状態の間で遷移させます。 このメソッドを使用して、コントロールによって定義された状態ではなく、アプリケーションによって定義された状態に遷移します。</summary>
        <returns>コントロールが新しい状態に正常に遷移した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Windows.VisualStateManager.GoToElementState%2A>外の要素の状態を変更するメソッド、 <xref:System.Windows.Controls.ControlTemplate> (を使用する場合など、<xref:System.Windows.VisualStateManager>で、<xref:System.Windows.DataTemplate>または<xref:System.Windows.Window>)。 呼び出す、<xref:System.Windows.VisualStateManager.GoToState%2A>メソッドを使用するコントロールの状態を変更する場合、<xref:System.Windows.VisualStateManager>でその<xref:System.Windows.Controls.ControlTemplate>します。  
  
   
  
## Examples  
 次の例では、1 から 100 までの数値を推測するユーザーに求める、アプリケーションを作成します。  数値を入力すると、アプリケーションは推定値が大きすぎる、低すぎる、または適切なのかどうかを示します。  次[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]アプリケーションのユーザー インターフェイスを作成し、4 つの状態を定義します: `TooLow`、 `TooHigh`、 `Correct`、および`Guessing`します。 アプリケーションの開始時に、`Guessing`状態。 .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 次のコードでは、アプリケーションのロジックを示します。  ユーザーは、数値を入力、ボタンをクリックすると、アプリケーションが呼び出す<xref:System.Windows.VisualStateManager.GoToElementState%2A>に移行する`TooHigh`、 `TooLow`、または`Correct`推定値についてユーザーにフィードバックを提供します。  この例には、呼び出し、`GenerateNumber`メソッド、アプリケーションの開始時にします。  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="stateName" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">状態を遷移するコントロール。</param>
        <param name="stateName">切り替え先の状態。</param>
        <param name="useTransitions"><see cref="T:System.Windows.VisualTransition" /> オブジェクトを使用して状態を遷移させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールを 2 つの状態間で切り替えます。 <see cref="T:System.Windows.Controls.ControlTemplate" /> を持つコントロールの状態を遷移させるには、このメソッドを使用します。</summary>
        <returns>コントロールが新しい状態に正常に遷移した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Windows.VisualStateManager.GoToState%2A>メソッドを使用するコントロールの状態を変更する場合、<xref:System.Windows.VisualStateManager>でその<xref:System.Windows.Controls.ControlTemplate>します。 呼び出す、<xref:System.Windows.VisualStateManager.GoToElementState%2A>外の要素の状態を変更するメソッド、 <xref:System.Windows.Controls.ControlTemplate> (を使用する場合など、<xref:System.Windows.VisualStateManager>で、<xref:System.Windows.Controls.UserControl>または単一の要素)。  
  
   
  
## Examples  
 次の例で使用するコントロールを<xref:System.Windows.VisualStateManager.GoToState%2A>状態間を遷移するメソッド。 全体の例では、次を参照してください。[外観をカスタマイズできる作成をコントロールに](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md)します。  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="stateName" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">状態を遷移するコントロール。</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" /> を含んでいるルート要素。</param>
        <param name="stateName">遷移後の状態の名前。</param>
        <param name="group">状態が属する <see cref="T:System.Windows.VisualStateGroup" />。</param>
        <param name="state">遷移後の状態の表現。</param>
        <param name="useTransitions"><see cref="T:System.Windows.VisualTransition" /> オブジェクトを使用して状態を遷移させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>コントロールは 2 つの状態の間で遷移します。</summary>
        <returns>コントロールが新しい状態に正常に遷移した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualStateManager.GoToStateCore%2A>メソッドが適切に開始および遷移に関連付けられているストーリー ボードを停止するために必要なロジックを実行します。 コントロールを呼び出すと<xref:System.Windows.VisualStateManager.GoToState%2A>の状態を変更する、<xref:System.Windows.VisualStateManager>は次の処理します。  
  
-   最初に、場合、<xref:System.Windows.VisualState>コントロールが遷移することが、 <xref:System.Windows.Media.Animation.Storyboard>、ストーリー ボードが開始されます。 場合はその後、<xref:System.Windows.VisualState>からコントロールが送信されたことが、 <xref:System.Windows.Media.Animation.Storyboard>、ストーリー ボードが終了します。  
  
-   場合は、コントロールは既に、`stateName`状態、<xref:System.Windows.VisualStateManager.GoToState%2A>は何も実行し、返します`true`します。  
  
-   場合`stateName`に存在しません、<xref:System.Windows.Controls.ControlTemplate>の`control`、<xref:System.Windows.VisualStateManager.GoToState%2A>は何も実行し、返します`false`します。  
  
 独自に実装することができます<xref:System.Windows.VisualStateManager>状態を遷移するための別のロジックを提供します。 たとえば、先ほど説明したロジックを変更するまたはカスタム アニメーションの種類間を遷移するロジックを行うことができます。  実装する、<xref:System.Windows.VisualStateManager>から継承するクラスを作成<xref:System.Windows.VisualStateManager>をオーバーライドし、<xref:System.Windows.VisualStateManager.GoToStateCore%2A>メソッド。 カスタム クラスを使用する設定、<xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A>プロパティをカスタム型のオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup"><see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> イベントが発生したオブジェクト。</param>
        <param name="oldState">コントロールの遷移元の状態。</param>
        <param name="newState">コントロールの遷移先の状態。</param>
        <param name="control">状態が遷移しているコントロール。</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" /> を含んでいるルート要素。</param>
        <summary>指定された <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> オブジェクトで <see cref="T:System.Windows.VisualStateGroup" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.VisualStateGroup>が設定されて、 <xref:System.Windows.Controls.ControlTemplate> 、コントロールの`control`を所有するコントロールにパラメーターが設定されている<xref:System.Windows.Controls.ControlTemplate>します。  ときに、<xref:System.Windows.VisualStateGroup>が設定されて、 <xref:System.Windows.FrameworkElement>、`control`は`null`する必要がありますを使用して、`stateGroupsRoot`パラメーター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="newState" /> は <see langword="null" />です。</exception>
        <block subset="none" type="overrides"><para>オーバーライドするときに<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />、派生クラスで基底クラスを呼び出すことを確認する<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />デリゲートを登録するためのメソッドがイベントを受信します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup"><see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> イベントが発生したオブジェクト。</param>
        <param name="oldState">コントロールの遷移元の状態。</param>
        <param name="newState">コントロールの遷移先の状態。</param>
        <param name="control">状態が遷移しているコントロール。</param>
        <param name="stateGroupsRoot"><see cref="T:System.Windows.VisualStateManager" /> を含んでいるルート要素。</param>
        <summary>指定された <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> オブジェクトで <see cref="T:System.Windows.VisualStateGroup" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.VisualStateGroup>が設定されて、 <xref:System.Windows.Controls.ControlTemplate> 、コントロールの`control`を所有するコントロールにパラメーターが設定されている<xref:System.Windows.Controls.ControlTemplate>します。  ときに、<xref:System.Windows.VisualStateGroup>が設定されて、 <xref:System.Windows.FrameworkElement>、`control`は`null`する必要がありますを使用して、`stateGroupsRoot`パラメーター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stateGroupsRoot" /> は <see langword="null" />です。  
  
- または - 
 <paramref name="newState" /> は <see langword="null" />です。</exception>
        <block subset="none" type="overrides"><para>オーバーライドするときに<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />、派生クラスで基底クラスを呼び出すことを確認する<see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />デリゲートを登録するためのメソッドがイベントを受信します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">プロパティを設定するオブジェクト。</param>
        <param name="value">コントロールの状態を切り替える表示状態マネージャー。</param>
        <summary><see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" /> 添付プロパティを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroups">
      <MemberSignature Language="C#" Value="see GetVisualStateGroups" />
      <MemberSignature Language="ILAsm" Value="see GetVisualStateGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.VisualStateGroups" />
      <MemberSignature Language="VB.NET" Value="see GetVisualStateGroups" />
      <MemberSignature Language="F#" Value="see GetVisualStateGroups" Usage="see GetVisualStateGroups" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.VisualStateManager.VisualStateGroups" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>