<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Application.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f0a967c2f910d359d58039d71e768b227e2ee90b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0a967c2f910d359d58039d71e768b227e2ee90b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Application">
          <source>Encapsulates a Windows Presentation Foundation (WPF) application.</source>
          <target state="translated">Windows Presentation Foundation (WPF) アプリケーションをカプセル化します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> is a class that encapsulates <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application-specific functionality, including the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> カプセル化するクラスは、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>次を含む、アプリケーション固有の機能。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source><bpt id="p1">**</bpt>Application Lifetime<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Application.Exit&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Windows.Application.Startup&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>アプリケーションの有効期間<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Application.Current%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>、 <ph id="ph4">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>、 <ph id="ph5">&lt;xref:System.Windows.Application.Exit&gt;</ph>、 <ph id="ph6">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>、 <ph id="ph8">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>、 <ph id="ph9">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>、<ph id="ph10">&lt;xref:System.Windows.Application.Startup&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source><bpt id="p1">**</bpt>Application-Scope Window, Property, and Resource Management<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Application.LoadComponent%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>アプリケーション スコープ ウィンドウ、プロパティ、およびリソース管理<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Windows.Application.LoadComponent%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>、<ph id="ph9">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source><bpt id="p1">**</bpt>Command-Line Parameter and Exit Code Processing<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.Startup?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.Exit?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>コマンド ライン パラメーターおよび終了コード処理<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.Startup?displayProperty=nameWithType&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Application.Exit?displayProperty=nameWithType&gt;</ph>、<ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source><bpt id="p1">**</bpt>Navigation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Application.Navigated&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Application.Navigating&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph>, <ph id="ph8">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>ナビゲーション<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Application.Navigated&gt;</ph>、 <ph id="ph4">&lt;xref:System.Windows.Application.Navigating&gt;</ph>、 <ph id="ph5">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph>、 <ph id="ph6">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph>、 <ph id="ph7">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph>、 <ph id="ph8">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>、<ph id="ph9">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> implements the singleton pattern to provide shared access to its window, property, and resource scope services.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> そのウィンドウ、プロパティ、およびリソースのスコープのサービスへの共有アクセスを提供するシングルトン パターンを実装します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>Consequently, only one instance of the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class can be created per <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">その結果、1 つだけの<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>あたりクラスを作成することができます<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>You can implement an <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> using markup, markup and code-behind, or code.</source>
          <target state="translated">実装することができます、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>マークアップ、マークアップと分離コード、またはコードを使用します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> is implemented with markup, whether markup or markup and code-behind, the markup file must be configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph> <ph id="ph3">`ApplicationDefinition`</ph> item.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>が、マークアップまたはマークアップと分離コードでは、マークアップ ファイルとして構成されているかどうか、マークアップで実装される、 <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph> <ph id="ph3">`ApplicationDefinition`</ph>項目。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>A standalone application does not require an <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object; it is possible to implement a custom <ph id="ph2">`static`</ph> entry point method (<ph id="ph3">`Main`</ph>) that opens a window without creating an instance of <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>.</source>
          <target state="translated">スタンドアロン アプリケーションに必要ありません、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>オブジェクトです。 カスタムを実装することは<ph id="ph2">`static`</ph>エントリ ポイント メソッド (<ph id="ph3">`Main`</ph>) のインスタンスを作成せずにウィンドウを開く<ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>However, <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph> require an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">ただし、<ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>を必要とする<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>The following example shows how a standard application is defined using only markup:</source>
          <target state="translated">次の例は、標準的なアプリケーションは、どのようにマークアップのみを使用して定義します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>The following example shows how a standard application is defined using only code:</source>
          <target state="translated">コードのみを使用する標準的なアプリケーションを定義する方法を例を示します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>The following example shows how a standard application is defined using a combination of markup and code-behind.</source>
          <target state="translated">次の例は、標準的なアプリケーションのマークアップと分離コードとの組み合わせを使用して定義します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>The public <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">パブリック<ph id="ph1">&lt;see langword="static" /&gt;</ph>(<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> Visual Basic で) この型のメンバーは、スレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>In addition, the <ph id="ph1">&lt;see cref="M:System.Windows.Application.FindResource(System.Object)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Windows.Application.TryFindResource(System.Object)" /&gt;</ph> methods and the <ph id="ph3">&lt;see cref="P:System.Windows.Application.Properties" /&gt;</ph> and <ph id="ph4">&lt;see cref="P:System.Windows.Application.Resources" /&gt;</ph> properties are thread safe.</source>
          <target state="translated">さらに、<ph id="ph1">&lt;see cref="M:System.Windows.Application.FindResource(System.Object)" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Windows.Application.TryFindResource(System.Object)" /&gt;</ph>メソッドおよび<ph id="ph3">&lt;see cref="P:System.Windows.Application.Properties" /&gt;</ph>と<ph id="ph4">&lt;see cref="P:System.Windows.Application.Resources" /&gt;</ph>プロパティは、スレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Application" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Application" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.#ctor">
          <source>Only one instance of the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class can be created per <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>, to ensure shared access to a single set of application-scope window, property, and resource data.</source>
          <target state="translated">インスタンスを 1 つだけ、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>あたりクラスを作成することができます<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>アプリケーション スコープ ウィンドウ、プロパティ、およびリソース データの単一のセットを共有のアクセスを確実にします。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.#ctor">
          <source>Consequently, the default constructor of the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class detects whether the instance being initialized is the first instance in an <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>; if it is not, an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
          <target state="translated">したがって、既定のコンス トラクターの<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>クラスを検出したかどうか、インスタンスを初期化中に最初のインスタンス、<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>以外の場合、それ以外は、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object for the current <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> is exposed from the static <ph id="ph3">&lt;xref:System.Windows.Application.Current%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>現在のオブジェクト<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>静的から公開される<ph id="ph3">&lt;xref:System.Windows.Application.Current%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.#ctor">
          <source>More than one instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Application" /&gt;</ph> class is created per <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph>.</source>
          <target state="translated">1 つの <ph id="ph1">&lt;see cref="T:System.Windows.Application" /&gt;</ph> に対して、<ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> クラスのインスタンスが複数作成されています。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.Activated">
          <source>Occurs when an application becomes the foreground application.</source>
          <target state="translated">アプリケーションが前面のアプリケーションになったときに発生します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application that has one or more open windows is activated (becomes the foreground application) when one of the windows is activated for the first time since the application was launched, or when one of the windows is activated while the application is inactive: Specifically, activation occurs when:</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>を 1 つ以上の開いているウィンドウを持つアプリケーションをアクティブ化 (フォア グラウンド アプリケーションになります)、windows のいずれかが有効な場合、最初にアプリケーションが起動されるため、または、windows のいずれかが有効な場合、アプリケーションがアクティブな間。 具体的には、アクティブ化を行うときに。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>An application opens its first window.</source>
          <target state="translated">アプリケーションでは、最初のウィンドウが開きます。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>A user switches to the application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">ユーザーは、ALT + TAB キーを使用して、またはタスク マネージャーを使用して、アプリケーションに切り替えます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>A user clicks the taskbar button for one of the windows in an application.</source>
          <target state="translated">ユーザーは、アプリケーションで windows のいずれかのタスク バー ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>Applications that need to detect when they activate can handle the <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> event.</source>
          <target state="translated">アクティブ化するときを検出するために必要とするアプリケーションが処理できる、<ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>After an application is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">アプリケーションが最初に有効化した後を非アクティブ化され、その有効期間中に何度も再アクティブ化する可能性があります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>If an application's behavior or state depends on its activation state, it can handle both <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> events to determine which activation state it's in.</source>
          <target state="translated">依存する場合、アプリケーションの動作または状態のアクティブ化状態で、両方を処理できる<ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>のイベントがアクティブ化の状態を確認します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>Once an application becomes active, <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> will not be raised again until the application is deactivated, irrespective of how many windows within an application are activated while the application is active.</source>
          <target state="translated">アプリケーションが、アクティブになった時点<ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph>は発生しません。 もう一度、アプリケーションがアクティブなときに、アプリケーション内でウィンドウの数がアクティブ化に関係なく、アプリケーションが非アクティブ化までです。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> is not raised for <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> 発生しません<ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Activated">
          <source>The following example shows how to detect when a standalone application activates and deactivates.</source>
          <target state="translated">次の例では、スタンドアロンのアプリケーションがアクティブにし、非アクティブ化を検出する方法を示します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.Current">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Application" /&gt;</ph> object for the current <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Windows.Application" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Current">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Application" /&gt;</ph> object for the current <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Windows.Application" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Current">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> is a per-<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> singleton type that implements the static <ph id="ph3">&lt;xref:System.Windows.Application.Current%2A&gt;</ph> property to provide shared access to the <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph> instance for the current <ph id="ph5">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> あたり-<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> 、静的なを実装するシングルトン型<ph id="ph3">&lt;xref:System.Windows.Application.Current%2A&gt;</ph>共有のアクセスを提供するプロパティ、<ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph>現在のインスタンス<ph id="ph5">&lt;xref:System.AppDomain&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Current">
          <source>This design guarantees that state managed by <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>, including shared resources and state, is available from a single, shared location.</source>
          <target state="translated">この設計によって管理されるその状態を保証する<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>、共有リソースや状態は、単一の共有の場所から入手できます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Current">
          <source>This property is thread safe and is available from any thread.</source>
          <target state="translated">このプロパティは、スレッド セーフであるは任意のスレッドから使用できます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.Deactivated">
          <source>Occurs when an application stops being the foreground application.</source>
          <target state="translated">アプリケーションが前面のアプリケーションではなくなったときに発生します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Deactivated">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application that has one or more open windows deactivates (stops being the foreground application) when a user does the following:</source>
          <target state="translated">A<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>を 1 つ以上の開いているウィンドウを持つアプリケーションは、(前面のアプリケーションを停止) を非アクティブ化ユーザーが、次を実行します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Deactivated">
          <source>Switches to another application by using ALT+TAB or by using Task Manager.</source>
          <target state="translated">ALT + タブを使用して、またはタスク マネージャーを使用して別のアプリケーションに切り替えます。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Deactivated">
          <source>Clicks the taskbar button for a window in another application.</source>
          <target state="translated">別のアプリケーションでのウィンドウのタスク バー ボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Deactivated">
          <source>Applications that need to detect deactivation can handle the <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> event.</source>
          <target state="translated">非アクティブ化を処理できるを検出するために必要とするアプリケーション、<ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Deactivated">
          <source>After an application is first activated, it may be deactivated and reactivated many times during its lifetime.</source>
          <target state="translated">アプリケーションが最初に有効化した後を非アクティブ化され、その有効期間中に何度も再アクティブ化する可能性があります。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Deactivated">
          <source>If an application's behavior or state depends on its activation state, it can handle both <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> events to determine which state it's in.</source>
          <target state="translated">依存する場合、アプリケーションの動作または状態のアクティブ化状態で、両方を処理できる<ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph>のイベントがどのような状態を確認します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Deactivated">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> is not raised for <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> 発生しません<ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Deactivated">
          <source>The following example shows how to detect when a standalone application deactivates and activates.</source>
          <target state="translated">次の例では、スタンドアロンのアプリケーションが非アクティブ化し、アクティブ化を検出する方法を示します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>Occurs when an exception is thrown by an application but not handled.</source>
          <target state="translated">アプリケーションによってスローされた例外が処理されないときに発生します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> catches unhandled exceptions, notifies users of the exception from a dialog box (from which they can report the exception), and automatically shuts down an application.</source>
          <target state="translated">既定では、<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>未処理の例外をキャッチ、(元の報告できる例外) ダイアログ ボックスで、例外のユーザーに通知し、アプリケーションを自動的にシャット ダウンします。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>However, if an application needs to perform custom unhandled exception processing from a centralized location, you should handle <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>.</source>
          <target state="translated">ただし、処理、アプリケーションを一元化された場所からカスタムのハンドルされない例外の処理を実行する場合は、<ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> is raised by an <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> for each exception that is unhandled by code running on the main UI thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> によって発生した、<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>メイン UI スレッドで実行されているコードによってハンドルされない例外ごとにします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>If an exception is not handled on either a background <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> thread (a thread with its own <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>) or a background worker thread (a thread without a <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>), the exception is not forwarded to the main <ph id="ph4">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
          <target state="translated">例外が処理されない場合に、バック グラウンド<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>スレッド (独自のスレッド<ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>) またはバック グラウンド ワーカー スレッド (せず、スレッド、 <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>)、例外が、主に転送されません<ph id="ph4">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>Consequently, <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> is not raised.</source>
          <target state="translated">その結果、<ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>は発生しません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>In these circumstances, you will need to write code to do the following:</source>
          <target state="translated">このような場合は、以下を行うコードを記述する必要があります。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>Handle exceptions on the background thread.</source>
          <target state="translated">バック グラウンド スレッドで例外を処理します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>Dispatch those exceptions to the main <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
          <target state="translated">これらの例外、メインのディスパッチ<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>Rethrow them on the main <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread without handling them to allow <ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> to be raised.</source>
          <target state="translated">メインでそれらを再スロー<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>を許可するための処理なくスレッド<ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>が発生します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>For more information, see the <bpt id="p1">[</bpt>Threading Model<ept id="p1">](~/docs/framework/wpf/advanced/threading-model.md)</ept> overview.</source>
          <target state="translated">詳細については、次を参照してください。、<bpt id="p1">[</bpt>スレッド モデル<ept id="p1">](~/docs/framework/wpf/advanced/threading-model.md)</ept>の概要です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> event handler is passed a <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs&gt;</ph> argument that contains contextual information regarding the exception, including:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>渡されるイベント ハンドラー、<ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs&gt;</ph>例外に関するコンテキスト情報を含む引数を含みます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>The exception (<ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A&gt;</ph>).</source>
          <target state="translated">例外 (<ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> from which it originated (<ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>出所から (<ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>You can use this information to determine whether an exception is recoverable or not.</source>
          <target state="translated">この情報を使用するには、例外が回復可能かどうかどうかを判別します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>A recoverable exception might be a <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph>, for example, while an unrecoverable exception might be a <ph id="ph2">&lt;xref:System.StackOverflowException&gt;</ph>, for example.</source>
          <target state="translated">回復可能な例外があります、<ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph>など、回復不能な例外があります、 <ph id="ph2">&lt;xref:System.StackOverflowException&gt;</ph>、例を示します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>When you process an unhandled exception from <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>, and you don't want <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> to continue processing it, you need to set the <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">未処理の例外を処理すると<ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>、たく<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>処理を続行するには、設定する必要があります、<ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A&gt;</ph>プロパティを<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>Unlike the other events that <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> raises, <ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> does not have a matching protected virtual implementation (OnDispatcherUnhandledException).</source>
          <target state="translated">他のイベントとは異なりを<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>発生すると、<ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>しませんが、対応する保護されていない (OnDispatcherUnhandledException) の仮想実装します。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>Consequently, classes that derive from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> must always register an event handler with <ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> to process unhandled exceptions.</source>
          <target state="translated">そのため、クラスから派生した<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>を持つイベント ハンドラーは常に登録する必要があります<ph id="ph2">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>未処理の例外を処理します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.DispatcherUnhandledException">
          <source>The following example shows how to process unhandled exceptions by handling the <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> event.</source>
          <target state="translated">次の例を処理することにより、未処理の例外を処理する方法を示しています、<ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.Exit">
          <source>Occurs just before an application shuts down, and cannot be canceled.</source>
          <target state="translated">アプリケーションがシャットダウンする直前に発生し、キャンセルできません。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>An application can shut down for either of the following reasons:</source>
          <target state="translated">アプリケーションは、次の理由のいずれかのシャット ダウンをできます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object is called, either explicitly or as determined by the <ph id="ph3">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>オブジェクトが呼び出されると、によって明示的にまたは決定される、<ph id="ph3">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>The user ends the session by logging off or shutting down.</source>
          <target state="translated">ユーザーは、ログオフまたはシャット ダウンによって、セッションを終了します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>You can detect when application shutdown occurs by handling the <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event, and perform any additional processing as required.</source>
          <target state="translated">処理することにより、アプリケーションのシャット ダウンが発生したときに検出することができます、<ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph>イベント、および必要に応じて、追加の処理を実行します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>You can also handle <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> to inspect or change the application exit code when you don't need to call <ph id="ph2">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> explicitly.</source>
          <target state="translated">処理することも<ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph>を検査またはアプリケーションの終了コードを変更するときに呼び出す必要はありません<ph id="ph2">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>明示的にします。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>The exit code is exposed from the <ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.ExitEventArgs&gt;</ph> argument that's passed to the <ph id="ph3">&lt;xref:System.Windows.Application.Exit&gt;</ph> event handler.</source>
          <target state="translated">終了コードの公開元である、<ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Windows.ExitEventArgs&gt;</ph>に渡される引数、<ph id="ph3">&lt;xref:System.Windows.Application.Exit&gt;</ph>イベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>When the application stops running, the exit code is passed to the operating system for subsequent processing.</source>
          <target state="translated">アプリケーションの実行が停止、終了コードは後続の処理のオペレーティング システムに渡されます。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>If your application handles the <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event and subsequently cancels it, <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> is not raised and the application continues running in accordance with the shutdown mode.</source>
          <target state="translated">アプリケーションが処理する場合、<ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>イベントし、後で、キャンセル<ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph>は発生しませんしによって配布されたシャット ダウン モードで実行されているアプリケーションを続行します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>The exit code can be set from an <ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>, although the value is ignored.</source>
          <target state="translated">終了コードから設定できる、<ph id="ph1">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>値は無視されますが、します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>For <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> is raised in the following circumstances:</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph>、<ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph>は次のような状況で発生します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>An <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph> is navigated away from.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph>から移動します。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_ie7](~/includes/tla2sharptla-ie7-md.md)]</ph>, when the tab that is hosting the <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph> is closed.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_ie7](~/includes/tla2sharptla-ie7-md.md)]</ph>、ときに、タブをホストしている、<ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph>が閉じられます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>When the browser is closed.</source>
          <target state="translated">ブラウザーが閉じられた。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>In all cases, the value of the <ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph> property is ignored.</source>
          <target state="translated">値の場合、<ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph>プロパティは無視されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>The following example demonstrates how to:</source>
          <target state="translated">次の例について説明する方法。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>Handle the <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event.</source>
          <target state="translated">処理、<ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>Inspect and update the <ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.ExitEventArgs&gt;</ph>.</source>
          <target state="translated">更新を行い、<ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Windows.ExitEventArgs&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>Write an entry to an application log in isolated storage.</source>
          <target state="translated">分離ストレージでのアプリケーション ログにエントリを記述します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Exit">
          <source>Persist the application state to isolated storage.</source>
          <target state="translated">分離ストレージへのアプリケーション状態を維持します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>The name of the resource to find.</source>
          <target state="translated">検索するリソースの名前。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>Searches for a <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> resource, such as a <ph id="ph2">&lt;see cref="T:System.Windows.Style" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Windows.Media.Brush" /&gt;</ph>, with the specified key, and throws an exception if the requested resource is not found (see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>).</source>
          <target state="translated">指定したキーを持つ <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> リソース (<ph id="ph2">&lt;see cref="T:System.Windows.Style" /&gt;</ph> や <ph id="ph3">&lt;see cref="T:System.Windows.Media.Brush" /&gt;</ph> など) を検索します。要求したリソースが見つからない場合は例外がスローされます (「<bpt id="p1">[</bpt>XAML Resources (XAML リソース)<ept id="p1">](~/docs/framework/wpf/advanced/xaml-resources.md)</ept>」を参照)。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>The requested resource object.</source>
          <target state="translated">要求されたリソース オブジェクト。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>If the requested resource is not found, a <ph id="ph1">&lt;see cref="T:System.Windows.ResourceReferenceKeyNotFoundException" /&gt;</ph> is thrown.</source>
          <target state="translated">要求したリソースが見つからない場合は、<ph id="ph1">&lt;see cref="T:System.Windows.ResourceReferenceKeyNotFoundException" /&gt;</ph> がスローされます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> will first look in application-scope resources for the specified resource.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> アプリケーション スコープの指定されたリソースのリソースでは、まずします。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>Application-scope resources are managed by <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>, and are exposed from the <ph id="ph2">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property.</source>
          <target state="translated">アプリケーション スコープのリソースで管理されて<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>から公開されると、<ph id="ph2">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>If the specified resource is not found in the set of application-scope resources, <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> then next searches the system resources.</source>
          <target state="translated">アプリケーション スコープのリソースのセットに指定されたリソースが見つからない場合<ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>次へは、システム リソースを検索します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>System resources are shell resources defined by the user, and include colors, fonts, and shell configurations.</source>
          <target state="translated">システム リソースは、シェル リソースが、ユーザーが定義されているし、色、フォント、およびシェル構成が含まれます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>These are exposed from the <ph id="ph1">&lt;xref:System.Windows.SystemColors&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.SystemFonts&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.SystemParameters&gt;</ph> types, respectively, as static properties.</source>
          <target state="translated">これらは、 <ph id="ph1">&lt;xref:System.Windows.SystemColors&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.SystemFonts&gt;</ph>、および<ph id="ph3">&lt;xref:System.Windows.SystemParameters&gt;</ph>型をそれぞれ、静的なプロパティです。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>To use <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> to acquire them, these types also expose resource key properties that are designed to be passed to <ph id="ph2">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>; for example, <ph id="ph3">&lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;</ph>.</source>
          <target state="translated">使用する<ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>を取得するには、これらの型もリソース キー プロパティを公開に渡されるように設計された<ph id="ph2">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>。 たとえば、<ph id="ph3">&lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> returns an object, you must cast the returned value to the appropriate type if the resource is found.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>オブジェクトを返しますリソースが見つかった場合は適切な型に返される値をキャストする必要があります。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>If you call this method for a key that cannot be found, an exception is thrown.</source>
          <target state="translated">見つからないキーのこのメソッドを呼び出すと、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>If you do not want to handle exceptions that result from calling <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>, call <ph id="ph2">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> instead; <ph id="ph3">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> returns a <ph id="ph4">`null`</ph> reference when a requested resource cannot be found, and does not throw an exception.</source>
          <target state="translated">呼び出し元に起因する例外を処理しないかどうかは<ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>、呼び出す<ph id="ph2">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>代わりにします。<ph id="ph3">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>を返します、<ph id="ph4">`null`</ph>要求されたリソースが見つからないし、例外をスローしないときに参照します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>This method is thread safe and can be called from any thread.</source>
          <target state="translated">このメソッドはスレッド セーフであるため、任意のスレッドから呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph> to find a resource, and to handle <ph id="ph2">&lt;xref:System.Windows.ResourceReferenceKeyNotFoundException&gt;</ph> if the resource is not found.</source>
          <target state="translated">次の例は、使用する方法を示しています。<ph id="ph1">&lt;xref:System.Windows.Application.FindResource%2A&gt;</ph>のリソースを見つけると、処理する<ph id="ph2">&lt;xref:System.Windows.ResourceReferenceKeyNotFoundException&gt;</ph>リソースが見つからない場合。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.FindResource(System.Object)">
          <source>The resource cannot be found.</source>
          <target state="translated">リソースが見つかりません。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.FragmentNavigation">
          <source>Occurs when a navigator in the application begins navigation to a content fragment, Navigation occurs immediately if the desired fragment is in the current content, or after the source <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> content has been loaded if the desired fragment is in different content.</source>
          <target state="translated">アプリケーションのナビゲーターがコンテンツ フラグメントへのナビゲーションを開始すると発生します。ナビゲーションは、目的のフラグメントが現在のコンテンツにある場合はすぐに発生し、目的のフラグメントが別のコンテンツにある場合は、ソース <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> コンテンツが読み込まれた後に発生します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.FragmentNavigation">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">ナビゲーターは、<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.FragmentNavigation">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetContentStream(System.Uri)">
          <source>The relative <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that maps to a loose resource.</source>
          <target state="translated">Loose リソースにマッピングする相対 <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetContentStream(System.Uri)">
          <source>Returns a resource stream for a content data file that is located at the specified <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> にあるコンテンツ データ ファイル (「<bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files (WPF アプリケーション リソース、コンテンツおよびデータ ファイル)<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>」を参照) のリソース ストリームを返します。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetContentStream(System.Uri)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Resources.StreamResourceInfo" /&gt;</ph> that contains a content data file that is located at the specified <ph id="ph2">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Resources.StreamResourceInfo" /&gt;</ph> にあるコンテンツ データ ファイルを格納している <ph id="ph2">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetContentStream(System.Uri)">
          <source>If a loose resource is not found, null is returned.</source>
          <target state="translated">Loose リソースが見つからない場合は null が返されます。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetContentStream(System.Uri)">
          <source>This method is not thread safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetContentStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that is passed to <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetContentStream(System.Uri)" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> に渡される <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetContentStream(System.Uri)" /&gt;</ph> は null です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetContentStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that is passed to <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetContentStream(System.Uri)" /&gt;</ph> is an absolute <ph id="ph3">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> に渡される <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetContentStream(System.Uri)" /&gt;</ph> は、絶対 <ph id="ph3">&lt;see cref="T:System.Uri" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that specifies the location for which a cookie was created.</source>
          <target state="translated">クッキーが作成された場所を指定する <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>Retrieves a cookie for the location specified by a <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> で指定した場所のクッキーを取得します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> value, if the cookie exists; otherwise, a <ph id="ph2">&lt;see cref="T:System.ComponentModel.Win32Exception" /&gt;</ph> is thrown.</source>
          <target state="translated">クッキーが存在する場合は <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 値が返されます。それ以外の場合は <ph id="ph2">&lt;see cref="T:System.ComponentModel.Win32Exception" /&gt;</ph> がスローされます。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph> retrieves a cookie for the specified <ph id="ph2">&lt;xref:System.Uri&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.GetCookie%2A&gt;</ph> 指定された cookie を取得<ph id="ph2">&lt;xref:System.Uri&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>If the cookie can't be retrieved, a <ph id="ph1">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph> is thrown.</source>
          <target state="translated">Cookie を取得できない場合、<ph id="ph1">&lt;xref:System.ComponentModel.Win32Exception&gt;</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>You need to write the code to parse the cookie string into a list of name/value pairs.</source>
          <target state="translated">名前/値ペアの一覧に、cookie の文字列を解析するコードを記述する必要があります。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>For an overview of cookies in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>, see <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](~/docs/framework/wpf/app-development/navigation-overview.md)</ept>.</source>
          <target state="translated">クッキーの概要については<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>を参照してください<bpt id="p1">[</bpt>ナビゲーション概要<ept id="p1">](~/docs/framework/wpf/app-development/navigation-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> error is raised by the <ph id="ph2">&lt;see langword="InternetGetCookie" /&gt;</ph> function (called by <ph id="ph3">&lt;see cref="M:System.Windows.Application.GetCookie(System.Uri)" /&gt;</ph>) if a problem occurs when attempting to retrieve the specified cookie.</source>
          <target state="translated">指定したクッキーを取得しようとして問題が起きると、(<ph id="ph3">&lt;see cref="M:System.Windows.Application.GetCookie(System.Uri)" /&gt;</ph> から呼び出された) <ph id="ph2">&lt;see langword="InternetGetCookie" /&gt;</ph> 関数により <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> エラーが発生します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>for getting the cookie for a file-based <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated">ファイル ベースの cookie を取得する<ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>for getting the cookie for a non-file-based <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated">以外のファイル ベースの cookie を取得する<ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetCookie(System.Uri)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="P:System.Net.WebPermission.ConnectList" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="P:System.Net.WebPermission.ConnectList" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetRemoteStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that maps to a loose resource at the site of origin.</source>
          <target state="translated">起点サイトの Loose リソースにマッピングする <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetRemoteStream(System.Uri)">
          <source>Returns a resource stream for a site-of-origin data file that is located at the specified <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> にある元のサイトに対するデータ ファイル (「<bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files (WPF アプリケーション リソース、コンテンツおよびデータ ファイル)<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>」を参照) のリソース ストリームを返します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetRemoteStream(System.Uri)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Resources.StreamResourceInfo" /&gt;</ph> that contains a resource stream for a site-of-origin data file that is located at the specified <ph id="ph2">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Resources.StreamResourceInfo" /&gt;</ph> にある起点サイト データ ファイルのリソース ストリームを格納している <ph id="ph2">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetRemoteStream(System.Uri)">
          <source>If the loose resource is not found, <ph id="ph1">&lt;see langword="null" /&gt;</ph> is returned.</source>
          <target state="translated">Loose リソースが見つからない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> が返されます。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetRemoteStream(System.Uri)">
          <source>This method is not thread safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetRemoteStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that is passed to <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> に渡される <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" /&gt;</ph> は null です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetRemoteStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that is passed to <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" /&gt;</ph> is either not relative, or is absolute but not in the <bpt id="p1">&lt;c&gt;</bpt>pack://siteoforigin:,,,/<ept id="p1">&lt;/c&gt;</ept> form.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" /&gt;</ph> に渡される <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> は相対参照ではなく絶対参照の形式ですが、<bpt id="p1">&lt;c&gt;</bpt>pack://siteoforigin:,,,/<ept id="p1">&lt;/c&gt;</ept> の形式ではありません。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetResourceStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that maps to an embedded resource.</source>
          <target state="translated">埋め込みリソースにマッピングする <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetResourceStream(System.Uri)">
          <source>Returns a resource stream for a resource data file that is located at the specified <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> (see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> にあるリソース データ ファイル (「<bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files (WPF アプリケーション リソース、コンテンツおよびデータ ファイル)<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>」を参照) のリソース ストリームを返します。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetResourceStream(System.Uri)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Resources.StreamResourceInfo" /&gt;</ph> that contains a resource stream for resource data file that is located at the specified <ph id="ph2">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Windows.Resources.StreamResourceInfo" /&gt;</ph> にあるリソース データ ファイルのリソース ストリームを格納している <ph id="ph2">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.GetResourceStream(System.Uri)">
          <source>This method is not thread safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetResourceStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that is passed to <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> に渡される <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /&gt;</ph> は null です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetResourceStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that is passed to <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /&gt;</ph> is either not relative, or is absolute but not in the <bpt id="p1">&lt;c&gt;</bpt>pack://application:,,,/<ept id="p1">&lt;/c&gt;</ept> form.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /&gt;</ph> に渡される <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> は相対参照ではなく絶対参照の形式ですが、<bpt id="p1">&lt;c&gt;</bpt>pack://application:,,,/<ept id="p1">&lt;/c&gt;</ept> の形式ではありません。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.GetResourceStream(System.Uri)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that is passed to <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /&gt;</ph> cannot be found.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> に渡される <ph id="ph2">&lt;see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /&gt;</ph> が見つかりません。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.LoadCompleted">
          <source>Occurs when content that was navigated to by a navigator in the application has been loaded, parsed, and has begun rendering.</source>
          <target state="translated">アプリケーションのナビゲーターによる移動先のコンテンツが読み込まれ、解析されて、レンダリングが開始されると発生します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.LoadCompleted">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">ナビゲーターは、<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.LoadCompleted">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.LoadCompleted">
          <source>Listen for events on the navigated content such as the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event on <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> before you access properties of the navigated content.</source>
          <target state="translated">などの移動、コンテンツに対するイベントのリッスン、<ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph>でイベントを<ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>移動のコンテンツのプロパティにアクセスする前にします。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="T:System.Windows.Application">
          <source>Loads a <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file that is located at the specified <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph>.</source>
          <target state="translated">指定した<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> にある <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> ファイルを読み込みます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> file can be an application code file (configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph> Page item) or an application data file (a resource file, content file, or site-of-origin file; see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>ファイルは、アプリケーション コード ファイルを使用できます (として構成されている、<ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph>ページ アイテム) やアプリケーション データ ファイル (リソース ファイル、コンテンツ ファイルは、またはサイトの元のファイルは、参照してください<bpt id="p1">[</bpt>WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Application">
          <source>This method is not thread-safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that maps to a relative <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated">相対 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> ファイルにマップする <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source>Loads a <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file that is located at the specified <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph>, and converts it to an instance of the object that is specified by the root element of the <ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file.</source>
          <target state="translated">指定した<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> にある <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> ファイルを読み込み、<ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> ファイルのルート要素で指定されているオブジェクトのインスタンスに変換します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source>An instance of the root element specified by the XAML file loaded.</source>
          <target state="translated">読み込まれた XAML ファイルに指定されているルート要素のインスタンス。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source>You must explicitly convert the return value to the same type as the root element of the <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file.</source>
          <target state="translated">ルート要素と同じ型を戻り値を明示的に変換する必要があります、<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>ファイル。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> file can be an application code file (configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph> Page item) or an application data file (a resource file, content file, or site-of-origin file; see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>ファイルは、アプリケーション コード ファイルを使用できます (として構成されている、<ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph>ページ アイテム) やアプリケーション データ ファイル (リソース ファイル、コンテンツ ファイルは、またはサイトの元のファイルは、参照してください<bpt id="p1">[</bpt>WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source>This method is not thread-safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source><ph id="ph1">&lt;paramref name="resourceLocator" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceLocator" /&gt;</ph> が null です。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source>The <ph id="ph1">&lt;paramref name="resourceLocator" /&gt;</ph> is an absolute <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceLocator" /&gt;</ph> は絶対 <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph> です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Uri)">
          <source>The file is not a <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> file.</source>
          <target state="translated">ファイルが <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> ファイルではありません。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
          <source>An object of the same type as the root element of the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> ファイルのルート要素と同じ型のオブジェクト。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that maps to a relative <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated">相対 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> ファイルにマップする <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
          <source>Loads a <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file that is located at the specified <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> and converts it to an instance of the object that is specified by the root element of the <ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> file.</source>
          <target state="translated">指定した <ph id="ph2">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)]</ph> にある <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> ファイルを読み込んで、<ph id="ph3">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> ファイルのルート要素で指定したオブジェクトのインスタンスに変換します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> file can be an application code file (configured as an <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph> Page item) or an application data file (a resource file, content file, or site-of-origin file; see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>ファイルは、アプリケーション コード ファイルを使用できます (として構成されている、<ph id="ph2">[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]</ph>ページ アイテム) やアプリケーション データ ファイル (リソース ファイル、コンテンツ ファイルは、またはサイトの元のファイルは、参照してください<bpt id="p1">[</bpt>WPF アプリケーションのリソース、コンテンツ、およびデータ ファイル<ept id="p1">](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
          <source>This method is not thread-safe.</source>
          <target state="translated">このメソッドはスレッド セーフではありません。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
          <source><ph id="ph1">&lt;paramref name="resourceLocator" /&gt;</ph> is null.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceLocator" /&gt;</ph> が null です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
          <source>The <ph id="ph1">&lt;paramref name="resourceLocator" /&gt;</ph> is an absolute <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceLocator" /&gt;</ph> は絶対 <ph id="ph2">[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)]</ph> です。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)">
          <source><ph id="ph1">&lt;paramref name="component" /&gt;</ph> is of a type that does not match the root element of the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="component" /&gt;</ph> は、<ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> ファイルのルート要素に一致しない型です。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.MainWindow">
          <source>Gets or sets the main window of the application.</source>
          <target state="translated">アプリケーションのメイン ウィンドウを取得または設定します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> that is designated as the main application window.</source>
          <target state="translated">メイン アプリケーション ウィンドウとして指定される <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is automatically set with a reference to the first <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> object to be instantiated in the <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> 最初への参照で自動的に設定されている<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>でインスタンス化するオブジェクト、<ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>You can specify a different main window by setting <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> assigning another <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property.</source>
          <target state="translated">設定して、別のメイン ウィンドウを指定できます<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>別の割り当て<ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>オブジェクトを<ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object is set to <ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, closing the main window causes the application to shut down.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>にオブジェクトが設定されている<ph id="ph3">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>、メイン ウィンドウを閉じると、アプリケーションをシャット ダウンします。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>It is possible to set the <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property from <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>, if an application's main window is not the window that is produced by setting the <ph id="ph3">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> property in <ph id="ph4">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>.</source>
          <target state="translated">設定することは、<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>プロパティから<ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>、アプリケーションのメイン ウィンドウは、設定によって生成されるウィンドウではない場合、<ph id="ph3">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>プロパティに<ph id="ph4">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>The two limitations of the <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph> approach are:</source>
          <target state="translated">2 つの制限、<ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>アプローチは。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>You can specify either a <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>-only <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> or a <ph id="ph3">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>-only <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> as the main window.</source>
          <target state="translated">どちらかを指定することができます、 <ph id="ph1">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>-のみ<ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>または<ph id="ph3">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>-のみ<ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>メイン ウィンドウとします。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>You must set the <ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of the window you specify, otherwise it won't be shown.</source>
          <target state="translated">設定する必要があります、<ph id="ph1">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>ウィンドウのプロパティを指定して、それ以外の場合に表示されません。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>The reference to the first <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> object to be instantiated is also added as the first item to the <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> collection.</source>
          <target state="translated">最初に参照<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>インスタンス化されるオブジェクトが最初の項目としても追加、<ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>コレクション。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is subsequently set with a reference to a different <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, the position of the item with the reference to the main window will change, while the order of items in <ph id="ph3">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> remains the same.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>を別の参照に設定した場合は、 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>、内の項目の順序の中に、メイン ウィンドウへの参照を持つ項目の位置が変更される<ph id="ph3">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>は変わりません。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>Consequently, always use <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> to refer to the main window instead of the first item in <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>.</source>
          <target state="translated">そのため、常に使用<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>の最初の項目ではなくメイン ウィンドウを参照する<ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>If the main window is a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, and you need specific access to <ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> members, you will need to cast the value of <ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> to <ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>.</source>
          <target state="translated">メイン ウィンドウがある場合、<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>へのアクセスを必要と<ph id="ph2">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>、メンバーの値をキャストする必要が<ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>に<ph id="ph4">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>This property is available only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">このプロパティは、作成したスレッドからのみ使用可能な<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>The following example shows how to find the main application window.</source>
          <target state="translated">次の例では、アプリケーションのメイン ウィンドウを見つける方法を示します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>The following example shows how to set <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> using <ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>.</source>
          <target state="translated">次の例は、設定する方法を示します<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>を使用して<ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.MainWindow">
          <source>The following example shows how to instantiate the <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> in code during application startup.</source>
          <target state="translated">次の例を示しています、<ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>のアプリケーションの起動中にコードにします。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.MainWindow">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Application.MainWindow" /&gt;</ph> is set from an application that's hosted in a browser, such as an <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Application.MainWindow" /&gt;</ph> は、ブラウザーでホストされるアプリケーション (<ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph> など) から設定されます。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.Navigated">
          <source>Occurs when the content that is being navigated to by a navigator in the application has been found, although it may not have completed loading.</source>
          <target state="translated">アプリケーションのナビゲーターによる移動先のコンテンツが見つかったときに発生します。ただし、読み込みはまだ完了していない可能性があります。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Navigated">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">ナビゲーターは、<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Navigated">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.Navigating">
          <source>Occurs when a new navigation is requested by a navigator in the application.</source>
          <target state="translated">アプリケーションのナビゲーターによって新しいナビゲーションが要求されたときに発生します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Navigating">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">ナビゲーターは、<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Navigating">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.NavigationFailed">
          <source>Occurs when an error occurs while a navigator in the application is navigating to the requested content.</source>
          <target state="translated">アプリケーションのナビゲーターが要求されたコンテンツに移動する際にエラーが発生したときに発生します。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.NavigationFailed">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">ナビゲーターは、<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.NavigationFailed">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.NavigationProgress">
          <source>Occurs periodically during a download that is being managed by a navigator in the application to provide navigation progress information.</source>
          <target state="translated">アプリケーションのナビゲーターによって管理されているダウンロード中に定期的に発生して、ナビゲーションの進行状況に関する情報を提供します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.NavigationProgress">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">ナビゲーターは、<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.NavigationProgress">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.NavigationStopped">
          <source>Occurs when the <ph id="ph1">&lt;see langword="StopLoading" /&gt;</ph> method of a navigator in the application is called, or when a new navigation is requested by a navigator while a current navigation is in progress.</source>
          <target state="translated">アプリケーションのナビゲーターの <ph id="ph1">&lt;see langword="StopLoading" /&gt;</ph> メソッドが呼び出されたとき、または現在のナビゲーションの進行中にナビゲーターによって新しいナビゲーションが要求されたときに発生します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.NavigationStopped">
          <source>A navigator is either a <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.</source>
          <target state="translated">ナビゲーターは、<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>または<ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.NavigationStopped">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">「<ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=nameWithType&gt;</ph>」を参照してください。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnActivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnActivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.Activated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.Activated" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnActivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnActivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnActivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnActivated%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.Activated&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnDeactivated(System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnDeactivated(System.EventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.Deactivated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.Deactivated" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnDeactivated(System.EventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnDeactivated(System.EventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnDeactivated(System.EventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnDeactivated%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Windows.ExitEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.ExitEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.Exit" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.Exit" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override the <ph id="ph2">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph> method.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先、<ph id="ph2">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnExit%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.FragmentNavigationEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.FragmentNavigationEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.FragmentNavigation" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.FragmentNavigation" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnFragmentNavigation%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.FragmentNavigation&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.LoadCompleted" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.LoadCompleted" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnLoadCompleted%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.LoadCompleted&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.Navigated" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.Navigated" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Navigated&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.Navigated&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Navigated&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnNavigated%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.Navigated&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigatingCancelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigatingCancelEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.Navigating" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.Navigating" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Navigating&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.Navigating&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.Navigating&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnNavigating%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.Navigating&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationFailedEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationFailedEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.NavigationFailed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.NavigationFailed" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationFailed%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.NavigationFailed&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationProgressEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationProgressEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.NavigationProgress" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.NavigationProgress" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)">
          <source>The overridden method must explicitly call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを明示的に呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationProgress%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.NavigationProgress&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.Navigation.NavigationEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.NavigationStopped" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.NavigationStopped" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnNavigationStopped%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.NavigationStopped&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.SessionEndingCancelEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.SessionEndingCancelEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.SessionEnding" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.SessionEnding" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph> in the base class if <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnSessionEnding%2A&gt;</ph>基本クラスの場合は<ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>を発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.StartupEventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.Windows.StartupEventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.Windows.Application.Startup" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Application.Startup" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)">
          <source>A type that derives from <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> may override <ph id="ph2">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph>.</source>
          <target state="translated">派生する型<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>よりも優先<ph id="ph2">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)">
          <source>The overridden method must call <ph id="ph1">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph> in the base class if the <ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> event needs to be raised.</source>
          <target state="translated">オーバーライドされたメソッドを呼び出す必要があります<ph id="ph1">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph>基本クラスの場合、<ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph>イベントを発生させる必要があります。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.Properties">
          <source>Gets a collection of application-scope properties.</source>
          <target state="translated">アプリケーション スコープのプロパティのコレクションを取得します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Properties">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> that contains the application-scope properties.</source>
          <target state="translated">アプリケーション スコープのプロパティを格納している <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Properties">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> exposes a dictionary via <ph id="ph2">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph> which you can use to store application-scope properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> 使用してディクショナリを公開する<ph id="ph2">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>アプリケーション スコープのプロパティの保存に使用できます。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Properties">
          <source>This allows you to share state amongst all code in an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> in a thread-safe fashion, without the need to write your own state code.</source>
          <target state="translated">これによりのすべてのコードの間で状態を共有する、<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>スレッド セーフである的に、状態コードを記述する必要はありません。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Properties">
          <source>Properties stored in <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph> must be converted to the appropriate type returned.</source>
          <target state="translated">格納されているプロパティ<ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>返される適切な型に変換する必要があります。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Properties">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph> property is thread safe and is available from any thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>プロパティは、スレッド セーフであるとはどのスレッドから使用できます。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Properties">
          <source>The following example shows how create and use an application-scope property using <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>.</source>
          <target state="translated">作成およびアプリケーション スコープのプロパティを使用して、使用する方法の例を次に<ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.ResourceAssembly">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> that provides the pack <ph id="ph2">[!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)]</ph> for resources in a <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application.</source>
          <target state="translated"><ph id="ph2">[!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)]</ph> アプリケーションのリソース用のパッケージの <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> を提供する <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> を取得または設定します。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>A reference to the <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> that provides the pack <ph id="ph2">[!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)]</ph> for resources in a <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application.</source>
          <target state="translated"><ph id="ph2">[!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)]</ph> アプリケーションのリソース用のパッケージの <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> を提供する <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> への参照。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>By default, <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> resources are resolved at run time with respect to the entry assembly, which is identified by the value returned from the <ph id="ph2">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> method.</source>
          <target state="translated">既定では、<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>から返される値によって識別されるエントリのアセンブリに対して実行時にリソースが解決される、<ph id="ph2">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>The entry assembly is the assembly that is returned by <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> and could be the following:</source>
          <target state="translated">入力アセンブリがによって返されるアセンブリ<ph id="ph1">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph>し、次にある可能性があります。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>The executable assembly in the default application domain.</source>
          <target state="translated">既定のアプリケーション ドメインで実行可能アセンブリ。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>The first assembly to be executed by calling <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>.</source>
          <target state="translated">呼び出すことによって実行される最初のアセンブリ<ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>In the following cases, however, a <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly cannot get a reference to the entry assembly:</source>
          <target state="translated">次の場合、ただし、<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>アセンブリは、入力アセンブリへの参照を取得できません。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>An unmanaged (native) application hosts the <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly.</source>
          <target state="translated">アンマネージ (ネイティブ) アプリケーション ホスト、<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>アセンブリ。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>A managed application hosts the <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly by loading it into a new application domain using a method other than <ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>.</source>
          <target state="translated">マネージ アプリケーションのホスト、<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>以外のメソッドを使用して、新しいアプリケーション ドメインに読み込むことによってアセンブリ<ph id="ph2">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>In both of these cases, <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> returns <ph id="ph2">`null`</ph>, and the <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly's resources cannot be resolved.</source>
          <target state="translated">このような場合の両方で<ph id="ph1">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph>を返します<ph id="ph2">`null`</ph>、および<ph id="ph3">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>アセンブリのリソースを解決することはできません。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>In these cases, <ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> can be set, once only, with a reference to the assembly that should be used to resolve resources.</source>
          <target state="translated">このような場合は、 <ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> 1 度だけ、リソースの解決に使用するアセンブリへの参照で設定できます。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> can only be set once because it is unlikely that the resource assembly will change after the <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly is loaded.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> のみ設定できます 1 回の後に、リソース アセンブリが変更されること可能性は高くありませんので、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>アセンブリが読み込まれています。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> cannot be set when a <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> assembly can discover the entry assembly—that is, when <ph id="ph3">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> returns a reference to an assembly rather than <ph id="ph4">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> 場合を設定することはできません、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>アセンブリは、入力アセンブリを検出できる — されているときに、<ph id="ph3">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph>アセンブリへの参照を返しますのではなく<ph id="ph4">`null`</ph>です。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>This property is thread safe and is available from any thread.</source>
          <target state="translated">このプロパティは、スレッド セーフであるは任意のスレッドから使用できます。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> is introduced in the .NET Framework version 3.5.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.ResourceAssembly%2A&gt;</ph> .NET Framework version 3.5 で導入されました。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ResourceAssembly">
          <source>For more information, see <bpt id="p1">[</bpt>Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
          <target state="translated">詳細については、「<bpt id="p1">[</bpt>.NET Framework のバージョンおよび依存関係<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.ResourceAssembly">
          <source>A <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application has an entry assembly, or <ph id="ph2">&lt;see cref="P:System.Windows.Application.ResourceAssembly" /&gt;</ph> has already been set.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> アプリケーションに入力アセンブリがあるか、<ph id="ph2">&lt;see cref="P:System.Windows.Application.ResourceAssembly" /&gt;</ph> が既に設定されています。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.Resources">
          <source>Gets or sets a collection of application-scope resources, such as styles and brushes.</source>
          <target state="translated">スタイルやブラシなど、アプリケーション スコープ リソースのコレクションを取得または設定します。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.ResourceDictionary" /&gt;</ph> object that contains zero or more application-scope resources.</source>
          <target state="translated">0 個以上のアプリケーション スコープ リソースが格納された <ph id="ph1">&lt;see cref="T:System.Windows.ResourceDictionary" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property can be used to share resources across the windows and elements of an application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> Windows およびアプリケーションの要素の間でリソースを共有するプロパティを使用できます。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property is included in the resource lookup path, which is traversed in the following order:</source>
          <target state="translated">さらに、<ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>は次の順序で走査リソース参照パスのプロパティが含まれています。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>Elements</source>
          <target state="translated">Elements</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>Windows</source>
          <target state="translated">Windows</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>System</source>
          <target state="translated">システム</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>Consequently, <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> elements can bind to application-scope resources.</source>
          <target state="translated">その結果、<ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>要素は、アプリケーション スコープのリソースにバインドできます。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>Additionally, if resources change, the resource system ensures that element properties which are bound to those resources are automatically updated to reflect the change.</source>
          <target state="translated">さらに、リソースが変更された場合、リソース システムにより、その要素の変更を反映するようにそれらのリソースにバインドされているプロパティが自動的に更新します。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>Application-scope resources provide a simple way to support a consistent theme across your application.</source>
          <target state="translated">アプリケーション スコープのリソースは、アプリケーション間で一貫性のあるテーマをサポートする簡単な方法を提供します。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>You can easily create a theme in <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> by using the <ph id="ph2">`Application.Resources`</ph> tag.</source>
          <target state="translated">テーマを簡単に作成できます<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>を使用して、<ph id="ph2">`Application.Resources`</ph>タグ。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>However, if your application supports multiple themes, which may contain a large number of theme elements, it might be easier to manage them using one <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> instance for each theme.</source>
          <target state="translated">ただし、アプリケーションは、多数のテーマの要素を含むことが、複数のテーマをサポートしている場合ありますいずれかを使用してそれらを管理しやすい<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>各テーマのインスタンス。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>In this way, a new theme can be applied by setting the Resources property to the appropriate <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
          <target state="translated">これにより、新しいテーマを適用して適切なリソースのプロパティを設定して<ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>There are two considerations to make when using <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>.</source>
          <target state="translated">2 つの考慮事項を使用する場合がある<ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>First, the dictionary <bpt id="p1">*</bpt>key<ept id="p1">*</ept> is an object, so you need to use exactly the same object instance when both setting and getting a property value (note that the key is case-sensitive when using a string).</source>
          <target state="translated">まず、ディクショナリ<bpt id="p1">*</bpt>キー<ept id="p1">*</ept>が、オブジェクトを設定およびプロパティの値 (文字列を使用するときに、キーが大文字小文字を区別であることに注意してください) を取得するときに正確に同じオブジェクト インスタンスを使用する必要があるためです。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>Second, the dictionary <bpt id="p1">*</bpt>value<ept id="p1">*</ept> is an object, so you will need to convert the value to the desired type when getting a property value.</source>
          <target state="translated">2 番目、ディクショナリ<bpt id="p1">*</bpt>値<ept id="p1">*</ept>オブジェクトはプロパティの値を取得するときに、目的の型に値を変換する必要があります。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> is thread safe and is available from any thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> スレッド セーフであるは、任意のスレッドから使用します。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>This example illustrates how to use <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> together with application-scope resources to create a consistent visual appearance.</source>
          <target state="translated">この例は、使用する方法を示しています。<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>アプリケーション スコープのリソースを一貫した外観を作成するとします。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>The following example shows how to set an application resource in code and XAML.</source>
          <target state="translated">次の例では、コードと XAML でアプリケーションのリソースを設定する方法を示します。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Resources">
          <source>The following example shows how to get an application resource in code.</source>
          <target state="translated">次の例では、コードで、アプリケーションのリソースを取得する方法を示します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="T:System.Windows.Application">
          <source>Starts a Windows Presentation Foundation (WPF) application.</source>
          <target state="translated">Windows Presentation Foundation (WPF) アプリケーションを開始します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run">
          <source>Starts a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> アプリケーションを起動します。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run">
          <source>The <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> application exit code that is returned to the operating system when the application shuts down.</source>
          <target state="translated">アプリケーションのシャットダウン時にオペレーティング システムに返される <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> アプリケーション終了コード。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run">
          <source>By default, the exit code value is 0.</source>
          <target state="translated">終了コードの既定値は 0 です。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> is called to start a <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> 開始するために呼び出される、<ph id="ph2">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>If you define your <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> using markup, or markup and code-behind, <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> will be called implicitly.</source>
          <target state="translated">定義した場合、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>マークアップ、またはマークアップと分離コードを使用して<ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>が暗黙的に呼び出されます。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>However, if you define your <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> using code, you will need to explicitly call <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>.</source>
          <target state="translated">ただし、定義した場合、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>コードを使用して、次のように明示的に呼び出す必要がある<ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> is called, <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> attaches a new <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> instance to the <ph id="ph4">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> thread.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>が呼び出されると、<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>新しいアタッチ<ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>インスタンスを<ph id="ph4">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>スレッドです。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> object's <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</ph> method is called, which starts a message pump to process windows messages.</source>
          <target state="translated">次に、<ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>オブジェクトの<ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.Run%2A&gt;</ph>メソッドは、windows メッセージを処理するメッセージ ポンプを開始します。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> object calls the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object's the <ph id="ph3">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph> method to raise the <ph id="ph4">&lt;xref:System.Windows.Application.Startup&gt;</ph> event.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph>オブジェクトの呼び出し、<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>オブジェクトの<ph id="ph3">&lt;xref:System.Windows.Application.OnStartup%2A&gt;</ph>メソッドを<ph id="ph4">&lt;xref:System.Windows.Application.Startup&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>Consequently, the application execution model has been established by the time you handle <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>, at which point the application is considered to be running.</source>
          <target state="translated">その結果、アプリケーションの実行モデルが確立されたらを処理する時間<ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>アプリケーションが実行されている時点です。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>An application stops running when <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called; the value of the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property determines when <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, and whether it happens automatically or you need to explicitly call it.</source>
          <target state="translated">アプリケーションの停止時に実行して<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>が呼び出されます。 の値、<ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>タイミングを決定するプロパティ<ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>が呼び出され、自動的に行われますか、明示的にする必要があるかどうかを呼び出すことです。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> can be called only from the thread that creates the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> 作成したスレッドからのみ呼び出すことができます、<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>Also, <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> cannot be called from a <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph>.</source>
          <target state="translated">また、<ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>から呼び出すことはできません、<ph id="ph2">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run">
          <source>The following example shows an application that uses a custom <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> and must therefore explicitly call <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>.</source>
          <target state="translated">次の例は、ユーザー設定を使用するアプリケーションを<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>明示的に呼び出す必要がありますので、<ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Application.Run" /&gt;</ph> is called from a browser-hosted application (for example, an <ph id="ph2">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Application.Run" /&gt;</ph> は、ブラウザーによってホストされるアプリケーション (<ph id="ph2">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph> など) から呼び出されます。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph> that opens automatically when an application starts.</source>
          <target state="translated">アプリケーションの起動時に自動的に開く <ph id="ph1">&lt;see cref="T:System.Windows.Window" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>Starts a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application and opens the specified window.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> アプリケーションを起動し、指定したウィンドウを開きます。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> application exit code that is returned to the operating system when the application shuts down.</source>
          <target state="translated">アプリケーションのシャットダウン時にオペレーティング システムに返される <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> アプリケーション終了コード。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>By default, the exit code value is 0.</source>
          <target state="translated">終了コードの既定値は 0 です。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>This overload extends the <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> method to open the specified window after an application starts running.</source>
          <target state="translated">このオーバー ロードを拡張、<ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>をアプリケーションの実行が開始した後に指定されたウィンドウを開くメソッドです。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>If you define a code <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> that opens a window when it starts running, you explicitly call <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>.</source>
          <target state="translated">コードを定義する場合<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>ウィンドウが開きを実行開始時に、明示的に呼び出す<ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>If you create your <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> using markup, or markup and code-behind, you can automatically open a window during using either of the following techniques:</source>
          <target state="translated">作成する場合、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>マークアップ、またはマークアップと分離コードを使用して、自動的にウィンドウを開き、次の手法のいずれかを使用中には。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>Declaratively, by setting <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>.</source>
          <target state="translated">設定することによって宣言によって、<ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>Programmatically, by handling <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>.</source>
          <target state="translated">処理することにより、プログラムによって<ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source>The following example shows an application with a manually-created static entry point method that instantiates <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>, before calling <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>.</source>
          <target state="translated">次の例は、インスタンス化する手動で作成された静的エントリ ポイント メソッドを使用してアプリケーションを示します<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>を呼び出す前に<ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Run(System.Windows.Window)">
          <source><ph id="ph1">&lt;see cref="M:System.Windows.Application.Run" /&gt;</ph> is called from a browser-hosted application (for example, an <ph id="ph2">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Application.Run" /&gt;</ph> は、ブラウザーによってホストされるアプリケーション (<ph id="ph2">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph> など) から呼び出されます。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.SessionEnding">
          <source>Occurs when the user ends the <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph> session by logging off or shutting down the operating system.</source>
          <target state="translated">ユーザーがログオフするかオペレーティング システムをシャットダウンして、<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph> セッションを終了するときに発生します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>By default, an application shuts down when the <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph> session ends, which occurs when a user logs off or shuts down.</source>
          <target state="translated">既定では、アプリケーションのシャット ダウン、<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph>セッション終了すると、ユーザーがログオフまたはシャット ダウン時に発生します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>When this happens, <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]</ph> asks each open application to shut down.</source>
          <target state="translated">この場合、<ph id="ph1">[!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]</ph>各アプリケーションをシャット ダウンを要求します。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>However, it is possible that an application may not be ready to shut down when this occurs.</source>
          <target state="translated">ただしは、アプリケーションがシャット ダウンこのエラーが発生する準備ができていない可能性があります。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>For example, an application may have data that is in an inconsistent state, or in the middle of a long-running operation.</source>
          <target state="translated">たとえば、アプリケーションには、実行時間の長い操作中または不整合な状態であるデータがあります。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>In these situations, it may be desirable to prevent the session from ending, and may be more desirable to allow users the option to decide whether or not to let the session to end.</source>
          <target state="translated">これらの状況で、セッションの終了を防ぐことが望ましい場合がありますしてセッションを終了させるかどうかを決定するオプションをユーザーに許可するが望ましい場合があります。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>You can detect when a session ends by handling the <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event.</source>
          <target state="translated">処理することにより、セッションが終了したときに検出することができます、<ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>If an application needs to prevent the session from ending, the <ph id="ph1">&lt;xref:System.Windows.SessionEndingCancelEventArgs&gt;</ph> argument that is passed to the event handler exposes the <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> that you set to <ph id="ph3">`true`</ph> (the default value is <ph id="ph4">`false`</ph>).</source>
          <target state="translated">アプリケーションは、セッションの終了を防ぐ必要がある場合、<ph id="ph1">&lt;xref:System.Windows.SessionEndingCancelEventArgs&gt;</ph>イベント ハンドラーに渡される引数を公開、<ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph>設定した<ph id="ph3">`true`</ph>(既定値は<ph id="ph4">`false`</ph>)。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is unhandled, or is handled without being cancelled, <ph id="ph2">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called and the <ph id="ph3">&lt;xref:System.Windows.Application.Exit&gt;</ph> event is raised.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>が、処理されないか、取り消されてなしで処理される<ph id="ph2">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>が呼び出されたと<ph id="ph3">&lt;xref:System.Windows.Application.Exit&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>To obtain more information about why the session is ending, an application can inspect <ph id="ph1">&lt;xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A&gt;</ph>, which is one of the <ph id="ph2">&lt;xref:System.Windows.ReasonSessionEnding&gt;</ph> values (<ph id="ph3">&lt;xref:System.Windows.ReasonSessionEnding.Logoff&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ReasonSessionEnding.Shutdown&gt;</ph>).</source>
          <target state="translated">詳細については、セッションが終了する理由を取得するアプリケーションを調査できます<ph id="ph1">&lt;xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A&gt;</ph>の 1 つである、<ph id="ph2">&lt;xref:System.Windows.ReasonSessionEnding&gt;</ph>値 (<ph id="ph3">&lt;xref:System.Windows.ReasonSessionEnding.Logoff&gt;</ph>と<ph id="ph4">&lt;xref:System.Windows.ReasonSessionEnding.Shutdown&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is not raised by console applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> コンソール アプリケーションでは発生しません。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is raised only on the thread that creates the <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> 作成したスレッドでのみが発生した、<ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is not raised for <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> 発生しません<ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.SessionEnding">
          <source>The following example demonstrates how to handle the <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event and allow the user to cancel it.</source>
          <target state="translated">次の例は、処理する方法を示します、<ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>イベントと、ユーザーがそれをキャンセルできるようにします。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that specifies the location for which the cookie should be created.</source>
          <target state="translated">クッキーを作成する場所を指定する <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the cookie data.</source>
          <target state="translated">クッキー データを格納している <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>Creates a cookie for the location specified by a <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> で指定した場所にクッキーを作成します。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>A cookie is an arbitrary piece of data that can be stored by an application on the client machine during application sessions (session cookies) or across application sessions (persistent cookies).</source>
          <target state="translated">Cookie とは、アプリケーションのセッション (セッション cookie) 中、またはアプリケーション セッション (永続的な cookie) 間でクライアント コンピューターで、アプリケーションで格納できるデータの任意の部分です。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>You can create both types of cookies by calling <ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>.</source>
          <target state="translated">両方の種類の cookie を作成するには呼び出すことによって<ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>Cookie data typically takes the form of a name/value pair in the following format:</source>
          <target state="translated">通常、cookie のデータは、次の形式で名前/値ペアの形式をとります。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>You pass a string of this format to <ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>, along with the <ph id="ph2">&lt;xref:System.Uri&gt;</ph> of the location for which the cookie should be set (typically, the application domain).</source>
          <target state="translated">この形式の文字列を渡す<ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>、と共に、<ph id="ph2">&lt;xref:System.Uri&gt;</ph>の cookie を設定する場所 (通常は、アプリケーション ドメイン)。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>Whether a cookie is a session cookie or a persistent cookie depends on whether the cookie string that you pass to <ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph> includes an expiry date.</source>
          <target state="translated">Cookie とは、セッションの cookie、または永続的な cookie が cookie の文字列をするかどうかに依存するかどうかに渡す<ph id="ph1">&lt;xref:System.Windows.Application.SetCookie%2A&gt;</ph>有効期限日が含まれています。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>The string for a session cookie does not include an expiry date.</source>
          <target state="translated">セッション cookie の文字列では、有効期限日は含まれません。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>The string for a persistent cookie does, and must be in the following format:</source>
          <target state="translated">永続的な cookie の文字列は、次の形式にする必要があります。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>Persistent cookies are stored in the current <ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph> installation's Temporary Internet Files folder until they expire, in which case they are deleted.</source>
          <target state="translated">現在の永続的な cookie が格納されている<ph id="ph1">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph>期限が切れるまで、削除された場合に、インストールのインターネット一時ファイル フォルダーです。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>You can delete a persistent cookie from your application by setting its expiry date to a date/time value that is in the past.</source>
          <target state="translated">アプリケーションから永続的な cookie を削除するには、過去の日付/時刻値に、有効期限を設定します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>For an overview of cookies in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>, see <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](~/docs/framework/wpf/app-development/navigation-overview.md)</ept>.</source>
          <target state="translated">クッキーの概要については<ph id="ph1">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>を参照してください<bpt id="p1">[</bpt>ナビゲーション概要<ept id="p1">](~/docs/framework/wpf/app-development/navigation-overview.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>A <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> error is raised by the <ph id="ph2">&lt;see langword="InternetSetCookie" /&gt;</ph> function (called by <ph id="ph3">&lt;see cref="M:System.Windows.Application.SetCookie(System.Uri,System.String)" /&gt;</ph>) if a problem occurs when attempting to create the specified cookie.</source>
          <target state="translated">指定したクッキー作成の試行中に問題が起きると、(<ph id="ph3">&lt;see cref="M:System.Windows.Application.SetCookie(System.Uri,System.String)" /&gt;</ph> から呼び出された) <ph id="ph2">&lt;see langword="InternetSetCookie" /&gt;</ph> 関数により <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> エラーが発生します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>for getting the cookie for a file-based <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated">ファイル ベースの cookie を取得する<ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>for getting the cookie for a non-file-based <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>.</source>
          <target state="translated">以外のファイル ベースの cookie を取得する<ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.SetCookie(System.Uri,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Net.NetworkAccess.Connect" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Net.NetworkAccess.Connect" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="T:System.Windows.Application">
          <source>Shuts down an application.</source>
          <target state="translated">アプリケーションをシャットダウンします。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Shutdown">
          <source>Shuts down an application.</source>
          <target state="translated">アプリケーションをシャットダウンします。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, an application stops running.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>が呼び出されると、アプリケーションの実行を停止します。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>You can handle the <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event to detect when an application is about to stop running, to perform any appropriate processing.</source>
          <target state="translated">処理することができます、<ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph>イベント、アプリケーションが実行を停止しようとする、適切な処理を実行するタイミングを検出します。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is implicitly called by <ph id="ph2">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> in the following situations:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> によって暗黙的に呼び出される<ph id="ph2">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>次の状況で。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>に設定されている<ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>に設定されている<ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>When a user ends a session and the <ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event is either unhandled, or handled without cancellation.</source>
          <target state="translated">ユーザーがセッションを終了して、<ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph>イベントがハンドルされていないとき、またはキャンセルせずに、処理します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> explicitly causes an application to shut down, regardless of the <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> setting.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>シャット ダウン、アプリケーションを明示的にによりに関係なく、<ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>設定します。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>However, if <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnExplicitShutdown&gt;</ph>, you must call <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> to shut down an application.</source>
          <target state="translated">ただし場合、<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>に設定されている<ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnExplicitShutdown&gt;</ph>、呼び出す必要があります<ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>アプリケーションをシャット ダウンします。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, the application will shut down irrespective of whether the <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event of any open windows is canceled.</source>
          <target state="translated">ときに<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>が呼び出されると、アプリケーションが停止したかどうかに関係なく、<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>開いているウィンドウのイベントが取り消されました。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>This method can be called only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">このメソッドは、作成したスレッドからのみ呼び出すことが、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">すべての windows とユーザー入力イベントを制限なく使用する権限です。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Shutdown(System.Int32)">
          <source>An integer exit code for an application.</source>
          <target state="translated">アプリケーションの整数型終了コード。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Shutdown(System.Int32)">
          <source>The default exit code is 0.</source>
          <target state="translated">既定の終了コードは 0 です。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.Shutdown(System.Int32)">
          <source>Shuts down an application that returns the specified exit code to the operating system.</source>
          <target state="translated">アプリケーションをシャットダウンして、指定した終了コードをオペレーティング システムに返します。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown(System.Int32)">
          <source>You can handle the <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event to set an exit code.</source>
          <target state="translated">処理することができます、<ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph>終了コードを設定するイベントです。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown(System.Int32)">
          <source>However, if you explicitly call <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>, and you handle <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> only to set an exit code, you can call <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> instead.</source>
          <target state="translated">ただし、明示的に呼び出す場合<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>、および処理する<ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph>だけで、終了コードを設定するに呼び出せる<ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>代わりにします。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown(System.Int32)">
          <source>This method can be called only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">このメソッドは、作成したスレッドからのみ呼び出すことが、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown(System.Int32)">
          <source>for permission to use all windows and user input events without restriction.</source>
          <target state="translated">すべての windows とユーザー入力イベントを制限なく使用する権限です。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.Shutdown(System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.ShutdownMode">
          <source>Gets or sets the condition that causes the <ph id="ph1">&lt;see cref="M:System.Windows.Application.Shutdown" /&gt;</ph> method to be called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Application.Shutdown" /&gt;</ph> メソッドが呼び出される条件を取得または設定します。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.ShutdownMode" /&gt;</ph> enumeration value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.ShutdownMode" /&gt;</ph> 列挙値。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Windows.ShutdownMode.OnLastWindowClose" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="F:System.Windows.ShutdownMode.OnLastWindowClose" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>Applications stop running only when the <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method of the Application is called.</source>
          <target state="translated">アプリケーションが停止される場合にのみを実行している、<ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>アプリケーションのメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>Shut down can occur implicitly or explicitly, as specified by the value of the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property.</source>
          <target state="translated">暗黙的または明示的の値を指定して、シャット ダウンが発生することが、<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>, <ph id="ph3">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> implicitly calls <ph id="ph4">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> when the last window in an application closes, even if any currently instantiated windows are set as the main window (see <ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>).</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>に<ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>、<ph id="ph3">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>暗黙的に呼び出す<ph id="ph4">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>アプリケーションの最後のウィンドウが閉じたときに、メイン ウィンドウとして、現在インスタンス化されたウィンドウが設定されている場合でも (を参照してください<ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> of <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph> causes <ph id="ph3">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>to implicitly call <ph id="ph4">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> when the <ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> closes, even if other windows are currently open.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>の<ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>により<ph id="ph3">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>を暗黙的に呼び出す<ph id="ph4">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>ときに、<ph id="ph5">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>閉じると、その他のウィンドウが現在開いている場合でもです。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>The lifetime of some applications may not be dependent on when the main window or last window is closed, or may not be dependent on windows at all.</source>
          <target state="translated">一部のアプリケーションの有効期間は、メイン ウィンドウまたは最後のウィンドウが閉じるか、またはできない可能性があります windows に依存するすべての場合に依存できない可能性があります。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>For these scenarios you need to set the <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnExplicitShutdown&gt;</ph>, which requires an explicit <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method call to stop the application.</source>
          <target state="translated">このようなシナリオを設定する必要があります、<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>プロパティを<ph id="ph2">&lt;xref:System.Windows.ShutdownMode.OnExplicitShutdown&gt;</ph>がありますが、明示的な<ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph>メソッドの呼び出し、アプリケーションを停止します。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>Otherwise, the application continues running in the background.</source>
          <target state="translated">それ以外の場合、アプリケーションは引き続きバック グラウンドで実行されます。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> can be configured declaratively from <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> or programmatically from code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> 宣言によって構成できます<ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>またはプログラムによってコード。</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>This property is available only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">このプロパティは、作成したスレッドからのみ使用可能な<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.ShutdownMode">
          <source>The following example shows how to configure <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> to specify that an application must be closed explicitly.</source>
          <target state="translated">次の例は、構成する方法を示しています。<ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>アプリケーションを明示的に閉じる必要がありますを指定します。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="E:System.Windows.Application.Startup">
          <source>Occurs when the <ph id="ph1">&lt;see cref="M:System.Windows.Application.Run" /&gt;</ph> method of the <ph id="ph2">&lt;see cref="T:System.Windows.Application" /&gt;</ph> object is called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Application.Run" /&gt;</ph> オブジェクトの <ph id="ph2">&lt;see cref="T:System.Windows.Application" /&gt;</ph> メソッドが呼び出されると発生します。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>A typical <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application may perform a variety of initialization tasks when it starts up, including:</source>
          <target state="translated">一般的な<ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph>など、開始時に、アプリケーションは、さまざまな初期化タスクを実行可能性があります。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Processing command-line parameters.</source>
          <target state="translated">コマンド ライン パラメーターを処理しています。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Opening the main window.</source>
          <target state="translated">メイン ウィンドウを開いています。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Initializing application-scope resources.</source>
          <target state="translated">アプリケーション スコープのリソースを初期化します。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Initializing application-scope properties.</source>
          <target state="translated">アプリケーション スコープのプロパティを初期化します。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>You can declaratively specify the main window and application-scope resources using <ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph> (<ph id="ph2">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>, respectively).</source>
          <target state="translated">メイン ウィンドウとアプリケーション スコープのリソースを使用して宣言によって指定できます<ph id="ph1">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>(<ph id="ph2">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>、それぞれ)。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Sometimes, however, the resources or main window of your application can only be determined programmatically at run time.</source>
          <target state="translated">場合によっては、ただし、リソースや、アプリケーションのメイン ウィンドウできますのみするプログラムで実行時に決定します。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Additionally, application-scope properties and command-line parameters can only be used programmatically.</source>
          <target state="translated">さらに、アプリケーション スコープのプロパティとコマンド ライン パラメーターのみするプログラムにより使用できます。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Programmatic initialization can be performed by handling the <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event, including the following:</source>
          <target state="translated">プログラムによる初期化を処理することにより実行できます、<ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>次を含むイベント。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Acquire and process command-line parameters, which are available from the <ph id="ph1">&lt;xref:System.Windows.StartupEventArgs.Args%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.StartupEventArgs&gt;</ph> class that is passed to the <ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler.</source>
          <target state="translated">使用できるコマンド ライン パラメーターを取得および処理、<ph id="ph1">&lt;xref:System.Windows.StartupEventArgs.Args%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Windows.StartupEventArgs&gt;</ph>クラスに渡される、<ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph>イベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Initialize application-scope resources by using the <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property.</source>
          <target state="translated">使用してアプリケーション スコープのリソースを初期化、<ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Initialize application-scope properties by using the <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph> property.</source>
          <target state="translated">使用してアプリケーション スコープのプロパティを初期化、<ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Instantiate and show one (or more) windows.</source>
          <target state="translated">インスタンスを作成し、1 つ (以上) のウィンドウを表示します。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>Command-line parameters can also be acquired by calling the static <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Environment&gt;</ph> object.</source>
          <target state="translated">コマンド ライン パラメーターは、静的なを呼び出すことによって取得することも<ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Environment&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>However, <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> requires full trust to execute.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph>を実行する完全な信頼が必要です。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> using <ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>, the main window that is created is not available from either the <ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property or the <ph id="ph4">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property of the <ph id="ph5">&lt;xref:System.Windows.Application&gt;</ph> object until after the <ph id="ph6">&lt;xref:System.Windows.Application.Startup&gt;</ph> event is processed.</source>
          <target state="translated">設定した場合<ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>を使用して<ph id="ph2">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]</ph>、作成されるメイン ウィンドウからは使用できないか、<ph id="ph3">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>プロパティまたは<ph id="ph4">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>のプロパティ、<ph id="ph5">&lt;xref:System.Windows.Application&gt;</ph>後まで、オブジェクト、<ph id="ph6">&lt;xref:System.Windows.Application.Startup&gt;</ph>イベントを処理します。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>If you need access to the main window during startup, you need to manually create a new window object from your <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler.</source>
          <target state="translated">起動中にメイン ウィンドウへのアクセスを必要がある場合は新しいウィンドウのオブジェクトを手動で作成する必要があります、<ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>イベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>If your application uses <ph id="ph1">&lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt;</ph> to specify a credential policy, you need to set <ph id="ph2">&lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt;</ph> after <ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph> is raised; otherwise, <ph id="ph4">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> sets it to a default internal policy directly after the <ph id="ph5">&lt;xref:System.Windows.Application.Startup&gt;</ph> event has been raised.</source>
          <target state="translated">アプリケーションで使用する場合<ph id="ph1">&lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt;</ph>資格情報のポリシーを指定するには、設定する必要があります<ph id="ph2">&lt;xref:System.Net.AuthenticationManager.CredentialPolicy%2A&gt;</ph>後<ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph>が発生した場合<ph id="ph4">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph>既定内部ポリシーに直接後設定、<ph id="ph5">&lt;xref:System.Windows.Application.Startup&gt;</ph>イベントが発生しました。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>The command-line arguments that are passed to the <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler are not the same as the <ph id="ph2">[!INCLUDE[TLA#tla_url](~/includes/tlasharptla-url-md.md)]</ph> query string parameters that are passed to an <ph id="ph3">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>.</source>
          <target state="translated">渡されるコマンドライン引数、<ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph>イベント ハンドラーと同じではない、<ph id="ph2">[!INCLUDE[TLA#tla_url](~/includes/tlasharptla-url-md.md)]</ph>クエリ文字列パラメーターに渡される、<ph id="ph3">[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>The following example shows how to acquire and process command-line options from a standalone application.</source>
          <target state="translated">次の例では、取得およびスタンドアロン アプリケーションからコマンド ライン オプションを処理する方法を示します。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>If the <bpt id="p1">**</bpt>/StartMinimized<ept id="p1">**</ept> command-line parameter was provided, the application opens the main window in a minimized state.</source>
          <target state="translated">場合、 <bpt id="p1">**</bpt>/StartMinimized<ept id="p1">**</ept>コマンド ライン パラメーターが指定されて、最小化された状態で、アプリケーションが、メイン ウィンドウを開きます。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph> cannot retrieve and process command-line arguments because they are launched with <ph id="ph2">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph> deployment (see <bpt id="p1">[</bpt>Deploying a WPF Application (WPF)<ept id="p1">](~/docs/framework/wpf/app-development/deploying-a-wpf-application-wpf.md)</ept>).</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]</ph> 取得しを起動するためにコマンドライン引数を処理できません<ph id="ph2">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>展開 (を参照してください<bpt id="p1">[</bpt>WPF アプリケーション (WPF) を展開する<ept id="p1">](~/docs/framework/wpf/app-development/deploying-a-wpf-application-wpf.md)</ept>)。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Application.Startup">
          <source>However, they can retrieve and process query string parameters from the URLs that are used to launch them.</source>
          <target state="translated">ただし、起動に使用される URL のクエリ文字列パラメーターを取得して処理することはできます。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.StartupUri">
          <source>Gets or sets a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> that is automatically shown when an application starts.</source>
          <target state="translated">アプリケーションの起動時に自動的に表示される <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> を取得または設定します。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>A <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph> that refers to the <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> that automatically opens when an application starts.</source>
          <target state="translated">アプリケーションの起動時に自動的に開く <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> を参照する <ph id="ph1">&lt;see cref="T:System.Uri" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> to automatically load a <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resource when an application starts.</source>
          <target state="translated">使用することができます<ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>を自動的に読み込む、<ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>リソース アプリケーションの起動時にします。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>The following table shows the types of <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resources that can be loaded, the type of window they are opened into, and the type of application that these resources can be set as the <ph id="ph2">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>.</source>
          <target state="translated">次の表は、種類の<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>読み込むことができるリソースには、開かれたウィンドウの種類およびとして設定できます。 これらのリソース アプリケーションの種類、<ph id="ph2">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Type</source>
          <target state="translated">型</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Window</source>
          <target state="translated">ウィンドウ</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Application type</source>
          <target state="translated">アプリケーションの種類</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Standalone only</source>
          <target state="translated">スタンドアロンのみ</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Standalone only</source>
          <target state="translated">スタンドアロンのみ</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Standalone/browser-hosted</source>
          <target state="translated">スタンドアロン/ブラウザーでホストされます。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Standalone/browser-hosted</source>
          <target state="translated">スタンドアロン/ブラウザーでホストされます。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Standalone/browser-hosted</source>
          <target state="translated">スタンドアロン/ブラウザーでホストされます。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Standalone/browser-hosted</source>
          <target state="translated">スタンドアロン/ブラウザーでホストされます。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Typically, you set the <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> property declaratively in <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>.</source>
          <target state="translated">通常、設定、<ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>プロパティ宣言で<ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>However, you can set <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> programmatically, such as from a <ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler, which is useful if for applications that can only load the necessary <ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resources at run time.</source>
          <target state="translated">ただし、設定することができます<ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>プログラムからこのような<ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph>のみの読み込みを行える、必要なアプリケーションの場合に便利ですが、イベント ハンドラー<ph id="ph3">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>実行時にリソース。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>For example, an application might wait until run time to load its resources if the name of the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resource is stored in a configuration file.</source>
          <target state="translated">たとえば、アプリケーションは場合、そのリソースを読み込むために実行時まで待機可能性がありますの名前、<ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>リソースが構成ファイルに格納されています。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Whether you set <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> declaratively or programmatically, the corresponding <ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> resource is not loaded until after the <ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph> event is handled.</source>
          <target state="translated">かどうかを設定する<ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph>宣言またはプログラムによって、対応する<ph id="ph2">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph>までリソースが読み込まれていない後、<ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph>イベントを処理します。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.StartupUri">
          <source>Consequently, you won't have access to the resulting window from either the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property or the <ph id="ph2">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property when handling <ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph>.</source>
          <target state="translated">その結果、する必要はありませんアクセスされたウィンドウから、<ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>プロパティまたは<ph id="ph2">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>プロパティを処理するとき<ph id="ph3">&lt;xref:System.Windows.Application.Startup&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.StartupUri">
          <source><ph id="ph1">&lt;see cref="P:System.Windows.Application.StartupUri" /&gt;</ph> is set with a value of null.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Application.StartupUri" /&gt;</ph> に null の値が設定されています。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>The name of the requested ambient property.</source>
          <target state="translated">要求されたアンビエント プロパティの名前。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>Queries for whether a specified ambient property is available in the current scope.</source>
          <target state="translated">指定されたアンビエント プロパティを現在のスコープで使用できるかどうかを照会します。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the requested ambient property is available; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">要求されたアンビエント プロパティを使用できる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">このメンバーは、明示的なインターフェイス メンバーの実装です。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Markup.IQueryAmbient&gt;</ph> interface.</source>
          <target state="translated">これは、<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> のインスタンスが <ph id="ph2">&lt;xref:System.Windows.Markup.IQueryAmbient&gt;</ph> インターフェイスにキャストされる場合のみ、使用できます。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>The name of the resource to find.</source>
          <target state="translated">検索するリソースの名前。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>Searches for the specified resource.</source>
          <target state="translated">指定したリソースを検索します。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>The requested resource object.</source>
          <target state="translated">要求されたリソース オブジェクト。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>If the requested resource is not found, a null reference is returned.</source>
          <target state="translated">要求したリソースが見つからない場合は、null 参照が返されます。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> will first look in application-scope resources for the specified resource.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> アプリケーション スコープの指定されたリソースのリソースでは、まずします。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>Application-scope resources are managed by <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>, and are exposed from the <ph id="ph2">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph> property.</source>
          <target state="translated">アプリケーション スコープのリソースで管理されて<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>から公開されると、<ph id="ph2">&lt;xref:System.Windows.Application.Resources%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>If the specified resource is not found in the set of application-scope resources, <ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> then next searches the system resources.</source>
          <target state="translated">アプリケーション スコープのリソースのセットに指定されたリソースが見つからない場合<ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>次へは、システム リソースを検索します。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>System resources are shell resources defined by the user, and include colors, fonts, and shell configurations.</source>
          <target state="translated">システム リソースは、シェル リソースが、ユーザーが定義されているし、色、フォント、およびシェル構成が含まれます。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>These are exposed from the <ph id="ph1">&lt;xref:System.Windows.SystemColors&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.SystemFonts&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.SystemParameters&gt;</ph> types, respectively, as static properties.</source>
          <target state="translated">これらは、 <ph id="ph1">&lt;xref:System.Windows.SystemColors&gt;</ph>、 <ph id="ph2">&lt;xref:System.Windows.SystemFonts&gt;</ph>、および<ph id="ph3">&lt;xref:System.Windows.SystemParameters&gt;</ph>型をそれぞれ、静的なプロパティです。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>To use <ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> to acquire them, these types also expose resource key properties that are designed to be passed to <ph id="ph2">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>; for example, <ph id="ph3">&lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;</ph>.</source>
          <target state="translated">使用する<ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>を取得するには、これらの型もリソース キー プロパティを公開に渡されるように設計された<ph id="ph2">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>。 たとえば、<ph id="ph3">&lt;xref:System.Windows.SystemParameters.IconWidthKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> returns an object, you must cast the returned value to the appropriate type if the resource is found.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>オブジェクトを返しますリソースが見つかった場合は適切な型に返される値をキャストする必要があります。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>This method is thread safe and can be called from any thread.</source>
          <target state="translated">このメソッドはスレッド セーフであるため、任意のスレッドから呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Application.TryFindResource(System.Object)">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph> to acquire a resource.</source>
          <target state="translated">次の例は、使用する方法を示しています。<ph id="ph1">&lt;xref:System.Windows.Application.TryFindResource%2A&gt;</ph>リソースを取得します。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="P:System.Windows.Application.Windows">
          <source>Gets the instantiated windows in an application.</source>
          <target state="translated">アプリケーションでインスタンス化されたウィンドウを取得します。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Windows">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph> that contains references to all window objects in the current <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph>.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see cref="T:System.Windows.WindowCollection" /&gt;</ph> のすべてのウィンドウ オブジェクトへの参照を格納している <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Windows">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> reference is automatically added to <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> as soon as a window is instantiated on the <ph id="ph3">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> thread; windows that are created by worker threads are not added.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>に参照が自動的に追加<ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>でウィンドウがインスタンス化するとすぐに、<ph id="ph3">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>スレッド以外のスレッドが追加されませんワーカーによって作成されたウィンドウです。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Windows">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> reference is automatically removed after its <ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph> event has been handled and before its <ph id="ph3">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>参照が自動的に削除後、<ph id="ph2">&lt;xref:System.Windows.Window.Closing&gt;</ph>イベントが処理されたとする前にその<ph id="ph3">&lt;xref:System.Windows.Window.Closed&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Windows">
          <source>By default, the first item added to the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property becomes the <ph id="ph2">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>.</source>
          <target state="translated">既定では、最初の項目を追加する、<ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>プロパティになります、<ph id="ph2">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Windows">
          <source>This property is available only from the thread that created the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
          <target state="translated">このプロパティは、作成したスレッドからのみ使用可能な<ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Application.Windows">
          <source>The following example demonstrates how to enumerate the <ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property to build a top-level Windows menu, which is common to <ph id="ph2">[!INCLUDE[TLA#tla_mdi](~/includes/tlasharptla-mdi-md.md)]</ph> applications like <ph id="ph3">[!INCLUDE[TLA#tla_xl](~/includes/tlasharptla-xl-md.md)]</ph>, or multiple-instance Single Document Interface (SDI) applications like <ph id="ph4">[!INCLUDE[TLA#tla_word](~/includes/tlasharptla-word-md.md)]</ph>.</source>
          <target state="translated">次の例では、列挙、<ph id="ph1">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph>に共通する最上位レベルの Windows メニューをビルド プロパティ<ph id="ph2">[!INCLUDE[TLA#tla_mdi](~/includes/tlasharptla-mdi-md.md)]</ph>のようなアプリケーション<ph id="ph3">[!INCLUDE[TLA#tla_xl](~/includes/tlasharptla-xl-md.md)]</ph>などの複数インスタンスのシングル ドキュメント インターフェイス (SDI) アプリケーションまたは<ph id="ph4">[!INCLUDE[TLA#tla_word](~/includes/tlasharptla-word-md.md)]</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>