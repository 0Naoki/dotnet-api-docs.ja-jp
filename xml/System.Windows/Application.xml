<Type Name="Application" FullName="System.Windows.Application">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f32abe385886566024cf8917dc78743dad79f9b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69434935" /></Metadata><TypeSignature Language="C#" Value="public class Application : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Application extends System.Windows.Threading.DispatcherObject implements class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Application" />
  <TypeSignature Language="VB.NET" Value="Public Class Application&#xA;Inherits DispatcherObject&#xA;Implements IQueryAmbient" />
  <TypeSignature Language="C++ CLI" Value="public ref class Application : System::Windows::Threading::DispatcherObject, System::Windows::Markup::IQueryAmbient" />
  <TypeSignature Language="F#" Value="type Application = class&#xA;    inherit DispatcherObject&#xA;    interface IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="cce76-101">Windows Presentation Foundation アプリケーションをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="cce76-101">Encapsulates a Windows Presentation Foundation application.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-102"><xref:System.Windows.Application>は、次のよう[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]なアプリケーション固有の機能をカプセル化するクラスです。</span><span class="sxs-lookup"><span data-stu-id="cce76-102"><xref:System.Windows.Application> is a class that encapsulates [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] application-specific functionality, including the following:</span></span>  
  
-   <span data-ttu-id="cce76-103">**アプリケーションの有効期間** <xref:System.Windows.Application.Activated>: <xref:System.Windows.Application.Deactivated> <xref:System.Windows.Application.Current%2A> <xref:System.Windows.Application.DispatcherUnhandledException> 、、<xref:System.Windows.Application.SessionEnding>、 、、<xref:System.Windows.Application.Run%2A>、、、、 。<xref:System.Windows.Application.Startup> <xref:System.Windows.Application.Exit> <xref:System.Windows.Application.Shutdown%2A> <xref:System.Windows.Application.ShutdownMode%2A></span><span class="sxs-lookup"><span data-stu-id="cce76-103">**Application Lifetime**: <xref:System.Windows.Application.Activated>, <xref:System.Windows.Application.Current%2A>, <xref:System.Windows.Application.Deactivated>, <xref:System.Windows.Application.DispatcherUnhandledException>, <xref:System.Windows.Application.Exit>, <xref:System.Windows.Application.Run%2A>, <xref:System.Windows.Application.SessionEnding>, <xref:System.Windows.Application.Shutdown%2A>, <xref:System.Windows.Application.ShutdownMode%2A>, <xref:System.Windows.Application.Startup>.</span></span>  
  
-   <span data-ttu-id="cce76-104">**アプリケーションスコープウィンドウ、プロパティ、およびリソース管理** <xref:System.Windows.Application.FindResource%2A>: <xref:System.Windows.Application.Properties%2A> <xref:System.Windows.Application.LoadComponent%2A> <xref:System.Windows.Application.GetContentStream%2A> <xref:System.Windows.Application.MainWindow%2A>、 <xref:System.Windows.Application.GetResourceStream%2A>、、 <xref:System.Windows.Application.Resources%2A> 、、<xref:System.Windows.Application.Windows%2A>、 、、<xref:System.Windows.Application.StartupUri%2A>。</span><span class="sxs-lookup"><span data-stu-id="cce76-104">**Application-Scope Window, Property, and Resource Management**: <xref:System.Windows.Application.FindResource%2A>, <xref:System.Windows.Application.GetContentStream%2A>, <xref:System.Windows.Application.GetResourceStream%2A>, <xref:System.Windows.Application.LoadComponent%2A>, <xref:System.Windows.Application.MainWindow%2A>, <xref:System.Windows.Application.Properties%2A>, <xref:System.Windows.Application.Resources%2A>, <xref:System.Windows.Application.StartupUri%2A>, <xref:System.Windows.Application.Windows%2A>.</span></span>  
  
-   <span data-ttu-id="cce76-105">**コマンドラインパラメーターと終了コード処理**: <xref:System.Windows.Application.Startup?displayProperty=nameWithType>、 <xref:System.Windows.Application.Exit?displayProperty=nameWithType>、 <xref:System.Windows.Application.Shutdown%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="cce76-105">**Command-Line Parameter and Exit Code Processing**: <xref:System.Windows.Application.Startup?displayProperty=nameWithType>, <xref:System.Windows.Application.Exit?displayProperty=nameWithType>, <xref:System.Windows.Application.Shutdown%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="cce76-106">**ナビゲーション**: <xref:System.Windows.Application.FragmentNavigation> <xref:System.Windows.Application.LoadCompleted> 、<xref:System.Windows.Application.Navigated>、、 、、<xref:System.Windows.Application.NavigationFailed>、、 、。<xref:System.Windows.Application.SetCookie%2A> <xref:System.Windows.Application.Navigating> <xref:System.Windows.Application.NavigationProgress> <xref:System.Windows.Application.NavigationStopped> <xref:System.Windows.Application.GetCookie%2A></span><span class="sxs-lookup"><span data-stu-id="cce76-106">**Navigation**: <xref:System.Windows.Application.FragmentNavigation>, <xref:System.Windows.Application.LoadCompleted>, <xref:System.Windows.Application.Navigated>, <xref:System.Windows.Application.Navigating>, <xref:System.Windows.Application.NavigationProgress>, <xref:System.Windows.Application.NavigationStopped>, <xref:System.Windows.Application.NavigationFailed>, <xref:System.Windows.Application.SetCookie%2A>, <xref:System.Windows.Application.GetCookie%2A>.</span></span>  
  
 <span data-ttu-id="cce76-107"><xref:System.Windows.Application>ウィンドウ、プロパティ、およびリソーススコープサービスへの共有アクセスを提供するシングルトンパターンを実装します。</span><span class="sxs-lookup"><span data-stu-id="cce76-107"><xref:System.Windows.Application> implements the singleton pattern to provide shared access to its window, property, and resource scope services.</span></span> <span data-ttu-id="cce76-108">そのため、 <xref:System.Windows.Application>クラスのインスタンスは1つだけ<xref:System.AppDomain>作成できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-108">Consequently, only one instance of the <xref:System.Windows.Application> class can be created per <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="cce76-109">は、マークアップ<xref:System.Windows.Application> 、マークアップと分離コード、またはコードを使用して実装できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-109">You can implement an <xref:System.Windows.Application> using markup, markup and code-behind, or code.</span></span> <span data-ttu-id="cce76-110">マーク<xref:System.Windows.Application>アップまたはマークアップと分離コードのどちらを使用する場合でも、マークアップファイルを`ApplicationDefinition`項目[!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]として構成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-110">If <xref:System.Windows.Application> is implemented with markup, whether markup or markup and code-behind, the markup file must be configured as an [!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)] `ApplicationDefinition` item.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-111">スタンドアロンアプリケーションでは、オブジェクト<xref:System.Windows.Application>は必要ありません。の<xref:System.Windows.Application>インスタンスを`static`作成せずに`Main`ウィンドウを開くカスタムエントリポイントメソッド () を実装することができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-111">A standalone application does not require an <xref:System.Windows.Application> object; it is possible to implement a custom `static` entry point method (`Main`) that opens a window without creating an instance of <xref:System.Windows.Application>.</span></span> <span data-ttu-id="cce76-112">ただし、 [!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)] <xref:System.Windows.Application>オブジェクトが必要です。</span><span class="sxs-lookup"><span data-stu-id="cce76-112">However, [!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)] require an <xref:System.Windows.Application> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-113">次の例は、マークアップのみを使用して標準アプリケーションを定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-113">The following example shows how a standard application is defined using only markup:</span></span>  
  
 [!code-xaml[ApplicationSnippets#ApplicationMARKUP](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationSnippets/CSharp/AppMarkup.xaml#applicationmarkup)]  
  
 <span data-ttu-id="cce76-114">次の例は、コードのみを使用して標準アプリケーションを定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-114">The following example shows how a standard application is defined using only code:</span></span>  
  
 [!code-csharp[ApplicationSnippets#ApplicationCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationSnippets/CSharp/AppCode.cs#applicationcode)]
 [!code-vb[ApplicationSnippets#ApplicationCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationSnippets/visualbasic/appcode.vb#applicationcode)]  
  
 <span data-ttu-id="cce76-115">次の例は、マークアップと分離コードの組み合わせを使用して、標準アプリケーションを定義する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-115">The following example shows how a standard application is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[ApplicationSnippets#ApplicationXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationSnippets/CSharp/App.xaml#applicationxaml)]  
  
 [!code-csharp[ApplicationSnippets#ApplicationCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationSnippets/CSharp/App.xaml.cs#applicationcodebehind)]
 [!code-vb[ApplicationSnippets#ApplicationCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationSnippets/visualbasic/application.xaml.vb#applicationcodebehind)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="cce76-116">この型<see langword="static" />の<see langword="Shared" />パブリック (Visual Basic) メンバーは、スレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="cce76-116">The public <see langword="static" /> (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span></span> <span data-ttu-id="cce76-117">また<see cref="M:System.Windows.Application.FindResource(System.Object)" /> <see cref="P:System.Windows.Application.Properties" /> 、メソッドとメソッド<see cref="P:System.Windows.Application.Resources" /> 、およびプロパティとプロパティは、スレッドセーフです。 <see cref="M:System.Windows.Application.TryFindResource(System.Object)" /></span><span class="sxs-lookup"><span data-stu-id="cce76-117">In addition, the <see cref="M:System.Windows.Application.FindResource(System.Object)" /> and <see cref="M:System.Windows.Application.TryFindResource(System.Object)" /> methods and the <see cref="P:System.Windows.Application.Properties" /> and <see cref="P:System.Windows.Application.Resources" /> properties are thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Windows.Window" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Application ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Application();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cce76-118"><see cref="T:System.Windows.Application" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="cce76-118">Initializes a new instance of the <see cref="T:System.Windows.Application" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-119">アプリケーションスコープのウィンドウ、 <xref:System.Windows.Application>プロパティ、およびリソースデータ<xref:System.AppDomain>の1つのセットへの共有アクセスを確保するために、クラスのインスタンスを1つだけ作成できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-119">Only one instance of the <xref:System.Windows.Application> class can be created per <xref:System.AppDomain>, to ensure shared access to a single set of application-scope window, property, and resource data.</span></span> <span data-ttu-id="cce76-120">その結果、 <xref:System.Windows.Application>クラスのパラメーターなしのコンストラクターは、初期化されているインスタンスが<xref:System.AppDomain>内の最初のインスタンスであるか<xref:System.InvalidOperationException>どうかを検出します。そうでない場合は、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cce76-120">Consequently, the parameterless constructor of the <xref:System.Windows.Application> class detects whether the instance being initialized is the first instance in an <xref:System.AppDomain>; if it is not, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 <span data-ttu-id="cce76-121"><xref:System.Windows.Application.Current%2A>現在<xref:System.Windows.Application> のの<xref:System.AppDomain>オブジェクトは、静的プロパティから公開されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-121">The <xref:System.Windows.Application> object for the current <xref:System.AppDomain> is exposed from the static <xref:System.Windows.Application.Current%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cce76-122">1 つの <see cref="T:System.Windows.Application" /> に対して、<see cref="T:System.AppDomain" /> クラスのインスタンスが複数作成されています。</span><span class="sxs-lookup"><span data-stu-id="cce76-122">More than one instance of the <see cref="T:System.Windows.Application" /> class is created per <see cref="T:System.AppDomain" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberSignature Language="F#" Value="member this.Activated : EventHandler " Usage="member this.Activated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-123">アプリケーションが前面のアプリケーションになったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-123">Occurs when an application becomes the foreground application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-124">1つまたは複数の開いているウィンドウがアクティブになっている Windows Presentation Foundation アプリケーションがアクティブ化されている (前面のアプリケーションになります)。これは、アプリケーションが起動されてから初めて windows がアクティブになったとき、または windows の1つがアクティブになったときに、アプリケーションが非アクティブになっている:具体的には、次の場合にアクティブ化が行われます。</span><span class="sxs-lookup"><span data-stu-id="cce76-124">A Windows Presentation Foundation application that has one or more open windows is activated (becomes the foreground application) when one of the windows is activated for the first time since the application was launched, or when one of the windows is activated while the application is inactive: Specifically, activation occurs when:</span></span>  
  
-   <span data-ttu-id="cce76-125">アプリケーションが最初のウィンドウを開きます。</span><span class="sxs-lookup"><span data-stu-id="cce76-125">An application opens its first window.</span></span>  
  
-   <span data-ttu-id="cce76-126">ユーザーは、ALT + TAB キーを使用するか、タスクマネージャーを使用して、アプリケーションに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="cce76-126">A user switches to the application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="cce76-127">ユーザーは、アプリケーション内のいずれかのウィンドウのタスクバーボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="cce76-127">A user clicks the taskbar button for one of the windows in an application.</span></span>  
  
 <span data-ttu-id="cce76-128">アクティブ化時に検出する必要があるアプリケーションは<xref:System.Windows.Application.Activated> 、イベントを処理できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-128">Applications that need to detect when they activate can handle the <xref:System.Windows.Application.Activated> event.</span></span>  
  
 <span data-ttu-id="cce76-129">アプリケーションが最初にアクティブ化された後は、有効期間中に何度も非アクティブになり、再アクティブ化される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-129">After an application is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="cce76-130">アプリケーションの動作または状態がアクティブ化状態に依存している場合は<xref:System.Windows.Application.Activated> 、 <xref:System.Windows.Application.Deactivated>イベントとイベントの両方を処理して、アクティブ化の状態を確認できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-130">If an application's behavior or state depends on its activation state, it can handle both <xref:System.Windows.Application.Activated> and <xref:System.Windows.Application.Deactivated> events to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="cce76-131">アプリケーションがアクティブになると<xref:System.Windows.Application.Activated> 、アプリケーションがアクティブになっている間にアクティブ化されたアプリケーション内のウィンドウの数に関係なく、アプリケーションが非アクティブになるまで、は再び発生しません。</span><span class="sxs-lookup"><span data-stu-id="cce76-131">Once an application becomes active, <xref:System.Windows.Application.Activated> will not be raised again until the application is deactivated, irrespective of how many windows within an application are activated while the application is active.</span></span>  
  
 <span data-ttu-id="cce76-132"><xref:System.Windows.Application.Activated>は、で[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]は発生しません。</span><span class="sxs-lookup"><span data-stu-id="cce76-132"><xref:System.Windows.Application.Activated> is not raised for [!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-133">次の例は、スタンドアロンアプリケーションのアクティブ化と非アクティブ化を検出する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-133">The following example shows how to detect when a standalone application activates and deactivates.</span></span>  
  
 [!code-xaml[ApplicationActivationSnippets#DetectActivationStateXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationActivationSnippets/CSharp/App.xaml#detectactivationstatexaml)]  
  
 [!code-csharp[ApplicationActivationSnippets#DetectActivationStateCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationActivationSnippets/CSharp/App.xaml.cs#detectactivationstatecodebehind)]
 [!code-vb[ApplicationActivationSnippets#DetectActivationStateCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationActivationSnippets/visualbasic/application.xaml.vb#detectactivationstatecodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnActivated(System.EventArgs)" />
        <altmember cref="E:System.Windows.Application.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Application Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Application Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Application.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Application ^ Current { System::Windows::Application ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.Application" Usage="System.Windows.Application.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-134">現在の <see cref="T:System.Windows.Application" /> の <see cref="T:System.AppDomain" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="cce76-134">Gets the <see cref="T:System.Windows.Application" /> object for the current <see cref="T:System.AppDomain" />.</span></span></summary>
        <value><span data-ttu-id="cce76-135">現在の <see cref="T:System.Windows.Application" /> の <see cref="T:System.AppDomain" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cce76-135">The <see cref="T:System.Windows.Application" /> object for the current <see cref="T:System.AppDomain" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-136"><xref:System.Windows.Application>は、現在<xref:System.AppDomain> <xref:System.Windows.Application> <xref:System.Windows.Application.Current%2A> ののインスタンスへの共有アクセスを提供する静的プロパティを実装する、シングルトンごとの型です。<xref:System.AppDomain></span><span class="sxs-lookup"><span data-stu-id="cce76-136"><xref:System.Windows.Application> is a per-<xref:System.AppDomain> singleton type that implements the static <xref:System.Windows.Application.Current%2A> property to provide shared access to the <xref:System.Windows.Application> instance for the current <xref:System.AppDomain>.</span></span> <span data-ttu-id="cce76-137">この設計では、共有リソース<xref:System.Windows.Application>や状態など、によって管理される状態が、1つの共有された場所から利用できることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-137">This design guarantees that state managed by <xref:System.Windows.Application>, including shared resources and state, is available from a single, shared location.</span></span>  
  
 <span data-ttu-id="cce76-138">このプロパティはスレッドセーフであり、任意のスレッドから使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-138">This property is thread safe and is available from any thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberSignature Language="F#" Value="member this.Deactivated : EventHandler " Usage="member this.Deactivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-139">アプリケーションが前面のアプリケーションではなくなったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-139">Occurs when an application stops being the foreground application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-140">ユーザーが次の処理を実行すると、1つ以上の開いているウィンドウが非アクティブ化された (フォアグラウンドアプリケーションではなく) Windows Presentation Foundation アプリケーション。</span><span class="sxs-lookup"><span data-stu-id="cce76-140">A Windows Presentation Foundation application that has one or more open windows deactivates (stops being the foreground application) when a user does the following:</span></span>  
  
-   <span data-ttu-id="cce76-141">ALT + TAB キーを押すか、タスクマネージャーを使用して、別のアプリケーションに切り替えます。</span><span class="sxs-lookup"><span data-stu-id="cce76-141">Switches to another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="cce76-142">別のアプリケーションのウィンドウのタスクバーボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="cce76-142">Clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="cce76-143">非アクティブ化を検出する必要がある<xref:System.Windows.Application.Deactivated>アプリケーションは、イベントを処理できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-143">Applications that need to detect deactivation can handle the <xref:System.Windows.Application.Deactivated> event.</span></span>  
  
 <span data-ttu-id="cce76-144">アプリケーションが最初にアクティブ化された後は、有効期間中に何度も非アクティブになり、再アクティブ化される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-144">After an application is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="cce76-145">アプリケーションの動作または状態がアクティブ化状態に依存している場合は<xref:System.Windows.Application.Deactivated> 、 <xref:System.Windows.Application.Activated>イベントとイベントの両方を処理して、どの状態にあるかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-145">If an application's behavior or state depends on its activation state, it can handle both <xref:System.Windows.Application.Deactivated> and <xref:System.Windows.Application.Activated> events to determine which state it's in.</span></span>  
  
 <span data-ttu-id="cce76-146"><xref:System.Windows.Application.Deactivated>は、で[!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]は発生しません。</span><span class="sxs-lookup"><span data-stu-id="cce76-146"><xref:System.Windows.Application.Deactivated> is not raised for [!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-147">次の例では、スタンドアロンアプリケーションが非アクティブ化され、アクティブ化されるタイミングを検出する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="cce76-147">The following example shows how to detect when a standalone application deactivates and activates.</span></span>  
  
 [!code-xaml[ApplicationActivationSnippets#DetectActivationStateXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationActivationSnippets/CSharp/App.xaml#detectactivationstatexaml)]  
  
 [!code-csharp[ApplicationActivationSnippets#DetectActivationStateCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationActivationSnippets/CSharp/App.xaml.cs#detectactivationstatecodebehind)]
 [!code-vb[ApplicationActivationSnippets#DetectActivationStateCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationActivationSnippets/visualbasic/application.xaml.vb#detectactivationstatecodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnDeactivated(System.EventArgs)" />
        <altmember cref="E:System.Windows.Application.Activated" />
      </Docs>
    </Member>
    <Member MemberName="DispatcherUnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler DispatcherUnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler DispatcherUnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.DispatcherUnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DispatcherUnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ DispatcherUnhandledException;" />
      <MemberSignature Language="F#" Value="member this.DispatcherUnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.DispatcherUnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-148">アプリケーションによってスローされた例外が処理されないときに発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-148">Occurs when an exception is thrown by an application but not handled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-149">既定では、Windows Presentation Foundation はハンドルされない例外をキャッチし、(例外を報告できる) ダイアログボックスから例外のユーザーに通知し、アプリケーションを自動的にシャットダウンします。</span><span class="sxs-lookup"><span data-stu-id="cce76-149">By default, Windows Presentation Foundation catches unhandled exceptions, notifies users of the exception from a dialog box (from which they can report the exception), and automatically shuts down an application.</span></span>  
  
 <span data-ttu-id="cce76-150">ただし、アプリケーションで、一元化された場所からカスタムのハンドルされない例外処理を<xref:System.Windows.Application.DispatcherUnhandledException>実行する必要がある場合は、を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-150">However, if an application needs to perform custom unhandled exception processing from a centralized location, you should handle <xref:System.Windows.Application.DispatcherUnhandledException>.</span></span>  
  
 <span data-ttu-id="cce76-151"><xref:System.Windows.Application.DispatcherUnhandledException>は、メイン UI <xref:System.Windows.Application>スレッドで実行されているコードによって処理されない例外ごとに、によって発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-151"><xref:System.Windows.Application.DispatcherUnhandledException> is raised by an <xref:System.Windows.Application> for each exception that is unhandled by code running on the main UI thread.</span></span>  
  
 <span data-ttu-id="cce76-152">バックグラウンド ui スレッド (独自<xref:System.Windows.Threading.Dispatcher>のスレッド) またはバックグラウンドワーカースレッド (が<xref:System.Windows.Threading.Dispatcher>ないスレッド) で例外が処理されない場合、例外はメイン ui スレッドに転送されません。</span><span class="sxs-lookup"><span data-stu-id="cce76-152">If an exception is not handled on either a background UI thread (a thread with its own <xref:System.Windows.Threading.Dispatcher>) or a background worker thread (a thread without a <xref:System.Windows.Threading.Dispatcher>), the exception is not forwarded to the main UI thread.</span></span> <span data-ttu-id="cce76-153">そのため<xref:System.Windows.Application.DispatcherUnhandledException> 、は発生しません。</span><span class="sxs-lookup"><span data-stu-id="cce76-153">Consequently, <xref:System.Windows.Application.DispatcherUnhandledException> is not raised.</span></span> <span data-ttu-id="cce76-154">このような状況では、次の操作を行うためのコードを記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-154">In these circumstances, you will need to write code to do the following:</span></span>  
  
1.  <span data-ttu-id="cce76-155">バックグラウンドスレッドで例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="cce76-155">Handle exceptions on the background thread.</span></span>  
  
2.  <span data-ttu-id="cce76-156">これらの例外をメイン UI スレッドにディスパッチします。</span><span class="sxs-lookup"><span data-stu-id="cce76-156">Dispatch those exceptions to the main UI thread.</span></span>  
  
3.  <span data-ttu-id="cce76-157">を生成できる<xref:System.Windows.Application.DispatcherUnhandledException>ように処理せずに、メイン UI スレッドでそれらを再スローします。</span><span class="sxs-lookup"><span data-stu-id="cce76-157">Rethrow them on the main UI thread without handling them to allow <xref:System.Windows.Application.DispatcherUnhandledException> to be raised.</span></span>  
  
 <span data-ttu-id="cce76-158">詳細については、「[スレッドモデル](~/docs/framework/wpf/advanced/threading-model.md)の概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cce76-158">For more information, see the [Threading Model](~/docs/framework/wpf/advanced/threading-model.md) overview.</span></span>  
  
 <span data-ttu-id="cce76-159">イベント<xref:System.Windows.Application.DispatcherUnhandledException>ハンドラーには、次<xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs>のような、例外に関するコンテキスト情報を含む引数が渡されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-159">The <xref:System.Windows.Application.DispatcherUnhandledException> event handler is passed a <xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs> argument that contains contextual information regarding the exception, including:</span></span>  
  
-   <span data-ttu-id="cce76-160">例外 (<xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A>)。</span><span class="sxs-lookup"><span data-stu-id="cce76-160">The exception (<xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A>).</span></span>  
  
-   <span data-ttu-id="cce76-161">の発生元の<xref:System.Windows.Threading.Dispatcher>。 <xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A></span><span class="sxs-lookup"><span data-stu-id="cce76-161">The <xref:System.Windows.Threading.Dispatcher> from which it originated (<xref:System.Windows.Threading.DispatcherEventArgs.Dispatcher%2A>).</span></span>  
  
 <span data-ttu-id="cce76-162">この情報を使用すると、例外が復旧可能かどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-162">You can use this information to determine whether an exception is recoverable or not.</span></span> <span data-ttu-id="cce76-163">回復可能な例外<xref:System.IO.FileNotFoundException>は、などの場合がありますが、たとえば、回復不能な例外はである可能性<xref:System.StackOverflowException>があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-163">A recoverable exception might be a <xref:System.IO.FileNotFoundException>, for example, while an unrecoverable exception might be a <xref:System.StackOverflowException>, for example.</span></span>  
  
 <span data-ttu-id="cce76-164">から<xref:System.Windows.Application.DispatcherUnhandledException>未処理の例外を処理し、処理[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]を続行しない場合は、 <xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A>プロパティをに`true`設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-164">When you process an unhandled exception from <xref:System.Windows.Application.DispatcherUnhandledException>, and you don't want [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] to continue processing it, you need to set the <xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="cce76-165">によって発生する<xref:System.Windows.Application>他の<xref:System.Windows.Application.DispatcherUnhandledException>イベントとは異なり、には、対応するプロテクト仮想実装 (OnDispatcherUnhandledException) がありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-165">Unlike the other events that <xref:System.Windows.Application> raises, <xref:System.Windows.Application.DispatcherUnhandledException> does not have a matching protected virtual implementation (OnDispatcherUnhandledException).</span></span> <span data-ttu-id="cce76-166">そのため、から<xref:System.Windows.Application>派生するクラスは、ハンドルされない例外を処理するために、常にで<xref:System.Windows.Application.DispatcherUnhandledException>イベントハンドラーを登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-166">Consequently, classes that derive from <xref:System.Windows.Application> must always register an event handler with <xref:System.Windows.Application.DispatcherUnhandledException> to process unhandled exceptions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-167">次の例は、イベントを処理して未処理の<xref:System.Windows.Application.DispatcherUnhandledException>例外を処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-167">The following example shows how to process unhandled exceptions by handling the <xref:System.Windows.Application.DispatcherUnhandledException> event.</span></span>  
  
 [!code-csharp[handling-unhandled-exceptions](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationDispatcherUnhandledExceptionSnippets/CSharp/App.xaml.cs)]
 [!code-vb[handling-unhandled-exceptions](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationDispatcherUnhandledExceptionSnippets/visualbasic/application.xaml.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public event System.Windows.ExitEventHandler Exit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.ExitEventHandler Exit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Exit As ExitEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::ExitEventHandler ^ Exit;" />
      <MemberSignature Language="F#" Value="member this.Exit : System.Windows.ExitEventHandler " Usage="member this.Exit : System.Windows.ExitEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ExitEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-168">アプリケーションがシャットダウンする直前に発生し、キャンセルできません。</span><span class="sxs-lookup"><span data-stu-id="cce76-168">Occurs just before an application shuts down, and cannot be canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-169">アプリケーションは、次のいずれかの理由でシャットダウンできます。</span><span class="sxs-lookup"><span data-stu-id="cce76-169">An application can shut down for either of the following reasons:</span></span>  
  
-   <span data-ttu-id="cce76-170">オブジェクトのメソッドは、明示的に、 <xref:System.Windows.Application.ShutdownMode%2A>またはプロパティによって決定されたとおりに呼び出されます。 <xref:System.Windows.Application.Shutdown%2A> <xref:System.Windows.Application></span><span class="sxs-lookup"><span data-stu-id="cce76-170">The <xref:System.Windows.Application.Shutdown%2A> method of the <xref:System.Windows.Application> object is called, either explicitly or as determined by the <xref:System.Windows.Application.ShutdownMode%2A> property.</span></span>  
  
-   <span data-ttu-id="cce76-171">ユーザーは、ログオフまたはシャットダウンによってセッションを終了します。</span><span class="sxs-lookup"><span data-stu-id="cce76-171">The user ends the session by logging off or shutting down.</span></span>  
  
 <span data-ttu-id="cce76-172"><xref:System.Windows.Application.Exit>イベントを処理してアプリケーションのシャットダウンが発生したことを検出し、必要に応じて追加の処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-172">You can detect when application shutdown occurs by handling the <xref:System.Windows.Application.Exit> event, and perform any additional processing as required.</span></span>  
  
 <span data-ttu-id="cce76-173">を明示的に<xref:System.Windows.Application.Exit>呼び出す<xref:System.Windows.Application.Shutdown%2A>必要がない場合は、を処理してアプリケーションの終了コードを検査または変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="cce76-173">You can also handle <xref:System.Windows.Application.Exit> to inspect or change the application exit code when you don't need to call <xref:System.Windows.Application.Shutdown%2A> explicitly.</span></span> <span data-ttu-id="cce76-174">終了コードは、 <xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A> <xref:System.Windows.Application.Exit>イベントハンドラーに渡される<xref:System.Windows.ExitEventArgs>引数のプロパティから公開されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-174">The exit code is exposed from the <xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A> property of the <xref:System.Windows.ExitEventArgs> argument that's passed to the <xref:System.Windows.Application.Exit> event handler.</span></span> <span data-ttu-id="cce76-175">アプリケーションの実行が停止すると、後続の処理のために、終了コードがオペレーティングシステムに渡されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-175">When the application stops running, the exit code is passed to the operating system for subsequent processing.</span></span>  
  
 <span data-ttu-id="cce76-176">アプリケーションが<xref:System.Windows.Application.SessionEnding>イベントを処理し、その後、イベント<xref:System.Windows.Application.Exit>をキャンセルした場合、は発生せず、アプリケーションはシャットダウンモードに従って実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="cce76-176">If your application handles the <xref:System.Windows.Application.SessionEnding> event and subsequently cancels it, <xref:System.Windows.Application.Exit> is not raised and the application continues running in accordance with the shutdown mode.</span></span>  
  
 <span data-ttu-id="cce76-177">終了コードはから[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]設定できますが、値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-177">The exit code can be set from an [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)], although the value is ignored.</span></span>  
  
 <span data-ttu-id="cce76-178">の[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]場合<xref:System.Windows.Application.Exit> 、は次のような状況で発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-178">For [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)], <xref:System.Windows.Application.Exit> is raised in the following circumstances:</span></span>  
  
-   <span data-ttu-id="cce76-179">[!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]から移動しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-179">An [!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)] is navigated away from.</span></span>  
  
-   <span data-ttu-id="cce76-180">で[!INCLUDE[TLA2#tla_ie7](~/includes/tla2sharptla-ie7-md.md)]は、 [!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]をホストしているタブが閉じられています。</span><span class="sxs-lookup"><span data-stu-id="cce76-180">In [!INCLUDE[TLA2#tla_ie7](~/includes/tla2sharptla-ie7-md.md)], when the tab that is hosting the [!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)] is closed.</span></span>  
  
-   <span data-ttu-id="cce76-181">ブラウザーが閉じられた。</span><span class="sxs-lookup"><span data-stu-id="cce76-181">When the browser is closed.</span></span>  
  
 <span data-ttu-id="cce76-182">どのような場合でも、 <xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A>プロパティの値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-182">In all cases, the value of the <xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A> property is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-183">次の例は、その方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-183">The following example demonstrates how to:</span></span>  
  
-   <span data-ttu-id="cce76-184">イベントを<xref:System.Windows.Application.Exit>処理します。</span><span class="sxs-lookup"><span data-stu-id="cce76-184">Handle the <xref:System.Windows.Application.Exit> event.</span></span>  
  
-   <span data-ttu-id="cce76-185">のプロパティを<xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A>検査して更新します。<xref:System.Windows.ExitEventArgs></span><span class="sxs-lookup"><span data-stu-id="cce76-185">Inspect and update the <xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A> property of the <xref:System.Windows.ExitEventArgs>.</span></span>  
  
-   <span data-ttu-id="cce76-186">分離ストレージのアプリケーションログにエントリを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="cce76-186">Write an entry to an application log in isolated storage.</span></span>  
  
-   <span data-ttu-id="cce76-187">アプリケーションの状態を分離ストレージに保持します。</span><span class="sxs-lookup"><span data-stu-id="cce76-187">Persist the application state to isolated storage.</span></span>  
  
 [!code-xaml[ApplicationExitSnippets#HandleExitXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationExitSnippets/CSharp/App.xaml#handleexitxaml)]  
  
 [!code-csharp[ApplicationExitSnippets#HandleExitCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationExitSnippets/CSharp/App.xaml.cs#handleexitcodebehind)]
 [!code-vb[ApplicationExitSnippets#HandleExitCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationExitSnippets/visualbasic/application.xaml.vb#handleexitcodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)" />
        <altmember cref="E:System.Windows.Application.Startup" />
        <altmember cref="T:System.IO.IsolatedStorage.IsolatedStorage" />
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="application.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="cce76-188">検索するリソースの名前。</span><span class="sxs-lookup"><span data-stu-id="cce76-188">The name of the resource to find.</span></span></param>
        <summary><span data-ttu-id="cce76-189">指定したキーを持つ [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] リソース (<see cref="T:System.Windows.Style" /> や <see cref="T:System.Windows.Media.Brush" /> など) を検索します。要求したリソースが見つからない場合は例外がスローされます (「[XAML Resources (XAML リソース)](~/docs/framework/wpf/advanced/xaml-resources.md)」を参照)。</span><span class="sxs-lookup"><span data-stu-id="cce76-189">Searches for a [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] resource, such as a <see cref="T:System.Windows.Style" /> or <see cref="T:System.Windows.Media.Brush" />, with the specified key, and throws an exception if the requested resource is not found (see [XAML Resources](~/docs/framework/wpf/advanced/xaml-resources.md)).</span></span></summary>
        <returns><span data-ttu-id="cce76-190">要求されたリソース オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cce76-190">The requested resource object.</span></span> <span data-ttu-id="cce76-191">要求したリソースが見つからない場合は、<see cref="T:System.Windows.ResourceReferenceKeyNotFoundException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cce76-191">If the requested resource is not found, a <see cref="T:System.Windows.ResourceReferenceKeyNotFoundException" /> is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-192"><xref:System.Windows.Application.FindResource%2A>は、最初に、指定されたリソースのアプリケーションスコープリソースを検索します。</span><span class="sxs-lookup"><span data-stu-id="cce76-192"><xref:System.Windows.Application.FindResource%2A> will first look in application-scope resources for the specified resource.</span></span> <span data-ttu-id="cce76-193">アプリケーションスコープのリソースはによっ<xref:System.Windows.Application>て管理され、 <xref:System.Windows.Application.Resources%2A>プロパティから公開されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-193">Application-scope resources are managed by <xref:System.Windows.Application>, and are exposed from the <xref:System.Windows.Application.Resources%2A> property.</span></span> <span data-ttu-id="cce76-194">指定したリソースがアプリケーションスコープのリソース<xref:System.Windows.Application.FindResource%2A>のセットに見つからない場合は、次にシステムリソースが検索されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-194">If the specified resource is not found in the set of application-scope resources, <xref:System.Windows.Application.FindResource%2A> then next searches the system resources.</span></span> <span data-ttu-id="cce76-195">システムリソースは、ユーザーが定義したシェルリソースであり、色、フォント、およびシェルの構成が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cce76-195">System resources are shell resources defined by the user, and include colors, fonts, and shell configurations.</span></span> <span data-ttu-id="cce76-196">これらは<xref:System.Windows.SystemColors>、、 <xref:System.Windows.SystemFonts>、および<xref:System.Windows.SystemParameters>の各型から、それぞれ静的プロパティとして公開されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-196">These are exposed from the <xref:System.Windows.SystemColors>, <xref:System.Windows.SystemFonts>, and <xref:System.Windows.SystemParameters> types, respectively, as static properties.</span></span> <span data-ttu-id="cce76-197">を使用<xref:System.Windows.Application.FindResource%2A>してそれらを取得するために、これらの型は、に<xref:System.Windows.Application.FindResource%2A>渡すように設計された<xref:System.Windows.SystemParameters.IconWidthKey%2A>リソースキープロパティも公開します。たとえば、のようになります。</span><span class="sxs-lookup"><span data-stu-id="cce76-197">To use <xref:System.Windows.Application.FindResource%2A> to acquire them, these types also expose resource key properties that are designed to be passed to <xref:System.Windows.Application.FindResource%2A>; for example, <xref:System.Windows.SystemParameters.IconWidthKey%2A>.</span></span>  
  
 <span data-ttu-id="cce76-198">は<xref:System.Windows.Application.FindResource%2A>オブジェクトを返すため、リソースが見つかった場合は、返された値を適切な型にキャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-198">Because <xref:System.Windows.Application.FindResource%2A> returns an object, you must cast the returned value to the appropriate type if the resource is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce76-199">見つからないキーに対してこのメソッドを呼び出すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cce76-199">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="cce76-200">を呼び出し<xref:System.Windows.Application.FindResource%2A>た結果として発生する例外を処理しない<xref:System.Windows.Application.TryFindResource%2A>場合は、代わりにを呼び出します。要求さ`null`れたリソースが見つからず、例外をスローしない場合は、参照を返します。 <xref:System.Windows.Application.TryFindResource%2A></span><span class="sxs-lookup"><span data-stu-id="cce76-200">If you do not want to handle exceptions that result from calling <xref:System.Windows.Application.FindResource%2A>, call <xref:System.Windows.Application.TryFindResource%2A> instead; <xref:System.Windows.Application.TryFindResource%2A> returns a `null` reference when a requested resource cannot be found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="cce76-201">このメソッドはスレッドセーフであり、任意のスレッドから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-201">This method is thread safe and can be called from any thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-202">次の例は、を使用<xref:System.Windows.Application.FindResource%2A>してリソースを検索し、リソース<xref:System.Windows.ResourceReferenceKeyNotFoundException>が見つからないかどうかを処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-202">The following example shows how to use <xref:System.Windows.Application.FindResource%2A> to find a resource, and to handle <xref:System.Windows.ResourceReferenceKeyNotFoundException> if the resource is not found.</span></span>  
  
 [!code-csharp[ApplicationFindResourceSnippets#ApplicationCallFindResourceCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationFindResourceSnippets/CSharp/MainWindow.xaml.cs#applicationcallfindresourcecodebehind)]
 [!code-vb[ApplicationFindResourceSnippets#ApplicationCallFindResourceCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationFindResourceSnippets/visualbasic/mainwindow.xaml.vb#applicationcallfindresourcecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException"><span data-ttu-id="cce76-203">リソースが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="cce76-203">The resource cannot be found.</span></span></exception>
        <altmember cref="M:System.Windows.Application.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FragmentNavigation">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.FragmentNavigationEventHandler FragmentNavigation;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.FragmentNavigationEventHandler FragmentNavigation" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.FragmentNavigation" />
      <MemberSignature Language="VB.NET" Value="Public Event FragmentNavigation As FragmentNavigationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::FragmentNavigationEventHandler ^ FragmentNavigation;" />
      <MemberSignature Language="F#" Value="member this.FragmentNavigation : System.Windows.Navigation.FragmentNavigationEventHandler " Usage="member this.FragmentNavigation : System.Windows.Navigation.FragmentNavigationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.FragmentNavigationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-204">アプリケーションのナビゲーターがコンテンツ フラグメントへのナビゲーションを開始すると発生します。ナビゲーションは、目的のフラグメントが現在のコンテンツにある場合はすぐに発生し、目的のフラグメントが別のコンテンツにある場合は、ソース [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)] コンテンツが読み込まれた後に発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-204">Occurs when a navigator in the application begins navigation to a content fragment, Navigation occurs immediately if the desired fragment is in the current content, or after the source [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)] content has been loaded if the desired fragment is in different content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-205">ナビゲーターは<xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Controls.Frame>またはのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="cce76-205">A navigator is either a <xref:System.Windows.Navigation.NavigationWindow> or a <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="cce76-206">以下を参照してください。<xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cce76-206">See <xref:System.Windows.Navigation.NavigationService.FragmentNavigation?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Navigated" />
        <altmember cref="E:System.Windows.Application.Navigating" />
        <altmember cref="E:System.Windows.Application.LoadCompleted" />
        <altmember cref="E:System.Windows.Application.NavigationProgress" />
        <altmember cref="E:System.Windows.Application.NavigationStopped" />
        <altmember cref="E:System.Windows.Application.NavigationFailed" />
      </Docs>
    </Member>
    <Member MemberName="GetContentStream">
      <MemberSignature Language="C#" Value="public static System.Windows.Resources.StreamResourceInfo GetContentStream (Uri uriContent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Resources.StreamResourceInfo GetContentStream(class System.Uri uriContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.GetContentStream(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetContentStream (uriContent As Uri) As StreamResourceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Resources::StreamResourceInfo ^ GetContentStream(Uri ^ uriContent);" />
      <MemberSignature Language="F#" Value="static member GetContentStream : Uri -&gt; System.Windows.Resources.StreamResourceInfo" Usage="System.Windows.Application.GetContentStream uriContent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Resources.StreamResourceInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriContent" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uriContent"><span data-ttu-id="cce76-207">Loose リソースにマッピングする相対 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-207">The relative <see cref="T:System.Uri" /> that maps to a loose resource.</span></span></param>
        <summary><span data-ttu-id="cce76-208">指定した <see cref="T:System.Uri" /> にあるコンテンツ データ ファイル (「[WPF Application Resource, Content, and Data Files (WPF アプリケーション リソース、コンテンツおよびデータ ファイル)](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)」を参照) のリソース ストリームを返します。</span><span class="sxs-lookup"><span data-stu-id="cce76-208">Returns a resource stream for a content data file that is located at the specified <see cref="T:System.Uri" /> (see [WPF Application Resource, Content, and Data Files](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)).</span></span></summary>
        <returns><span data-ttu-id="cce76-209">指定した <see cref="T:System.Windows.Resources.StreamResourceInfo" /> にあるコンテンツ データ ファイルを格納している <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-209">A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains a content data file that is located at the specified <see cref="T:System.Uri" />.</span></span> <span data-ttu-id="cce76-210">Loose リソースが見つからない場合は null が返されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-210">If a loose resource is not found, null is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-211">このメソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-211">This method is not thread safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cce76-212"><see cref="T:System.Uri" /> に渡される <see cref="M:System.Windows.Application.GetContentStream(System.Uri)" /> は null です。</span><span class="sxs-lookup"><span data-stu-id="cce76-212">The <see cref="T:System.Uri" /> that is passed to <see cref="M:System.Windows.Application.GetContentStream(System.Uri)" /> is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce76-213"><see cref="T:System.Uri" /> に渡される <see cref="M:System.Windows.Application.GetContentStream(System.Uri)" /> は、絶対 <see cref="T:System.Uri" /> です。</span><span class="sxs-lookup"><span data-stu-id="cce76-213">The <see cref="T:System.Uri" /> that is passed to <see cref="M:System.Windows.Application.GetContentStream(System.Uri)" /> is an absolute <see cref="T:System.Uri" />.</span></span></exception>
        <altmember cref="M:System.Windows.Application.GetResourceStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" />
        <altmember cref="Overload:System.Windows.Application.LoadComponent" />
      </Docs>
    </Member>
    <Member MemberName="GetCookie">
      <MemberSignature Language="C#" Value="public static string GetCookie (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetCookie(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.GetCookie(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetCookie(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetCookie : Uri -&gt; string" Usage="System.Windows.Application.GetCookie uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="cce76-214">クッキーが作成された場所を指定する <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-214">The <see cref="T:System.Uri" /> that specifies the location for which a cookie was created.</span></span></param>
        <summary><span data-ttu-id="cce76-215"><see cref="T:System.Uri" /> で指定した場所のクッキーを取得します。</span><span class="sxs-lookup"><span data-stu-id="cce76-215">Retrieves a cookie for the location specified by a <see cref="T:System.Uri" />.</span></span></summary>
        <returns><span data-ttu-id="cce76-216">クッキーが存在する場合は <see cref="T:System.String" /> 値が返されます。それ以外の場合は <see cref="T:System.ComponentModel.Win32Exception" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cce76-216">A <see cref="T:System.String" /> value, if the cookie exists; otherwise, a <see cref="T:System.ComponentModel.Win32Exception" /> is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-217"><xref:System.Windows.Application.GetCookie%2A>指定した<xref:System.Uri>のクッキーを取得します。</span><span class="sxs-lookup"><span data-stu-id="cce76-217"><xref:System.Windows.Application.GetCookie%2A> retrieves a cookie for the specified <xref:System.Uri>.</span></span> <span data-ttu-id="cce76-218">クッキーを取得<xref:System.ComponentModel.Win32Exception>できない場合は、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="cce76-218">If the cookie can't be retrieved, a <xref:System.ComponentModel.Win32Exception> is thrown.</span></span> <span data-ttu-id="cce76-219">Cookie 文字列を解析して名前と値のペアのリストにするには、コードを記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-219">You need to write the code to parse the cookie string into a list of name/value pairs.</span></span>  
  
 <span data-ttu-id="cce76-220">の cookie [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]の概要については、「[ナビゲーションの概要](~/docs/framework/wpf/app-development/navigation-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cce76-220">For an overview of cookies in [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)], see [Navigation Overview](~/docs/framework/wpf/app-development/navigation-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="cce76-221">指定したクッキーを取得しようとして問題が起きると、(<see cref="M:System.Windows.Application.GetCookie(System.Uri)" /> から呼び出された) <see langword="InternetGetCookie" /> 関数により [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-221">A [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] error is raised by the <see langword="InternetGetCookie" /> function (called by <see cref="M:System.Windows.Application.GetCookie(System.Uri)" />) if a problem occurs when attempting to retrieve the specified cookie.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cce76-222">ファイルベース<see cref="T:System.Uri" />のクッキーを取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="cce76-222">for getting the cookie for a file-based <see cref="T:System.Uri" />.</span></span> <span data-ttu-id="cce76-223">関連付けられた列挙型:<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cce76-223">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cce76-224">ファイルベース<see cref="T:System.Uri" />以外のの cookie を取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="cce76-224">for getting the cookie for a non-file-based <see cref="T:System.Uri" />.</span></span> <span data-ttu-id="cce76-225">関連付けられた列挙型:<see cref="P:System.Net.WebPermission.ConnectList" /></span><span class="sxs-lookup"><span data-stu-id="cce76-225">Associated enumeration: <see cref="P:System.Net.WebPermission.ConnectList" /></span></span></permission>
        <altmember cref="M:System.Windows.Application.SetCookie(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRemoteStream">
      <MemberSignature Language="C#" Value="public static System.Windows.Resources.StreamResourceInfo GetRemoteStream (Uri uriRemote);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Resources.StreamResourceInfo GetRemoteStream(class System.Uri uriRemote) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.GetRemoteStream(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRemoteStream (uriRemote As Uri) As StreamResourceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Resources::StreamResourceInfo ^ GetRemoteStream(Uri ^ uriRemote);" />
      <MemberSignature Language="F#" Value="static member GetRemoteStream : Uri -&gt; System.Windows.Resources.StreamResourceInfo" Usage="System.Windows.Application.GetRemoteStream uriRemote" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Resources.StreamResourceInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriRemote" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uriRemote"><span data-ttu-id="cce76-226">起点サイトの Loose リソースにマッピングする <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-226">The <see cref="T:System.Uri" /> that maps to a loose resource at the site of origin.</span></span></param>
        <summary><span data-ttu-id="cce76-227">指定した <see cref="T:System.Uri" /> にある元のサイトに対するデータ ファイル (「[WPF Application Resource, Content, and Data Files (WPF アプリケーション リソース、コンテンツおよびデータ ファイル)](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)」を参照) のリソース ストリームを返します。</span><span class="sxs-lookup"><span data-stu-id="cce76-227">Returns a resource stream for a site-of-origin data file that is located at the specified <see cref="T:System.Uri" /> (see [WPF Application Resource, Content, and Data Files](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)).</span></span></summary>
        <returns><span data-ttu-id="cce76-228">指定した <see cref="T:System.Windows.Resources.StreamResourceInfo" /> にある起点サイト データ ファイルのリソース ストリームを格納している <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-228">A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains a resource stream for a site-of-origin data file that is located at the specified <see cref="T:System.Uri" />.</span></span> <span data-ttu-id="cce76-229">Loose リソースが見つからない場合は <see langword="null" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-229">If the loose resource is not found, <see langword="null" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-230">このメソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-230">This method is not thread safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cce76-231"><see cref="T:System.Uri" /> に渡される <see cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" /> は null です。</span><span class="sxs-lookup"><span data-stu-id="cce76-231">The <see cref="T:System.Uri" /> that is passed to <see cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" /> is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce76-232"><see cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" /> に渡される <see cref="T:System.Uri" /> は相対参照ではなく絶対参照の形式ですが、<c>pack://siteoforigin:,,,/</c> の形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-232">The <see cref="T:System.Uri" /> that is passed to <see cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" /> is either not relative, or is absolute but not in the <c>pack://siteoforigin:,,,/</c> form.</span></span></exception>
        <altmember cref="M:System.Windows.Application.GetContentStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetResourceStream(System.Uri)" />
        <altmember cref="Overload:System.Windows.Application.LoadComponent" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceStream">
      <MemberSignature Language="C#" Value="public static System.Windows.Resources.StreamResourceInfo GetResourceStream (Uri uriResource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Resources.StreamResourceInfo GetResourceStream(class System.Uri uriResource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.GetResourceStream(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetResourceStream (uriResource As Uri) As StreamResourceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Resources::StreamResourceInfo ^ GetResourceStream(Uri ^ uriResource);" />
      <MemberSignature Language="F#" Value="static member GetResourceStream : Uri -&gt; System.Windows.Resources.StreamResourceInfo" Usage="System.Windows.Application.GetResourceStream uriResource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Resources.StreamResourceInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriResource" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uriResource"><span data-ttu-id="cce76-233">埋め込みリソースにマッピングする <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-233">The <see cref="T:System.Uri" /> that maps to an embedded resource.</span></span></param>
        <summary><span data-ttu-id="cce76-234">指定した <see cref="T:System.Uri" /> にあるリソース データ ファイル (「[WPF Application Resource, Content, and Data Files (WPF アプリケーション リソース、コンテンツおよびデータ ファイル)](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)」を参照) のリソース ストリームを返します。</span><span class="sxs-lookup"><span data-stu-id="cce76-234">Returns a resource stream for a resource data file that is located at the specified <see cref="T:System.Uri" /> (see [WPF Application Resource, Content, and Data Files](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)).</span></span></summary>
        <returns><span data-ttu-id="cce76-235">指定した <see cref="T:System.Windows.Resources.StreamResourceInfo" /> にあるリソース データ ファイルのリソース ストリームを格納している <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-235">A <see cref="T:System.Windows.Resources.StreamResourceInfo" /> that contains a resource stream for resource data file that is located at the specified <see cref="T:System.Uri" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-236">このメソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-236">This method is not thread safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cce76-237"><see cref="T:System.Uri" /> に渡される <see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /> は null です。</span><span class="sxs-lookup"><span data-stu-id="cce76-237">The <see cref="T:System.Uri" /> that is passed to <see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /> is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce76-238"><see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /> に渡される <see cref="T:System.Uri" /> は相対参照ではなく絶対参照の形式ですが、<c>pack://application:,,,/</c> の形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-238">The <see cref="T:System.Uri" /> that is passed to <see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /> is either not relative, or is absolute but not in the <c>pack://application:,,,/</c> form.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="cce76-239"><see cref="T:System.Uri" /> に渡される <see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="cce76-239">The <see cref="T:System.Uri" /> that is passed to <see cref="M:System.Windows.Application.GetResourceStream(System.Uri)" /> cannot be found.</span></span></exception>
        <altmember cref="M:System.Windows.Application.GetContentStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" />
        <altmember cref="Overload:System.Windows.Application.LoadComponent" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.LoadCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.LoadCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As LoadCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::LoadCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.Windows.Navigation.LoadCompletedEventHandler " Usage="member this.LoadCompleted : System.Windows.Navigation.LoadCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.LoadCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-240">アプリケーションのナビゲーターによる移動先のコンテンツが読み込まれ、解析されて、レンダリングが開始されると発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-240">Occurs when content that was navigated to by a navigator in the application has been loaded, parsed, and has begun rendering.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-241">ナビゲーターは<xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Controls.Frame>またはのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="cce76-241">A navigator is either a <xref:System.Windows.Navigation.NavigationWindow> or a <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="cce76-242">以下を参照してください。<xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cce76-242">See <xref:System.Windows.Navigation.NavigationService.LoadCompleted?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-243">移動先のコンテンツのプロパティにアクセスする前<xref:System.Windows.FrameworkElement.Loaded>に、 <xref:System.Windows.Controls.Page>上のイベントなどの移動先のコンテンツでイベントをリッスンします。</span><span class="sxs-lookup"><span data-stu-id="cce76-243">Listen for events on the navigated content such as the <xref:System.Windows.FrameworkElement.Loaded> event on <xref:System.Windows.Controls.Page> before you access properties of the navigated content.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Navigated" />
        <altmember cref="E:System.Windows.Application.Navigating" />
        <altmember cref="E:System.Windows.Application.NavigationProgress" />
        <altmember cref="E:System.Windows.Application.NavigationStopped" />
        <altmember cref="E:System.Windows.Application.NavigationFailed" />
        <altmember cref="E:System.Windows.Application.FragmentNavigation" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadComponent">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce76-244">指定した[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] にある [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] ファイルを読み込みます。</span><span class="sxs-lookup"><span data-stu-id="cce76-244">Loads a [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] file that is located at the specified [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)].</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-245">この[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]ファイルには、アプリケーションコードファイル ( [!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]ページアイテムとして構成されている)、またはアプリケーションデータファイル (リソースファイル、コンテンツファイル、またはサイトオリジンファイル) を指定できます。「 [WPF アプリケーションリソース、コンテンツ、およびデータファイル](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cce76-245">The [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)] file can be an application code file (configured as an [!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)] Page item) or an application data file (a resource file, content file, or site-of-origin file; see [WPF Application Resource, Content, and Data Files](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-246">このメソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-246">This method is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.GetResourceStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetContentStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadComponent">
      <MemberSignature Language="C#" Value="public static object LoadComponent (Uri resourceLocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object LoadComponent(class System.Uri resourceLocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.LoadComponent(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadComponent (resourceLocator As Uri) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ LoadComponent(Uri ^ resourceLocator);" />
      <MemberSignature Language="F#" Value="static member LoadComponent : Uri -&gt; obj" Usage="System.Windows.Application.LoadComponent resourceLocator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceLocator" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="resourceLocator"><span data-ttu-id="cce76-247">相対 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ファイルにマップする <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-247">A <see cref="T:System.Uri" /> that maps to a relative [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span></param>
        <summary><span data-ttu-id="cce76-248">指定した[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] にある [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] ファイルを読み込み、[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] ファイルのルート要素で指定されているオブジェクトのインスタンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="cce76-248">Loads a [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] file that is located at the specified [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)], and converts it to an instance of the object that is specified by the root element of the [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] file.</span></span></summary>
        <returns><span data-ttu-id="cce76-249">読み込まれた XAML ファイルに指定されているルート要素のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="cce76-249">An instance of the root element specified by the XAML file loaded.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-250">戻り値は、 [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]ファイルのルート要素と同じ型に明示的に変換する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-250">You must explicitly convert the return value to the same type as the root element of the [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] file.</span></span>  
  
 <span data-ttu-id="cce76-251">この[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]ファイルには、アプリケーションコードファイル ( [!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]ページアイテムとして構成されている)、またはアプリケーションデータファイル (リソースファイル、コンテンツファイル、またはサイトオリジンファイル) を指定できます。「 [WPF アプリケーションリソース、コンテンツ、およびデータファイル](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cce76-251">The [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)] file can be an application code file (configured as an [!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)] Page item) or an application data file (a resource file, content file, or site-of-origin file; see [WPF Application Resource, Content, and Data Files](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-252">このメソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-252">This method is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cce76-253"><paramref name="resourceLocator" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="cce76-253"><paramref name="resourceLocator" /> is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce76-254"><paramref name="resourceLocator" /> は絶対 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] です。</span><span class="sxs-lookup"><span data-stu-id="cce76-254">The <paramref name="resourceLocator" /> is an absolute [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="cce76-255">ファイルが [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)] ファイルではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-255">The file is not a [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)] file.</span></span></exception>
        <altmember cref="M:System.Windows.Application.GetResourceStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetContentStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="LoadComponent">
      <MemberSignature Language="C#" Value="public static void LoadComponent (object component, Uri resourceLocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LoadComponent(object component, class System.Uri resourceLocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.LoadComponent(System.Object,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LoadComponent (component As Object, resourceLocator As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LoadComponent(System::Object ^ component, Uri ^ resourceLocator);" />
      <MemberSignature Language="F#" Value="static member LoadComponent : obj * Uri -&gt; unit" Usage="System.Windows.Application.LoadComponent (component, resourceLocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
        <Parameter Name="resourceLocator" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="cce76-256">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ファイルのルート要素と同じ型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cce76-256">An object of the same type as the root element of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span></param>
        <param name="resourceLocator"><span data-ttu-id="cce76-257">相対 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ファイルにマップする <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-257">A <see cref="T:System.Uri" /> that maps to a relative [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span></param>
        <summary><span data-ttu-id="cce76-258">指定した [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] にある [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] ファイルを読み込んで、[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] ファイルのルート要素で指定したオブジェクトのインスタンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="cce76-258">Loads a [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] file that is located at the specified [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] and converts it to an instance of the object that is specified by the root element of the [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-259">この[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]ファイルには、アプリケーションコードファイル ( [!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)]ページアイテムとして構成されている)、またはアプリケーションデータファイル (リソースファイル、コンテンツファイル、またはサイトオリジンファイル) を指定できます。「 [WPF アプリケーションリソース、コンテンツ、およびデータファイル](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cce76-259">The [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)] file can be an application code file (configured as an [!INCLUDE[TLA#tla_msbuild](~/includes/tlasharptla-msbuild-md.md)] Page item) or an application data file (a resource file, content file, or site-of-origin file; see [WPF Application Resource, Content, and Data Files](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-260">このメソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-260">This method is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cce76-261"><paramref name="resourceLocator" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="cce76-261"><paramref name="resourceLocator" /> is null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cce76-262"><paramref name="resourceLocator" /> は絶対 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] です。</span><span class="sxs-lookup"><span data-stu-id="cce76-262">The <paramref name="resourceLocator" /> is an absolute [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)].</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="cce76-263"><paramref name="component" /> は、[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ファイルのルート要素に一致しない型です。</span><span class="sxs-lookup"><span data-stu-id="cce76-263"><paramref name="component" /> is of a type that does not match the root element of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span></exception>
        <altmember cref="M:System.Windows.Application.GetResourceStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetContentStream(System.Uri)" />
        <altmember cref="M:System.Windows.Application.GetRemoteStream(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="MainWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Window MainWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window MainWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Application.MainWindow" />
      <MemberSignature Language="VB.NET" Value="Public Property MainWindow As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ MainWindow { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainWindow : System.Windows.Window with get, set" Usage="System.Windows.Application.MainWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-264">アプリケーションのメイン ウィンドウを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-264">Gets or sets the main window of the application.</span></span></summary>
        <value><span data-ttu-id="cce76-265">メイン アプリケーション ウィンドウとして指定される <see cref="T:System.Windows.Window" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-265">A <see cref="T:System.Windows.Window" /> that is designated as the main application window.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-266"><xref:System.Windows.Application.MainWindow%2A>は、 <xref:System.Windows.Window> <xref:System.AppDomain>で自動的にインスタンス化される最初のオブジェクトへの参照で設定されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-266"><xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> object to be instantiated in the <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="cce76-267">別の<xref:System.Windows.Application.MainWindow%2A> <xref:System.Windows.Application.Windows%2A>オブジェクトを<xref:System.Windows.Application.MainWindow%2A>プロパティに割り当てるように設定することによって、別のメインウィンドウを指定できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-267">You can specify a different main window by setting <xref:System.Windows.Application.MainWindow%2A> assigning another <xref:System.Windows.Application.Windows%2A> object to the <xref:System.Windows.Application.MainWindow%2A> property.</span></span>  
  
 <span data-ttu-id="cce76-268">オブジェクトのプロパティがに<xref:System.Windows.ShutdownMode.OnMainWindowClose>設定されている場合は、メインウィンドウを閉じるとアプリケーションがシャットダウンします。 <xref:System.Windows.Application.ShutdownMode%2A> <xref:System.Windows.Application></span><span class="sxs-lookup"><span data-stu-id="cce76-268">If the <xref:System.Windows.Application.ShutdownMode%2A> property of the <xref:System.Windows.Application> object is set to <xref:System.Windows.ShutdownMode.OnMainWindowClose>, closing the main window causes the application to shut down.</span></span>  
  
 <span data-ttu-id="cce76-269">アプリケーションのメインウィンドウが、 <xref:System.Windows.Application.MainWindow%2A>の<xref:System.Windows.Application.StartupUri%2A> [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]プロパティ[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]を設定することによって生成されるウィンドウでない場合は、プロパティをから設定できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-269">It is possible to set the <xref:System.Windows.Application.MainWindow%2A> property from [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)], if an application's main window is not the window that is produced by setting the <xref:System.Windows.Application.StartupUri%2A> property in [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)].</span></span> <span data-ttu-id="cce76-270">[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]アプローチには、次の2つの制限があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-270">The two limitations of the [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)] approach are:</span></span>  
  
-   <span data-ttu-id="cce76-271">は、 [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]メインウィンドウ<xref:System.Windows.Navigation.NavigationWindow>として<xref:System.Windows.Window>のみ、 [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]またはを指定できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-271">You can specify either a [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]-only <xref:System.Windows.Window> or a [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]-only <xref:System.Windows.Navigation.NavigationWindow> as the main window.</span></span>  
  
-   <span data-ttu-id="cce76-272">指定したウィンドウ<xref:System.Windows.UIElement.Visibility%2A>のプロパティを設定する必要があります。指定しない場合は、表示されません。</span><span class="sxs-lookup"><span data-stu-id="cce76-272">You must set the <xref:System.Windows.UIElement.Visibility%2A> property of the window you specify, otherwise it won't be shown.</span></span>  
  
 <span data-ttu-id="cce76-273">インスタンス化される最初<xref:System.Windows.Window>のオブジェクトへの参照も、最初の項目として<xref:System.Windows.Application.Windows%2A>コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-273">The reference to the first <xref:System.Windows.Window> object to be instantiated is also added as the first item to the <xref:System.Windows.Application.Windows%2A> collection.</span></span> <span data-ttu-id="cce76-274">の<xref:System.Windows.Application.MainWindow%2A>後に別<xref:System.Windows.Window>のへの参照が設定されている場合、メインウィンドウへの参照を持つ項目の位置は変わりますが、内<xref:System.Windows.Application.Windows%2A>の項目の順序は変わりません。</span><span class="sxs-lookup"><span data-stu-id="cce76-274">If <xref:System.Windows.Application.MainWindow%2A> is subsequently set with a reference to a different <xref:System.Windows.Window>, the position of the item with the reference to the main window will change, while the order of items in <xref:System.Windows.Application.Windows%2A> remains the same.</span></span> <span data-ttu-id="cce76-275">したがって、で<xref:System.Windows.Application.MainWindow%2A>は、常にを使用して、の<xref:System.Windows.Application.Windows%2A>最初の項目ではなくメインウィンドウを参照します。</span><span class="sxs-lookup"><span data-stu-id="cce76-275">Consequently, always use <xref:System.Windows.Application.MainWindow%2A> to refer to the main window instead of the first item in <xref:System.Windows.Application.Windows%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-276">メインウィンドウが<xref:System.Windows.Navigation.NavigationWindow>で、メンバーへ<xref:System.Windows.Navigation.NavigationWindow>の特定のアクセスが必要な場合は、の<xref:System.Windows.Application.MainWindow%2A>値をに<xref:System.Windows.Navigation.NavigationWindow>キャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-276">If the main window is a <xref:System.Windows.Navigation.NavigationWindow>, and you need specific access to <xref:System.Windows.Navigation.NavigationWindow> members, you will need to cast the value of <xref:System.Windows.Application.MainWindow%2A> to <xref:System.Windows.Navigation.NavigationWindow>.</span></span>  
>   
>  <span data-ttu-id="cce76-277">このプロパティは、 <xref:System.Windows.Application>オブジェクトを作成したスレッドからのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-277">This property is available only from the thread that created the <xref:System.Windows.Application> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-278">次の例は、メインアプリケーションウィンドウを検索する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-278">The following example shows how to find the main application window.</span></span>  
  
 [!code-csharp[ApplicationMainWindowSnippets#GetApplicationMainWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationMainWindowSnippets/CSharp/App.xaml.cs#getapplicationmainwindowcode)]
 [!code-vb[ApplicationMainWindowSnippets#GetApplicationMainWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationMainWindowSnippets/visualbasic/application.xaml.vb#getapplicationmainwindowcode)]  
  
 <span data-ttu-id="cce76-279">次の例は、を使用<xref:System.Windows.Application.MainWindow%2A>し[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]てを設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-279">The following example shows how to set <xref:System.Windows.Application.MainWindow%2A> using [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)].</span></span>  
  
 [!code-xaml[ApplicationMainWindowSnippets#SetApplicationMainWindowXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/ApplicationMainWindowSnippets/XAML/App.xaml#setapplicationmainwindowxaml)]  
  
 <span data-ttu-id="cce76-280">次の例は、アプリケーションの起動時<xref:System.Windows.Application.MainWindow%2A>にコード内のをインスタンス化する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-280">The following example shows how to instantiate the <xref:System.Windows.Application.MainWindow%2A> in code during application startup.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#FirstWindowUsingCodeCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/App.xaml.cs#firstwindowusingcodecodebehind)]
 [!code-vb[HOWTOWindowManagementSnippets#FirstWindowUsingCodeCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/application.xaml.vb#firstwindowusingcodecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cce76-281"><see cref="P:System.Windows.Application.MainWindow" /> は、ブラウザーでホストされるアプリケーション ([!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)] など) から設定されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-281"><see cref="P:System.Windows.Application.MainWindow" /> is set from an application that's hosted in a browser, such as an [!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)].</span></span></exception>
        <altmember cref="E:System.Windows.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="Navigated">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.NavigatedEventHandler Navigated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.NavigatedEventHandler Navigated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.Navigated" />
      <MemberSignature Language="VB.NET" Value="Public Event Navigated As NavigatedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::NavigatedEventHandler ^ Navigated;" />
      <MemberSignature Language="F#" Value="member this.Navigated : System.Windows.Navigation.NavigatedEventHandler " Usage="member this.Navigated : System.Windows.Navigation.NavigatedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.NavigatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-282">アプリケーションのナビゲーターによる移動先のコンテンツが見つかったときに発生します。ただし、読み込みはまだ完了していない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-282">Occurs when the content that is being navigated to by a navigator in the application has been found, although it may not have completed loading.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-283">ナビゲーターは<xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Controls.Frame>またはのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="cce76-283">A navigator is either a <xref:System.Windows.Navigation.NavigationWindow> or a <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="cce76-284">以下を参照してください。<xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cce76-284">See <xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Navigating" />
        <altmember cref="E:System.Windows.Application.LoadCompleted" />
        <altmember cref="E:System.Windows.Application.NavigationProgress" />
        <altmember cref="E:System.Windows.Application.NavigationStopped" />
        <altmember cref="E:System.Windows.Application.NavigationFailed" />
        <altmember cref="E:System.Windows.Application.FragmentNavigation" />
      </Docs>
    </Member>
    <Member MemberName="Navigating">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.NavigatingCancelEventHandler Navigating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.NavigatingCancelEventHandler Navigating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.Navigating" />
      <MemberSignature Language="VB.NET" Value="Public Event Navigating As NavigatingCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::NavigatingCancelEventHandler ^ Navigating;" />
      <MemberSignature Language="F#" Value="member this.Navigating : System.Windows.Navigation.NavigatingCancelEventHandler " Usage="member this.Navigating : System.Windows.Navigation.NavigatingCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.NavigatingCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-285">アプリケーションのナビゲーターによって新しいナビゲーションが要求されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-285">Occurs when a new navigation is requested by a navigator in the application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-286">ナビゲーターは<xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Controls.Frame>またはのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="cce76-286">A navigator is either a <xref:System.Windows.Navigation.NavigationWindow> or a <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="cce76-287">以下を参照してください。<xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cce76-287">See <xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Navigated" />
        <altmember cref="E:System.Windows.Application.LoadCompleted" />
        <altmember cref="E:System.Windows.Application.NavigationProgress" />
        <altmember cref="E:System.Windows.Application.NavigationStopped" />
        <altmember cref="E:System.Windows.Application.NavigationFailed" />
        <altmember cref="E:System.Windows.Application.FragmentNavigation" />
      </Docs>
    </Member>
    <Member MemberName="NavigationFailed">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.NavigationFailedEventHandler NavigationFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.NavigationFailedEventHandler NavigationFailed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.NavigationFailed" />
      <MemberSignature Language="VB.NET" Value="Public Event NavigationFailed As NavigationFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::NavigationFailedEventHandler ^ NavigationFailed;" />
      <MemberSignature Language="F#" Value="member this.NavigationFailed : System.Windows.Navigation.NavigationFailedEventHandler " Usage="member this.NavigationFailed : System.Windows.Navigation.NavigationFailedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.NavigationFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-288">アプリケーションのナビゲーターが要求されたコンテンツに移動する際にエラーが発生したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-288">Occurs when an error occurs while a navigator in the application is navigating to the requested content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-289">ナビゲーターは<xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Controls.Frame>またはのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="cce76-289">A navigator is either a <xref:System.Windows.Navigation.NavigationWindow> or a <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="cce76-290">以下を参照してください。<xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cce76-290">See <xref:System.Windows.Navigation.NavigationService.NavigationFailed?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Navigated" />
        <altmember cref="E:System.Windows.Application.Navigating" />
        <altmember cref="E:System.Windows.Application.LoadCompleted" />
        <altmember cref="E:System.Windows.Application.NavigationProgress" />
        <altmember cref="E:System.Windows.Application.NavigationStopped" />
        <altmember cref="E:System.Windows.Application.FragmentNavigation" />
      </Docs>
    </Member>
    <Member MemberName="NavigationProgress">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.NavigationProgressEventHandler NavigationProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.NavigationProgressEventHandler NavigationProgress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.NavigationProgress" />
      <MemberSignature Language="VB.NET" Value="Public Event NavigationProgress As NavigationProgressEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::NavigationProgressEventHandler ^ NavigationProgress;" />
      <MemberSignature Language="F#" Value="member this.NavigationProgress : System.Windows.Navigation.NavigationProgressEventHandler " Usage="member this.NavigationProgress : System.Windows.Navigation.NavigationProgressEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.NavigationProgressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-291">アプリケーションのナビゲーターによって管理されているダウンロード中に定期的に発生して、ナビゲーションの進行状況に関する情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="cce76-291">Occurs periodically during a download that is being managed by a navigator in the application to provide navigation progress information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-292">ナビゲーターは<xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Controls.Frame>またはのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="cce76-292">A navigator is either a <xref:System.Windows.Navigation.NavigationWindow> or a <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="cce76-293">以下を参照してください。<xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cce76-293">See <xref:System.Windows.Navigation.NavigationService.NavigationProgress?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Navigating" />
        <altmember cref="E:System.Windows.Application.Navigated" />
        <altmember cref="E:System.Windows.Application.LoadCompleted" />
        <altmember cref="E:System.Windows.Application.NavigationStopped" />
        <altmember cref="E:System.Windows.Application.NavigationFailed" />
        <altmember cref="E:System.Windows.Application.FragmentNavigation" />
      </Docs>
    </Member>
    <Member MemberName="NavigationStopped">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.NavigationStoppedEventHandler NavigationStopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.NavigationStoppedEventHandler NavigationStopped" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.NavigationStopped" />
      <MemberSignature Language="VB.NET" Value="Public Event NavigationStopped As NavigationStoppedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::NavigationStoppedEventHandler ^ NavigationStopped;" />
      <MemberSignature Language="F#" Value="member this.NavigationStopped : System.Windows.Navigation.NavigationStoppedEventHandler " Usage="member this.NavigationStopped : System.Windows.Navigation.NavigationStoppedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.NavigationStoppedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-294">アプリケーションのナビゲーターの <see langword="StopLoading" /> メソッドが呼び出されたとき、または現在のナビゲーションの進行中にナビゲーターによって新しいナビゲーションが要求されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-294">Occurs when the <see langword="StopLoading" /> method of a navigator in the application is called, or when a new navigation is requested by a navigator while a current navigation is in progress.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-295">ナビゲーターは<xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Controls.Frame>またはのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="cce76-295">A navigator is either a <xref:System.Windows.Navigation.NavigationWindow> or a <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="cce76-296">以下を参照してください。<xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cce76-296">See <xref:System.Windows.Navigation.NavigationService.NavigationStopped?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Navigated" />
        <altmember cref="E:System.Windows.Application.Navigating" />
        <altmember cref="E:System.Windows.Application.LoadCompleted" />
        <altmember cref="E:System.Windows.Application.NavigationProgress" />
        <altmember cref="E:System.Windows.Application.NavigationFailed" />
        <altmember cref="E:System.Windows.Application.FragmentNavigation" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnActivated : EventArgs -&gt; unit&#xA;override this.OnActivated : EventArgs -&gt; unit" Usage="application.OnActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-297">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-297">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-298"><see cref="E:System.Windows.Application.Activated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-298">Raises the <see cref="E:System.Windows.Application.Activated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-299"><xref:System.Windows.Application.OnActivated%2A> は、<xref:System.Windows.Application.Activated> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-299"><xref:System.Windows.Application.OnActivated%2A> raises the <xref:System.Windows.Application.Activated> event.</span></span>  
  
 <span data-ttu-id="cce76-300">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnActivated%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-300">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnActivated%2A>.</span></span> <span data-ttu-id="cce76-301">を発生させる必要<xref:System.Windows.Application.OnActivated%2A>がある場合<xref:System.Windows.Application.Activated>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-301">The overridden method must call <xref:System.Windows.Application.OnActivated%2A> in the base class if <xref:System.Windows.Application.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeactivated : EventArgs -&gt; unit&#xA;override this.OnDeactivated : EventArgs -&gt; unit" Usage="application.OnDeactivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-302">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-302">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-303"><see cref="E:System.Windows.Application.Deactivated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-303">Raises the <see cref="E:System.Windows.Application.Deactivated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-304"><xref:System.Windows.Application.OnDeactivated%2A> は、<xref:System.Windows.Application.Deactivated> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-304"><xref:System.Windows.Application.OnDeactivated%2A> raises the <xref:System.Windows.Application.Deactivated> event.</span></span>  
  
 <span data-ttu-id="cce76-305">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnDeactivated%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-305">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnDeactivated%2A>.</span></span> <span data-ttu-id="cce76-306">を発生させる必要<xref:System.Windows.Application.OnDeactivated%2A>がある場合<xref:System.Windows.Application.Deactivated>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-306">The overridden method must call <xref:System.Windows.Application.OnDeactivated%2A> in the base class if <xref:System.Windows.Application.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnExit">
      <MemberSignature Language="C#" Value="protected virtual void OnExit (System.Windows.ExitEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExit(class System.Windows.ExitEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExit (e As ExitEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExit(System::Windows::ExitEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExit : System.Windows.ExitEventArgs -&gt; unit&#xA;override this.OnExit : System.Windows.ExitEventArgs -&gt; unit" Usage="application.OnExit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.ExitEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-307">イベント データを格納している <see cref="T:System.Windows.ExitEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-307">An <see cref="T:System.Windows.ExitEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-308"><see cref="E:System.Windows.Application.Exit" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-308">Raises the <see cref="E:System.Windows.Application.Exit" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-309"><xref:System.Windows.Application.OnExit%2A> は、<xref:System.Windows.Application.Exit> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-309"><xref:System.Windows.Application.OnExit%2A> raises the <xref:System.Windows.Application.Exit> event.</span></span>  
  
 <span data-ttu-id="cce76-310">から<xref:System.Windows.Application>派生する型は、メソッドを<xref:System.Windows.Application.OnExit%2A>オーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="cce76-310">A type that derives from <xref:System.Windows.Application> may override the <xref:System.Windows.Application.OnExit%2A> method.</span></span> <span data-ttu-id="cce76-311">を発生させる必要<xref:System.Windows.Application.OnExit%2A>がある場合<xref:System.Windows.Application.Exit>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-311">The overridden method must call <xref:System.Windows.Application.OnExit%2A> in the base class if <xref:System.Windows.Application.Exit> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnFragmentNavigation">
      <MemberSignature Language="C#" Value="protected virtual void OnFragmentNavigation (System.Windows.Navigation.FragmentNavigationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFragmentNavigation(class System.Windows.Navigation.FragmentNavigationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFragmentNavigation (e As FragmentNavigationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFragmentNavigation(System::Windows::Navigation::FragmentNavigationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnFragmentNavigation : System.Windows.Navigation.FragmentNavigationEventArgs -&gt; unit&#xA;override this.OnFragmentNavigation : System.Windows.Navigation.FragmentNavigationEventArgs -&gt; unit" Usage="application.OnFragmentNavigation e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Navigation.FragmentNavigationEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-312">イベント データを格納している <see cref="T:System.Windows.Navigation.FragmentNavigationEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-312">A <see cref="T:System.Windows.Navigation.FragmentNavigationEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-313"><see cref="E:System.Windows.Application.FragmentNavigation" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-313">Raises the <see cref="E:System.Windows.Application.FragmentNavigation" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-314"><xref:System.Windows.Application.OnFragmentNavigation%2A> は、<xref:System.Windows.Application.FragmentNavigation> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-314"><xref:System.Windows.Application.OnFragmentNavigation%2A> raises the <xref:System.Windows.Application.FragmentNavigation> event.</span></span>  
  
 <span data-ttu-id="cce76-315">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnFragmentNavigation%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-315">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnFragmentNavigation%2A>.</span></span> <span data-ttu-id="cce76-316">を発生させる必要<xref:System.Windows.Application.OnFragmentNavigation%2A>がある場合<xref:System.Windows.Application.FragmentNavigation>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-316">The overridden method must call <xref:System.Windows.Application.OnFragmentNavigation%2A> in the base class if <xref:System.Windows.Application.FragmentNavigation> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnLoadCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnLoadCompleted (System.Windows.Navigation.NavigationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoadCompleted(class System.Windows.Navigation.NavigationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLoadCompleted (e As NavigationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLoadCompleted(System::Windows::Navigation::NavigationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLoadCompleted : System.Windows.Navigation.NavigationEventArgs -&gt; unit&#xA;override this.OnLoadCompleted : System.Windows.Navigation.NavigationEventArgs -&gt; unit" Usage="application.OnLoadCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Navigation.NavigationEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-317">イベント データを格納している <see cref="T:System.Windows.Navigation.NavigationEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-317">A <see cref="T:System.Windows.Navigation.NavigationEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-318"><see cref="E:System.Windows.Application.LoadCompleted" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-318">Raises the <see cref="E:System.Windows.Application.LoadCompleted" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-319"><xref:System.Windows.Application.OnLoadCompleted%2A> は、<xref:System.Windows.Application.LoadCompleted> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-319"><xref:System.Windows.Application.OnLoadCompleted%2A> raises the <xref:System.Windows.Application.LoadCompleted> event.</span></span>  
  
 <span data-ttu-id="cce76-320">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnLoadCompleted%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-320">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnLoadCompleted%2A>.</span></span> <span data-ttu-id="cce76-321">を発生させる必要<xref:System.Windows.Application.OnLoadCompleted%2A>がある場合<xref:System.Windows.Application.LoadCompleted>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-321">The overridden method must call <xref:System.Windows.Application.OnLoadCompleted%2A> in the base class if <xref:System.Windows.Application.LoadCompleted> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnNavigated">
      <MemberSignature Language="C#" Value="protected virtual void OnNavigated (System.Windows.Navigation.NavigationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNavigated(class System.Windows.Navigation.NavigationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNavigated (e As NavigationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNavigated(System::Windows::Navigation::NavigationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnNavigated : System.Windows.Navigation.NavigationEventArgs -&gt; unit&#xA;override this.OnNavigated : System.Windows.Navigation.NavigationEventArgs -&gt; unit" Usage="application.OnNavigated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Navigation.NavigationEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-322">イベント データを格納している <see cref="T:System.Windows.Navigation.NavigationEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-322">A <see cref="T:System.Windows.Navigation.NavigationEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-323"><see cref="E:System.Windows.Application.Navigated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-323">Raises the <see cref="E:System.Windows.Application.Navigated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-324"><xref:System.Windows.Application.OnNavigated%2A> は、<xref:System.Windows.Application.Navigated> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-324"><xref:System.Windows.Application.OnNavigated%2A> raises the <xref:System.Windows.Application.Navigated> event.</span></span>  
  
 <span data-ttu-id="cce76-325">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnNavigated%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-325">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnNavigated%2A>.</span></span> <span data-ttu-id="cce76-326">を発生させる必要<xref:System.Windows.Application.OnNavigated%2A>がある場合<xref:System.Windows.Application.Navigated>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-326">The overridden method must call <xref:System.Windows.Application.OnNavigated%2A> in the base class if <xref:System.Windows.Application.Navigated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnNavigating">
      <MemberSignature Language="C#" Value="protected virtual void OnNavigating (System.Windows.Navigation.NavigatingCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNavigating(class System.Windows.Navigation.NavigatingCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNavigating (e As NavigatingCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNavigating(System::Windows::Navigation::NavigatingCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnNavigating : System.Windows.Navigation.NavigatingCancelEventArgs -&gt; unit&#xA;override this.OnNavigating : System.Windows.Navigation.NavigatingCancelEventArgs -&gt; unit" Usage="application.OnNavigating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Navigation.NavigatingCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-327">イベント データを格納している <see cref="T:System.Windows.Navigation.NavigatingCancelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-327">A <see cref="T:System.Windows.Navigation.NavigatingCancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-328"><see cref="E:System.Windows.Application.Navigating" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-328">Raises the <see cref="E:System.Windows.Application.Navigating" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-329"><xref:System.Windows.Application.OnNavigating%2A> は、<xref:System.Windows.Application.Navigating> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-329"><xref:System.Windows.Application.OnNavigating%2A> raises the <xref:System.Windows.Application.Navigating> event.</span></span>  
  
 <span data-ttu-id="cce76-330">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnNavigating%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-330">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnNavigating%2A>.</span></span> <span data-ttu-id="cce76-331">を発生させる必要<xref:System.Windows.Application.OnNavigating%2A>がある場合<xref:System.Windows.Application.Navigating>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-331">The overridden method must call <xref:System.Windows.Application.OnNavigating%2A> in the base class if <xref:System.Windows.Application.Navigating> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnNavigationFailed">
      <MemberSignature Language="C#" Value="protected virtual void OnNavigationFailed (System.Windows.Navigation.NavigationFailedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNavigationFailed(class System.Windows.Navigation.NavigationFailedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNavigationFailed (e As NavigationFailedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNavigationFailed(System::Windows::Navigation::NavigationFailedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnNavigationFailed : System.Windows.Navigation.NavigationFailedEventArgs -&gt; unit&#xA;override this.OnNavigationFailed : System.Windows.Navigation.NavigationFailedEventArgs -&gt; unit" Usage="application.OnNavigationFailed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Navigation.NavigationFailedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-332">イベント データを格納している <see cref="T:System.Windows.Navigation.NavigationFailedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-332">A <see cref="T:System.Windows.Navigation.NavigationFailedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-333"><see cref="E:System.Windows.Application.NavigationFailed" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-333">Raises the <see cref="E:System.Windows.Application.NavigationFailed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-334"><xref:System.Windows.Application.OnNavigationFailed%2A> は、<xref:System.Windows.Application.NavigationFailed> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-334"><xref:System.Windows.Application.OnNavigationFailed%2A> raises the <xref:System.Windows.Application.NavigationFailed> event.</span></span>  
  
 <span data-ttu-id="cce76-335">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnNavigationFailed%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-335">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnNavigationFailed%2A>.</span></span> <span data-ttu-id="cce76-336">を発生させる必要<xref:System.Windows.Application.OnNavigationFailed%2A>がある場合<xref:System.Windows.Application.NavigationFailed>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-336">The overridden method must call <xref:System.Windows.Application.OnNavigationFailed%2A> in the base class if <xref:System.Windows.Application.NavigationFailed> needs to be raised.</span></span>  
  
   
  
## Examples  
 <xref:System.Windows.Application.OnFragmentNavigation%2A>  
  
 <xref:System.Windows.Application.OnLoadCompleted%2A>  
  
 <xref:System.Windows.Application.OnNavigating%2A>  
  
 <xref:System.Windows.Application.OnNavigated%2A>  
  
 <xref:System.Windows.Application.OnNavigationProgress%2A>  
  
 <xref:System.Windows.Application.OnNavigationStopped%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNavigationProgress">
      <MemberSignature Language="C#" Value="protected virtual void OnNavigationProgress (System.Windows.Navigation.NavigationProgressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNavigationProgress(class System.Windows.Navigation.NavigationProgressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNavigationProgress (e As NavigationProgressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNavigationProgress(System::Windows::Navigation::NavigationProgressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnNavigationProgress : System.Windows.Navigation.NavigationProgressEventArgs -&gt; unit&#xA;override this.OnNavigationProgress : System.Windows.Navigation.NavigationProgressEventArgs -&gt; unit" Usage="application.OnNavigationProgress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Navigation.NavigationProgressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-337">イベント データを格納している <see cref="T:System.Windows.Navigation.NavigationProgressEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-337">A <see cref="T:System.Windows.Navigation.NavigationProgressEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-338"><see cref="E:System.Windows.Application.NavigationProgress" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-338">Raises the <see cref="E:System.Windows.Application.NavigationProgress" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-339"><xref:System.Windows.Application.OnNavigationProgress%2A> は、<xref:System.Windows.Application.NavigationProgress> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-339"><xref:System.Windows.Application.OnNavigationProgress%2A> raises the <xref:System.Windows.Application.NavigationProgress> event.</span></span>  
  
 <span data-ttu-id="cce76-340">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnNavigationProgress%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-340">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnNavigationProgress%2A>.</span></span> <span data-ttu-id="cce76-341">を発生させる必要が<xref:System.Windows.Application.OnNavigationProgress%2A>ある場合<xref:System.Windows.Application.NavigationProgress>は、オーバーライドされたメソッドが基底クラスで明示的にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-341">The overridden method must explicitly call <xref:System.Windows.Application.OnNavigationProgress%2A> in the base class if <xref:System.Windows.Application.NavigationProgress> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnNavigationStopped">
      <MemberSignature Language="C#" Value="protected virtual void OnNavigationStopped (System.Windows.Navigation.NavigationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNavigationStopped(class System.Windows.Navigation.NavigationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnNavigationStopped(System.Windows.Navigation.NavigationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNavigationStopped (e As NavigationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNavigationStopped(System::Windows::Navigation::NavigationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnNavigationStopped : System.Windows.Navigation.NavigationEventArgs -&gt; unit&#xA;override this.OnNavigationStopped : System.Windows.Navigation.NavigationEventArgs -&gt; unit" Usage="application.OnNavigationStopped e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Navigation.NavigationEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-342">イベント データを格納している <see cref="T:System.Windows.Navigation.NavigationEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-342">A <see cref="T:System.Windows.Navigation.NavigationEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-343"><see cref="E:System.Windows.Application.NavigationStopped" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-343">Raises the <see cref="E:System.Windows.Application.NavigationStopped" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-344"><xref:System.Windows.Application.OnNavigationStopped%2A> は、<xref:System.Windows.Application.NavigationStopped> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-344"><xref:System.Windows.Application.OnNavigationStopped%2A> raises the <xref:System.Windows.Application.NavigationStopped> event.</span></span>  
  
 <span data-ttu-id="cce76-345">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnNavigationStopped%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-345">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnNavigationStopped%2A>.</span></span> <span data-ttu-id="cce76-346">を発生させる必要<xref:System.Windows.Application.OnNavigationStopped%2A>がある場合<xref:System.Windows.Application.NavigationStopped>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-346">The overridden method must call <xref:System.Windows.Application.OnNavigationStopped%2A> in the base class if <xref:System.Windows.Application.NavigationStopped> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnFragmentNavigation(System.Windows.Navigation.FragmentNavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnLoadCompleted(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigated(System.Windows.Navigation.NavigationEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigating(System.Windows.Navigation.NavigatingCancelEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationProgress(System.Windows.Navigation.NavigationProgressEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnNavigationFailed(System.Windows.Navigation.NavigationFailedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionEnding">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionEnding (System.Windows.SessionEndingCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionEnding(class System.Windows.SessionEndingCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionEnding (e As SessionEndingCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionEnding(System::Windows::SessionEndingCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionEnding : System.Windows.SessionEndingCancelEventArgs -&gt; unit&#xA;override this.OnSessionEnding : System.Windows.SessionEndingCancelEventArgs -&gt; unit" Usage="application.OnSessionEnding e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.SessionEndingCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-347">イベント データを格納している <see cref="T:System.Windows.SessionEndingCancelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-347">A <see cref="T:System.Windows.SessionEndingCancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-348"><see cref="E:System.Windows.Application.SessionEnding" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-348">Raises the <see cref="E:System.Windows.Application.SessionEnding" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-349"><xref:System.Windows.Application.OnSessionEnding%2A> は、<xref:System.Windows.Application.SessionEnding> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-349"><xref:System.Windows.Application.OnSessionEnding%2A> raises the <xref:System.Windows.Application.SessionEnding> event.</span></span>  
  
 <span data-ttu-id="cce76-350">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnSessionEnding%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-350">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnSessionEnding%2A>.</span></span> <span data-ttu-id="cce76-351">を発生させる必要<xref:System.Windows.Application.OnSessionEnding%2A>がある場合<xref:System.Windows.Application.SessionEnding>は、オーバーライドされたメソッドが基底クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-351">The overridden method must call <xref:System.Windows.Application.OnSessionEnding%2A> in the base class if <xref:System.Windows.Application.SessionEnding> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual void OnStartup (System.Windows.StartupEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStartup(class System.Windows.StartupEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStartup (e As StartupEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStartup(System::Windows::StartupEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStartup : System.Windows.StartupEventArgs -&gt; unit&#xA;override this.OnStartup : System.Windows.StartupEventArgs -&gt; unit" Usage="application.OnStartup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cce76-352">イベント データを格納している <see cref="T:System.Windows.StartupEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-352">A <see cref="T:System.Windows.StartupEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cce76-353"><see cref="E:System.Windows.Application.Startup" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-353">Raises the <see cref="E:System.Windows.Application.Startup" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-354"><xref:System.Windows.Application.OnStartup%2A> は、<xref:System.Windows.Application.Startup> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-354"><xref:System.Windows.Application.OnStartup%2A> raises the <xref:System.Windows.Application.Startup> event.</span></span>  
  
 <span data-ttu-id="cce76-355">から<xref:System.Windows.Application>派生する型がオーバーライド<xref:System.Windows.Application.OnStartup%2A>される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-355">A type that derives from <xref:System.Windows.Application> may override <xref:System.Windows.Application.OnStartup%2A>.</span></span> <span data-ttu-id="cce76-356">オーバーライドされたメソッド<xref:System.Windows.Application.OnStartup%2A>は、 <xref:System.Windows.Application.Startup>イベントを発生させる必要がある場合は、基本クラスでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-356">The overridden method must call <xref:System.Windows.Application.OnStartup%2A> in the base class if the <xref:System.Windows.Application.Startup> event needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)" />
        <altmember cref="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Properties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Application.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IDictionary ^ Properties { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.IDictionary" Usage="System.Windows.Application.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-357">アプリケーション スコープのプロパティのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="cce76-357">Gets a collection of application-scope properties.</span></span></summary>
        <value><span data-ttu-id="cce76-358">アプリケーション スコープのプロパティを格納している <see cref="T:System.Collections.IDictionary" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-358">An <see cref="T:System.Collections.IDictionary" /> that contains the application-scope properties.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-359"><xref:System.Windows.Application>アプリケーションスコープのプロパティ<xref:System.Windows.Application.Properties%2A>を格納するために使用できるディクショナリを公開します。</span><span class="sxs-lookup"><span data-stu-id="cce76-359"><xref:System.Windows.Application> exposes a dictionary via <xref:System.Windows.Application.Properties%2A> which you can use to store application-scope properties.</span></span> <span data-ttu-id="cce76-360">これにより、独自の状態コードを記述し<xref:System.AppDomain>なくても、スレッドセーフな方法でのすべてのコード間で状態を共有できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-360">This allows you to share state amongst all code in an <xref:System.AppDomain> in a thread-safe fashion, without the need to write your own state code.</span></span>  
  
 <span data-ttu-id="cce76-361">に<xref:System.Windows.Application.Properties%2A>格納されているプロパティは、返される適切な型に変換される必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-361">Properties stored in <xref:System.Windows.Application.Properties%2A> must be converted to the appropriate type returned.</span></span>  
  
 <span data-ttu-id="cce76-362"><xref:System.Windows.Application.Properties%2A>プロパティはスレッドセーフであり、任意のスレッドから使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-362">The <xref:System.Windows.Application.Properties%2A> property is thread safe and is available from any thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-363">次の例は、を使用して、アプリケーションスコープのプロパティ<xref:System.Windows.Application.Properties%2A>を作成して使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-363">The following example shows how create and use an application-scope property using <xref:System.Windows.Application.Properties%2A>.</span></span>  
  
 [!code-xaml[ApplicationPropertiesSnippets#HandleStartupXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationPropertiesSnippets/CSharp/App.xaml#handlestartupxaml)]  
  
 [!code-csharp[ApplicationPropertiesSnippets#HandleStartupCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationPropertiesSnippets/CSharp/App.xaml.cs#handlestartupcodebehind)]
 [!code-vb[ApplicationPropertiesSnippets#HandleStartupCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationPropertiesSnippets/visualbasic/application.xaml.vb#handlestartupcodebehind)]  
  
 [!code-xaml[ApplicationPropertiesSnippets#MainWindowGetPropertyXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationPropertiesSnippets/CSharp/MainWindow.xaml#mainwindowgetpropertyxaml1)]  
[!code-xaml[ApplicationPropertiesSnippets#MainWindowGetPropertyXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationPropertiesSnippets/CSharp/MainWindow.xaml#mainwindowgetpropertyxaml2)]  
  
 [!code-csharp[ApplicationPropertiesSnippets#MainWindowGetPropertyCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationPropertiesSnippets/CSharp/MainWindow.xaml.cs#mainwindowgetpropertycodebehind)]
 [!code-vb[ApplicationPropertiesSnippets#MainWindowGetPropertyCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationPropertiesSnippets/visualbasic/mainwindow.xaml.vb#mainwindowgetpropertycodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Startup" />
      </Docs>
    </Member>
    <Member MemberName="ResourceAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly ResourceAssembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Assembly ResourceAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Application.ResourceAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ResourceAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Assembly ^ ResourceAssembly { System::Reflection::Assembly ^ get(); void set(System::Reflection::Assembly ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResourceAssembly : System.Reflection.Assembly with get, set" Usage="System.Windows.Application.ResourceAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-364">[!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] アプリケーションのリソース用のパッケージの [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] を提供する <see cref="T:System.Reflection.Assembly" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-364">Gets or sets the <see cref="T:System.Reflection.Assembly" /> that provides the pack [!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] for resources in a [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] application.</span></span></summary>
        <value><span data-ttu-id="cce76-365">[!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] アプリケーションのリソース用のパッケージの [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] を提供する <see cref="T:System.Reflection.Assembly" /> への参照。</span><span class="sxs-lookup"><span data-stu-id="cce76-365">A reference to the <see cref="T:System.Reflection.Assembly" /> that provides the pack [!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] for resources in a [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-366">既定では[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 、リソースは、入力アセンブリに対して実行時に解決されます。これは、 <xref:System.Reflection.Assembly.GetEntryAssembly%2A>メソッドから返された値によって識別されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-366">By default, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] resources are resolved at run time with respect to the entry assembly, which is identified by the value returned from the <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method.</span></span>  
  
 <span data-ttu-id="cce76-367">エントリアセンブリは、によって<xref:System.Reflection.Assembly.GetEntryAssembly%2A>返されるアセンブリであり、次のようになります。</span><span class="sxs-lookup"><span data-stu-id="cce76-367">The entry assembly is the assembly that is returned by <xref:System.Reflection.Assembly.GetEntryAssembly%2A> and could be the following:</span></span>  
  
-   <span data-ttu-id="cce76-368">既定のアプリケーションドメイン内の実行可能アセンブリ。</span><span class="sxs-lookup"><span data-stu-id="cce76-368">The executable assembly in the default application domain.</span></span>  
  
-   <span data-ttu-id="cce76-369">を呼び出す<xref:System.AppDomain.ExecuteAssembly%2A>ことによって実行される最初のアセンブリ。</span><span class="sxs-lookup"><span data-stu-id="cce76-369">The first assembly to be executed by calling <xref:System.AppDomain.ExecuteAssembly%2A>.</span></span>  
  
 <span data-ttu-id="cce76-370">ただし、次の場合、アセンブリは[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]エントリアセンブリへの参照を取得できません。</span><span class="sxs-lookup"><span data-stu-id="cce76-370">In the following cases, however, a [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] assembly cannot get a reference to the entry assembly:</span></span>  
  
-   <span data-ttu-id="cce76-371">アンマネージ (ネイティブ) アプリケーションは、 [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]アセンブリをホストします。</span><span class="sxs-lookup"><span data-stu-id="cce76-371">An unmanaged (native) application hosts the [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] assembly.</span></span>  
  
-   <span data-ttu-id="cce76-372">マネージアプリケーションは、以外[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] <xref:System.AppDomain.ExecuteAssembly%2A>のメソッドを使用して新しいアプリケーションドメインに読み込むことによって、アセンブリをホストします。</span><span class="sxs-lookup"><span data-stu-id="cce76-372">A managed application hosts the [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] assembly by loading it into a new application domain using a method other than <xref:System.AppDomain.ExecuteAssembly%2A>.</span></span>  
  
 <span data-ttu-id="cce76-373">どちらの場合<xref:System.Reflection.Assembly.GetEntryAssembly%2A>も、はを`null`返し[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 、アセンブリのリソースは解決できません。</span><span class="sxs-lookup"><span data-stu-id="cce76-373">In both of these cases, <xref:System.Reflection.Assembly.GetEntryAssembly%2A> returns `null`, and the [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] assembly's resources cannot be resolved.</span></span> <span data-ttu-id="cce76-374">このような場合<xref:System.Windows.Application.ResourceAssembly%2A> 、は、リソースの解決に使用するアセンブリへの参照を使用して1回だけ設定できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-374">In these cases, <xref:System.Windows.Application.ResourceAssembly%2A> can be set, once only, with a reference to the assembly that should be used to resolve resources.</span></span>  
  
 <span data-ttu-id="cce76-375"><xref:System.Windows.Application.ResourceAssembly%2A>[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]アセンブリが読み込まれた後にリソースアセンブリが変更される可能性が低いため、一度しか設定できません。</span><span class="sxs-lookup"><span data-stu-id="cce76-375"><xref:System.Windows.Application.ResourceAssembly%2A> can only be set once because it is unlikely that the resource assembly will change after the [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] assembly is loaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-376"><xref:System.Windows.Application.ResourceAssembly%2A>[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]アセンブリがエントリアセンブリを検出できる場合<xref:System.Reflection.Assembly.GetEntryAssembly%2A> 、つまり、がではなくアセンブリ`null`への参照を返す場合は、を設定できません。</span><span class="sxs-lookup"><span data-stu-id="cce76-376"><xref:System.Windows.Application.ResourceAssembly%2A> cannot be set when a [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] assembly can discover the entry assembly - that is, when <xref:System.Reflection.Assembly.GetEntryAssembly%2A> returns a reference to an assembly rather than `null`.</span></span>  
  
 <span data-ttu-id="cce76-377">このプロパティはスレッドセーフであり、任意のスレッドから使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-377">This property is thread safe and is available from any thread.</span></span>  
  
 <span data-ttu-id="cce76-378"><xref:System.Windows.Application.ResourceAssembly%2A>は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="cce76-378"><xref:System.Windows.Application.ResourceAssembly%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="cce76-379">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cce76-379">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cce76-380">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] アプリケーションに入力アセンブリがあるか、<see cref="P:System.Windows.Application.ResourceAssembly" /> が既に設定されています。</span><span class="sxs-lookup"><span data-stu-id="cce76-380">A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] application has an entry assembly, or <see cref="P:System.Windows.Application.ResourceAssembly" /> has already been set.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Application.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.Application.Resources" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Markup.IHaveResources.Resources</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-381">スタイルやブラシなど、アプリケーション スコープ リソースのコレクションを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-381">Gets or sets a collection of application-scope resources, such as styles and brushes.</span></span></summary>
        <value><span data-ttu-id="cce76-382">0 個以上のアプリケーション スコープ リソースが格納された <see cref="T:System.Windows.ResourceDictionary" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cce76-382">A <see cref="T:System.Windows.ResourceDictionary" /> object that contains zero or more application-scope resources.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-383">プロパティ<xref:System.Windows.Application.Resources%2A>は、アプリケーションのウィンドウおよび要素間でリソースを共有するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-383">The <xref:System.Windows.Application.Resources%2A> property can be used to share resources across the windows and elements of an application.</span></span> <span data-ttu-id="cce76-384">さらに、 <xref:System.Windows.Application.Resources%2A>プロパティは、次の順序で走査されるリソース参照パスに含まれます。</span><span class="sxs-lookup"><span data-stu-id="cce76-384">Additionally, the <xref:System.Windows.Application.Resources%2A> property is included in the resource lookup path, which is traversed in the following order:</span></span>  
  
1.  <span data-ttu-id="cce76-385">Elements</span><span class="sxs-lookup"><span data-stu-id="cce76-385">Elements</span></span>  
  
2.  <span data-ttu-id="cce76-386">Windows</span><span class="sxs-lookup"><span data-stu-id="cce76-386">Windows</span></span>  
  
3.  <xref:System.Windows.Application.Resources%2A?displayProperty=nameWithType>  
  
4.  <span data-ttu-id="cce76-387">システム</span><span class="sxs-lookup"><span data-stu-id="cce76-387">System</span></span>  
  
 <span data-ttu-id="cce76-388">その結果[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 、要素はアプリケーションスコープのリソースにバインドできます。</span><span class="sxs-lookup"><span data-stu-id="cce76-388">Consequently, [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements can bind to application-scope resources.</span></span> <span data-ttu-id="cce76-389">また、リソースが変更された場合、リソースシステムによって、リソースにバインドされている要素のプロパティが自動的に更新され、変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-389">Additionally, if resources change, the resource system ensures that element properties which are bound to those resources are automatically updated to reflect the change.</span></span>  
  
 <span data-ttu-id="cce76-390">アプリケーションスコープリソースは、アプリケーション全体で一貫したテーマをサポートするための簡単な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="cce76-390">Application-scope resources provide a simple way to support a consistent theme across your application.</span></span> <span data-ttu-id="cce76-391">で[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]は、 `Application.Resources`タグを使用してテーマを簡単に作成できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-391">You can easily create a theme in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] by using the `Application.Resources` tag.</span></span> <span data-ttu-id="cce76-392">ただし、多数のテーマ要素を含む複数のテーマがアプリケーションでサポートされている場合は、テーマごとに1つ<xref:System.Windows.ResourceDictionary>のインスタンスを使用して管理する方が簡単な場合があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-392">However, if your application supports multiple themes, which may contain a large number of theme elements, it might be easier to manage them using one <xref:System.Windows.ResourceDictionary> instance for each theme.</span></span> <span data-ttu-id="cce76-393">この方法では、Resources プロパティを適切な<xref:System.Windows.ResourceDictionary>に設定することによって、新しいテーマを適用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-393">In this way, a new theme can be applied by setting the Resources property to the appropriate <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="cce76-394">を使用<xref:System.Windows.Application.Resources%2A>する場合、2つの点を考慮する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-394">There are two considerations to make when using <xref:System.Windows.Application.Resources%2A>.</span></span> <span data-ttu-id="cce76-395">まず、ディクショナリ*キー*はオブジェクトであるため、プロパティ値の設定と取得の両方で同じオブジェクトインスタンスを使用する必要があります (文字列を使用する場合は、キーの大文字と小文字が区別されることに注意してください)。</span><span class="sxs-lookup"><span data-stu-id="cce76-395">First, the dictionary *key* is an object, so you need to use exactly the same object instance when both setting and getting a property value (note that the key is case-sensitive when using a string).</span></span> <span data-ttu-id="cce76-396">2つ目は、ディクショナリ*値*がオブジェクトであるため、プロパティ値を取得するときに、値を目的の型に変換する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-396">Second, the dictionary *value* is an object, so you will need to convert the value to the desired type when getting a property value.</span></span>  
  
 <span data-ttu-id="cce76-397"><xref:System.Windows.Application.Resources%2A>はスレッドセーフであり、任意のスレッドから使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-397"><xref:System.Windows.Application.Resources%2A> is thread safe and is available from any thread.</span></span>  
  
   
  
## Examples  
<span data-ttu-id="cce76-398">この例では、XAML をアプリケーションスコープのリソースと共に使用して、一貫した外観を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="cce76-398">This example illustrates how to use XAML together with application-scope resources to create a consistent visual appearance.</span></span> <span data-ttu-id="cce76-399">最初の例は、 *app.xaml*からのものです。2番目の。 *mainwindow.xaml*からです。</span><span class="sxs-lookup"><span data-stu-id="cce76-399">The first example is from *App.xaml*; the second, from *MainWindow.xaml*.</span></span> 
  
[!code-xaml[ApplicationResourcesSnippets#ResourcesPropertyXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationResourcesSnippets/CS/App.xaml#resourcespropertyxaml)]  
  
[!code-xaml[ApplicationResourcesSnippets#WindowBackgroundPropertyXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationResourcesSnippets/CS/MainWindow.xaml?highlight=7)]  
  
 <span data-ttu-id="cce76-400">次の例は、コードおよび XAML でアプリケーションリソースを設定する方法を示しています ( C# wpf プロジェクトの app.xaml ファイルまたは Visual Basic wpf プロジェクトの app.xaml ファイル)。</span><span class="sxs-lookup"><span data-stu-id="cce76-400">The following example shows how to set an application resource in code and XAML (in the App.xaml file in a C# WPF project or the Application.xaml file in a Visual Basic WPF project).</span></span>  
  
 [!code-csharp[Setting-an-application-resource-in-code](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOApplicationModelSnippets/CSharp/ApplicationPropertiesSnippet.xaml.cs#setapplicationscoperesourcecode)]
 [!code-vb[Setting-an-application-resource-in-code](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOApplicationModelSnippets/visualbasic/applicationpropertiessnippet.xaml.vb#setapplicationscoperesourcecode)]  
  
 [!code-xaml[Setting-an-application-resource-in-XAML](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOApplicationModelSnippets/CSharp/App.xaml?highlight=8-10)]  
  
 <span data-ttu-id="cce76-401">次の例は、コードでアプリケーションリソースを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-401">The following example shows how to get an application resource in code.</span></span>  
  
 [!code-csharp[HOWTOApplicationModelSnippets#GetApplicationScopeResourceCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOApplicationModelSnippets/CSharp/ApplicationPropertiesSnippet.xaml.cs#getapplicationscoperesourcecode)]
 [!code-vb[HOWTOApplicationModelSnippets#GetApplicationScopeResourceCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOApplicationModelSnippets/visualbasic/applicationpropertiessnippet.xaml.vb#getapplicationscoperesourcecode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce76-402">Windows Presentation Foundation アプリケーションを開始します。</span><span class="sxs-lookup"><span data-stu-id="cce76-402">Starts a Windows Presentation Foundation application.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public int Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.Run" />
      <MemberSignature Language="VB.NET" Value="Public Function Run () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Run();" />
      <MemberSignature Language="F#" Value="member this.Run : unit -&gt; int" Usage="application.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cce76-403">Windows Presentation Foundation アプリケーションを開始します。</span><span class="sxs-lookup"><span data-stu-id="cce76-403">Starts a Windows Presentation Foundation application.</span></span></summary>
        <returns><span data-ttu-id="cce76-404">アプリケーションのシャットダウン時にオペレーティング システムに返される <see cref="T:System.Int32" /> アプリケーション終了コード。</span><span class="sxs-lookup"><span data-stu-id="cce76-404">The <see cref="T:System.Int32" /> application exit code that is returned to the operating system when the application shuts down.</span></span> <span data-ttu-id="cce76-405">終了コードの既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="cce76-405">By default, the exit code value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-406"><xref:System.Windows.Application.Run%2A>は、アプリケーションを[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]起動するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-406"><xref:System.Windows.Application.Run%2A> is called to start a [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] application.</span></span> <span data-ttu-id="cce76-407">マークアップ、マーク<xref:System.Windows.Application>アップ、分離コードを使用してを定義<xref:System.Windows.Application.Run%2A>した場合、は暗黙的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-407">If you define your <xref:System.Windows.Application> using markup, or markup and code-behind, <xref:System.Windows.Application.Run%2A> will be called implicitly.</span></span> <span data-ttu-id="cce76-408">ただし、コード<xref:System.Windows.Application>を使用してを定義する場合は、明示的<xref:System.Windows.Application.Run%2A>にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-408">However, if you define your <xref:System.Windows.Application> using code, you will need to explicitly call <xref:System.Windows.Application.Run%2A>.</span></span>  
  
 <span data-ttu-id="cce76-409">が<xref:System.Windows.Application.Run%2A>呼び出されると<xref:System.Windows.Application> 、によっ<xref:System.Windows.Threading.Dispatcher>て新しいインスタンスが UI スレッドにアタッチされます。</span><span class="sxs-lookup"><span data-stu-id="cce76-409">When <xref:System.Windows.Application.Run%2A> is called, <xref:System.Windows.Application> attaches a new <xref:System.Windows.Threading.Dispatcher> instance to the UI thread.</span></span> <span data-ttu-id="cce76-410">次に<xref:System.Windows.Threading.Dispatcher> 、オブジェクトの<xref:System.Windows.Threading.Dispatcher.Run%2A>メソッドが呼び出されます。これにより、windows メッセージを処理するためのメッセージポンプが開始されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-410">Next, the <xref:System.Windows.Threading.Dispatcher> object's <xref:System.Windows.Threading.Dispatcher.Run%2A> method is called, which starts a message pump to process windows messages.</span></span> <span data-ttu-id="cce76-411">最後に、 <xref:System.Windows.Threading.Dispatcher>オブジェクトは、 <xref:System.Windows.Application>オブジェクトの<xref:System.Windows.Application.OnStartup%2A>メソッドを呼び出して<xref:System.Windows.Application.Startup>イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="cce76-411">Finally, the <xref:System.Windows.Threading.Dispatcher> object calls the <xref:System.Windows.Application> object's the <xref:System.Windows.Application.OnStartup%2A> method to raise the <xref:System.Windows.Application.Startup> event.</span></span> <span data-ttu-id="cce76-412">このため、アプリケーションの実行モデルは、処理<xref:System.Windows.Application.Startup>する時間によって確立され、その時点でアプリケーションは実行されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="cce76-412">Consequently, the application execution model has been established by the time you handle <xref:System.Windows.Application.Startup>, at which point the application is considered to be running.</span></span>  
  
 <span data-ttu-id="cce76-413"><xref:System.Windows.Application.Shutdown%2A>が呼び出されると、アプリケーションは実行を停止します<xref:System.Windows.Application.ShutdownMode%2A> 。プロパティの<xref:System.Windows.Application.Shutdown%2A>値は、が呼び出されるタイミングと、自動的に行われるか、または明示的に呼び出す必要があるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-413">An application stops running when <xref:System.Windows.Application.Shutdown%2A> is called; the value of the <xref:System.Windows.Application.ShutdownMode%2A> property determines when <xref:System.Windows.Application.Shutdown%2A> is called, and whether it happens automatically or you need to explicitly call it.</span></span>  
  
 <span data-ttu-id="cce76-414"><xref:System.Windows.Application.Run%2A>は、 <xref:System.Windows.Application>オブジェクトを作成したスレッドからのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-414"><xref:System.Windows.Application.Run%2A> can be called only from the thread that creates the <xref:System.Windows.Application> object.</span></span> <span data-ttu-id="cce76-415">また、 <xref:System.Windows.Application.Run%2A> [!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]からを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="cce76-415">Also, <xref:System.Windows.Application.Run%2A> cannot be called from a [!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-416">次の例は、カスタム<xref:System.Windows.Application>を使用するアプリケーションで、明示的にを呼び出す<xref:System.Windows.Application.Run%2A>必要があることを示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-416">The following example shows an application that uses a custom <xref:System.Windows.Application> and must therefore explicitly call <xref:System.Windows.Application.Run%2A>.</span></span>  
  
 [!code-csharp[ApplicationRunSnippets#CustomEntryPointAndRunCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationRunSnippets/CSharp/App.cs#customentrypointandruncode)]
 [!code-vb[ApplicationRunSnippets#CustomEntryPointAndRunCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationRunSnippets/visualbasic/app.vb#customentrypointandruncode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cce76-417"><see cref="M:System.Windows.Application.Run" /> は、ブラウザーによってホストされるアプリケーション ([!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] など) から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-417"><see cref="M:System.Windows.Application.Run" /> is called from a browser-hosted application (for example, an [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]).</span></span></exception>
        <altmember cref="M:System.Windows.Application.Run(System.Windows.Window)" />
        <altmember cref="M:System.Windows.Application.Shutdown(System.Int32)" />
        <altmember cref="E:System.Windows.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public int Run (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Run(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.Run(System.Windows.Window)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Run(System::Windows::Window ^ window);" />
      <MemberSignature Language="F#" Value="member this.Run : System.Windows.Window -&gt; int" Usage="application.Run window" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window"><span data-ttu-id="cce76-418">アプリケーションの起動時に自動的に開く <see cref="T:System.Windows.Window" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-418">A <see cref="T:System.Windows.Window" /> that opens automatically when an application starts.</span></span></param>
        <summary><span data-ttu-id="cce76-419">Windows Presentation Foundation アプリケーションを開始し、指定したウィンドウを開きます。</span><span class="sxs-lookup"><span data-stu-id="cce76-419">Starts a Windows Presentation Foundation application and opens the specified window.</span></span></summary>
        <returns><span data-ttu-id="cce76-420">アプリケーションのシャットダウン時にオペレーティング システムに返される <see cref="T:System.Int32" /> アプリケーション終了コード。</span><span class="sxs-lookup"><span data-stu-id="cce76-420">The <see cref="T:System.Int32" /> application exit code that is returned to the operating system when the application shuts down.</span></span> <span data-ttu-id="cce76-421">終了コードの既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="cce76-421">By default, the exit code value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-422">このオーバーロードは、 <xref:System.Windows.Application.Run%2A>アプリケーションの実行が開始された後に、指定したウィンドウを開くようにメソッドを拡張します。</span><span class="sxs-lookup"><span data-stu-id="cce76-422">This overload extends the <xref:System.Windows.Application.Run%2A> method to open the specified window after an application starts running.</span></span>  
  
 <span data-ttu-id="cce76-423">実行を開始した<xref:System.Windows.Application>ときにウィンドウを開くコードを定義する場合は、 <xref:System.Windows.Application.Run%2A>明示的にを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="cce76-423">If you define a code <xref:System.Windows.Application> that opens a window when it starts running, you explicitly call <xref:System.Windows.Application.Run%2A>.</span></span>  
  
 <span data-ttu-id="cce76-424">マークアップ、マーク<xref:System.Windows.Application>アップ、分離コードを使用してを作成した場合は、次のいずれかの方法を使用して、ウィンドウを自動的に開くことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-424">If you create your <xref:System.Windows.Application> using markup, or markup and code-behind, you can automatically open a window during using either of the following techniques:</span></span>  
  
-   <span data-ttu-id="cce76-425">を設定<xref:System.Windows.Application.StartupUri%2A>して、宣言によって行います。</span><span class="sxs-lookup"><span data-stu-id="cce76-425">Declaratively, by setting <xref:System.Windows.Application.StartupUri%2A>.</span></span>  
  
-   <span data-ttu-id="cce76-426">プログラムによる処理<xref:System.Windows.Application.Startup>。</span><span class="sxs-lookup"><span data-stu-id="cce76-426">Programmatically, by handling <xref:System.Windows.Application.Startup>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-427">次の例は、を呼び出す<xref:System.Windows.Application> <xref:System.Windows.Application.Run%2A>前に、をインスタンス化する、手動で作成された静的なエントリポイントメソッドを持つアプリケーションを示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-427">The following example shows an application with a manually-created static entry point method that instantiates <xref:System.Windows.Application>, before calling <xref:System.Windows.Application.Run%2A>.</span></span>  
  
 [!code-csharp[ApplicationRunOL1Snippets#CustomEntryPointAndRunOL1CODE](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationRunOL1Snippets/CSharp/App.cs#customentrypointandrunol1code)]
 [!code-vb[ApplicationRunOL1Snippets#CustomEntryPointAndRunOL1CODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationRunOL1Snippets/visualbasic/app.vb#customentrypointandrunol1code)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cce76-428"><see cref="M:System.Windows.Application.Run" /> は、ブラウザーによってホストされるアプリケーション ([!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] など) から呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-428"><see cref="M:System.Windows.Application.Run" /> is called from a browser-hosted application (for example, an [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]).</span></span></exception>
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="M:System.Windows.Application.Shutdown(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SessionEnding">
      <MemberSignature Language="C#" Value="public event System.Windows.SessionEndingCancelEventHandler SessionEnding;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SessionEndingCancelEventHandler SessionEnding" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.SessionEnding" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SessionEnding As SessionEndingCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SessionEndingCancelEventHandler ^ SessionEnding;" />
      <MemberSignature Language="F#" Value="member this.SessionEnding : System.Windows.SessionEndingCancelEventHandler " Usage="member this.SessionEnding : System.Windows.SessionEndingCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SessionEndingCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-429">ユーザーがログオフするかオペレーティング システムをシャットダウンして、Windows セッションを終了するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-429">Occurs when the user ends the Windows session by logging off or shutting down the operating system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-430">既定では、Windows セッションが終了すると、アプリケーションがシャットダウンされます。これは、ユーザーがログオフまたはシャットダウンしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-430">By default, an application shuts down when the Windows session ends, which occurs when a user logs off or shuts down.</span></span> <span data-ttu-id="cce76-431">この場合、Windows は、開いているアプリケーションをシャットダウンするように要求します。</span><span class="sxs-lookup"><span data-stu-id="cce76-431">When this happens, Windows asks each open application to shut down.</span></span> <span data-ttu-id="cce76-432">ただし、この問題が発生した場合、アプリケーションをシャットダウンする準備ができていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-432">However, it is possible that an application may not be ready to shut down when this occurs.</span></span> <span data-ttu-id="cce76-433">たとえば、一貫性のない状態のデータや、実行時間の長い操作の途中にあるアプリケーションがあるとします。</span><span class="sxs-lookup"><span data-stu-id="cce76-433">For example, an application may have data that is in an inconsistent state, or in the middle of a long-running operation.</span></span> <span data-ttu-id="cce76-434">このような状況では、セッションが終了しないようにすることが望ましい場合があります。また、セッションを終了させるかどうかをユーザーが選択できるようにすることが望ましい場合もあります。</span><span class="sxs-lookup"><span data-stu-id="cce76-434">In these situations, it may be desirable to prevent the session from ending, and may be more desirable to allow users the option to decide whether or not to let the session to end.</span></span>  
  
 <span data-ttu-id="cce76-435"><xref:System.Windows.Application.SessionEnding>イベントを処理することによって、セッションが終了したことを検出できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-435">You can detect when a session ends by handling the <xref:System.Windows.Application.SessionEnding> event.</span></span> <span data-ttu-id="cce76-436">アプリケーションでセッションが終了しないようにする必要が<xref:System.Windows.SessionEndingCancelEventArgs>ある場合、イベントハンドラーに渡される引数は<xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 、に`true`設定したを公開します`false`(既定値はです)。</span><span class="sxs-lookup"><span data-stu-id="cce76-436">If an application needs to prevent the session from ending, the <xref:System.Windows.SessionEndingCancelEventArgs> argument that is passed to the event handler exposes the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> that you set to `true` (the default value is `false`).</span></span>  
  
 <span data-ttu-id="cce76-437">が<xref:System.Windows.Application.SessionEnding>処理されない場合、または取り消され<xref:System.Windows.Application.Shutdown%2A>ずに処理さ<xref:System.Windows.Application.Exit>れる場合、が呼び出され、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-437">If <xref:System.Windows.Application.SessionEnding> is unhandled, or is handled without being cancelled, <xref:System.Windows.Application.Shutdown%2A> is called and the <xref:System.Windows.Application.Exit> event is raised.</span></span>  
  
 <span data-ttu-id="cce76-438">セッションが終了する理由に関する詳細情報を取得するには、 <xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A>アプリケーションで検査できます。 <xref:System.Windows.ReasonSessionEnding>これは<xref:System.Windows.ReasonSessionEnding.Logoff?displayProperty=nameWithType> 、 <xref:System.Windows.ReasonSessionEnding.Shutdown?displayProperty=nameWithType>値 (と) の1つです。</span><span class="sxs-lookup"><span data-stu-id="cce76-438">To obtain more information about why the session is ending, an application can inspect <xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A>, which is one of the <xref:System.Windows.ReasonSessionEnding> values (<xref:System.Windows.ReasonSessionEnding.Logoff?displayProperty=nameWithType> and <xref:System.Windows.ReasonSessionEnding.Shutdown?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="cce76-439"><xref:System.Windows.Application.SessionEnding>は、コンソールアプリケーションによって発生することはありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-439"><xref:System.Windows.Application.SessionEnding> is not raised by console applications.</span></span>  
  
 <span data-ttu-id="cce76-440"><xref:System.Windows.Application.SessionEnding>は、 <xref:System.Windows.Application>オブジェクトを作成したスレッドでのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-440"><xref:System.Windows.Application.SessionEnding> is raised only on the thread that creates the <xref:System.Windows.Application> object.</span></span>  
  
 <span data-ttu-id="cce76-441"><xref:System.Windows.Application.SessionEnding>は、XAML ブラウザーアプリケーション (Xbap) に対しては発生しません。</span><span class="sxs-lookup"><span data-stu-id="cce76-441"><xref:System.Windows.Application.SessionEnding> is not raised for XAML browser applications (XBAPs).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-442">次の例では、 <xref:System.Windows.Application.SessionEnding>イベントを処理し、ユーザーにキャンセルを許可する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="cce76-442">The following example demonstrates how to handle the <xref:System.Windows.Application.SessionEnding> event and allow the user to cancel it.</span></span>  
  
 [!code-xaml[ApplicationSessionEndingSnippets#HandlingSessionEndingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationSessionEndingSnippets/CSharp/App.xaml#handlingsessionendingxaml)]  
  
 [!code-csharp[ApplicationSessionEndingSnippets#HandlingSessionEndingCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationSessionEndingSnippets/CSharp/App.xaml.cs#handlingsessionendingcodebehind)]
 [!code-vb[ApplicationSessionEndingSnippets#HandlingSessionEndingCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationSessionEndingSnippets/visualbasic/application.xaml.vb#handlingsessionendingcodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnSessionEnding(System.Windows.SessionEndingCancelEventArgs)" />
        <altmember cref="E:System.Windows.Application.Startup" />
      </Docs>
    </Member>
    <Member MemberName="SetCookie">
      <MemberSignature Language="C#" Value="public static void SetCookie (Uri uri, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCookie(class System.Uri uri, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.SetCookie(System.Uri,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCookie(Uri ^ uri, System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCookie : Uri * string -&gt; unit" Usage="System.Windows.Application.SetCookie (uri, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="cce76-443">クッキーを作成する場所を指定する <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-443">The <see cref="T:System.Uri" /> that specifies the location for which the cookie should be created.</span></span></param>
        <param name="value"><span data-ttu-id="cce76-444">クッキー データを格納している <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-444">The <see cref="T:System.String" /> that contains the cookie data.</span></span></param>
        <summary><span data-ttu-id="cce76-445"><see cref="T:System.Uri" /> で指定した場所にクッキーを作成します。</span><span class="sxs-lookup"><span data-stu-id="cce76-445">Creates a cookie for the location specified by a <see cref="T:System.Uri" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-446">Cookie は任意のデータであり、アプリケーションセッション (セッション cookie) 中、またはアプリケーションセッション (永続的なクッキー) 間で、アプリケーションによってクライアントコンピューターに格納できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-446">A cookie is an arbitrary piece of data that can be stored by an application on the client machine during application sessions (session cookies) or across application sessions (persistent cookies).</span></span> <span data-ttu-id="cce76-447">を呼び出す<xref:System.Windows.Application.SetCookie%2A>ことによって、両方の種類の cookie を作成できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-447">You can create both types of cookies by calling <xref:System.Windows.Application.SetCookie%2A>.</span></span>  
  
 <span data-ttu-id="cce76-448">Cookie データは、通常、次の形式で名前と値のペアの形式になります。</span><span class="sxs-lookup"><span data-stu-id="cce76-448">Cookie data typically takes the form of a name/value pair in the following format:</span></span>  
  
 `Name=Value`  
  
 <span data-ttu-id="cce76-449">この形式の文字列をに<xref:System.Windows.Application.SetCookie%2A> <xref:System.Uri>渡し、cookie を設定する場所 (通常はアプリケーションドメイン) のを指定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-449">You pass a string of this format to <xref:System.Windows.Application.SetCookie%2A>, along with the <xref:System.Uri> of the location for which the cookie should be set (typically, the application domain).</span></span>  
  
 <span data-ttu-id="cce76-450">Cookie がセッション cookie であるか、永続的な cookie であるかは、に<xref:System.Windows.Application.SetCookie%2A>渡す cookie 文字列に有効期限が含まれているかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="cce76-450">Whether a cookie is a session cookie or a persistent cookie depends on whether the cookie string that you pass to <xref:System.Windows.Application.SetCookie%2A> includes an expiry date.</span></span> <span data-ttu-id="cce76-451">セッション cookie の文字列に有効期限が含まれていません。</span><span class="sxs-lookup"><span data-stu-id="cce76-451">The string for a session cookie does not include an expiry date.</span></span> <span data-ttu-id="cce76-452">永続的な cookie の文字列は、次の形式で指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-452">The string for a persistent cookie does, and must be in the following format:</span></span>  
  
 `NAME=VALUE; expires=DAY, DD-MMM-YYYY HH:MM:SS GMT`  
  
 <span data-ttu-id="cce76-453">永続的な cookie は、有効期限[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]が切れるまで、現在のインストールのインターネット一時ファイルフォルダーに格納されます。その場合は削除されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-453">Persistent cookies are stored in the current [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)] installation's Temporary Internet Files folder until they expire, in which case they are deleted.</span></span> <span data-ttu-id="cce76-454">アプリケーションから永続的な cookie を削除するには、有効期限を過去の日付/時刻値に設定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-454">You can delete a persistent cookie from your application by setting its expiry date to a date/time value that is in the past.</span></span>  
  
 <span data-ttu-id="cce76-455">の cookie [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]の概要については、「[ナビゲーションの概要](~/docs/framework/wpf/app-development/navigation-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cce76-455">For an overview of cookies in [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)], see [Navigation Overview](~/docs/framework/wpf/app-development/navigation-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="cce76-456">指定したクッキー作成の試行中に問題が起きると、(<see cref="M:System.Windows.Application.SetCookie(System.Uri,System.String)" /> から呼び出された) <see langword="InternetSetCookie" /> 関数により [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] エラーが発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-456">A [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] error is raised by the <see langword="InternetSetCookie" /> function (called by <see cref="M:System.Windows.Application.SetCookie(System.Uri,System.String)" />) if a problem occurs when attempting to create the specified cookie.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cce76-457">ファイルベース<see cref="T:System.Uri" />のクッキーを取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="cce76-457">for getting the cookie for a file-based <see cref="T:System.Uri" />.</span></span> <span data-ttu-id="cce76-458">関連付けられた列挙型:<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cce76-458">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cce76-459">ファイルベース<see cref="T:System.Uri" />以外のの cookie を取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="cce76-459">for getting the cookie for a non-file-based <see cref="T:System.Uri" />.</span></span> <span data-ttu-id="cce76-460">関連付けられた列挙型:<see cref="F:System.Net.NetworkAccess.Connect" /></span><span class="sxs-lookup"><span data-stu-id="cce76-460">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Connect" /></span></span></permission>
        <altmember cref="M:System.Windows.Application.GetCookie(System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Shutdown">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cce76-461">アプリケーションをシャットダウンします。</span><span class="sxs-lookup"><span data-stu-id="cce76-461">Shuts down an application.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="member this.Shutdown : unit -&gt; unit" Usage="application.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cce76-462">アプリケーションをシャットダウンします。</span><span class="sxs-lookup"><span data-stu-id="cce76-462">Shuts down an application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-463">が<xref:System.Windows.Application.Shutdown%2A>呼び出されると、アプリケーションは実行を停止します。</span><span class="sxs-lookup"><span data-stu-id="cce76-463">When <xref:System.Windows.Application.Shutdown%2A> is called, an application stops running.</span></span> <span data-ttu-id="cce76-464"><xref:System.Windows.Application.Exit>イベントを処理して、アプリケーションが実行を停止しようとしていることを検出し、適切な処理を実行できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-464">You can handle the <xref:System.Windows.Application.Exit> event to detect when an application is about to stop running, to perform any appropriate processing.</span></span>  
  
 <span data-ttu-id="cce76-465"><xref:System.Windows.Application.Shutdown%2A>は、次のような場合に Windows Presentation Foundation によって暗黙的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-465"><xref:System.Windows.Application.Shutdown%2A> is implicitly called by Windows Presentation Foundation in the following situations:</span></span>  
  
-   <span data-ttu-id="cce76-466">が<xref:System.Windows.Application.ShutdownMode%2A> に<xref:System.Windows.ShutdownMode.OnLastWindowClose>設定されている場合。</span><span class="sxs-lookup"><span data-stu-id="cce76-466">When <xref:System.Windows.Application.ShutdownMode%2A> is set to <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
-   <span data-ttu-id="cce76-467">がに<xref:System.Windows.Application.ShutdownMode%2A> <xref:System.Windows.ShutdownMode.OnMainWindowClose>設定されている場合。</span><span class="sxs-lookup"><span data-stu-id="cce76-467">When the <xref:System.Windows.Application.ShutdownMode%2A> is set to <xref:System.Windows.ShutdownMode.OnMainWindowClose>.</span></span>  
  
-   <span data-ttu-id="cce76-468">ユーザーがセッションを終了し<xref:System.Windows.Application.SessionEnding> 、イベントが未処理の場合、またはキャンセルせずに処理された場合。</span><span class="sxs-lookup"><span data-stu-id="cce76-468">When a user ends a session and the <xref:System.Windows.Application.SessionEnding> event is either unhandled, or handled without cancellation.</span></span>  
  
 <span data-ttu-id="cce76-469">を<xref:System.Windows.Application.Shutdown%2A>明示的に呼び出すと、 <xref:System.Windows.Application.ShutdownMode%2A>設定に関係なく、アプリケーションがシャットダウンされます。</span><span class="sxs-lookup"><span data-stu-id="cce76-469">Calling <xref:System.Windows.Application.Shutdown%2A> explicitly causes an application to shut down, regardless of the <xref:System.Windows.Application.ShutdownMode%2A> setting.</span></span> <span data-ttu-id="cce76-470">ただし、が<xref:System.Windows.Application.ShutdownMode%2A>に<xref:System.Windows.ShutdownMode.OnExplicitShutdown>設定されている場合<xref:System.Windows.Application.Shutdown%2A>は、を呼び出してアプリケーションをシャットダウンする必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-470">However, if <xref:System.Windows.Application.ShutdownMode%2A> is set to <xref:System.Windows.ShutdownMode.OnExplicitShutdown>, you must call <xref:System.Windows.Application.Shutdown%2A> to shut down an application.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cce76-471">が<xref:System.Windows.Application.Shutdown%2A>呼び出されると、開いているウィンドウの<xref:System.Windows.Window.Closing>イベントがキャンセルされたかどうかに関係なく、アプリケーションはシャットダウンします。</span><span class="sxs-lookup"><span data-stu-id="cce76-471">When <xref:System.Windows.Application.Shutdown%2A> is called, the application will shut down irrespective of whether the <xref:System.Windows.Window.Closing> event of any open windows is canceled.</span></span>  
  
 <span data-ttu-id="cce76-472">このメソッドは、 <xref:System.Windows.Application>オブジェクトを作成したスレッドからのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-472">This method can be called only from the thread that created the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cce76-473">すべての windows およびユーザー入力イベントを制限なしで使用するためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="cce76-473">for permission to use all windows and user input events without restriction.</span></span> <span data-ttu-id="cce76-474">関連付けられた列挙型:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="cce76-474">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="M:System.Windows.Application.Shutdown(System.Int32)" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
        <altmember cref="M:System.Windows.Application.Run" />
        <altmember cref="M:System.Windows.Application.Run(System.Windows.Window)" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown (int exitCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown(int32 exitCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.Shutdown(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown (exitCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown(int exitCode);" />
      <MemberSignature Language="F#" Value="member this.Shutdown : int -&gt; unit" Usage="application.Shutdown exitCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exitCode"><span data-ttu-id="cce76-475">アプリケーションの整数型終了コード。</span><span class="sxs-lookup"><span data-stu-id="cce76-475">An integer exit code for an application.</span></span> <span data-ttu-id="cce76-476">既定の終了コードは 0 です。</span><span class="sxs-lookup"><span data-stu-id="cce76-476">The default exit code is 0.</span></span></param>
        <summary><span data-ttu-id="cce76-477">アプリケーションをシャットダウンして、指定した終了コードをオペレーティング システムに返します。</span><span class="sxs-lookup"><span data-stu-id="cce76-477">Shuts down an application that returns the specified exit code to the operating system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-478">イベントを処理し<xref:System.Windows.Application.Exit>て終了コードを設定できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-478">You can handle the <xref:System.Windows.Application.Exit> event to set an exit code.</span></span> <span data-ttu-id="cce76-479">ただし、明示的にを<xref:System.Windows.Application.Shutdown%2A>呼び出し、終了コード<xref:System.Windows.Application.Exit>のみを設定するためにを処理する場合<xref:System.Windows.Application.Shutdown%2A>は、代わりにを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-479">However, if you explicitly call <xref:System.Windows.Application.Shutdown%2A>, and you handle <xref:System.Windows.Application.Exit> only to set an exit code, you can call <xref:System.Windows.Application.Shutdown%2A> instead.</span></span>  
  
 <span data-ttu-id="cce76-480">このメソッドは、 <xref:System.Windows.Application>オブジェクトを作成したスレッドからのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-480">This method can be called only from the thread that created the <xref:System.Windows.Application> object.</span></span>  
  
 <span data-ttu-id="cce76-481">終了<xref:System.Environment.ExitCode%2A?displayProperty=nameWithType>コードについては、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="cce76-481">See <xref:System.Environment.ExitCode%2A?displayProperty=nameWithType> for information on exit codes.</span></span>
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cce76-482">すべての windows およびユーザー入力イベントを制限なしで使用するためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="cce76-482">for permission to use all windows and user input events without restriction.</span></span> <span data-ttu-id="cce76-483">関連付けられた列挙型:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="cce76-483">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="Overload:System.Windows.Application.Run" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownMode">
      <MemberSignature Language="C#" Value="public System.Windows.ShutdownMode ShutdownMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ShutdownMode ShutdownMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Application.ShutdownMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ShutdownMode As ShutdownMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ShutdownMode ShutdownMode { System::Windows::ShutdownMode get(); void set(System::Windows::ShutdownMode value); };" />
      <MemberSignature Language="F#" Value="member this.ShutdownMode : System.Windows.ShutdownMode with get, set" Usage="System.Windows.Application.ShutdownMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-484"><see cref="M:System.Windows.Application.Shutdown" /> メソッドが呼び出される条件を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-484">Gets or sets the condition that causes the <see cref="M:System.Windows.Application.Shutdown" /> method to be called.</span></span></summary>
        <value><span data-ttu-id="cce76-485"><see cref="T:System.Windows.ShutdownMode" /> 列挙値。</span><span class="sxs-lookup"><span data-stu-id="cce76-485">A <see cref="T:System.Windows.ShutdownMode" /> enumeration value.</span></span> <span data-ttu-id="cce76-486">既定値は <see cref="F:System.Windows.ShutdownMode.OnLastWindowClose" /> です。</span><span class="sxs-lookup"><span data-stu-id="cce76-486">The default value is <see cref="F:System.Windows.ShutdownMode.OnLastWindowClose" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-487">アプリケーションのメソッドが呼び出され<xref:System.Windows.Application.Shutdown%2A>た場合にのみ、アプリケーションの実行が停止します。</span><span class="sxs-lookup"><span data-stu-id="cce76-487">Applications stop running only when the <xref:System.Windows.Application.Shutdown%2A> method of the Application is called.</span></span> <span data-ttu-id="cce76-488">シャットダウンは、 <xref:System.Windows.Application.ShutdownMode%2A>プロパティの値によって指定されているように、暗黙的または明示的に発生する場合があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-488">Shut down can occur implicitly or explicitly, as specified by the value of the <xref:System.Windows.Application.ShutdownMode%2A> property.</span></span>  
  
 <span data-ttu-id="cce76-489"><xref:System.Windows.Application.ShutdownMode%2A>をに<xref:System.Windows.ShutdownMode.OnLastWindowClose>設定した場合、Windows Presentation Foundation (WPF) は、現在インスタンス化されているウィンドウがメインウィンドウとして設定されている場合で<xref:System.Windows.Application.MainWindow%2A>も、アプリケーションの最後のウィンドウが閉じるときに暗黙的にを呼び出し<xref:System.Windows.Application.Shutdown%2A>ます (「」を参照)。</span><span class="sxs-lookup"><span data-stu-id="cce76-489">If you set <xref:System.Windows.Application.ShutdownMode%2A> to <xref:System.Windows.ShutdownMode.OnLastWindowClose>, Windows Presentation Foundation (WPF) implicitly calls <xref:System.Windows.Application.Shutdown%2A> when the last window in an application closes, even if any currently instantiated windows are set as the main window (see <xref:System.Windows.Application.MainWindow%2A>).</span></span>  
  
 <span data-ttu-id="cce76-490">の<xref:System.Windows.Application.ShutdownMode%2A> <xref:System.Windows.Application.Shutdown%2A> <xref:System.Windows.Application.MainWindow%2A>は、他のウィンドウが現在開いている場合でも、WPF がを閉じると暗黙的に呼び出されるようにします。 <xref:System.Windows.ShutdownMode.OnMainWindowClose></span><span class="sxs-lookup"><span data-stu-id="cce76-490">A <xref:System.Windows.Application.ShutdownMode%2A> of <xref:System.Windows.ShutdownMode.OnMainWindowClose> causes WPF to implicitly call <xref:System.Windows.Application.Shutdown%2A> when the <xref:System.Windows.Application.MainWindow%2A> closes, even if other windows are currently open.</span></span>  
  
 <span data-ttu-id="cce76-491">一部のアプリケーションの有効期間は、メインウィンドウまたは最後のウィンドウが閉じられたとき、または windows に依存していない場合に依存しないことがあります。</span><span class="sxs-lookup"><span data-stu-id="cce76-491">The lifetime of some applications may not be dependent on when the main window or last window is closed, or may not be dependent on windows at all.</span></span> <span data-ttu-id="cce76-492">これらのシナリオでは、 <xref:System.Windows.Application.ShutdownMode%2A>プロパティをに<xref:System.Windows.ShutdownMode.OnExplicitShutdown>設定する必要があります<xref:System.Windows.Application.Shutdown%2A> 。これにより、アプリケーションを停止するための明示的なメソッド呼び出しが必要になります。</span><span class="sxs-lookup"><span data-stu-id="cce76-492">For these scenarios you need to set the <xref:System.Windows.Application.ShutdownMode%2A> property to <xref:System.Windows.ShutdownMode.OnExplicitShutdown>, which requires an explicit <xref:System.Windows.Application.Shutdown%2A> method call to stop the application.</span></span> <span data-ttu-id="cce76-493">それ以外の場合、アプリケーションはバックグラウンドで実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="cce76-493">Otherwise, the application continues running in the background.</span></span>  
  
 <span data-ttu-id="cce76-494"><xref:System.Windows.Application.ShutdownMode%2A>[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]は、コードから、またはプログラムによって宣言によって構成できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-494"><xref:System.Windows.Application.ShutdownMode%2A> can be configured declaratively from [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] or programmatically from code.</span></span>  
  
 <span data-ttu-id="cce76-495">このプロパティは、 <xref:System.Windows.Application>オブジェクトを作成したスレッドからのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-495">This property is available only from the thread that created the <xref:System.Windows.Application> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-496">次の例は、アプリケーションを<xref:System.Windows.Application.ShutdownMode%2A>明示的に閉じる必要があることを指定するようにを構成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-496">The following example shows how to configure <xref:System.Windows.Application.ShutdownMode%2A> to specify that an application must be closed explicitly.</span></span>  
  
 [!code-xaml[ApplicationShutdownModeSnippets#SetShutdownModeXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationShutdownModeSnippets/CS/App.xaml#setshutdownmodexaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event System.Windows.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Application.Startup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Startup As StartupEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::StartupEventHandler ^ Startup;" />
      <MemberSignature Language="F#" Value="member this.Startup : System.Windows.StartupEventHandler " Usage="member this.Startup : System.Windows.StartupEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-497"><see cref="M:System.Windows.Application.Run" /> オブジェクトの <see cref="T:System.Windows.Application" /> メソッドが呼び出されると発生します。</span><span class="sxs-lookup"><span data-stu-id="cce76-497">Occurs when the <see cref="M:System.Windows.Application.Run" /> method of the <see cref="T:System.Windows.Application" /> object is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-498">一般的な Windows Presentation Foundation アプリケーションでは、起動時に次のようなさまざまな初期化タスクを実行できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-498">A typical Windows Presentation Foundation application may perform a variety of initialization tasks when it starts up, including:</span></span>  
  
-   <span data-ttu-id="cce76-499">コマンドラインパラメーターを処理しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-499">Processing command-line parameters.</span></span>  
  
-   <span data-ttu-id="cce76-500">メインウィンドウを開きます。</span><span class="sxs-lookup"><span data-stu-id="cce76-500">Opening the main window.</span></span>  
  
-   <span data-ttu-id="cce76-501">アプリケーションスコープのリソースを初期化しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-501">Initializing application-scope resources.</span></span>  
  
-   <span data-ttu-id="cce76-502">アプリケーションスコープのプロパティを初期化しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-502">Initializing application-scope properties.</span></span>  
  
 <span data-ttu-id="cce76-503">( [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] それぞれ<xref:System.Windows.Application.StartupUri%2A>と)を使用して、メインウィンドウとアプリケーションスコープのリソースを宣言によって<xref:System.Windows.Application.Resources%2A>指定できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-503">You can declaratively specify the main window and application-scope resources using [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] (<xref:System.Windows.Application.StartupUri%2A> and <xref:System.Windows.Application.Resources%2A>, respectively).</span></span> <span data-ttu-id="cce76-504">ただし、アプリケーションのリソースまたはメインウィンドウは、実行時にプログラムによってのみ決定できることもあります。</span><span class="sxs-lookup"><span data-stu-id="cce76-504">Sometimes, however, the resources or main window of your application can only be determined programmatically at run time.</span></span> <span data-ttu-id="cce76-505">また、アプリケーションスコープのプロパティとコマンドラインパラメーターは、プログラムでのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-505">Additionally, application-scope properties and command-line parameters can only be used programmatically.</span></span> <span data-ttu-id="cce76-506">プログラムによる初期化は、次の<xref:System.Windows.Application.Startup>ようなイベントを処理することによって実行できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-506">Programmatic initialization can be performed by handling the <xref:System.Windows.Application.Startup> event, including the following:</span></span>  
  
-   <span data-ttu-id="cce76-507">イベントハンドラーに渡さ<xref:System.Windows.StartupEventArgs.Args%2A> <xref:System.Windows.StartupEventArgs>れるクラスのプロパティから使用できるコマンドラインパラメーターを取得して処理します。 <xref:System.Windows.Application.Startup></span><span class="sxs-lookup"><span data-stu-id="cce76-507">Acquire and process command-line parameters, which are available from the <xref:System.Windows.StartupEventArgs.Args%2A> property of the <xref:System.Windows.StartupEventArgs> class that is passed to the <xref:System.Windows.Application.Startup> event handler.</span></span>  
  
-   <span data-ttu-id="cce76-508">プロパティを使用して、アプリケーションスコープ<xref:System.Windows.Application.Resources%2A>のリソースを初期化します。</span><span class="sxs-lookup"><span data-stu-id="cce76-508">Initialize application-scope resources by using the <xref:System.Windows.Application.Resources%2A> property.</span></span>  
  
-   <span data-ttu-id="cce76-509">プロパティを使用して、 <xref:System.Windows.Application.Properties%2A>アプリケーションスコープのプロパティを初期化します。</span><span class="sxs-lookup"><span data-stu-id="cce76-509">Initialize application-scope properties by using the <xref:System.Windows.Application.Properties%2A> property.</span></span>  
  
-   <span data-ttu-id="cce76-510">1つまたは複数のウィンドウをインスタンス化して表示します。</span><span class="sxs-lookup"><span data-stu-id="cce76-510">Instantiate and show one (or more) windows.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-511">コマンドラインパラメーターは、 <xref:System.Environment.GetCommandLineArgs%2A> <xref:System.Environment>オブジェクトの静的メソッドを呼び出すことによって取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="cce76-511">Command-line parameters can also be acquired by calling the static <xref:System.Environment.GetCommandLineArgs%2A> method of the <xref:System.Environment> object.</span></span> <span data-ttu-id="cce76-512">ただし、 <xref:System.Environment.GetCommandLineArgs%2A>を実行するには、完全な信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="cce76-512">However, <xref:System.Environment.GetCommandLineArgs%2A> requires full trust to execute.</span></span>  
  
 <span data-ttu-id="cce76-513">を使用し<xref:System.Windows.Application.StartupUri%2A>て[!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]を設定した場合、作成されるメインウィンドウは、 <xref:System.Windows.Application.MainWindow%2A> <xref:System.Windows.Application.Startup>イベントが処理されるまで<xref:System.Windows.Application> 、オブジェクトのプロパティまたは<xref:System.Windows.Application.Windows%2A>プロパティからは使用できません。</span><span class="sxs-lookup"><span data-stu-id="cce76-513">If you set <xref:System.Windows.Application.StartupUri%2A> using [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)], the main window that is created is not available from either the <xref:System.Windows.Application.MainWindow%2A> property or the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object until after the <xref:System.Windows.Application.Startup> event is processed.</span></span> <span data-ttu-id="cce76-514">起動時にメインウィンドウにアクセスする必要がある場合は、 <xref:System.Windows.Application.Startup>イベントハンドラーから新しいウィンドウオブジェクトを手動で作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-514">If you need access to the main window during startup, you need to manually create a new window object from your <xref:System.Windows.Application.Startup> event handler.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cce76-515">アプリケーションでを使用<xref:System.Net.AuthenticationManager.CredentialPolicy%2A>して資格情報ポリシーを指定する場合は、 <xref:System.Windows.Application.Startup>が発生した後[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]にを設定<xref:System.Net.AuthenticationManager.CredentialPolicy%2A>する必要があります。それ<xref:System.Windows.Application.Startup>以外の場合は、イベントが発生した直後に既定の内部ポリシーに設定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-515">If your application uses <xref:System.Net.AuthenticationManager.CredentialPolicy%2A> to specify a credential policy, you need to set <xref:System.Net.AuthenticationManager.CredentialPolicy%2A> after <xref:System.Windows.Application.Startup> is raised; otherwise, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] sets it to a default internal policy directly after the <xref:System.Windows.Application.Startup> event has been raised.</span></span>  
  
 <span data-ttu-id="cce76-516"><xref:System.Windows.Application.Startup>イベントハンドラーに渡されるコマンドライン引数は、に渡さ[!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]れる[!INCLUDE[TLA#tla_url](~/includes/tlasharptla-url-md.md)]クエリ文字列パラメーターと同じではありません。</span><span class="sxs-lookup"><span data-stu-id="cce76-516">The command-line arguments that are passed to the <xref:System.Windows.Application.Startup> event handler are not the same as the [!INCLUDE[TLA#tla_url](~/includes/tlasharptla-url-md.md)] query string parameters that are passed to an [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-517">次の例では、スタンドアロンアプリケーションからコマンドラインオプションを取得して処理する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="cce76-517">The following example shows how to acquire and process command-line options from a standalone application.</span></span> <span data-ttu-id="cce76-518">**/Start最小化**されたコマンドラインパラメーターを指定した場合、アプリケーションはメインウィンドウを最小化された状態で開きます。</span><span class="sxs-lookup"><span data-stu-id="cce76-518">If the **/StartMinimized** command-line parameter was provided, the application opens the main window in a minimized state.</span></span>  
  
 [!code-xaml[ApplicationStartupSnippets#HandleStartupXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationStartupSnippets/CSharp/App.xaml#handlestartupxaml)]  
  
 [!code-csharp[ApplicationStartupSnippets#HandleStartupCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationStartupSnippets/CSharp/App.xaml.cs#handlestartupcodebehind)]
 [!code-vb[ApplicationStartupSnippets#HandleStartupCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationStartupSnippets/visualbasic/application.xaml.vb#handlestartupcodebehind)]  
  
 [!INCLUDE[TLA#tla_xbap#plural](~/includes/tlasharptla-xbapsharpplural-md.md)]<span data-ttu-id="cce76-519">配置を使用[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]して起動されるため、コマンドライン引数を取得して処理することはできません (「 [wpf アプリケーションの配置 (wpf)](~/docs/framework/wpf/app-development/deploying-a-wpf-application-wpf.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="cce76-519">cannot retrieve and process command-line arguments because they are launched with [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)] deployment (see [Deploying a WPF Application (WPF)](~/docs/framework/wpf/app-development/deploying-a-wpf-application-wpf.md)).</span></span> <span data-ttu-id="cce76-520">ただし、起動に使用される URL のクエリ文字列パラメーターを取得して処理することはできます。</span><span class="sxs-lookup"><span data-stu-id="cce76-520">However, they can retrieve and process query string parameters from the URLs that are used to launch them.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)" />
        <altmember cref="E:System.Windows.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="StartupUri">
      <MemberSignature Language="C#" Value="public Uri StartupUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri StartupUri" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Application.StartupUri" />
      <MemberSignature Language="VB.NET" Value="Public Property StartupUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ StartupUri { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StartupUri : Uri with get, set" Usage="System.Windows.Application.StartupUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-521">アプリケーションの起動時に自動的に表示される UI を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-521">Gets or sets a UI that is automatically shown when an application starts.</span></span></summary>
        <value><span data-ttu-id="cce76-522"><see cref="T:System.Uri" />アプリケーションの起動時に自動的に開く UI を参照する。</span><span class="sxs-lookup"><span data-stu-id="cce76-522">A <see cref="T:System.Uri" /> that refers to the UI that automatically opens when an application starts.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-523">を使用<xref:System.Windows.Application.StartupUri%2A>すると、アプリケーションの起動時に UI リソースを自動的に読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-523">You can use <xref:System.Windows.Application.StartupUri%2A> to automatically load a UI resource when an application starts.</span></span>  
  
 <span data-ttu-id="cce76-524">次の表は、読み込むことができる UI リソースの種類、それらが開かれるウィンドウの種類、およびこれらのリソースをとして<xref:System.Windows.Application.StartupUri%2A>設定できるアプリケーションの種類を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-524">The following table shows the types of UI resources that can be loaded, the type of window they are opened into, and the type of application that these resources can be set as the <xref:System.Windows.Application.StartupUri%2A>.</span></span>  
  
|<span data-ttu-id="cce76-525">型</span><span class="sxs-lookup"><span data-stu-id="cce76-525">Type</span></span>|<span data-ttu-id="cce76-526">ウィンドウ</span><span class="sxs-lookup"><span data-stu-id="cce76-526">Window</span></span>|<span data-ttu-id="cce76-527">アプリケーションの種類</span><span class="sxs-lookup"><span data-stu-id="cce76-527">Application type</span></span>|  
|----------|------------|----------------------|  
|<xref:System.Windows.Window>|<xref:System.Windows.Window>|<span data-ttu-id="cce76-528">スタンドアロンのみ</span><span class="sxs-lookup"><span data-stu-id="cce76-528">Standalone only</span></span>|  
|<xref:System.Windows.Navigation.NavigationWindow>|<xref:System.Windows.Navigation.NavigationWindow>|<span data-ttu-id="cce76-529">スタンドアロンのみ</span><span class="sxs-lookup"><span data-stu-id="cce76-529">Standalone only</span></span>|  
|<xref:System.Windows.Controls.Page>|<xref:System.Windows.Navigation.NavigationWindow>|<span data-ttu-id="cce76-530">スタンドアロン/ブラウザーでホスト</span><span class="sxs-lookup"><span data-stu-id="cce76-530">Standalone/browser-hosted</span></span>|  
|<xref:System.Windows.Controls.UserControl>|<xref:System.Windows.Navigation.NavigationWindow>|<span data-ttu-id="cce76-531">スタンドアロン/ブラウザーでホスト</span><span class="sxs-lookup"><span data-stu-id="cce76-531">Standalone/browser-hosted</span></span>|  
|<xref:System.Windows.Documents.FlowDocument>|<xref:System.Windows.Navigation.NavigationWindow>|<span data-ttu-id="cce76-532">スタンドアロン/ブラウザーでホスト</span><span class="sxs-lookup"><span data-stu-id="cce76-532">Standalone/browser-hosted</span></span>|  
|<xref:System.Windows.Navigation.PageFunction%601>|<xref:System.Windows.Navigation.NavigationWindow>|<span data-ttu-id="cce76-533">スタンドアロン/ブラウザーでホスト</span><span class="sxs-lookup"><span data-stu-id="cce76-533">Standalone/browser-hosted</span></span>|  
  
 <span data-ttu-id="cce76-534">通常、プロパティは、 <xref:System.Windows.Application.StartupUri%2A>で宣言に[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]よって設定します。</span><span class="sxs-lookup"><span data-stu-id="cce76-534">Typically, you set the <xref:System.Windows.Application.StartupUri%2A> property declaratively in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span> <span data-ttu-id="cce76-535">ただし、必要な UI <xref:System.Windows.Application.StartupUri%2A>リソースを実行時にしか<xref:System.Windows.Application.Startup>読み込むことができないアプリケーションの場合は、イベントハンドラーなどを使用してプログラムで設定できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-535">However, you can set <xref:System.Windows.Application.StartupUri%2A> programmatically, such as from a <xref:System.Windows.Application.Startup> event handler, which is useful if for applications that can only load the necessary UI resources at run time.</span></span> <span data-ttu-id="cce76-536">たとえば、UI リソースの名前が構成ファイルに格納されている場合、アプリケーションは実行時まで待機してリソースを読み込むことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-536">For example, an application might wait until run time to load its resources if the name of the UI resource is stored in a configuration file.</span></span>  
  
 <span data-ttu-id="cce76-537">宣言または<xref:System.Windows.Application.StartupUri%2A>プログラムによって設定されている場合でも、対応<xref:System.Windows.Application.Startup>する UI リソースはイベントが処理されるまで読み込まれません。</span><span class="sxs-lookup"><span data-stu-id="cce76-537">Whether you set <xref:System.Windows.Application.StartupUri%2A> declaratively or programmatically, the corresponding UI resource is not loaded until after the <xref:System.Windows.Application.Startup> event is handled.</span></span> <span data-ttu-id="cce76-538">そのため、処理<xref:System.Windows.Application.Windows%2A> <xref:System.Windows.Application.Startup>時にプロパティ<xref:System.Windows.Application.MainWindow%2A>またはプロパティから結果のウィンドウにアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="cce76-538">Consequently, you won't have access to the resulting window from either the <xref:System.Windows.Application.Windows%2A> property or the <xref:System.Windows.Application.MainWindow%2A> property when handling <xref:System.Windows.Application.Startup>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cce76-539"><see cref="P:System.Windows.Application.StartupUri" /> に null の値が設定されています。</span><span class="sxs-lookup"><span data-stu-id="cce76-539"><see cref="P:System.Windows.Application.StartupUri" /> is set with a value of null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="cce76-540">要求されたアンビエント プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="cce76-540">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="cce76-541">指定されたアンビエント プロパティを現在のスコープで使用できるかどうかを照会します。</span><span class="sxs-lookup"><span data-stu-id="cce76-541">Queries for whether a specified ambient property is available in the current scope.</span></span></summary>
        <returns><span data-ttu-id="cce76-542">要求されたアンビエント プロパティを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-542"><see langword="true" /> if the requested ambient property is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-543">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="cce76-543">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="cce76-544">これは、<xref:System.Windows.Application> のインスタンスが <xref:System.Windows.Markup.IQueryAmbient> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-544">It can be used only when the <xref:System.Windows.Application> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.IQueryAmbient" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Application.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="application.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="cce76-545">検索するリソースの名前。</span><span class="sxs-lookup"><span data-stu-id="cce76-545">The name of the resource to find.</span></span></param>
        <summary><span data-ttu-id="cce76-546">指定したリソースを検索します。</span><span class="sxs-lookup"><span data-stu-id="cce76-546">Searches for the specified resource.</span></span></summary>
        <returns><span data-ttu-id="cce76-547">要求されたリソース オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="cce76-547">The requested resource object.</span></span> <span data-ttu-id="cce76-548">要求したリソースが見つからない場合は、null 参照が返されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-548">If the requested resource is not found, a null reference is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-549"><xref:System.Windows.Application.TryFindResource%2A>は、最初に、指定されたリソースのアプリケーションスコープリソースを検索します。</span><span class="sxs-lookup"><span data-stu-id="cce76-549"><xref:System.Windows.Application.TryFindResource%2A> will first look in application-scope resources for the specified resource.</span></span> <span data-ttu-id="cce76-550">アプリケーションスコープのリソースはによっ<xref:System.Windows.Application>て管理され、 <xref:System.Windows.Application.Resources%2A>プロパティから公開されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-550">Application-scope resources are managed by <xref:System.Windows.Application>, and are exposed from the <xref:System.Windows.Application.Resources%2A> property.</span></span> <span data-ttu-id="cce76-551">指定したリソースがアプリケーションスコープのリソース<xref:System.Windows.Application.TryFindResource%2A>のセットに見つからない場合は、次にシステムリソースが検索されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-551">If the specified resource is not found in the set of application-scope resources, <xref:System.Windows.Application.TryFindResource%2A> then next searches the system resources.</span></span> <span data-ttu-id="cce76-552">システムリソースは、ユーザーが定義したシェルリソースであり、色、フォント、およびシェルの構成が含まれます。</span><span class="sxs-lookup"><span data-stu-id="cce76-552">System resources are shell resources defined by the user, and include colors, fonts, and shell configurations.</span></span> <span data-ttu-id="cce76-553">これらは<xref:System.Windows.SystemColors>、、 <xref:System.Windows.SystemFonts>、および<xref:System.Windows.SystemParameters>の各型から、それぞれ静的プロパティとして公開されます。</span><span class="sxs-lookup"><span data-stu-id="cce76-553">These are exposed from the <xref:System.Windows.SystemColors>, <xref:System.Windows.SystemFonts>, and <xref:System.Windows.SystemParameters> types, respectively, as static properties.</span></span> <span data-ttu-id="cce76-554">を使用<xref:System.Windows.Application.TryFindResource%2A>してそれらを取得するために、これらの型は、に<xref:System.Windows.Application.TryFindResource%2A>渡すように設計された<xref:System.Windows.SystemParameters.IconWidthKey%2A>リソースキープロパティも公開します。たとえば、のようになります。</span><span class="sxs-lookup"><span data-stu-id="cce76-554">To use <xref:System.Windows.Application.TryFindResource%2A> to acquire them, these types also expose resource key properties that are designed to be passed to <xref:System.Windows.Application.TryFindResource%2A>; for example, <xref:System.Windows.SystemParameters.IconWidthKey%2A>.</span></span>  
  
 <span data-ttu-id="cce76-555">は<xref:System.Windows.Application.TryFindResource%2A>オブジェクトを返すため、リソースが見つかった場合は、返された値を適切な型にキャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="cce76-555">Because <xref:System.Windows.Application.TryFindResource%2A> returns an object, you must cast the returned value to the appropriate type if the resource is found.</span></span>  
  
 <span data-ttu-id="cce76-556">このメソッドはスレッドセーフであり、任意のスレッドから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="cce76-556">This method is thread safe and can be called from any thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-557">次の例は、を使用<xref:System.Windows.Application.TryFindResource%2A>してリソースを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="cce76-557">The following example shows how to use <xref:System.Windows.Application.TryFindResource%2A> to acquire a resource.</span></span>  
  
 [!code-xaml[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationTryFindResourceSnippets/CSharp/App.xaml#applicationcalltryfindresourcexaml)]  
  
 [!code-csharp[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationTryFindResourceSnippets/CSharp/MainWindow.xaml.cs#applicationcalltryfindresourcecodebehind1)]
 [!code-vb[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationTryFindResourceSnippets/visualbasic/mainwindow.xaml.vb#applicationcalltryfindresourcecodebehind1)]  
[!code-csharp[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationTryFindResourceSnippets/CSharp/MainWindow.xaml.cs#applicationcalltryfindresourcecodebehind2)]
[!code-vb[ApplicationTryFindResourceSnippets#ApplicationCallTryFindResourceCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationTryFindResourceSnippets/visualbasic/mainwindow.xaml.vb#applicationcalltryfindresourcecodebehind2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Application.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Windows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection Windows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection Windows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Application.Windows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Windows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ Windows { System::Windows::WindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Windows : System.Windows.WindowCollection" Usage="System.Windows.Application.Windows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cce76-558">アプリケーションでインスタンス化されたウィンドウを取得します。</span><span class="sxs-lookup"><span data-stu-id="cce76-558">Gets the instantiated windows in an application.</span></span></summary>
        <value><span data-ttu-id="cce76-559">現在の <see cref="T:System.Windows.WindowCollection" /> のすべてのウィンドウ オブジェクトへの参照を格納している <see cref="T:System.AppDomain" />。</span><span class="sxs-lookup"><span data-stu-id="cce76-559">A <see cref="T:System.Windows.WindowCollection" /> that contains references to all window objects in the current <see cref="T:System.AppDomain" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cce76-560">スレッドで<xref:System.Windows.Window> <xref:System.Windows.Application.Windows%2A>ウィンドウがインスタンス化されるとすぐに、参照がに自動的に追加されます。ワーカースレッドによって作成された windows は追加されません。 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</span><span class="sxs-lookup"><span data-stu-id="cce76-560">A <xref:System.Windows.Window> reference is automatically added to <xref:System.Windows.Application.Windows%2A> as soon as a window is instantiated on the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread; windows that are created by worker threads are not added.</span></span> <span data-ttu-id="cce76-561">イベントが処理され<xref:System.Windows.Window> <xref:System.Windows.Window.Closed>た後、そのイベントが発生する前に、参照が自動的に削除されます。 <xref:System.Windows.Window.Closing></span><span class="sxs-lookup"><span data-stu-id="cce76-561">A <xref:System.Windows.Window> reference is automatically removed after its <xref:System.Windows.Window.Closing> event has been handled and before its <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
 <span data-ttu-id="cce76-562">既定では、 <xref:System.Windows.Application.Windows%2A>プロパティに追加された最初の項目がに<xref:System.Windows.Application.MainWindow%2A>なります。</span><span class="sxs-lookup"><span data-stu-id="cce76-562">By default, the first item added to the <xref:System.Windows.Application.Windows%2A> property becomes the <xref:System.Windows.Application.MainWindow%2A>.</span></span>  
  
 <span data-ttu-id="cce76-563">このプロパティは、 <xref:System.Windows.Application>オブジェクトを作成したスレッドからのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="cce76-563">This property is available only from the thread that created the <xref:System.Windows.Application> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cce76-564">次の例は、プロパティを列挙<xref:System.Windows.Application.Windows%2A>してトップレベルの Windows メニューを構築する方法を示して[!INCLUDE[TLA#tla_mdi](~/includes/tlasharptla-mdi-md.md)]います[!INCLUDE[TLA#tla_xl](~/includes/tlasharptla-xl-md.md)]。これは、のようなアプリケーションや、次のような複数インスタンスのシングルドキュメントインターフェイス (SDI) アプリケーションに共通しています[!INCLUDE[TLA#tla_word](~/includes/tlasharptla-word-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="cce76-564">The following example demonstrates how to enumerate the <xref:System.Windows.Application.Windows%2A> property to build a top-level Windows menu, which is common to [!INCLUDE[TLA#tla_mdi](~/includes/tlasharptla-mdi-md.md)] applications like [!INCLUDE[TLA#tla_xl](~/includes/tlasharptla-xl-md.md)], or multiple-instance Single Document Interface (SDI) applications like [!INCLUDE[TLA#tla_word](~/includes/tlasharptla-word-md.md)].</span></span>  
  
 [!code-csharp[ApplicationWindowsSnippets#WindowMenuItemCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationWindowsSnippets/CSharp/WindowMenuItem.cs#windowmenuitemcode)]
 [!code-vb[ApplicationWindowsSnippets#WindowMenuItemCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationWindowsSnippets/visualbasic/windowmenuitem.vb#windowmenuitemcode)]  
  
 [!code-xaml[ApplicationWindowsSnippets#MainWindowSetWindowsXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationWindowsSnippets/CSharp/MainWindow.xaml#mainwindowsetwindowsxaml)]  
  
 [!code-csharp[ApplicationWindowsSnippets#MainWindowSetWindowsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationWindowsSnippets/CSharp/MainWindow.xaml.cs#mainwindowsetwindowscodebehind1)]
 [!code-vb[ApplicationWindowsSnippets#MainWindowSetWindowsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationWindowsSnippets/visualbasic/mainwindow.xaml.vb#mainwindowsetwindowscodebehind1)]  
[!code-csharp[ApplicationWindowsSnippets#MainWindowSetWindowsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/ApplicationWindowsSnippets/CSharp/MainWindow.xaml.cs#mainwindowsetwindowscodebehind2)]
[!code-vb[ApplicationWindowsSnippets#MainWindowSetWindowsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ApplicationWindowsSnippets/visualbasic/mainwindow.xaml.vb#mainwindowsetwindowscodebehind2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>
