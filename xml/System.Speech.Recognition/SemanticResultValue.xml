<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73739246a3d34b754f871bb66457c788887dd0b4" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69258180" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>セマンティクス値を表し、必要に応じて、音声認識文法のコンポーネントに値を関連付けます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.SemanticResultKey>およびオブジェクト<xref:System.Speech.Recognition.Choices>の使用は、のセマンティック構造を設計する最も簡単な方法です。 <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.GrammarBuilder> 句のセマンティック情報にアクセスする<xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>には、のプロパティ<xref:System.Speech.Recognition.RecognizedPhrase>を使用して、のインスタンスを取得します。  
  
> [!NOTE]
>  オブジェクトによっ<xref:System.Speech.Recognition.SemanticResultValue>て管理される<xref:System.Object>値は、コンストラクターに渡されるインスタンスによって定義されます。 この<xref:System.Object>の基になる型は`bool`、 `int` `float`、、、 `string`またはである必要があります。 それ以外の型の場合は、 <xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.SemanticResultValue>を使用してインスタンスを構築できません。  
  
 <xref:System.Speech.Recognition.SemanticResultValue>インスタンスの一般的な使用では、句、規則、 <xref:System.Speech.Recognition.Choices>オブジェクトなど、 <xref:System.Speech.Recognition.Grammar>の認識可能なコンポーネントにインスタンスを関連付けます。 関連付けられているコンポーネントが認識操作の一部として<xref:System.Speech.Recognition.SemanticResultValue>使用されている場合は、を使用して、返された語句のセマンティクスに値が定義されます。  
  
 インスタンスを<xref:System.Speech.Recognition.SemanticResultValue>文法要素に関連付けるには、の<xref:System.Speech.Recognition.SemanticResultValue>作成に使用されるコンストラクターに応じて、2つの基本的な方法があります。  
  
-   の<xref:System.Object>インスタンスによって指定された値のみがオブジェクトの<xref:System.Speech.Recognition.SemanticResultValue>構築に使用される<xref:System.Speech.Recognition.SemanticResultValue>場合、は、 <xref:System.Speech.Recognition.GrammarBuilder>オブジェクトに加えて、その前にある文法コンポーネントに関連付けられます。  
  
     たとえば、次のコード片で、この<xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.GrammarBuilder>インスタンスを使用して構築されたが "background" という語`true`を認識している場合、の値は認識された句のセマンティクスで設定されます。  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     詳細については、<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> の説明を参照してください。  
  
-   値を指定<xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Object>すると共に文字列値の句または特定のインスタンスが使用されている場合は、その値が文字列値の<xref:System.Speech.Recognition.GrammarBuilder>句またはインスタンスに自動的に関連付けられます。 <xref:System.Speech.Recognition.SemanticResultValue>  語句または<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが認識プロセスで使用されている場合、値は認識された語句のセマンティクスに割り当てられます。  
  
     次の例は、これを示しています。これは、 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>と<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>の明示的な呼び出しを使用する前の例と機能的には同じです。 認識ロジックで "background" という単語が使用され`true`ている場合は、認識されたセマンティクスに値が追加されます。  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     詳細については、「」 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>および<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>「」の説明を参照してください。  
  
 <xref:System.Speech.Recognition.Grammar>によって使用されるには、 <xref:System.Speech.Recognition.SemanticResultValue>すべてのインスタンスが、その<xref:System.Speech.Recognition.Grammar>によっ<xref:System.Speech.Recognition.SemanticValue>て使用されるいずれかのオブジェクトに関連付けられている必要があります。 これは、 <xref:System.Speech.Recognition.SemanticResultValue>セマンティックキーをに関連付けることによって行われます。  
  
 オブジェクト<xref:System.Speech.Recognition.SemanticResultKey>を使用して、セマンティックキー <xref:System.Speech.Recognition.SemanticResultValue>を明示的ににアタッチすることができます。  <xref:System.Speech.Recognition.SemanticResultValue>キーに明示的にアタッチされていないインスタンスは、既定<xref:System.Speech.Recognition.SemanticValue>のルートキーにアタッチされます。  
  
 を<xref:System.Speech.Recognition.SemanticResultValue>使用してを<xref:System.Speech.Recognition.SemanticValue.Value%2A>設定した後、既定のルート<xref:System.Speech.Recognition.SemanticResultKey>キーを使用してタグ付けされているかどうかにかかわらず、その値を変更する必要がないか、認識操作中に例外が発生します。  
  
 次の例では、 <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.Grammar>のルートを設定してから変更するため、例外が発生します。  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 一方、次の例のコードは許可されています。 の複数の<xref:System.Speech.Recognition.SemanticResultValue>インスタンスが定義されていますが<xref:System.Speech.Recognition.Choices> 、オブジェクトに含まれており、1つだけがキー `bgOrfgText`の値を設定するために使用されます。  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 次の例では<xref:System.Speech.Recognition.Grammar> 、コマンド "Set/Change/Alter 前景/Background..." を認識するを返します。 [カラーリスト]。  <xref:System.Speech.Recognition.SemanticResultValue>および<xref:System.Speech.Recognition.SemanticResultKey>インスタンス ( <xref:System.Speech.Recognition.Choices>および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトと共に) を使用して、認識時に解析できるセマンティクスを定義します。  解析されたセマンティクスは、要求された色と、前景色または背景色を変更するかどうかを決定します。  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">SemanticResultKey を使用して SemanticResultValue を抽出する</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.SemanticResultValue" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンストラクター `SemanticResultValue`は、 <xref:System.Object> `float` 、、`bool`、または`string`の基になるデータ型のインスタンスの指定をサポートします。 `int`  
  
 コンストラクターは、次の`SemanticResultValue` 2 つの状況のいずれかでインスタンスを作成できます。  
  
-   を`SemanticResultValue` <xref:System.Speech.Recognition.Grammar>使用してを構築する場合、インスタンスは、文法要素に明示的に関連付けられている必要があります。<xref:System.Speech.Recognition.GrammarBuilder>  
  
-   は`SemanticResultValue` 、既に文字列値の語句<xref:System.Speech.Recognition.GrammarBuilder>またはオブジェクトに関連付けられています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" /> で管理された値。 <see langword="bool" /> 型、<see langword="int" /> 型、<see langword="float" /> 型、または <see langword="string" /> 型である必要があります。</param>
        <summary><see cref="T:System.Speech.Recognition.SemanticResultValue" /> クラスの新しいインスタンスを初期化して、セマンティクス値を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この`SemanticResultValue`コンストラクターによって返されたは、特定の文法要素に関連付けられていません。 `SemanticResultValue` と<xref:System.Speech.Recognition.GrammarBuilder>共にのインスタンスを使用して、アソシエーションを明示的に行う必要があります。  
  
 たとえば、次のコード片で、この<xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.GrammarBuilder>インスタンスを使用して構築されたが "background" という語`true`を認識している場合、の値は認識された句のセマンティクスで設定されます。  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 次の例では<xref:System.Speech.Recognition.Grammar> 、コマンド "Set/Change/Alter 前景/Background..." を認識するを返します。 [カラーリスト]。 <xref:System.Speech.Recognition.SemanticResultValue>および<xref:System.Speech.Recognition.SemanticResultKey>インスタンス ( <xref:System.Speech.Recognition.Choices>および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトと共に) を使用して、認識時に解析できるセマンティクスを定義します。  解析されたセマンティクスは、要求された色と、前景色または背景色を変更するかどうかを決定します。  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">認識で使用される文法コンポーネント。</param>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" /> で管理された値。 <see langword="bool" /> 型、<see langword="int" /> 型、<see langword="float" /> 型、または <see langword="string" /> 型である必要があります。</param>
        <summary><see cref="T:System.Speech.Recognition.SemanticResultValue" /> クラスの新しいインスタンスを初期化して、セマンティクス値と <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトを関連付けます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって指定され<xref:System.Speech.Recognition.GrammarBuilder>た文法要素が認識ロジックで`value`使用されている場合、は認識される出力のセマンティクスで設定されます。  
  
 次のコード<xref:System.Speech.Recognition.GrammarBuilder>片では、インスタンス (`myGb`) を使用して構築された<xref:System.Speech.Recognition.Choices>認識ロジック`myChoice`がオブジェクト () を使用し`true`て入力を識別すると、その値が認識されるセマンティクスに追加されます。  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 で<xref:System.Speech.Recognition.GrammarBuilder>は、、 <xref:System.Speech.Recognition.Choices> `SemanticResultValue`、および<xref:System.Speech.Recognition.SemanticResultKey>の暗黙的な変換がサポートされているため、このコンストラクターでもこれらのオブジェクトを使用できます。  
  
   
  
## Examples  
 次の例では<xref:System.Speech.Recognition.Grammar> 、コマンド "Set/Change/Alter 前景/Background..." を認識するを返します。 [カラーリスト]。 <xref:System.Speech.Recognition.SemanticResultValue>および<xref:System.Speech.Recognition.SemanticResultKey>インスタンス ( <xref:System.Speech.Recognition.Choices>および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトと共に) を使用して、認識時に解析できるセマンティクスを定義します。  解析されたセマンティクスは、要求された色と、前景色または背景色を変更するかどうかを決定します。  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">認識で使用される語句。</param>
        <param name="value"><see cref="T:System.Speech.Recognition.SemanticResultValue" /> で管理された値。 <see langword="bool" /> 型、<see langword="int" /> 型、<see langword="float" /> 型、または <see langword="string" /> 型である必要があります。</param>
        <summary><see cref="T:System.Speech.Recognition.SemanticResultValue" /> クラスの新しいインスタンスを初期化して、セマンティクス値と <see cref="T:System.String" /> オブジェクトを関連付けます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって指定さ`phrase`れた文字列が認識ロジックで`value`使用されている場合、は認識される出力のセマンティクスで設定されます。  
  
 次のコード片では、 <xref:System.Speech.Recognition.GrammarBuilder>インスタンス (`myGb`) を使用して構築された認識ロジックが文字列 "my 抵当" を使用し`true`て入力を識別すると、その値が認識されるセマンティクスに追加されます。  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 次の例では<xref:System.Speech.Recognition.Grammar> 、コマンド "Set/Change/Alter 前景/Background..." を認識するを返します。 [カラーリスト]。 <xref:System.Speech.Recognition.SemanticResultValue>および<xref:System.Speech.Recognition.SemanticResultKey>インスタンス ( <xref:System.Speech.Recognition.Choices>および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトと共に) を使用して、認識時に解析できるセマンティクスを定義します。  解析されたセマンティクスは、要求された色と、前景色または背景色を変更するかどうかを決定します。  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Speech.Recognition.GrammarBuilder" /> インスタンスから構築された <see cref="T:System.Speech.Recognition.SemanticResultValue" /> のインスタンスを返します</summary>
        <returns>現在の <see cref="T:System.Speech.Recognition.GrammarBuilder" /> インスタンスから構築された <see cref="T:System.Speech.Recognition.SemanticResultValue" /> のインスタンスを返します</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>使用は、を<xref:System.Speech.Recognition.SemanticResultValue>引数とし<xref:System.Speech.Recognition.GrammarBuilder>て受け取るコンストラクターを使用することと<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>同じです ()。  
  
   
  
## Examples  
 次の例で<xref:System.Speech.Recognition.Grammar>は、背景色を変更するコマンドをサポートするオブジェクトを作成します。  
  
 `colorChoice` <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> `SemanticResultValue`背景色のオプションの一覧を含む<xref:System.Speech.Recognition.Choices>オブジェクト () は、メソッドを使用して、作成されたオブジェクトのメソッドから取得されたインスタンスを<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>格納します。色の文字列から。  
  
 次<xref:System.Speech.Recognition.GrammarBuilder>に、 <xref:System.Speech.Recognition.SemanticResultKey>インスタンスでを<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>呼び出すことによって、が取得されます。これは`colorChoice` 、インスタンスのセマンティック選択にキーを指定するために使用されます。  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
