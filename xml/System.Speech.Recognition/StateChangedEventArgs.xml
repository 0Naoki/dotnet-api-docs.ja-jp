<Type Name="StateChangedEventArgs" FullName="System.Speech.Recognition.StateChangedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="979bc30c72b7f8bcfa56f9c1515aafe696438e9e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408983" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StateChangedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StateChangedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.StateChangedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class StateChangedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class StateChangedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type StateChangedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f05d5-101">
        <see cref="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" /> イベントからのデータを返します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="f05d5-101">Returns data from the <see cref="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f05d5-102"><xref:System.Speech.Recognition.SpeechRecognizer.StateChanged>によってイベントが発生した、<xref:System.Speech.Recognition.SpeechRecognizer>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f05d5-102">The <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event is raised by the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span> <span data-ttu-id="f05d5-103"><xref:System.Speech.Recognition.StateChangedEventArgs> 派生した<xref:System.EventArgs>のハンドラーに渡されると<xref:System.Speech.Recognition.SpeechRecognizer.StateChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="f05d5-103"><xref:System.Speech.Recognition.StateChangedEventArgs> derives from <xref:System.EventArgs> and is passed to handlers for <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> events.</span></span>  
  
 <span data-ttu-id="f05d5-104"><xref:System.Speech.Recognition.SpeechRecognizer.State%2A> 読み取り専用プロパティです。</span><span class="sxs-lookup"><span data-stu-id="f05d5-104"><xref:System.Speech.Recognition.SpeechRecognizer.State%2A> is a read-only property.</span></span> <span data-ttu-id="f05d5-105">共有音声認識エンジンの状態は、プログラムで変更できません。</span><span class="sxs-lookup"><span data-stu-id="f05d5-105">A shared speech recognizer's state cannot be changed programmatically.</span></span> <span data-ttu-id="f05d5-106">ユーザーが音声認識のユーザー インターフェイス (UI) を使用して共有音声認識エンジンの状態を変更または、**音声認識**、Windows のメンバー**コントロール パネルの **です。</span><span class="sxs-lookup"><span data-stu-id="f05d5-106">Users can change a shared speech recognizer's state using the Speech Recognition user interface (UI) or through the **Speech Recognition** member of the Windows **Control Panel**.</span></span>  
  
 <span data-ttu-id="f05d5-107">両方、**で**と**スリープ**、音声認識 ui 設定に対応して、`Listening`状態です。</span><span class="sxs-lookup"><span data-stu-id="f05d5-107">Both the **On** and **Sleep** settings in the Speech Recognition UI correspond to the `Listening` state.</span></span> <span data-ttu-id="f05d5-108">**オフ**、音声認識 ui 設定に対応して<xref:System.Speech.Recognition.RecognizerState.Stopped>です。</span><span class="sxs-lookup"><span data-stu-id="f05d5-108">The **Off** setting in the Speech Recognition UI corresponds to <xref:System.Speech.Recognition.RecognizerState.Stopped>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f05d5-109">次の例では、共有音声認識を作成し、特定の単語を認識するため、空きディクテーションを受け入れるための文法の 2 種類が作成されます。</span><span class="sxs-lookup"><span data-stu-id="f05d5-109">The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="f05d5-110">例は、認識エンジンに作成されたすべての文法を非同期的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="f05d5-110">The example asynchronously loads all the created grammars to the recognizer.</span></span>  <span data-ttu-id="f05d5-111">ハンドラーを<xref:System.Speech.Recognition.SpeechRecognizer.StateChanged>イベントを使用して、 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> 「リッスン」モードに Windows 認識するメソッド。</span><span class="sxs-lookup"><span data-stu-id="f05d5-111">A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event uses the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method to put Windows Recognition in "listening" mode.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted += new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Add a handler for the StateChanged event.  
      recognizer.StateChanged += new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
      // Create "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yah}" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
      SemanticResultValue noValue = new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void  recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
     if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  
    // Write the grammar name and the text of the recognized phrase to the console.  
    static void  recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
     Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void  recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
     string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
      }  
  
      // Add exception handling code here.  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
    <altmember cref="T:System.Speech.Recognition.RecognizerState" />
  </Docs>
  <Members>
    <Member MemberName="RecognizerState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerState RecognizerState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.RecognizerState RecognizerState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.StateChangedEventArgs.RecognizerState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerState As RecognizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerState RecognizerState { System::Speech::Recognition::RecognizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerState : System.Speech.Recognition.RecognizerState" Usage="System.Speech.Recognition.StateChangedEventArgs.RecognizerState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f05d5-112">Windows の共有音声認識エンジンの現在の状態を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05d5-112">Gets the current state of the shared speech recognition engine in Windows.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f05d5-113">共有の音声認識エンジンの状態が <see langword="Listening" /> か <see langword="Stopped" /> かを示す <see cref="T:System.Speech.Recognition.RecognizerState" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="f05d5-113">A <see cref="T:System.Speech.Recognition.RecognizerState" /> instance that indicates whether the state of a shared speech recognition engine is <see langword="Listening" /> or <see langword="Stopped" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="f05d5-114">次の例で提供される状態情報に基づいて表示を更新する、<xref:System.Speech.Recognition.RecognizerState>インスタンスから取得される、<xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A>のプロパティ、<xref:System.Speech.Recognition.StateChangedEventArgs>のハンドラーに渡されるインスタンス、<xref:System.Speech.Recognition.SpeechRecognizer.StateChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="f05d5-114">The following example updates a display based on the state information provided by a <xref:System.Speech.Recognition.RecognizerState> instance that is obtained from the <xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A> property of a <xref:System.Speech.Recognition.StateChangedEventArgs> instance passed to a handler for a <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event.</span></span>  
  
```  
  
// Make sure that _recognizer and recognition start buttons are disabled if state is stopped.  
// Re-enable the start button to allow manual re-enable if the speech recognizer is listening.  
_recognizer.StateChanged +=  
  delegate(object sender, StateChangedEventArgs eventArgs)   
{  
  _recognizerStateLabel.Text = "Speech Recognizer State: " + eventArgs.RecognizerState.ToString();  
};  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>