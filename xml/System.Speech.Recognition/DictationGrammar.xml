<Type Name="DictationGrammar" FullName="System.Speech.Recognition.DictationGrammar">
  <Metadata><Meta Name="ms.openlocfilehash" Value="18a457ab8c4b088fb91ffc48e4b48c4dc26c4a89" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70677534" /></Metadata><TypeSignature Language="C#" Value="public class DictationGrammar : System.Speech.Recognition.Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DictationGrammar extends System.Speech.Recognition.Grammar" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.DictationGrammar" />
  <TypeSignature Language="VB.NET" Value="Public Class DictationGrammar&#xA;Inherits Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictationGrammar : System::Speech::Recognition::Grammar" />
  <TypeSignature Language="F#" Value="type DictationGrammar = class&#xA;    inherit Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.Grammar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>自由形式テキスト ディクテーションに使用する音声認識文法を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスは、音声入力されたユーザー入力をテキストに処理できる定義済みの言語モデルをアプリケーションに提供します。 このクラスは、既定のオブジェクト<xref:System.Speech.Recognition.DictationGrammar>とカスタムオブジェクトの両方をサポートします。 ディクテーションの文法を選択する方法について<xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29>は、「コンストラクター」を参照してください。  
  
 既定では、 <xref:System.Speech.Recognition.DictationGrammar>言語モデルはコンテキストフリーです。 オーディオ入力を識別して解釈するために、特定の単語や単語の順序を使用することはありません。 ディクテーションの文法にコンテキストを追加するには<xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> 、メソッドを使用します。  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.DictationGrammar>オブジェクトはプロパティを<xref:System.Speech.Recognition.Grammar.Priority%2A>サポートしていません。 <xref:System.Speech.Recognition.DictationGrammar>が設定<xref:System.NotSupportedException>さ<xref:System.Speech.Recognition.Grammar.Priority%2A>れている場合は、をスローします。  
  
   
  
## Examples  
 次の例では、3つのディクテーション文法を作成<xref:System.Speech.Recognition.SpeechRecognitionEngine>し、新しいオブジェクトに追加して、新しいオブジェクトを返します。 最初の文法は、既定のディクテーションの文法です。 2番目の文法は、スペルディクテーションの文法です。 3番目の文法は、コンテキストフレーズを含む既定のディクテーションの文法です。 メソッドは、 <xref:System.Speech.Recognition.SpeechRecognitionEngine>オブジェクトに読み込まれた後に、コンテキストフレーズをディクテーションの文法に関連付けるために使用されます。 <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A>  
  
```csharp  
  
private SpeechRecognitionEngine LoadDictationGrammars()  
{  
  
  // Create a default dictation grammar.  
  DictationGrammar defaultDictationGrammar = new DictationGrammar();  
  defaultDictationGrammar.Name = "default dictation";  
  defaultDictationGrammar.Enabled = true;  
  
  // Create the spelling dictation grammar.  
  DictationGrammar spellingDictationGrammar =  
    new DictationGrammar("grammar:dictation#spelling");  
  spellingDictationGrammar.Name = "spelling dictation";  
  spellingDictationGrammar.Enabled = true;  
  
  // Create the question dictation grammar.  
  DictationGrammar customDictationGrammar =  
    new DictationGrammar("grammar:dictation");  
  customDictationGrammar.Name = "question dictation";  
  customDictationGrammar.Enabled = true;  
  
  // Create a SpeechRecognitionEngine object and add the grammars to it.  
  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  
  recoEngine.LoadGrammar(defaultDictationGrammar);  
  recoEngine.LoadGrammar(spellingDictationGrammar);  
  recoEngine.LoadGrammar(customDictationGrammar);  
  
  // Add a context to customDictationGrammar.  
  customDictationGrammar.SetDictationContext("How do you", null);  
  
  return recoEngine;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.DictationGrammar" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Windows Desktop Speech テクノロジによって提供される既定の口述文法に対する <see cref="T:System.Speech.Recognition.DictationGrammar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のディクテーションの文法では、句読点などの標準的なディクテーション方法をエミュレートします。 単語のスペルはサポートされていません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar (string topic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string topic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topic As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar(System::String ^ topic);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.DictationGrammar : string -&gt; System.Speech.Recognition.DictationGrammar" Usage="new System.Speech.Recognition.DictationGrammar topic" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topic" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topic">口述文法 (<c>grammar:dictation</c> か <c>grammar:dictation#spelling</c>) を指定する XML 対応 Universal Resource Identifier (URI)。</param>
        <summary>指定した口述文法を使用して、<see cref="T:System.Speech.Recognition.DictationGrammar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Speech プラットフォームでは、特殊な URI 構文を使用してカスタムのディクテーション文法を定義します。 値`grammar:dictation`は、既定のディクテーションの文法を示します。 値`grammar:dictation#spelling`は、スペルを示すディクテーションの文法を示します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictationContext">
      <MemberSignature Language="C#" Value="public void SetDictationContext (string precedingText, string subsequentText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictationContext(string precedingText, string subsequentText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDictationContext (precedingText As String, subsequentText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDictationContext(System::String ^ precedingText, System::String ^ subsequentText);" />
      <MemberSignature Language="F#" Value="member this.SetDictationContext : string * string -&gt; unit" Usage="dictationGrammar.SetDictationContext (precedingText, subsequentText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingText" Type="System.String" />
        <Parameter Name="subsequentText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="precedingText">ディクテーション コンテキストの開始を示すテキスト。</param>
        <param name="subsequentText">ディクテーション コンテキストの終わりを示すテキスト。</param>
        <summary><see cref="T:System.Speech.Recognition.SpeechRecognizer" /> または <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトによって読み込まれた口述文法に、コンテキストを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、ディクテーションの文法では、特定の単語や単語の順序を使用してオーディオ入力を識別および解釈することはありません。 ディクテーションの文法にコンテキストが追加されると、認識エンジンはと`precedingText` `subsequentText`を使用して、音声をディクテーションとして解釈するタイミングを識別します。  
  
> [!NOTE]
>  を使用<xref:System.Speech.Recognition.SpeechRecognizer> <xref:System.Speech.Recognition.SpeechRecognitionEngine> してコンテキストを追加する前に、またはオブジェクトによってディクテーションの文法を読み込む必要 <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> があります。  
  
 次の表は、認識エンジンが2つのパラメーターを使用して、ディクテーションの文法を使用するタイミングを決定する方法を示しています。  
  
|`precedingText`|`subsequentText`|説明|  
|---------------------|----------------------|-----------------|  
|`null` 以外|`null` 以外|認識エンジンは用語を使用して、候補となる語句をかっこで囲みます。|  
|`null`|`null` 以外|認識エンジンは、 `subsequentText`を使用してディクテーションを終了します。|  
|`null` 以外|`null`|認識エンジンは、 `precedingText`を使用してディクテーションを開始します。|  
|`null`|`null`|ディクテーションの文法を使用する場合、認識エンジンはコンテキストを使用しません。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
  </Members>
</Type>
