<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f52412e8d631d8da24af54bf1fab76a8bf4d7163" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52379779" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>認識される音声のアトミック単位を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 認識エンジンによって返されるすべての結果の構築は<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクト。  
  
 配列の<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクトはを通じて任意の認識操作に対してアクセス、<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト。  
  
 認識の確実性の尺度を提供するだけでなく (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>)、<xref:System.Speech.Recognition.RecognizedWordUnit>インスタンスを提供します。  
  
-   認識された単語の正規化と正確な (または構文) のテキスト表現。 詳細については、「<xref:System.Speech.Recognition.ReplacementText>「<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>および「<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>」を参照してください。  
  
-   発音については、国際音声記号 (IPA) や汎用音素セット (UPS) など、サポートされている発音記号からの文字を使用します。 詳細については、「<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>」を参照してください。  
  
-   印刷用の書式設定します。 詳細については、次を参照してください。、<xref:System.Speech.Recognition.DisplayAttributes>クラスとその<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>プロパティ。  
  
   
  
## Examples  
 次の例では、ユーティリティ ルーチン (`stringFromWordArray`) 文字列を生成します。 文字列には、構文の出力が含まれます (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、テキストの正規化 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)、または国際発音記号からの音声の文字 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 使用して文字列が書式設定<xref:System.Speech.Recognition.DisplayAttributes>から取得したオブジェクト、<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>からプロパティを<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>の<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクト。 <xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクトがから取得した、<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">認識された単語の正規化テキスト。  
  
この値には、<see langword="null" />、""、または <see cref="F:System.String.Empty" /> を指定できます。</param>
        <param name="confidence">用語認識の確実性を示す 0.0 ～ 1.0 の <see langword="float" /> 値。</param>
        <param name="pronunciation">認識された単語の音声スペル。  
  
この値には、<see langword="null" />、""、または <see cref="F:System.String.Empty" /> を指定できます。</param>
        <param name="lexicalForm">認識された単語の正規化されていないテキスト。  
  
この引数は必須で、<see langword="null" />、""、または <see cref="F:System.String.Empty" /> にはできません。</param>
        <param name="displayAttributes">認識されたテキストを表示するために、空白の使用を定義します。</param>
        <param name="audioPosition">オーディオ入力ストリーム内の認識された単語の場所。  
  
この値は、<see cref="F:System.TimeSpan.Zero" /> の場合もあります。</param>
        <param name="audioDuration">認識された単語に対応するオーディオ入力の長さ。  
  
この値は、<see cref="F:System.TimeSpan.Zero" /> の場合もあります。</param>
        <summary><see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`text`または`pronunciation`は`null`、""、または<xref:System.String.Empty>と<xref:System.Speech.Recognition.RecognizedWordUnit>される認識エンジンで認識操作では、適切な値に出力が生成されます<xref:System.Speech.Recognition.RecognizedWordUnit>インスタンス。  
  
 構築を直接<xref:System.Speech.Recognition.RecognizedWordUnit>認識を使用して操作をエミュレートする場合にのみ、インスタンスが使用される通常の<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>のメソッド、<xref:System.Speech.Recognition.SpeechRecognitionEngine>クラスおよび<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>または<xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>のメソッド<xref:System.Speech.Recognition.SpeechRecognizer>クラス。  
  
 実際のアプリケーションでは、直接構築しないで<xref:System.Speech.Recognition.RecognizedWordUnit>、を通じて取得ではなく、<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト。  
  
   
  
## Examples  
 次の例では、エミュレーション、新しい単語を入力から生成されると、エミュレーターに渡される、ことを確認しする場所の不自然なテストです。  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363">国際音声記号アルファベット</related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認識されたテキストが特定の入力と一致する確率を表す値 (認識エンジンによって割り当てられます) を取得します。</summary>
        <value>単語の正しい認識の確実性の相対値。 値は 0.0 から 1.0 までであり、低い数字ほど信頼度が低くなります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 信頼スコアは、絶対に単語が正しく認識されること可能性を示していません。 代わりに、信頼スコアは、特定の入力の複数の代替認識の相対的な精度を比較するためのメカニズムを提供します。 これには、最も正確な認識結果を返すことが容易になります。 たとえば、0.8 の信頼度スコアに認識された単語がある場合はありません、word が 80% の確率は、入力の適切な一致の。  単語が可能性が高い場合、入力を信頼度を持つその他の結果よりも適切な一致スコア 0.8 よりも小さいことを意味します。  
  
 独自の信頼度スコアは、同じ認識操作か、同じ入力の認識を前と比較する別の結果がない限り意味がありません。  
  
 によって返される値<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>各認識エンジンが、相対化され、一意。 2 つの異なる認識エンジンの間の信頼度の値の比較方法の定義がない方法も<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>個々 の<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクトの定義、<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>の<xref:System.Speech.Recognition.RecognizedPhrase>します。  
  
 音声認識エンジンには、バック グラウンド干渉、inarticulate 読み上げ、または予期しない単語または単語シーケンスなど、さまざまな理由、音声入力を低信頼度スコアを割り当てる可能性があります。 アプリケーションが使用されている場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンス、入力の承諾または拒否のいずれかでどの音声では、信頼レベルを変更することができます、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>メソッド。 信頼度のしきい値によって管理される共有認識エンジンを<xref:System.Speech.Recognition.SpeechRecognizer>がユーザー プロファイルと関連付けられ、Windows レジストリに格納されています。 アプリケーションでは、共有認識エンジンのプロパティのレジストリに変更を記述しないでください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> インスタンスからテキスト出力を作成するために使用される書式設定情報を取得します。</summary>
        <value><see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> オブジェクトのコンテンツの表示に空白を使用することを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.DisplayAttributes>によって返されるオブジェクト、<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>プロパティが存在する場合、特定のワードで使用する先頭および末尾のスペースを指定します。  
  
 この書式設定情報を使用する方法の詳細については、次を参照してください。、<xref:System.Speech.Recognition.DisplayAttributes>列挙体。  
  
   
  
## Examples  
 次の例では、ユーティリティ ルーチン (`stringFromWordArray`) の 3 つの方法で書式指定文字列を生成する: 字句 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、正規化された (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)、または発音 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 テキスト出力がから取得した、<xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>プロパティを<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>の<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクトから取得される、<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認識された単語の正規化されていないテキストを取得します。</summary>
        <value>正規化を使用せず、認識された語のテキストを含む <see cref="T:System.String" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、値によって返される<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>と<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>は同じです。 ただし、認識エンジンよりユーザー フレンドリなまたは普通のテキスト表現のオーディオ入力を返す音声正規化を使用する可能性があります。  
  
 音声正規化は、特殊な構成体または書面での音声を表現するシンボルの使用です。 たとえば、正規化では、「$1.16」出力テキストを「ドルと 16 セント」は、話された単語を置き換えることができます。  
  
   
  
## Examples  
 次の例では、3 つの形式のいずれかでテキストを生成するユーティリティ ルーチン: 構文 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、正規化された (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)、および音声 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 テキスト出力がから取得した、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>の<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクトから取得される、<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認識された単語の音声スペルを取得します。</summary>
        <value>国際音声記号 (IPA) や汎用音素セット (UPS) など、サポートされる発音記号を含む文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内容<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>、音声認識エンジンのアンロードのいずれかに音声入力に一致するために使用される発音を示す<xref:System.Speech.Recognition.Grammar>オブジェクト。 発音は、読み込まれたで認識文法をからリンクされている辞書文書に音声認識エンジンの内部辞書で定義することがあります<xref:System.Speech.Recognition.Grammar>オブジェクト、またはインラインで、読み込まれたで認識文法を<xref:System.Speech.Recognition.Grammar>オブジェクト。 音声認識エンジンには、辞書または文法が音声認識エンジン現在にアクセス権のある発音が定義されていない特殊な単語の発音を作成もできます。  
  
 Courier New などの多くの Windows ベースの Unicode フォントは、IPA 文字列の表示をサポートします。 詳細については、次を参照してください。 [International 発音](https://go.microsoft.com/fwlink/?LinkId=58363)します。  
  
   
  
## Examples  
 次の例では、3 つの可能な形式のいずれかの文字列を生成するユーティリティ ルーチン: 構文 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、正規化された (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)、および音声 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 テキスト出力がから取得した、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>の<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクトから取得される、<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=58363">国際音声記号アルファベット</related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認識された単語の正規化されたテキストを取得します。</summary>
        <value>指定した入力語句の正規化されたテキスト出力を含む文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ほとんどの場合、値によって返される<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>と<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>と同じになります。 ただし、認識エンジンよりユーザー フレンドリなまたは普通のテキスト表現のオーディオ入力を返す音声正規化を使用する可能性があります。  
  
 音声正規化は、特殊な構成体または書面での音声を表現するシンボルの使用です。 たとえば、正規化では、「$1.16」出力テキストを「ドルと 16 セント」は、話された単語を置き換えることができます。  
  
   
  
## Examples  
 次の例では、3 つの形式のいずれかで文字列を生成するユーティリティ ルーチン: 構文 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>)、正規化された (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>)、および音声 (を使用して<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>)。 テキスト出力がから取得した、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>の<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクトから取得される、<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>プロパティを<xref:System.Speech.Recognition.RecognizedPhrase>オブジェクト。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>