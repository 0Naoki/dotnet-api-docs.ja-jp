<Type Name="LoadGrammarCompletedEventArgs" FullName="System.Speech.Recognition.LoadGrammarCompletedEventArgs">
  <TypeSignature Language="C#" Value="public class LoadGrammarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LoadGrammarCompletedEventArgs extends System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LoadGrammarCompletedEventArgs&#xA;Inherits AsyncCompletedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LoadGrammarCompletedEventArgs : System::ComponentModel::AsyncCompletedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.AsyncCompletedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="86130-101"><see cref="T:System.Speech.Recognition.SpeechRecognizer" /> オブジェクトまたは <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトの <see langword="LoadGrammarCompleted" /> イベントのデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="86130-101">Provides data for the <see langword="LoadGrammarCompleted" /> event of a <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> or <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86130-102">インスタンス`LoadGrammarCompletedEventArgs`場合は、作成、<xref:System.Speech.Recognition.SpeechRecognitionEngine>オブジェクト、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted?displayProperty=nameWithType>または<xref:System.Speech.Recognition.SpeechRecognizer>オブジェクト、<xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="86130-102">An instance of `LoadGrammarCompletedEventArgs` is created when the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object raises its <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted?displayProperty=nameWithType> or the <xref:System.Speech.Recognition.SpeechRecognizer> object raises its <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="86130-103">イベントが発生したときにへの呼び出し、`LoadGrammarAsync`メソッドが完了します。</span><span class="sxs-lookup"><span data-stu-id="86130-103">The events are raised when calls to the `LoadGrammarAsync` methods complete.</span></span>  
  
 <span data-ttu-id="86130-104">に関する情報を取得する、<xref:System.Speech.Recognition.Grammar>既に読み込まれているオブジェクトのアクセス、<xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A>イベントのハンドラーのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="86130-104">To obtain information about the <xref:System.Speech.Recognition.Grammar> object that was loaded, access the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property in the handler for the event.</span></span>  
  
 <span data-ttu-id="86130-105">認識エンジンが、操作中に例外が発生した場合、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>プロパティが例外に設定され、 <xref:System.Speech.Recognition.Grammar.Loaded%2A> 、関連するプロパティ<xref:System.Speech.Recognition.Grammar>可能性があります`false`です。</span><span class="sxs-lookup"><span data-stu-id="86130-105">If the recognizer encounters an exception during the operation, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is set to the exception and the <xref:System.Speech.Recognition.Grammar.Loaded%2A> property of the associated <xref:System.Speech.Recognition.Grammar> may be `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86130-106">次の例では、共有音声認識を作成し、特定の単語を認識するため、空きディクテーションを受け入れるための文法の 2 種類が作成されます。</span><span class="sxs-lookup"><span data-stu-id="86130-106">The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="86130-107">例は、認識エンジンに作成されたすべての文法を非同期的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="86130-107">The example asynchronously loads all the created grammars to the recognizer.</span></span>  <span data-ttu-id="86130-108">認識エンジンのハンドラー<xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted>と<xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>イベントが認識し、どの文法を使用して、認識の実行の結果を報告します。</span><span class="sxs-lookup"><span data-stu-id="86130-108">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events report the results of recognition and which grammar was used to perform the recognition.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Add a handler for the StateChanged event.  
        recognizer.StateChanged +=  
          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
        // Create the "yesno" grammar and build it into a Grammar object.  
        Choices yesChoices = new Choices(new string[] { "yes", "yup", "yah}" });  
        SemanticResultValue yesValue =  
            new SemanticResultValue(yesChoices, (bool)true);  
        Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
        SemanticResultValue noValue =  
            new SemanticResultValue(noChoices, (bool)false);  
        SemanticResultKey yesNoKey =  
            new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
        Grammar yesnoGrammar = new Grammar(yesNoKey);  
        yesnoGrammar.Name = "yesNo";  
  
        // Create the "done" grammar within the constructor of a Grammar object.  
        Grammar doneGrammar =  
        new Grammar(new GrammarBuilder(new Choices(new string[] { "done", "exit", "quit", "stop" })));  
        doneGrammar.Name = "Done";  
  
        // Create a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation";  
  
        // Load grammars to the recognizer.  
        recognizer.LoadGrammarAsync(yesnoGrammar);  
        recognizer.LoadGrammarAsync(doneGrammar);  
        recognizer.LoadGrammarAsync(dictation);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Put the shared speech recognizer into "listening" mode.   
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
    <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
    <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
    <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
  </Docs>
  <Members>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86130-109">読み込みが完了した <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="86130-109">The <see cref="T:System.Speech.Recognition.Grammar" /> object that has completed loading.</span></span></summary>
        <value><span data-ttu-id="86130-110">認識エンジンによって読み込まれた <see cref="T:System.Speech.Recognition.Grammar" />。</span><span class="sxs-lookup"><span data-stu-id="86130-110">The <see cref="T:System.Speech.Recognition.Grammar" /> that was loaded by the recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86130-111">認識エンジンが、操作中に例外が発生した場合、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>プロパティが例外に設定され、 <xref:System.Speech.Recognition.Grammar.Loaded%2A> 、関連するプロパティ<xref:System.Speech.Recognition.Grammar>可能性があります`false`です。</span><span class="sxs-lookup"><span data-stu-id="86130-111">If the recognizer encounters an exception during the operation, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is set to the exception and the <xref:System.Speech.Recognition.Grammar.Loaded%2A> property of the associated <xref:System.Speech.Recognition.Grammar> may be `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
  </Members>
</Type>