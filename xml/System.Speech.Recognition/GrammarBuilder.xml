<Type Name="GrammarBuilder" FullName="System.Speech.Recognition.GrammarBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="70f79d60f9d4d676b5deb4b136ef506f6566bd49" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37611367" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GrammarBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GrammarBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.GrammarBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class GrammarBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class GrammarBuilder" />
  <TypeSignature Language="F#" Value="type GrammarBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d7f41-101">音声認識文法の制約をプログラムでビルドするための機構を提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d7f41-101">Provides a mechanism for programmatically building the constraints for a speech recognition grammar.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-102">音声認識文法がによって定義された XML 形式で作成したよく、 [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-102">Speech recognition grammars are commonly authored in the XML format defined by the [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761).</span></span> <span data-ttu-id="d7f41-103">使い慣れた SRGS 文法をプログラムで生成する指定した場合は、使用できます、<xref:System.Speech.Recognition.SrgsGrammar>名前空間、そのメンバーは、要素と SRGS によって定義された属性に密接に対応します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-103">If you are familiar with SRGS but want to generate the grammars programmatically, you can use the <xref:System.Speech.Recognition.SrgsGrammar> namespace, whose members correspond closely to the elements and attributes defined by SRGS.</span></span> <span data-ttu-id="d7f41-104">SRGS に慣れていないまたは軽量でプログラムによるアプローチで使用することができます効率的に文法を作成する場合は、多くの一般的なシナリオを実行します。使用することができます、<xref:System.Speech.Recognition.GrammarBuilder>と<xref:System.Speech.Recognition.Choices>クラス。</span><span class="sxs-lookup"><span data-stu-id="d7f41-104">If you are unfamiliar with SRGS, or you want a lightweight, programmatic approach to authoring grammars with which you can efficiently accomplish many common scenarios; you can use the <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> classes.</span></span>  
  
 <span data-ttu-id="d7f41-105">使用<xref:System.Speech.Recognition.GrammarBuilder>階層ツリーを構築するオブジェクトから成る<xref:System.Speech.Recognition.Choices>代替語句、プリアンブルおよび各ノードで後 amble 語句が混在してと意味を伝えるセマンティクス値とシードを含むオブジェクトをアプリケーション。</span><span class="sxs-lookup"><span data-stu-id="d7f41-105">Use <xref:System.Speech.Recognition.GrammarBuilder> objects to build a hierarchical tree composed of <xref:System.Speech.Recognition.Choices> objects that contain alternate phrases, interspersed with preamble and post-amble phrases at each node, and seeded with semantic values that convey  meaning back to the application.</span></span>  
  
 <span data-ttu-id="d7f41-106">使用する、<xref:System.Speech.Recognition.GrammarBuilder>を作成する、<xref:System.Speech.Recognition.Grammar>オブジェクトを次の手順を使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-106">To use a <xref:System.Speech.Recognition.GrammarBuilder> to create a <xref:System.Speech.Recognition.Grammar> object, use the following steps.</span></span>  
  
1.  <span data-ttu-id="d7f41-107"><xref:System.Speech.Recognition.GrammarBuilder> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-107">Create a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
2.  <span data-ttu-id="d7f41-108">制約を追加、<xref:System.Speech.Recognition.GrammarBuilder>など<xref:System.String>オブジェクト、 <xref:System.Speech.Recognition.Choices>、 <xref:System.Speech.Recognition.SemanticResultKey>、 <xref:System.Speech.Recognition.SemanticResultValue>、 <xref:System.Speech.Recognition.DictationGrammar>、およびその他の<xref:System.Speech.Recognition.GrammarBuilder>文法については、制約を定義するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-108">Append constraints to the <xref:System.Speech.Recognition.GrammarBuilder>, such as <xref:System.String> objects, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, and other <xref:System.Speech.Recognition.GrammarBuilder> objects that define the constraints for the grammar.</span></span>  
  
3.  <span data-ttu-id="d7f41-109">いずれかを使用して、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>を作成するコンス トラクター、<xref:System.Speech.Recognition.Grammar>オブジェクトから完成した<xref:System.Speech.Recognition.GrammarBuilder>文法。</span><span class="sxs-lookup"><span data-stu-id="d7f41-109">Use one of the <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructors to create a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder> grammar.</span></span>  
  
 <span data-ttu-id="d7f41-110">オーサリングで<xref:System.Speech.Recognition.GrammarBuilder>リスト、またはリストの一覧などを含む 1 つの規則の文法に最適です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-110">Authoring with <xref:System.Speech.Recognition.GrammarBuilder> is best suited to grammars that have a single rule containing lists, or perhaps lists of lists.</span></span> <span data-ttu-id="d7f41-111">プログラムで、複数のルールがあるか内部ルール参照を作成する必要があるの文法をビルドするには、クラスを使用して、<xref:System.Speech.Recognition.SrgsGrammar>名前空間。</span><span class="sxs-lookup"><span data-stu-id="d7f41-111">To programmatically build grammars that have multiple rules, or that need to make internal rule references, use the classes of the <xref:System.Speech.Recognition.SrgsGrammar> namespace.</span></span>  
  
 <span data-ttu-id="d7f41-112">インスタンス<xref:System.Speech.Recognition.GrammarBuilder>または結合することでその他のクラスから暗黙的な変換によっても取得できます、<xref:System.Speech.Recognition.GrammarBuilder>文法の制約を含む 2 番目のオブジェクトで.</span><span class="sxs-lookup"><span data-stu-id="d7f41-112">Instances of <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained by implicit conversions from certain other classes or by combining a  <xref:System.Speech.Recognition.GrammarBuilder> with a second object that contains constraints for a grammar..</span></span> <span data-ttu-id="d7f41-113">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>と<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子および<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-113">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators and the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods.</span></span>  
  
 <span data-ttu-id="d7f41-114">既存の規則を追加する<xref:System.Speech.Recognition.GrammarBuilder>を使用して、 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>、および<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-114">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-115">同じキー名の重複するセマンティック要素または繰り返し同じ意味を持つ要素の値を変更する複数のセマンティック要素が含まれている音声認識文法を使用する場合、音声認識エンジンは例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-115">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d7f41-116">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-116">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d7f41-117">、デバッグに役立てるため、<xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>プロパティの現在のステータスを返します、<xref:System.Speech.Recognition.GrammarBuilder>を文字列として。</span><span class="sxs-lookup"><span data-stu-id="d7f41-117">To help with debugging, the <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> property returns the current status of the <xref:System.Speech.Recognition.GrammarBuilder> as a string.</span></span>  
  
 <span data-ttu-id="d7f41-118">ビルドと音声認識文法の使用に関する詳細については、次を参照してください。[音声認識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)と[GrammarBuilder 文法の作成](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-118">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-119">次の例では<xref:System.Speech.Recognition.GrammarBuilder>と<xref:System.Speech.Recognition.Choices>オブジェクト、2 つのフレーズのいずれかを認識できる文法を構築する"ことをバック グラウンド*colorChoice*"または"に背景を設定*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d7f41-119">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d7f41-120">この例では、<xref:System.Speech.Recognition.Choices>オブジェクトに使用できる値のリストを作成する*colorChoice*の配列から<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-120">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="d7f41-121">A<xref:System.Speech.Recognition.Choices>オブジェクトに似ていますが、 `one-of` SRGS 仕様内の要素がナレーションの認識できる代替のフレーズのセットが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-121">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="d7f41-122">また、例では、<xref:System.Speech.Recognition.Choices>を 2 つの配列をグループ化オブジェクト<xref:System.Speech.Recognition.GrammarBuilder>に結果の文法を認識できる別のフレーズのペア オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-122">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="d7f41-123">代替単語や語句は、ほとんどの文法のコンポーネントと<xref:System.Speech.Recognition.Choices>文法の構築時に、オブジェクトはこの機能を提供します。<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-123">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d7f41-124">例では、最後に作成、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.GrammarBuilder>から構築された、<xref:System.Speech.Recognition.Choices>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-124">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Choices" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-125">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-125">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-126">その他のクラスから暗黙的な変換によって、または結合することで、このクラスのインスタンスを取得することも、<xref:System.Speech.Recognition.GrammarBuilder>新しいから 2 番目のオブジェクトを使用してオブジェクト<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-126">Instances of this class can also be obtained by implicit conversions from other classes or by combining a <xref:System.Speech.Recognition.GrammarBuilder> object with a second object to from a new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d7f41-127">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>と<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-127">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods.</span></span>  
  
 <span data-ttu-id="d7f41-128">既存の制約を追加する<xref:System.Speech.Recognition.GrammarBuilder>を使用して、 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>、および<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>メソッド、および<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-128">To add constraints to an existing <xref:System.Speech.Recognition.GrammarBuilder>, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-129">同じキー名の重複するセマンティック要素または繰り返し同じ意味を持つ要素の値を変更する複数のセマンティック要素が含まれている音声認識文法を使用する場合、音声認識エンジンは例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-129">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d7f41-130">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-130">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d7f41-131">ビルドと音声認識文法の使用に関する詳細については、次を参照してください。[音声認識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)と[GrammarBuilder 文法の作成](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-131">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-132">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しい空のインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-132">Initializes a new, empty instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-133">既存の規則を追加する<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトを使用して、 <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>、 <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>、および<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>メソッド、および<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-133">To add rules to an existing <xref:System.Speech.Recognition.GrammarBuilder> object, use the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, and <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> methods, and the <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-134">同じキー名の重複するセマンティック要素または繰り返し同じ意味を持つ要素の値を変更する複数のセマンティック要素が含まれている音声認識文法を使用する場合、音声認識エンジンは例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-134">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d7f41-135">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-135">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-136">次の例では<xref:System.Speech.Recognition.GrammarBuilder>と<xref:System.Speech.Recognition.Choices>オブジェクト、2 つのフレーズのいずれかを認識できる文法を構築する"ことをバック グラウンド*colorChoice*"または"に背景を設定*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d7f41-136">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d7f41-137">この例では、<xref:System.Speech.Recognition.Choices>オブジェクトに使用できる値のリストを作成する*colorChoice*の配列から<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-137">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="d7f41-138">A<xref:System.Speech.Recognition.Choices>オブジェクトに似ていますが、 `one-of` SRGS 仕様内の要素が話されるときにいずれかを認識することができます、代替のフレーズのセットが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-138">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken.</span></span> <span data-ttu-id="d7f41-139">また、例では、<xref:System.Speech.Recognition.Choices>を 2 つの配列をグループ化オブジェクト<xref:System.Speech.Recognition.GrammarBuilder>に結果の文法を認識できる別のフレーズのペア オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-139">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="d7f41-140">代替単語や語句は、ほとんどの文法のコンポーネントと<xref:System.Speech.Recognition.Choices>文法の構築時に、オブジェクトはこの機能を提供します。<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-140">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d7f41-141">例では、最後に作成、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.GrammarBuilder>から構築された、<xref:System.Speech.Recognition.Choices>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-141">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  GrammarBuilder bothPhrases = new GrammarBuilder();  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  bothPhrases.Append(bothChoices);  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices">
          <span data-ttu-id="d7f41-142">代替のセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-142">The set of alternatives.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-143">代替のセットから <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-143">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a set of alternatives.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-144">代替手段を含む音声認識文法のビルドの詳細については、次を参照してください。 [GrammarBuilder 文法を作成するのを使用して選択肢](http://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-144">For more information about building a speech recognition grammar that contains alternatives, see [Using Choices to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-145">次の例では<xref:System.Speech.Recognition.GrammarBuilder>と<xref:System.Speech.Recognition.Choices>オブジェクト、2 つのフレーズのいずれかを認識できる文法を構築する"ことをバック グラウンド*colorChoice*"または"に背景を設定*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d7f41-145">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d7f41-146">この例では、<xref:System.Speech.Recognition.Choices>オブジェクトに使用できる値のリストを作成する*colorChoice*の配列から<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-146">The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects.</span></span> <span data-ttu-id="d7f41-147">A<xref:System.Speech.Recognition.Choices>オブジェクトに似ていますが、 `one-of` SRGS 仕様内の要素がナレーションの認識できる代替のフレーズのセットが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-147">A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken.</span></span> <span data-ttu-id="d7f41-148">また、例では、<xref:System.Speech.Recognition.Choices>を 2 つの配列をグループ化オブジェクト<xref:System.Speech.Recognition.GrammarBuilder>に結果の文法を認識できる別のフレーズのペア オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-148">The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize.</span></span> <span data-ttu-id="d7f41-149">代替単語や語句は、ほとんどの文法のコンポーネントと<xref:System.Speech.Recognition.Choices>文法の構築時に、オブジェクトはこの機能を提供します。<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-149">Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d7f41-150">例では、最後に作成、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.GrammarBuilder>から構築された、<xref:System.Speech.Recognition.Choices>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-150">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.SemanticResultKey -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="d7f41-151">セマンティクス キー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-151">The semantic key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-152">セマンティクス キーから <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-152">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-153">作成するときに、<xref:System.Speech.Recognition.GrammarBuilder>インスタンスから、<xref:System.Speech.Recognition.SemanticResultValue>認識結果で返される文法にセマンティック情報を追加するオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="d7f41-153">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="d7f41-154">認識結果を使用してセマンティック情報にアクセスすることができます、<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>プロパティの<xref:System.Speech.Recognition.RecognizedPhrase>、ハンドラーは用意されている、`SpeechRecognized`イベント。</span><span class="sxs-lookup"><span data-stu-id="d7f41-154">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="d7f41-155">場合、<xref:System.Speech.Recognition.GrammarBuilder>定義、 <xref:System.Speech.Recognition.SemanticResultKey>、これは、キーに関連付けられている認識結果のセマンティクス情報の取得に使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-155">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="d7f41-156">例をご覧ください<xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>も参照してくださいと<xref:System.Speech.Recognition.SemanticResultValue>と<xref:System.Speech.Recognition.SemanticResultKey>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-156">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-157">構築する際に<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンス、または同じキー名が繰り返しを変更する複数のセマンティック要素に重複するセマンティック要素を作成しないようにするを確認、 <xref:System.Speech.Recognition.SemanticValue.Value%2A>プロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-157">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-158">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-158">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-159">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-159">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-160">次の例では、2 つのフレーズを認識できる音声認識文法を作成する"ことをバック グラウンド*colorChoice*"と"に背景を設定*colorChoice*"ここで、 *colorChoice*色のセットが選択されています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-160">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="d7f41-161">文法は、いくつかの色の名前のいずれかを話すユーザーや、アプリケーションに認識されている色の名前に関するセマンティック情報を返します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-161">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="d7f41-162">例では、1 つを使用して<xref:System.Speech.Recognition.SemanticResultKey>で取得できます、<xref:System.Speech.Recognition.SemanticValue>読み上げ、ユーザーが色で関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-162">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="d7f41-163">例では、入力には、語句が含まれている場合の「赤にセット バック グラウンド」認識結果に"#ff0000"のハンドラーを使用して取得できますのセマンティクスの値が含まれています、`SpeechRecognized`イベント。</span><span class="sxs-lookup"><span data-stu-id="d7f41-163">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="d7f41-164">この例では<xref:System.String>、 <xref:System.Speech.Recognition.Choices>、 <xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト、最後に含まれるすべての制約を作成する<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト、`bothPhrases`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-164">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="d7f41-165">例の最後に、構築、<xref:System.Speech.Recognition.Grammar>オブジェクトから完成した<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-165">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices object for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the Grammar object from the GrammarBuilder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.SemanticResultValue -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d7f41-166">セマンティクス値または名前と値のペア。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-166">The semantic value or name/value pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-167">セマンティクス値から <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-167">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a semantic value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-168">作成するときに、<xref:System.Speech.Recognition.GrammarBuilder>インスタンスから、<xref:System.Speech.Recognition.SemanticResultValue>認識結果で返される文法にセマンティック情報を追加するオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="d7f41-168">When you create a <xref:System.Speech.Recognition.GrammarBuilder> instance from a <xref:System.Speech.Recognition.SemanticResultValue> object, you add semantic information to the grammar that can be returned in the recognition result.</span></span> <span data-ttu-id="d7f41-169">認識結果を使用してセマンティック情報にアクセスすることができます、<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>プロパティの<xref:System.Speech.Recognition.RecognizedPhrase>、ハンドラーは用意されている、`SpeechRecognized`イベント。</span><span class="sxs-lookup"><span data-stu-id="d7f41-169">You can access the semantic information in the recognition result using the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property of <xref:System.Speech.Recognition.RecognizedPhrase>, which is available in the handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="d7f41-170">場合、<xref:System.Speech.Recognition.GrammarBuilder>定義、 <xref:System.Speech.Recognition.SemanticResultKey>、これは、キーに関連付けられている認識結果のセマンティクス情報の取得に使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-170">If the <xref:System.Speech.Recognition.GrammarBuilder> defines a <xref:System.Speech.Recognition.SemanticResultKey>, this can be used to retrieve the semantic information in a recognition result that is associated with the key.</span></span> <span data-ttu-id="d7f41-171">例をご覧ください<xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>も参照してくださいと<xref:System.Speech.Recognition.SemanticResultValue>と<xref:System.Speech.Recognition.SemanticResultKey>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-171">See the example for <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, and also see <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-172">構築する際に<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンス、または同じキー名が繰り返しを変更する複数のセマンティック要素に重複するセマンティック要素を作成しないようにするを確認、 <xref:System.Speech.Recognition.SemanticValue.Value%2A>プロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-172">When you construct <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-173">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-173">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-174">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-174">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-175">次の例では、2 つのフレーズを認識できる音声認識文法を作成する"ことをバック グラウンド*colorChoice*"と"に背景を設定*colorChoice*"ここで、 *colorChoice*色のセットが選択されています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-175">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *colorChoice*" and "Set background to *colorChoice*", where *colorChoice* is selected from a set of colors.</span></span> <span data-ttu-id="d7f41-176">文法は、いくつかの色の名前のいずれかを話すユーザーや、アプリケーションに認識されている色の名前に関するセマンティック情報を返します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-176">The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.</span></span>  
  
 <span data-ttu-id="d7f41-177">例では、1 つを使用して<xref:System.Speech.Recognition.SemanticResultKey>で取得できます、<xref:System.Speech.Recognition.SemanticValue>読み上げ、ユーザーが色で関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-177">The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user.</span></span> <span data-ttu-id="d7f41-178">例では、入力には、語句が含まれている場合の「赤にセット バック グラウンド」認識結果に"#ff0000"のハンドラーを使用して取得できますのセマンティクスの値が含まれています、`SpeechRecognized`イベント。</span><span class="sxs-lookup"><span data-stu-id="d7f41-178">For example, if the input contains the phrase, "Set background to red", the recognition result contains the semantic value of "#FF0000", which you can retrieve using a handler for the `SpeechRecognized` event.</span></span>  
  
 <span data-ttu-id="d7f41-179">この例では<xref:System.String>、 <xref:System.Speech.Recognition.Choices>、 <xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.SemanticResultValue>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト、最後に含まれるすべての制約を作成する<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト、`bothPhrases`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-179">The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`.</span></span> <span data-ttu-id="d7f41-180">例の最後に、構築、<xref:System.Speech.Recognition.Grammar>オブジェクトから完成した<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-180">Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the grammar from the grammar builder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder phrase" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-181">言葉のシーケンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-181">The sequence of words.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-182">言葉のシーケンスから <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-182">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a sequence of words.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-183">語句は、音声認識文法を認識できる正確な読み上げられた句を表します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-183">The phrase represents an exact spoken phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="d7f41-184">文字列を含む音声認識文法のビルドの詳細については、次を参照してください。 [GrammarBuilder 文法を作成するのを使用して文字列](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-184">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-185">次の例では<xref:System.Speech.Recognition.GrammarBuilder>と<xref:System.Speech.Recognition.Choices>オブジェクト、2 つのフレーズのいずれかを認識できる文法を構築する"ことをバック グラウンド*colorChoice*"または"に背景を設定*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d7f41-185">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d7f41-186">使用できる値の一覧を作成した後*colorChoice*を使用して、<xref:System.Speech.Recognition.Choices>オブジェクトの例では、2 つを初期化します<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト、`makePhrase`と`setPhrase`、引数として文字列を使用して。</span><span class="sxs-lookup"><span data-stu-id="d7f41-186">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.</span></span>  
  
 <span data-ttu-id="d7f41-187">例では、最後に作成、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.Choices>オブジェクトにキャスト、<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-187">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string * System.Speech.Recognition.SubsetMatchingMode -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (phrase, subsetMatchingCriteria)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-188">言葉のシーケンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-188">The sequence of words.</span>
          </span>
        </param>
        <param name="subsetMatchingCriteria">
          <span data-ttu-id="d7f41-189">句を認識するために音声認識文法が使用する一致モード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-189">The matching mode the speech recognition grammar uses to recognize the phrase.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-190">言葉のシーケンスのサブセットについて、<see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-190">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class for a subset of a sequence of words.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-191">`phrase`パラメーターは、音声認識文法を認識できる語句を表します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-191">The `phrase` parameter represents the phrase that the speech recognition grammar can recognize.</span></span> <span data-ttu-id="d7f41-192">`subsetMatchingMode`パラメーターは、全フレーズの認識を実現するために読み上げるフレーズのサブセットを指定します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-192">The `subsetMatchingMode` parameter specifies a subset of the phrase that can be spoken to achieve successful recognition of the entire phrase.</span></span> <span data-ttu-id="d7f41-193">ユーザー項目の一致するように名前全体を読み上げる必要とせずに長い名前を持つエントリの一覧で、文法を作成するのにには、これを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-193">You can use this to create a grammar with a list of entries that have long names, without requiring users to speak an entire name to match an item.</span></span>  
  
 <span data-ttu-id="d7f41-194">一致のモードの詳細については、次を参照してください。<xref:System.Speech.Recognition.SubsetMatchingMode>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-194">For more information about the matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode>.</span></span> <span data-ttu-id="d7f41-195">文字列を含む音声認識文法のビルドの詳細については、次を参照してください。 [GrammarBuilder 文法を作成するのを使用して文字列](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-195">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-196">次の例は、それぞれの音声認識文法を作成<xref:System.Speech.Recognition.SubsetMatchingMode>値と一致するモードの文法の選択に関する文法。</span><span class="sxs-lookup"><span data-stu-id="d7f41-196">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars.</span></span> <span data-ttu-id="d7f41-197">場合の値`phrase`は"1 つ 2 つ 3 つ 4 つ 5 6 7"、サブシーケンス文法は、入力を認識し、"2 つ 3 つ 4 つ"、入力ではありませんが、"1 つ次の 3 つ 5 つ"。</span><span class="sxs-lookup"><span data-stu-id="d7f41-197">If the value of `phrase` is "one two three four five six seven", then the Subsequence grammar recognizes the input "two three four", but not the input "one three five".</span></span> <span data-ttu-id="d7f41-198">ただし、注文のサブセットの文法は、これらの入力の両方を認識します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-198">However, the Ordered Subset grammar recognizes both of these inputs.</span></span>  
  
```csharp  
  
private static IEnumerable<Grammar>  
  CreateMatchingModeGrammars(string phrase)  
{  
  List<Grammar> grammars = new List<Grammar>(5);  
  
  Choices modeChoice = new Choices();  
  Type enumType = typeof(SubsetMatchingMode);  
  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  
  {  
    string modeName = Enum.GetName(enumType, mode);  
    modeName = BreakAtCaps(modeName);  
  
    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  
    Grammar modeGrammar = new Grammar(builder);  
    modeGrammar.Name = modeName;  
    modeGrammar.Enabled = false;  
    grammars.Add(modeGrammar);  
  
    modeChoice.Add(modeName);  
  }  
  
  Grammar choiceGrammar = new Grammar(modeChoice);  
  choiceGrammar.Name = "choice";  
  grammars.Add(choiceGrammar);  
  
  return grammars;  
}  
  
// Insert spaces preceding each uppercase letter in a string.   
private static string BreakAtCaps(string item)  
{  
  if (item == null || item.Length == 0)  
  {  
    return item;  
  }  
  
  StringBuilder sb = new StringBuilder(item[0].ToString());  
  for (int i = 1; i < item.Length; i++)  
  {  
    char c = item[i];  
    if (char.IsUpper(c))  
    {  
      sb.Append(" ");  
    }  
    sb.Append(c);  
  }  
  
  return sb.ToString();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SubsetMatchingMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : System.Speech.Recognition.GrammarBuilder * int * int -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (builder, minRepeat, maxRepeat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d7f41-199">繰り返される要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-199">The repeated element.</span>
          </span>
        </param>
        <param name="minRepeat">
          <span data-ttu-id="d7f41-200">
            <c>builder</c> によって定義される要素と一致する入力が、一致を構成するために発生する必要がある最小回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-200">The minimum number of times that input matching the element defined by <c>builder</c> must occur to constitute a match.</span>
          </span>
        </param>
        <param name="maxRepeat">
          <span data-ttu-id="d7f41-201">
            <c>builder</c> によって定義される要素と一致する入力が、一致を構成するために発生できる最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-201">The maximum number of times that input matching the element defined by <c>builder</c> can occur to constitute a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-202">繰り返し要素から <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-202">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from a repeated element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-203">場合の値`minRepeat`が 0 の場合、新しい<xref:System.Speech.Recognition.GrammarBuilder>省略可能な要素を表します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-203">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="d7f41-204">値`minRepeat`0 以上にする必要がありますの値以下`maxRepeat`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-204">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-205">繰り返しを指定すると<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンス、または同じキー名、を繰り返し変更できる複数のセマンティック要素に重複するセマンティック要素を作成しないようにするを確認<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-205">When you specify repeats for <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-206">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-206">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-207">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-207">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-208">次の例では、ピザを注文するための音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-208">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="d7f41-209">1 ~ 4 個のトッピング続く省略可能な opening の語句で始まるし、"pizza"word を閉じます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-209">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object from a string array of alternative toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.GrammarBuilder : string * int * int -&gt; System.Speech.Recognition.GrammarBuilder" Usage="new System.Speech.Recognition.GrammarBuilder (phrase, minRepeat, maxRepeat)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-210">繰り返される言葉のシーケンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-210">The repeated sequence of words.</span>
          </span>
        </param>
        <param name="minRepeat">
          <span data-ttu-id="d7f41-211">その句と一致する入力が、一致を構成するために発生する必要がある最小回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-211">The minimum number of times that input matching the phrase must occur to constitute a match.</span>
          </span>
        </param>
        <param name="maxRepeat">
          <span data-ttu-id="d7f41-212">その句と一致する入力が、一致を構成するために発生できる最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-212">The maximum number of times that input matching the phrase can occur to constitute a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-213">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> の単語のシーケンスから <see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、<see cref="T:System.String" /> を繰り返すことができる回数を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-213">Initializes a new instance of the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> class from the sequence of words in a <see cref="T:System.String" /> and specifies how many times the <see cref="T:System.String" /> can be repeated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-214">場合の値`minRepeat`が 0 の場合、新しい<xref:System.Speech.Recognition.GrammarBuilder>省略可能な要素を表します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-214">If the value of `minRepeat` is 0, then the new <xref:System.Speech.Recognition.GrammarBuilder> represents an optional element.</span></span>  
  
 <span data-ttu-id="d7f41-215">値`minRepeat`0 以上にする必要がありますの値以下`maxRepeat`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-215">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span> <span data-ttu-id="d7f41-216">文字列を含む音声認識文法のビルドの詳細については、次を参照してください。 [GrammarBuilder 文法を作成するのを使用して文字列](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-216">For more information about building a speech recognition grammar that contains strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-217">次の例では、ピザを注文するための音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-217">The following example creates a speech recognition grammar for ordering a pizza.</span></span> <span data-ttu-id="d7f41-218">1 ~ 4 個のトッピング続く省略可能な opening の語句で始まるし、"pizza"word を閉じます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-218">It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word "pizza".</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-219">2 つの文法要素のシーケンスを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-219">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-220">静的な<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>メソッドでは、多様性を作成するさまざまな種類を組み合わせることができ、柔軟性の文法でビルドされた別のメカニズムを提供<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-220">The static <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods provide another mechanism by which you can combine various types to create diversity and flexibility in grammars built with <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d7f41-221">これらのメソッドは、静的な対応<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>メソッドで定義されても、<xref:System.Speech.Recognition.GrammarBuilder>クラス。</span><span class="sxs-lookup"><span data-stu-id="d7f41-221">These methods correspond to the static <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> methods, which are also defined on the <xref:System.Speech.Recognition.GrammarBuilder> class.</span></span> <span data-ttu-id="d7f41-222">パラメーターの順序で、新しい要素の順序を決定する<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-222">The order of the parameters determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d7f41-223">A<xref:System.Speech.Recognition.GrammarBuilder>から取得することもできます<xref:System.Speech.Recognition.Choices>、 <xref:System.Speech.Recognition.SemanticResultKey>、 <xref:System.Speech.Recognition.SemanticResultValue>、および[文字列](http://go.microsoft.com/fwlink/?LinkId=159733)オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-223">A <xref:System.Speech.Recognition.GrammarBuilder> can also be obtained from <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and [String](http://go.microsoft.com/fwlink/?LinkId=159733) objects.</span></span> <span data-ttu-id="d7f41-224">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>と<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-224">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-225">同じキー名の重複するセマンティック要素または繰り返し同じ意味を持つ要素の値を変更する複数のセマンティック要素が含まれている音声認識文法を使用する場合、音声認識エンジンは例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-225">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d7f41-226">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-226">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d7f41-227">ビルドと音声認識文法の使用に関する詳細については、次を参照してください。[音声認識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)と[GrammarBuilder 文法の作成](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-227">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.Choices * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (choices, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices">
          <span data-ttu-id="d7f41-228">代替候補セットを表す、最初の grammer 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-228">The first grammar element, which represents a set of alternatives.</span>
          </span>
        </param>
        <param name="builder">
          <span data-ttu-id="d7f41-229">2 番目の grammer 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-229">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-230">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトが後続している <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを含んでいる、新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-230">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-231">
            <paramref name="builder" /> 要素が後続している <paramref name="choices" /> 要素のシーケンスの<see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-231">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> element followed by the <paramref name="builder" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-232"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスから暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-232"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-233">このメソッドの上に示したオブジェクトを受け入れる、`builder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-233">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="d7f41-234">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>と<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-234">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-235">結合すると<xref:System.Speech.Recognition.Choices>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンス、または同じキー名が繰り返しを変更する複数のセマンティック要素に重複するセマンティック要素を作成しないようにするを確認します<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-235">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-236">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-236">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-237">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。 [GrammarBuilder 文法に追加のセマンティクス](https://msdn.microsoft.com/library/hh361581.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-237">For more information about building a speech recognition grammar that contains semantic information, see [Add Semantics to a GrammarBuilder Grammar](https://msdn.microsoft.com/library/hh361581.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder, choices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d7f41-238">最初の文法要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-238">The first grammar element.</span>
          </span>
        </param>
        <param name="choices">
          <span data-ttu-id="d7f41-239">2 番目の文法要素で、代替のセットを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-239">The second grammar element, which represents a set of alternatives.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-240">
            <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトが後続している <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトを含んでいる、新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-240">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a <see cref="T:System.Speech.Recognition.Choices" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-241">
            <paramref name="choices" /> 要素が後続している <paramref name="builder" /> 要素のシーケンスの<see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-241">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="choices" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-242"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスから暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-242"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-243">このメソッドの上に示したオブジェクトを受け入れる、`builder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-243">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="d7f41-244">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>と<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-244">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-245">結合すると<xref:System.Speech.Recognition.Choices>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>と他の文法要素のインスタンスと同じキー名または複数のセマンティック要素で重複するセマンティック要素を作成しないようにするを確認繰り返しを変更、<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-245">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-246">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-246">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-247">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-247">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-248">次の例では、2 つのフレーズを認識できる音声認識文法を"背景*色*"と"に背景を設定*色*"ここで、*色*色のセットから選択されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-248">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d7f41-249">など、最終の文法のビルドにさまざまな種類が使用[文字列](http://go.microsoft.com/fwlink/?LinkId=159733)、 <xref:System.Speech.Recognition.Choices>、および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-249">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="d7f41-250">呼び出しで明示的なキャスト演算子、<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>メソッドは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-250">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder1, builder2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1">
          <span data-ttu-id="d7f41-251">最初の文法要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-251">The first grammar element.</span>
          </span>
        </param>
        <param name="builder2">
          <span data-ttu-id="d7f41-252">2 番目の grammer 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-252">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-253">2 つの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトのシーケンスを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-253">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-254">
            <paramref name="builder2" /> 要素が後続している <paramref name="builder1" /> 要素のシーケンスの<see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-254">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> element followed by the <paramref name="builder2" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-255"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスから暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-255"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-256">このメソッドの上に示したオブジェクトを受け入れる、`builder1`または`builder2`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-256">This method accepts the objects listed above for the `builder1` or `builder2` parameter.</span></span>  
  
 <span data-ttu-id="d7f41-257">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>と<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-257">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-258">結合すると<xref:System.Speech.Recognition.Choices>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>と他の文法要素のインスタンスと同じキー名または複数のセマンティック要素で重複するセマンティック要素を作成しないようにするを確認繰り返しを変更、<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-258">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-259">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-259">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-260">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-260">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-261">次の例では、2 つのフレーズを認識できる音声認識文法を"背景*色*"と"に背景を設定*色*"ここで、*色*色のセットから選択されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-261">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d7f41-262">など、最終の文法のビルドにさまざまな種類が使用[文字列](http://go.microsoft.com/fwlink/?LinkId=159733)、 <xref:System.Speech.Recognition.Choices>、および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-262">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="d7f41-263">呼び出しで明示的なキャスト演算子、<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>メソッドは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-263">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member Add : System.Speech.Recognition.GrammarBuilder * string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (builder, phrase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d7f41-264">最初の文法要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-264">The first grammar element.</span>
          </span>
        </param>
        <param name="phrase">
          <span data-ttu-id="d7f41-265">2 番目の文法要素で、言葉のシーケンスを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-265">The second grammar element, which represents a sequence of words.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-266">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトとその後ろにフレーズを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-266">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object followed by a phrase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-267">
            <paramref name="phrase" /> 要素が後続している <paramref name="builder" /> 要素のシーケンスの<see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-267">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> element followed by the <paramref name="phrase" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-268"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスから暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-268"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-269">このメソッドの上に示したオブジェクトを受け入れる、`builder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-269">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="d7f41-270">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>と<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-270">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-271">次の例では、2 つのフレーズを認識できる音声認識文法を"背景*色*"と"に背景を設定*色*"ここで、*色*色のセットから選択されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-271">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d7f41-272">など、最終の文法のビルドにさまざまな種類が使用[文字列](http://go.microsoft.com/fwlink/?LinkId=159733)、 <xref:System.Speech.Recognition.Choices>、および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-272">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="d7f41-273">呼び出しで明示的なキャスト演算子、<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>メソッドは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-273">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member Add : string * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.Add (phrase, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-274">最初の文法要素で、言葉のシーケンスを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-274">The first grammar element, which represents a sequence of words.</span>
          </span>
        </param>
        <param name="builder">
          <span data-ttu-id="d7f41-275">2 番目の grammer 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-275">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-276">フレーズとその後ろに <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-276">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-277">
            <paramref name="builder" /> 要素が後続している <paramref name="phrase" /> 要素のシーケンスの<see cref="T:System.Speech.Recognition.GrammarBuilder" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-277">A <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> element followed by the <paramref name="builder" /> element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-278"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスから暗黙的な変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-278"><xref:System.Speech.Recognition.GrammarBuilder> supports implicit conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-279">このメソッドの上に示したオブジェクトを受け入れる、`builder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-279">This method accepts the objects listed above for the `builder` parameter.</span></span>  
  
 <span data-ttu-id="d7f41-280">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>と<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-280">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> and <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operators.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-281">次の例では、2 つのフレーズを認識できる音声認識文法を"背景*色*"と"に背景を設定*色*"ここで、*色*色のセットから選択されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-281">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d7f41-282">など、最終の文法のビルドにさまざまな種類が使用[文字列](http://go.microsoft.com/fwlink/?LinkId=159733)、 <xref:System.Speech.Recognition.Choices>、および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-282">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span> <span data-ttu-id="d7f41-283">呼び出しで明示的なキャスト演算子、<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>メソッドは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-283">The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-284">文法要素の現在のシーケンスに文法要素を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-284">Appends a grammar element to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-285">これらのメソッドを使用すると、既存の文法要素を追加する<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-285">Use these methods to append grammar elements to an existing <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d7f41-286">文法要素を作成するときは、音声認識文法の制約を段階的に開発する既存のビルダーに追加できます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-286">As you create grammar elements, you can append them to the existing builder to progressively develop the constraints for a speech recognition grammar.</span></span> <span data-ttu-id="d7f41-287">各要素は、要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-287">Each element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="d7f41-288">このメソッドに追加するためのオーバー ロードは<xref:System.Speech.Recognition.GrammarBuilder>、 <xref:System.String>、 <xref:System.Speech.Recognition.Choices>、 <xref:System.Speech.Recognition.SemanticResultKey>、および<xref:System.Speech.Recognition.SemanticResultValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-288">This method has overloads for appending <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, and <xref:System.Speech.Recognition.SemanticResultValue> objects.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-289">同じキー名の重複するセマンティック要素または繰り返し同じ意味を持つ要素の値を変更する複数のセマンティック要素が含まれている音声認識文法を使用する場合、音声認識エンジンは例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-289">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d7f41-290">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-290">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d7f41-291">ビルドと音声認識文法の使用に関する詳細については、次を参照してください。[音声認識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)と[GrammarBuilder 文法の作成](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-291">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.Choices -&gt; unit" Usage="grammarBuilder.Append alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices">
          <span data-ttu-id="d7f41-292">追加する代替のセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-292">The set of alternatives to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-293">文法要素の現在のシーケンスに代替のセットを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-293">Appends a set of alternatives to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-294">`alternateChoices` 要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-294">`alternateChoices` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-295">追加すると<xref:System.Speech.Recognition.Choices>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンスを<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトの繰り返し可能性のある複数のセマンティック要素または同じキー名に重複するセマンティック要素を作成しないようにするかどうかを確認してください変更、<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-295">When you append <xref:System.Speech.Recognition.Choices> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-296">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-296">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-297">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[理解 SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-297">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-298">次の例では、"phone"という単語が省略可能な"職場呼び出し James"や"で、携帯電話の呼び出し Anne"などの語句の音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-298">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="d7f41-299">この例の使用を強調表示、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-299">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.GrammarBuilder -&gt; unit" Usage="grammarBuilder.Append builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d7f41-300">追加する文法要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-300">The grammar element to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-301">文法要素の現在のシーケンスに文法要素を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-301">Appends a grammar element to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-302">`builder` 文法要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-302">`builder` is added to the end of the current sequence of grammar elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7f41-303">追加すると<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンスを<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトの繰り返し可能性のある複数のセマンティック要素または同じキー名に重複するセマンティック要素を作成しないようにするかどうかを確認してください変更、<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-303">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-304">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-304">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-305">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-305">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-306">次の例では、"phone"という単語が省略可能な"職場呼び出し James"や"で、携帯電話の呼び出し Anne"などの語句の音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-306">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="d7f41-307"><xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Choices>オブジェクトは、文法の構築に使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-307"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="d7f41-308">この例の使用を強調表示、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-308">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.SemanticResultKey -&gt; unit" Usage="grammarBuilder.Append key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="d7f41-309">追加するセマンティクス キー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-309">The semantic key to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-310">文法要素の現在のシーケンスにセマンティクス キーを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-310">Appends a semantic key to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-311">`key` 要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-311">`key` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-312">追加すると<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンスを<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト、または同じキー名が繰り返しを変更する複数のセマンティック要素に重複するセマンティック要素を作成しないようにすることを確認、<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-312">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-313">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-313">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-314">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[理解 SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-314">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-315">次の例は、送信元と送信先の都市でフライトを選択するためのコンソール アプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-315">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="d7f41-316">アプリケーション「たいシカゴにマイアミから飛行」など、語句が認識します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-316">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="d7f41-317">ハンドラーは、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベントを使用して、<xref:System.Speech.Recognition.SemanticResultKey>で指定された空港コードを抽出する、<xref:System.Speech.Recognition.SemanticResultValue>送信元と送信先の都市。</span><span class="sxs-lookup"><span data-stu-id="d7f41-317">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a Choices object and add  cities and airport codes  
        // using SemanticResultValue objects.  
        Choices cities = new Choices();  
        cities.Add(new SemanticResultValue("Chicago", "ORD"));  
        cities.Add(new SemanticResultValue("Boston", "BOS"));  
        cities.Add(new SemanticResultValue("Miami", "MIA"));  
        cities.Add(new SemanticResultValue("Dallas", "DFW"));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.SemanticResultValue -&gt; unit" Usage="grammarBuilder.Append value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d7f41-318">追加するセマンティクス値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-318">The semantic value to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-319">文法要素の現在のシーケンスにセマンティクス値を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-319">Appends a semantic value to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-320">`value` 要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-320">`value` is added to the end of the current sequence of elements.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-321">追加すると<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンスを<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト、または同じキー名が繰り返しを変更する複数のセマンティック要素に重複するセマンティック要素を作成しないようにすることを確認、<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-321">When you append  <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-322">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-322">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-323">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[理解 SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-323">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-324">次の例は、送信元と送信先の都市でフライトを選択するためのコンソール アプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-324">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="d7f41-325">アプリケーション「たいシカゴにマイアミから飛行」など、語句が認識します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-325">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span> <span data-ttu-id="d7f41-326">ハンドラーは、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベントを使用して、<xref:System.Speech.Recognition.SemanticResultKey>で指定された空港コードを抽出する、<xref:System.Speech.Recognition.SemanticResultValue>送信元と送信先の都市。</span><span class="sxs-lookup"><span data-stu-id="d7f41-326">The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create GrammarBuilder objects and append SemanticResultValue objects   
        // that contain cities and airport codes.  
  
        GrammarBuilder chicago = new GrammarBuilder();  
        chicago.Append(new SemanticResultValue("Chicago", "ORD"));  
  
        GrammarBuilder boston = new GrammarBuilder();  
        boston.Append(new SemanticResultValue("Boston", "BOS"));  
  
        GrammarBuilder miami = new GrammarBuilder();  
        miami.Append(new SemanticResultValue("Miami", "MIA"));  
  
        GrammarBuilder dallas = new GrammarBuilder();  
        dallas.Append(new SemanticResultValue("Dallas", "DFW"));  
  
        // Create a Choices object and add the cities using implicit conversion from   
        // SemanticResultValue to GrammarBuilder.  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="member this.Append : string -&gt; unit" Usage="grammarBuilder.Append phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-327">追加する言葉のシーケンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-327">The sequence of words to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-328">文法要素の現在のシーケンスに語句を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-328">Appends a phrase to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-329">`phrase` 要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-329">`phrase` is added to the end of the current sequence of elements.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="F#" Value="member this.Append : string * System.Speech.Recognition.SubsetMatchingMode -&gt; unit" Usage="grammarBuilder.Append (phrase, subsetMatchingCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-330">追加する言葉のシーケンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-330">The sequence of words to append.</span>
          </span>
        </param>
        <param name="subsetMatchingCriteria">
          <span data-ttu-id="d7f41-331">句を認識するために文法が使用する一致モード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-331">The matching mode the grammar uses to recognize the phrase.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-332">文法要素の現在のシーケンスに、語句のサブセットの要素を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-332">Appends an element for a subset of a phrase to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-333">サブセットの要素は、要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-333">The subset element is added to the end of the current sequence of elements.</span></span> <span data-ttu-id="d7f41-334">文字列を使用して、音声認識文法のビルドの詳細については、次を参照してください。 [GrammarBuilder 文法を作成するのを使用して文字列](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-334">For more information about building a speech recognition grammar using strings, see [Using Strings to Create a GrammarBuilder Grammar](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).</span></span>  
  
 <span data-ttu-id="d7f41-335">サブセットの一致のモードの使用に関する詳細については、次を参照してください。<xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-335">For detailed information on the use of subset matching modes, see <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-336">次の例は、それぞれの音声認識文法を作成<xref:System.Speech.Recognition.SubsetMatchingMode>値。</span><span class="sxs-lookup"><span data-stu-id="d7f41-336">The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value.</span></span> <span data-ttu-id="d7f41-337">生成された文法など`OrderedSubset`、フレーズを認識"3 つ 4 つ 5"と"1 つ 3 つ 5"と文章校正`Subsequence`というフレーズを認識"3 つ 4 つ 5 つ"、語句が、"1 つ次の 3 つ 5 つ"。</span><span class="sxs-lookup"><span data-stu-id="d7f41-337">For example, the generated grammar `OrderedSubset` recognizes the phrases, "three four five" and "one three five", and the grammar `Subsequence` recognizes the phrase "three four five", but not the phrase, "one three five".</span></span>  
  
```csharp  
  
private Grammar[] CreateSubsetMatchTest()  
{  
  List<Grammar> grammars = new List<Grammar>(4);  
  
  string phrase = "one two three four five six";  
  foreach (SubsetMatchingMode mode in  
    Enum.GetValues(typeof(SubsetMatchingMode)))  
  {  
    GrammarBuilder gb = new GrammarBuilder();  
    gb.Append(phrase, mode);  
  
    Grammar grammar = new Grammar(gb);  
    grammar.Name = mode.ToString();  
    grammars.Add(grammar);  
  }  
  
  return grammars.ToArray();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Speech.Recognition.GrammarBuilder * int * int -&gt; unit" Usage="grammarBuilder.Append (builder, minRepeat, maxRepeat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d7f41-338">追加する繰り返される文法要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-338">The repeated grammar element to append.</span>
          </span>
        </param>
        <param name="minRepeat">
          <span data-ttu-id="d7f41-339">
            <c>builder</c> によって定義される要素と一致する入力が、一致を構成するために発生する必要がある最小回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-339">The minimum number of times that input matching the element defined by <c>builder</c> must occur to constitute a match.</span>
          </span>
        </param>
        <param name="maxRepeat">
          <span data-ttu-id="d7f41-340">
            <c>builder</c> によって定義される要素と一致する入力が、一致を構成するために発生できる最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-340">The maximum number of times that input matching the element defined by <c>builder</c> can occur to constitute a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-341">文法要素の現在のシーケンスに繰り返される文法要素を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-341">Appends a repeated grammar element to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-342">値`minRepeat`0 以上にする必要がありますの値以下`maxRepeat`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-342">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-343">追加すると<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンスを<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトの繰り返し可能性のある複数のセマンティック要素または同じキー名に重複するセマンティック要素を作成しないようにするかどうかを確認してください変更、<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-343">When you append <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances to a <xref:System.Speech.Recognition.GrammarBuilder> object, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-344">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-344">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-345">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[理解 SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-345">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-346">次の例では、"phone"という単語が省略可能な"職場呼び出し James"や"で、携帯電話の呼び出し Anne"などの語句の音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-346">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="d7f41-347"><xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Choices>オブジェクトは、文法の構築に使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-347"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="d7f41-348">この例の使用を強調表示、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-348">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="F#" Value="member this.Append : string * int * int -&gt; unit" Usage="grammarBuilder.Append (phrase, minRepeat, maxRepeat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-349">追加する繰り返される言葉のシーケンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-349">The repeated sequence of words to append.</span>
          </span>
        </param>
        <param name="minRepeat">
          <span data-ttu-id="d7f41-350">
            <c>phrase</c> と一致する入力が、一致を構成するために発生する必要がある最小回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-350">The minimum number of times that input matching <c>phrase</c> must occur to constitute a match.</span>
          </span>
        </param>
        <param name="maxRepeat">
          <span data-ttu-id="d7f41-351">
            <c>phrase</c> と一致する入力が、一致を構成するために発生できる最大回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-351">The maximum number of times that input matching <c>phrase</c> can occur to constitute a match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-352">文法要素の現在のシーケンスに繰り返される語句を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-352">Appends a repeated phrase to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-353">値`minRepeat`0 以上にする必要がありますの値以下`maxRepeat`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-353">The value of `minRepeat` must be greater than or equal to 0 and less than or equal to the value of `maxRepeat`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-354">次の例では、"phone"という単語が省略可能な"職場呼び出し James"や"で、携帯電話の呼び出し Anne"などの語句の音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-354">The following example creates a speech recognition grammar for phrases such as "Call James at work" and "Call Anne on her cell phone", where the word "phone" is optional.</span></span> <span data-ttu-id="d7f41-355"><xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Choices>オブジェクトは、文法の構築に使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-355"><xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar.</span></span> <span data-ttu-id="d7f41-356">この例の使用を強調表示、<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-356">The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.</span></span>  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendDictation">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-357">文法要素の現在のシーケンスに口述文法を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-357">Appends a dictation grammar to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-358"><xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>メソッドを使用するルールとして口述文法を追加すること、<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-358">The <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> methods allow you to append a dictation grammar as a rule to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
 <span data-ttu-id="d7f41-359">口述文法の詳細については、次を参照してください。<xref:System.Speech.Recognition.DictationGrammar>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-359">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation();" />
      <MemberSignature Language="F#" Value="member this.AppendDictation : unit -&gt; unit" Usage="grammarBuilder.AppendDictation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-360">文法要素の現在のシーケンスに既定の口述文法を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-360">Appends the default dictation grammar to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-361">口述文法の詳細については、次を参照してください。<xref:System.Speech.Recognition.DictationGrammar>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-361">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-362">次の例では、ディクテーションが組み込まれている音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-362">The following example creates a speech recognition grammar that incorporates dictation.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation();  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation(string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation (category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation(System::String ^ category);" />
      <MemberSignature Language="F#" Value="member this.AppendDictation : string -&gt; unit" Usage="grammarBuilder.AppendDictation category" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">
          <span data-ttu-id="d7f41-363">追加する口述文法のカテゴリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-363">The category of the dictation grammar to append.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-364">文法要素の現在のシーケンスに指定された口述文法を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-364">Appends the specified dictation grammar to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-365">スペル チェックの口述文法を使用する設定`category`に`spelling`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-365">To use the spelling dictation grammar, set `category` to `spelling`.</span></span>  
  
 <span data-ttu-id="d7f41-366">口述文法の詳細については、次を参照してください。<xref:System.Speech.Recognition.DictationGrammar>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-366">For more information on dictation grammars, see <xref:System.Speech.Recognition.DictationGrammar>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-367">次の例では、スペル チェックの口述文法規則が組み込まれている音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-367">The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.</span></span>  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation("spelling");  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendRuleReference">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-368">文法要素の現在のシーケンスに文法ファイルまたは文法ルールを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-368">Appends a grammar file or a grammar rule to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-369"><xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>メソッドは、文法ファイルまたはファイルからの文法ルールを追加できます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-369">The <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> methods can append a grammar file or a grammar rule from a file.</span></span> <span data-ttu-id="d7f41-370">これらのメソッドによりアプリケーションを展開済みまたは公開されている文法規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-370">These methods allow applications to make use of pre-deployed or publicly available grammar rules.</span></span> <span data-ttu-id="d7f41-371">アプリケーションでは、指定された文法ファイルの場所に読み取りアクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-371">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="d7f41-372">これらのメソッドは、次の形式から音声認識文法を読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-372">These methods can read a speech recognition grammar from the following formats.</span></span>  
  
-   <span data-ttu-id="d7f41-373">W3C に準拠する XML フォーマット ファイル[Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)</span><span class="sxs-lookup"><span data-stu-id="d7f41-373">XML-format files that conform to the W3C [Speech Recognition Grammar Specification (SRGS) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)</span></span>  
  
-   <span data-ttu-id="d7f41-374">Microsoft 音声認識文法バイナリ形式 (ファイル拡張子を .cfg) に準拠しているバイナリ ファイル</span><span class="sxs-lookup"><span data-stu-id="d7f41-374">Binary files that conform to the Microsoft Speech Recognition Grammar Binary Format (.cfg file extension)</span></span>  
  
 <span data-ttu-id="d7f41-375">XML 形式の SRGS をコンパイルする文法ファイルを .cfg 拡張機能をバイナリ文法ファイル時間を短縮できます、一致を検索で使用される文法には、単語や語句の数が多いの認識が必要な場合に特に。</span><span class="sxs-lookup"><span data-stu-id="d7f41-375">Compiling an XML-format SRGS grammar file to a binary grammar file with the .cfg extension can reduce the time consumed by searches for a match, especially if the grammar requires recognition of a large number of words and phrases.</span></span> <span data-ttu-id="d7f41-376">CFG のバイナリ形式に SRGS 文法をコンパイルする方法の詳細については、次を参照してください。<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-376">For information about compiling SRGS grammars to the CFG binary format, see <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.AppendRuleReference : string -&gt; unit" Usage="grammarBuilder.AppendRuleReference path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="d7f41-377">サポートされている形式で音声認識文法を記述するファイルのパスまたは URI (Universal Resource Identifier)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-377">The path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-378">文法要素の現在のシーケンスに文法定義ファイルを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-378">Appends a grammar definition file to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-379">によって提供された URI、`path`ローカルまたはリモートを引数として使用することがあります。</span><span class="sxs-lookup"><span data-stu-id="d7f41-379">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="d7f41-380">アプリケーションでは、指定された文法ファイルの場所に読み取りアクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-380">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="d7f41-381">W3C Speech Recognition Grammar Specification (SRGS) 形式では、ルート ルールを定義できます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-381">A W3C Speech Recognition Grammar Specification (SRGS) representation can define a root rule.</span></span> <span data-ttu-id="d7f41-382">このメソッドは、以降の文法要素の現在のシーケンスに、ルート規則では、文法を追加します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-382">This method appends the grammar, beginning with its root rule, to the current sequence of grammar elements.</span></span> <span data-ttu-id="d7f41-383">特定の文法ルールを追加するには使用、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-383">To append a specific grammar rule, use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-384">次の c# の例は、という名前の規則を使用する音声認識文法を作成します。 `Cities` SRGS ローカルファイルで cities.grxml します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-384">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="d7f41-385">Cities.grxml ファイルの内容は、次の c# コード例が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-385">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar1()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.AppendRuleReference("file://c:/temp/cities.grxml");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 1";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-16" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path, string rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path, string rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String, rule As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path, System::String ^ rule);" />
      <MemberSignature Language="F#" Value="member this.AppendRuleReference : string * string -&gt; unit" Usage="grammarBuilder.AppendRuleReference (path, rule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="rule" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="d7f41-386">サポートされている形式で音声認識文法を記述するファイルのファイル パスまたは URI (Universal Resource Identifier)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-386">The file path or Universal Resource Identifier (URI) of the file that describes a speech recognition grammar in a supported format.</span>
          </span>
        </param>
        <param name="rule">
          <span data-ttu-id="d7f41-387">追加するルールの識別子、または文法ファイルの既定のルート ルールを追加する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-387">The identifier of the rule to append, or <see langword="null" /> to append the default root rule of the grammar file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-388">文法要素の現在のシーケンスに文法定義ファイルの指定されたルールを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-388">Appends the specified rule of a grammar definition file to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-389">によって提供された URI、`path`ローカルまたはリモートを引数として使用することがあります。</span><span class="sxs-lookup"><span data-stu-id="d7f41-389">The URI provided by the `path` argument may be local or remote.</span></span> <span data-ttu-id="d7f41-390">アプリケーションでは、指定された文法ファイルの場所に読み取りアクセスが必要です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-390">The application must have read access to the location of specified grammar files.</span></span>  
  
 <span data-ttu-id="d7f41-391">使用できますが、<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>のルート規則を文法ファイルの先頭に追加するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d7f41-391">You can use the use the <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> method to append a grammar file beginning with its root rule.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-392">次の c# の例は、という名前の規則を使用する音声認識文法を作成します。 `Cities` SRGS ローカルファイルで cities.grxml します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-392">The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml.</span></span> <span data-ttu-id="d7f41-393">Cities.grxml ファイルの内容は、次の c# コード例が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-393">The content of the cities.grxml file appears below the C# code example.</span></span>  
  
```csharp  
  
private static Grammar CreateCitiesGrammar2()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("Does");  
  builder.AppendRuleReference(@"c:\temp\cities.grxml", "Cities");  
  builder.Append("have a shuttle");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendWildcard">
      <MemberSignature Language="C#" Value="public void AppendWildcard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendWildcard() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendWildcard ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendWildcard();" />
      <MemberSignature Language="F#" Value="member this.AppendWildcard : unit -&gt; unit" Usage="grammarBuilder.AppendWildcard " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-394">文法要素の現在のシーケンスに、すべての入力に一致する認識文法要素を追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-394">Appends a recognition grammar element that matches any input to the current sequence of grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-395">ワイルドカード要素は、要素の現在のシーケンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-395">The wildcard element is added to the end of the current sequence of elements.</span></span>  
  
 <span data-ttu-id="d7f41-396">ワイルドカード要素では、話された単語と一致します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-396">The wildcard element matches any spoken word.</span></span> <span data-ttu-id="d7f41-397">バック グラウンド ノイズまたはサイレント状態は一致しません。</span><span class="sxs-lookup"><span data-stu-id="d7f41-397">It does not match background noise or silence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-398">次の例では、ワイルドカードとしてパスワードの入力を受け付ける文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-398">The following example creates a grammar that accepts password input as a wildcard.</span></span> <span data-ttu-id="d7f41-399">例では、アタッチ、<xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType>パスワードの入力を検証する文法にイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="d7f41-399">The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> event handler to the grammar that validates the password input.</span></span>  
  
```csharp  
private Grammar CreatePasswordGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey passwordKey =  
    new SemanticResultKey("Password", wildcardBuilder);  
  
  GrammarBuilder passwordBuilder =  
    new GrammarBuilder("My Password is");  
  passwordBuilder.Append(passwordKey);  
  
  Grammar passwordGrammar = new Grammar(passwordBuilder);  
  passwordGrammar.Name = "Password input";  
  
  passwordGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      PasswordInputHandler);  
  
  return passwordGrammar;  
}  
  
// Handle the SpeechRecognized event for the password grammar.  
private void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Password"))  
  {  
    RecognizedAudio passwordAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    if (IsValidPassword(passwordAudio))  
    {  
      Console.WriteLine("Password accepted.");  
  
      // Add code to handle a valid password here.  
    }  
    else  
    {  
      Console.WriteLine("Invalid password.");  
  
      // Add code to handle an invalid password here.  
    }  
  }  
}  
  
// Validate the password input.   
private bool IsValidPassword(RecognizedAudio passwordAudio)  
{  
  Console.WriteLine("Validating password.");  
  
  // Add password validation code here.  
  
  return false;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-400">音声認識文法のカルチャを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-400">Gets or sets the culture of the speech recognition grammar.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f41-401">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> のカルチャ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-401">The culture of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
          <span data-ttu-id="d7f41-402">既定では、スレッドの <see cref="P:System.Threading.Thread.CurrentUICulture" /> プロパティが実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-402">The default is the executing thread's <see cref="P:System.Threading.Thread.CurrentUICulture" /> property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-403"><xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクターを作成、<xref:System.Speech.Recognition.Grammar>対応するカルチャの音声認識エンジンで使用できるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-403">The <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor creates a <xref:System.Speech.Recognition.Grammar> object that can be used by a speech recognizer of the corresponding culture.</span></span> <span data-ttu-id="d7f41-404">のみ、<xref:System.Speech.Recognition.GrammarBuilder.Culture%2A>のプロパティ、<xref:System.Speech.Recognition.GrammarBuilder>文法コンス トラクターのパラメーターは、結果として得られる音声認識文法のカルチャの設定に使用されるように提供されています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-404">Only the <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> property of the <xref:System.Speech.Recognition.GrammarBuilder> that is provided as the parameter to the Grammar constructor is used to set the culture of the resulting speech recognition grammar.</span></span>  
  
 <span data-ttu-id="d7f41-405">Microsoft Windows と System.Speech API は、有効なすべての言語、国コードをそのまま使用します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-405">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="d7f41-406">指定された言語を使用して、音声認識を実行する、`Culture`プロパティ、言語、国コードをインストールする必要がありますをサポートする音声認識エンジン。</span><span class="sxs-lookup"><span data-stu-id="d7f41-406">To perform speech recognition using the language specified in the `Culture` property, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="d7f41-407">Microsoft Windows 7 に同梱されている音声認識エンジンは、次の言語、国コードで動作します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-407">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="d7f41-408">en GB。</span><span class="sxs-lookup"><span data-stu-id="d7f41-408">en-GB.</span></span> <span data-ttu-id="d7f41-409">English (United Kingdom)</span><span class="sxs-lookup"><span data-stu-id="d7f41-409">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="d7f41-410">en-us (英語)。</span><span class="sxs-lookup"><span data-stu-id="d7f41-410">en-US.</span></span> <span data-ttu-id="d7f41-411">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="d7f41-411">English (United States)</span></span>  
  
-   <span data-ttu-id="d7f41-412">de-de などがあります。</span><span class="sxs-lookup"><span data-stu-id="d7f41-412">de-DE.</span></span> <span data-ttu-id="d7f41-413">ドイツ語 (ドイツ)</span><span class="sxs-lookup"><span data-stu-id="d7f41-413">German (Germany)</span></span>  
  
-   <span data-ttu-id="d7f41-414">ES-ES します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-414">es-ES.</span></span> <span data-ttu-id="d7f41-415">スペイン語 (スペイン)</span><span class="sxs-lookup"><span data-stu-id="d7f41-415">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="d7f41-416">個</span><span class="sxs-lookup"><span data-stu-id="d7f41-416">fr-FR.</span></span> <span data-ttu-id="d7f41-417">フランス語 (フランス)</span><span class="sxs-lookup"><span data-stu-id="d7f41-417">French (France)</span></span>  
  
-   <span data-ttu-id="d7f41-418">JA-JP します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-418">ja-JP.</span></span> <span data-ttu-id="d7f41-419">日本語 (日本)</span><span class="sxs-lookup"><span data-stu-id="d7f41-419">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="d7f41-420">ZH-CN します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-420">zh-CN.</span></span> <span data-ttu-id="d7f41-421">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="d7f41-421">Chinese (China)</span></span>  
  
-   <span data-ttu-id="d7f41-422">zh-tw があります。</span><span class="sxs-lookup"><span data-stu-id="d7f41-422">zh-TW.</span></span> <span data-ttu-id="d7f41-423">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="d7f41-423">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="d7f41-424">"En"、"fr"などの 2 文字の言語コードまたは"es"も使用できます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-424">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7f41-425">次の例では、最大 4 つのトッピングにピザを注文するための音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-425">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="d7f41-426">具体的には設定、<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトのカルチャを英語 (米国) にします。</span><span class="sxs-lookup"><span data-stu-id="d7f41-426">It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).</span></span>  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="DebugShowPhrases">
      <MemberSignature Language="C#" Value="public string DebugShowPhrases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugShowPhrases" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugShowPhrases As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DebugShowPhrases { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DebugShowPhrases : string" Usage="System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-427">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> に含まれる文法の内容と構造を表す文字列を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-427">Gets a string that shows the contents and structure of the grammar contained by the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d7f41-428">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> の現在のコンテンツと構造体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-428">The current content and structure of the <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7f41-429">次の例では、最大 4 つのトッピングにピザを注文するための音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-429">The following example creates a speech recognition grammar for ordering a pizza with up to four toppings.</span></span> <span data-ttu-id="d7f41-430">ステータスを書き込みます、<xref:System.Speech.Recognition.GrammarBuilder>文法を作成する前に、コンソールにします。</span><span class="sxs-lookup"><span data-stu-id="d7f41-430">It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar.</span></span> <span data-ttu-id="d7f41-431">このメソッドでは、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-431">This method generates the following output:</span></span>  
  
-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Write the contents and structure of the GrammarBuilder to the console.  
  Console.WriteLine("Grammar content and structure: {0}", gb.DebugShowPhrases);  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-432">2 つの文法要素のシーケンスに一致する新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-432">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that corresponds to a sequence of two grammar elements.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-433">オペランドの順序で、新しい要素の順序を決定する<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-433">The order of the operands determines the order of the elements in the new <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-434">結合するときに、注意が必要ですが推奨される<xref:System.Speech.Recognition.Choices>または<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>と他の文法要素のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="d7f41-434">Caution is recommended when combining <xref:System.Speech.Recognition.Choices> or <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances with other grammar elements.</span></span> <span data-ttu-id="d7f41-435">同じキー名の重複するセマンティック要素または繰り返し同じ意味を持つ要素の値を変更する複数のセマンティック要素が含まれている音声認識文法を使用する場合、音声認識エンジンは例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-435">The speech recognizer can throw an exception when using a speech recognition grammar that contains duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the value of the same semantic element.</span></span> <span data-ttu-id="d7f41-436">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[を使用して SemanticResultKey と SemanticResultValue オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-436">For more information about building a speech recognition grammar that contains semantic information, see [Using SemanticResultKey and SemanticResultValue Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d7f41-437">ビルドと音声認識文法の使用に関する詳細については、次を参照してください。[音声認識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)と[GrammarBuilder 文法の作成](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)です。</span><span class="sxs-lookup"><span data-stu-id="d7f41-437">For more information about building and using speech recognition grammars, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Creating GrammarBuilder Grammars](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.Choices * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices + builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices">
          <span data-ttu-id="d7f41-438">代替候補セットを表す、最初の grammer 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-438">The first grammar element, which represents a set of alternatives.</span>
          </span>
        </param>
        <param name="builder">
          <span data-ttu-id="d7f41-439">2 番目の grammer 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-439">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-440">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトが後続している <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを含んでいる、新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-440">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.Choices" /> object followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-441">
            <paramref name="choices" /> パラメーターの次に <paramref name="builder" /> パラメーターが続くシーケンスの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-441">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="choices" /> parameter followed by the <paramref name="builder" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-442"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-442"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-443">このメソッドの上に示したオブジェクトを受け入れる、`builder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-443">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="d7f41-444">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-444">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-445">結合すると<xref:System.Speech.Recognition.Choices>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンス、または同じキー名が繰り返しを変更する複数のセマンティック要素に重複するセマンティック要素を作成しないようにするを確認します<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-445">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-446">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-446">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-447">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[理解 SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-447">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d7f41-448">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-448">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder + choices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d7f41-449">最初の文法要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-449">The first grammar element.</span>
          </span>
        </param>
        <param name="choices">
          <span data-ttu-id="d7f41-450">2 番目の文法要素で、代替要素のセットを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-450">The second grammar element, which represents a set of alternative elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-451">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> とその後ろに <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を含む新しい <see cref="T:System.Speech.Recognition.Choices" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-451">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a <see cref="T:System.Speech.Recognition.Choices" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-452">
            <paramref name="builder" /> パラメーターの次に <paramref name="choices" /> パラメーターが続くシーケンスの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-452">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="choices" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-453"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-453"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes:</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-454">このメソッドの上に示したオブジェクトを受け入れる、`builder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-454">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="d7f41-455">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-455">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-456">結合すると<xref:System.Speech.Recognition.Choices>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンス、または同じキー名が繰り返しを変更する複数のセマンティック要素に重複するセマンティック要素を作成しないようにするを確認します<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-456">When you combine <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-457">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-457">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-458">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[理解 SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-458">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d7f41-459">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-459">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d7f41-460">次の例では、2 つのフレーズを認識できる音声認識文法を"背景*色*"と"に背景を設定*色*"ここで、*色*色のセットから選択されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-460">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d7f41-461">など、最終の文法のビルドにさまざまな種類が使用[文字列](http://go.microsoft.com/fwlink/?LinkId=159733)、 <xref:System.Speech.Recognition.Choices>、および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-461">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder1 + builder2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1">
          <span data-ttu-id="d7f41-462">最初の文法要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-462">The first grammar element.</span>
          </span>
        </param>
        <param name="builder2">
          <span data-ttu-id="d7f41-463">2 番目の grammer 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-463">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-464">2 つの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトのシーケンスを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-464">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a sequence of two <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-465">
            <paramref name="builder1" /> パラメーターの次に <paramref name="builder2" /> パラメーターが続くシーケンスの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-465">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder1" /> parameter followed by the <paramref name="builder2" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-466"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-466"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-467">このメソッドの上に示したオブジェクトを受け入れる、`builder1`と`builder2`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-467">This method accepts the objects listed above for the `builder1` and `builder2` parameters.</span></span> <span data-ttu-id="d7f41-468">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-468">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7f41-469">結合すると<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトが含まれている<xref:System.Speech.Recognition.SemanticResultValue>または<xref:System.Speech.Recognition.SemanticResultKey>インスタンス、または同じキー名が繰り返しを変更する複数のセマンティック要素に重複するセマンティック要素を作成しないようにするを確認、 <xref:System.Speech.Recognition.SemanticValue.Value%2A>プロパティを<xref:System.Speech.Recognition.SemanticValue>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-469">When you combine <xref:System.Speech.Recognition.GrammarBuilder> objects that contain <xref:System.Speech.Recognition.SemanticResultValue> or <xref:System.Speech.Recognition.SemanticResultKey> instances, make sure you avoid creating duplicate semantic elements with the same key name or multiple semantic elements that could repeatedly modify the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of a <xref:System.Speech.Recognition.SemanticValue> object.</span></span> <span data-ttu-id="d7f41-470">音声認識エンジンは、このような状況が発生した場合、例外をスローできます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-470">The speech recognizer can throw an exception if it encounters these circumstances.</span></span> <span data-ttu-id="d7f41-471">セマンティック情報を含む音声認識文法のビルドの詳細については、次を参照してください。[理解 SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-471">For more information about building a speech recognition grammar that contains semantic information, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).</span></span>  
  
 <span data-ttu-id="d7f41-472">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-472">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Speech.Recognition.GrammarBuilder * string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="builder + phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">
          <span data-ttu-id="d7f41-473">最初の文法要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-473">The first grammar element.</span>
          </span>
        </param>
        <param name="phrase">
          <span data-ttu-id="d7f41-474">2 番目の文法要素で、言葉のシーケンスを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-474">The second grammar element, which represents a sequence of words.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-475">
            <see cref="T:System.Speech.Recognition.GrammarBuilder" /> とその後ろにフレーズを含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-475">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> followed by a phrase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-476">
            <paramref name="builder" /> パラメーターの次に <paramref name="phrase" /> パラメーターが続くシーケンスの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-476">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="builder" /> parameter followed by the <paramref name="phrase" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-477"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-477"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-478">このメソッドの上に示したオブジェクトを受け入れる、`builder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-478">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="d7f41-479">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-479">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="d7f41-480">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-480">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="static member ( + ) : string * System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.GrammarBuilder" Usage="phrase + builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-481">最初の文法要素で、言葉のシーケンスを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-481">The first grammar element, which represents a sequence of words.</span>
          </span>
        </param>
        <param name="builder">
          <span data-ttu-id="d7f41-482">2 番目の grammer 要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-482">The second grammar element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-483">フレーズとその後ろに <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を含む新しい <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-483">Creates a new <see cref="T:System.Speech.Recognition.GrammarBuilder" /> that contains a phrase followed by a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-484">
            <paramref name="phrase" /> パラメーターの次に <paramref name="builder" /> パラメーターが続くシーケンスの <see cref="T:System.Speech.Recognition.GrammarBuilder" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-484">Returns a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> for the sequence of the <paramref name="phrase" /> parameter followed by the <paramref name="builder" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-485"><xref:System.Speech.Recognition.GrammarBuilder> 次のクラスからの変換をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d7f41-485"><xref:System.Speech.Recognition.GrammarBuilder> supports conversions from the following classes.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-486">このメソッドの上に示したオブジェクトを受け入れる、`builder`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d7f41-486">This method accepts the objects listed above for the `builder` parameter.</span></span> <span data-ttu-id="d7f41-487">詳細については、次を参照してください。、<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>演算子。</span><span class="sxs-lookup"><span data-stu-id="d7f41-487">For more information, see the <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operators.</span></span>  
  
 <span data-ttu-id="d7f41-488">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-488">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d7f41-489">次の例では、2 つのフレーズを認識できる音声認識文法を"背景*色*"と"に背景を設定*色*"ここで、*色*色のセットから選択されます。</span><span class="sxs-lookup"><span data-stu-id="d7f41-489">The following example creates a speech recognition grammar that can recognize the two phrases, "Make background *color*" and "Set background to *color*", where *color* is selected from a set of colors.</span></span> <span data-ttu-id="d7f41-490">など、最終の文法のビルドにさまざまな種類が使用[文字列](http://go.microsoft.com/fwlink/?LinkId=159733)、 <xref:System.Speech.Recognition.Choices>、および<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-490">Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.</span></span>  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d7f41-491">別の型を <see cref="T:System.Speech.Recognition.GrammarBuilder" /> に変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-491">Converts another type to a <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-492">暗黙的な変換の新しいインスタンスを作成する<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-492">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d7f41-493">次のクラスのそれぞれをキャストすることができます、<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-493">You can cast each of the following classes to a <xref:System.Speech.Recognition.GrammarBuilder>.</span></span>  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 <span data-ttu-id="d7f41-494">暗黙的なキャストの各機能は、コンス トラクターの呼び出しと同じです。</span><span class="sxs-lookup"><span data-stu-id="d7f41-494">Each of the implicit casts is equivalent to calling the constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::Choices ^ choices);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.Choices -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit choices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="choices">
          <span data-ttu-id="d7f41-495">変換する代替のセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-495">The set of alternatives to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-496">
            <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-496">Converts a <see cref="T:System.Speech.Recognition.Choices" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-497">変換後の <see cref="T:System.Speech.Recognition.Choices" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-497">The converted <see cref="T:System.Speech.Recognition.Choices" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-498">暗黙的な変換の新しいインスタンスを作成する<xref:System.Speech.Recognition.GrammarBuilder>します。この変換演算子が呼び出しに相当<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>を指定して`choices`の`alternateChoices`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-498">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `choices` for the `alternateChoices`.</span></span>  
  
 <span data-ttu-id="d7f41-499">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-499">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d7f41-500">次の例では、"yes"または"no"の質問への応答を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-500">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="d7f41-501">構築で暗黙的な変換演算子を使用、<xref:System.Speech.Recognition.SemanticResultValue>オブジェクトから、<xref:System.Speech.Recognition.Choices>の構築でのオブジェクトを<xref:System.Speech.Recognition.Choices>から 2 つのオブジェクト<xref:System.Speech.Recognition.SemanticResultValue>オブジェクト、およびの構築で、 <xref:System.Speech.Recognition.Grammar> からオブジェクト<xref:System.Speech.Recognition.SemanticResultKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-501">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultKey semanticKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultKey semanticKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticKey As SemanticResultKey) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultKey ^ semanticKey);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.SemanticResultKey -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit semanticKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticKey" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="semanticKey">
          <span data-ttu-id="d7f41-502">変換するセマンティクス キー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-502">The semantic key to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-503">
            <see cref="T:System.Speech.Recognition.SemanticResultKey" /> オブジェクトを <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-503">Converts a <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-504">変換後の <see cref="T:System.Speech.Recognition.SemanticResultKey" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-504">The converted <see cref="T:System.Speech.Recognition.SemanticResultKey" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-505">暗黙的な変換の新しいインスタンスを作成する<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-505">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d7f41-506">この変換演算子が呼び出しに相当<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>を指定して`semanticKey`の`key`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-506">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticKey` for the `key`.</span></span>  
  
 <span data-ttu-id="d7f41-507">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-507">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d7f41-508">次の例では、"yes"または"no"の質問への応答を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-508">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="d7f41-509">構築で暗黙的な変換演算子を使用、<xref:System.Speech.Recognition.SemanticResultValue>オブジェクトから、<xref:System.Speech.Recognition.Choices>の構築でのオブジェクトを<xref:System.Speech.Recognition.Choices>から 2 つのオブジェクト<xref:System.Speech.Recognition.SemanticResultValue>オブジェクト、およびの構築で、 <xref:System.Speech.Recognition.Grammar> からオブジェクト<xref:System.Speech.Recognition.SemanticResultKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-509">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices> object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultValue semanticValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultValue semanticValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticValue As SemanticResultValue) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultValue ^ semanticValue);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Speech.Recognition.SemanticResultValue -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit semanticValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticValue" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="semanticValue">
          <span data-ttu-id="d7f41-510">変換対象の <see cref="T:System.Speech.Recognition.SemanticResultValue" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-510">The <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-511">
            <see cref="T:System.Speech.Recognition.SemanticResultValue" /> オブジェクトを <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-511">Converts a <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-512">変換後の <see cref="T:System.Speech.Recognition.SemanticResultValue" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-512">The converted <see cref="T:System.Speech.Recognition.SemanticResultValue" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-513">暗黙的な変換の新しいインスタンスを作成する<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-513">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d7f41-514">この変換演算子が呼び出しに相当<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>を指定して`semanticValue`の`value`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-514">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying `semanticValue` for the `value`.</span></span>  
  
 <span data-ttu-id="d7f41-515">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-515">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d7f41-516">次の例では、"yes"または"no"の質問への応答を認識できる音声認識文法を作成します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-516">The following example creates a speech recognition grammar that can recognize a response to a "yes" or "no" question.</span></span> <span data-ttu-id="d7f41-517">構築で暗黙的な変換演算子を使用、<xref:System.Speech.Recognition.SemanticResultValue>オブジェクトから、<xref:System.Speech.Recognition.Choices>の構築でのオブジェクトを<xref:System.Speech.Recognition.Choices>から 2 つのオブジェクト<xref:System.Speech.Recognition.SemanticResultValue>オブジェクト、およびの構築で、 <xref:System.Speech.Recognition.Grammar> からオブジェクト<xref:System.Speech.Recognition.SemanticResultKey>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-517">The implicit conversion operator is used in the construction of a <xref:System.Speech.Recognition.SemanticResultValue> object from a <xref:System.Speech.Recognition.Choices>object, in the construction of a <xref:System.Speech.Recognition.Choices> object from two <xref:System.Speech.Recognition.SemanticResultValue> objects, and in the construction of a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.SemanticResultKey> object.</span></span>  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::String ^ phrase);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Speech.Recognition.GrammarBuilder" Usage="System.Speech.Recognition.GrammarBuilder.op_Implicit phrase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">
          <span data-ttu-id="d7f41-518">変換する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-518">The string to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d7f41-519">文字列を <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-519">Converts a string to a <see cref="T:System.Speech.Recognition.GrammarBuilder" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d7f41-520">変換された文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d7f41-520">The converted string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7f41-521">暗黙的な変換の新しいインスタンスを作成する<xref:System.Speech.Recognition.GrammarBuilder>します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-521">Implicit conversion creates a new instance of <xref:System.Speech.Recognition.GrammarBuilder>.</span></span> <span data-ttu-id="d7f41-522">この変換演算子が呼び出しに相当<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>同じを指定して`phrase`します。</span><span class="sxs-lookup"><span data-stu-id="d7f41-522">This conversion operator is equivalent to calling <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> and specifying the same `phrase`.</span></span>  
  
 <span data-ttu-id="d7f41-523">この演算子を同等のメソッドは、します。 <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d7f41-523">The equivalent method for this operator is <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="d7f41-524">次の例では<xref:System.Speech.Recognition.GrammarBuilder>と<xref:System.Speech.Recognition.Choices>オブジェクト、2 つのフレーズのいずれかを認識できる文法を構築する"ことをバック グラウンド*colorChoice*"または"に背景を設定*colorChoice*".</span><span class="sxs-lookup"><span data-stu-id="d7f41-524">The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, "Make background *colorChoice*" or "Set background to *colorChoice*".</span></span>  
  
 <span data-ttu-id="d7f41-525">使用できる値の一覧を作成した後*colorChoice*を使用して、<xref:System.Speech.Recognition.Choices>オブジェクトの例では、2 つを初期化します<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト、`makePhrase`と`setPhrase`、文字列から暗黙の変換を使用します。オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-525">After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using implicit conversion from string objects.</span></span>  
  
 <span data-ttu-id="d7f41-526">例では、最後に作成、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.Choices>オブジェクトにキャスト、<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d7f41-526">The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.</span></span>  
  
```csharp  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
  </Members>
</Type>