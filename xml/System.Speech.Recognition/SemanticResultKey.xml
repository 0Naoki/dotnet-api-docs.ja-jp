<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cfb6e3c20ee70cd7a40e0bcf953cbaa576342d34" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37610812" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="94729-101">
        <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 値とキー文字列を関連付けて、<see cref="T:System.Speech.Recognition.SemanticValue" /> オブジェクトを定義します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="94729-101">Associates a key string with <see cref="T:System.Speech.Recognition.SemanticResultValue" /> values to define <see cref="T:System.Speech.Recognition.SemanticValue" /> objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94729-102">System.speech の違いに意味的な式の基本単位は、<xref:System.Speech.Recognition.SemanticValue>キー/値ペアであります。</span><span class="sxs-lookup"><span data-stu-id="94729-102">The basic unit of semantic expression in System.Speech is the <xref:System.Speech.Recognition.SemanticValue>, which is a key/value pair.</span></span>  
  
 <span data-ttu-id="94729-103">使用して<xref:System.Speech.Recognition.SemanticResultKey>オブジェクト、タグ付けする<xref:System.Speech.Recognition.SemanticResultValue>インスタンスに含まれている<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトし、文字列の値に簡単にアクセスできるように<xref:System.Speech.Recognition.SemanticValue>認識上のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="94729-103">Using <xref:System.Speech.Recognition.SemanticResultKey> objects, you tag <xref:System.Speech.Recognition.SemanticResultValue> instances contained in <xref:System.Speech.Recognition.GrammarBuilder> objects and strings so that the values may readily be accessed from <xref:System.Speech.Recognition.SemanticValue> instances on recognition.</span></span>  
  
 <span data-ttu-id="94729-104">使用することができます<xref:System.Speech.Recognition.SemanticResultValue>と<xref:System.Speech.Recognition.SemanticResultKey>と共に、オブジェクト<xref:System.Speech.Recognition.GrammarBuilder>と<xref:System.Speech.Recognition.Choices>オブジェクトの音声認識文法のセマンティックの構造を定義します。</span><span class="sxs-lookup"><span data-stu-id="94729-104">You can use <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> objects, in conjunction with <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects, to define the semantic structure for a speech recognition grammar.</span></span> <span data-ttu-id="94729-105">認識結果のセマンティクス情報にアクセスするには、インスタンスを取得<xref:System.Speech.Recognition.SemanticValue>を通じて、<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>プロパティ<xref:System.Speech.Recognition.RecognizedPhrase>します。</span><span class="sxs-lookup"><span data-stu-id="94729-105">To access the semantic information in a recognition result, obtain an instance of <xref:System.Speech.Recognition.SemanticValue> through the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="94729-106">使用しての詳細については<xref:System.Speech.Recognition.SemanticResultValue>と<xref:System.Speech.Recognition.SemanticResultKey>、オブジェクトを参照してください[理解 SemanticResultValue と SemanticResultKey オブジェクト](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c)と[抽出する SemanticResultKey を使用して、SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa)で、 [.NET Framework 4.0 のシステム音声プログラミング ガイド](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043)します。</span><span class="sxs-lookup"><span data-stu-id="94729-106">For more information about using <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> objects, see [Understanding SemanticResultValue and SemanticResultKey Objects](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c) and [Using a SemanticResultKey to Extract a SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa) in the [System Speech Programming Guide for .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94729-107">次の例では、作成、 <xref:System.Speech.Recognition.Grammar> 「自分のパスワードは...」をワイルドカードで実際の入力が一致すると、フォームのパスワードの入力を認識します。</span><span class="sxs-lookup"><span data-stu-id="94729-107">The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form "My password is …", where the actual input is matched with a wildcard.</span></span>  
  
 <span data-ttu-id="94729-108">ワイルドカードはセマンティック キーを持つタグ付け、<xref:System.Speech.Recognition.Grammar.SpeechRecognized>ハンドラーが、パスワードの入力が発生したことを確認するには、このタグの存在を確認します。</span><span class="sxs-lookup"><span data-stu-id="94729-108">The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.</span></span>  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="94729-109">
            <see cref="T:System.Speech.Recognition.SemanticResultKey" /> のインスタンスを構築し、文法コンポーネントにキーを関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="94729-109">Constructs an instance of <see cref="T:System.Speech.Recognition.SemanticResultKey" /> and associates the key with grammar components.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94729-110">コンス トラクター<xref:System.Speech.Recognition.SemanticResultKey>テキスト タグ (セマンティック キー) と、音声認識文法を追加する文法コンポーネントのセットを指定します。</span><span class="sxs-lookup"><span data-stu-id="94729-110">The constructors for <xref:System.Speech.Recognition.SemanticResultKey> specify a text tag (the semantic key) and a set of grammar components to add to a speech recognition grammar.</span></span>  
  
 <span data-ttu-id="94729-111">コンポーネントは、文法の配列として指定<xref:System.Speech.Recognition.GrammarBuilder>、オブジェクトの配列として<xref:System.String>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="94729-111">The grammar components can be specified either as an array of <xref:System.Speech.Recognition.GrammarBuilder> objects, or as an array of <xref:System.String> instances.</span></span>  
  
 <span data-ttu-id="94729-112">返されたにアクセスすることができます認識の文法コンポーネントを使用している場合<xref:System.Speech.Recognition.SemanticValue>のコンス トラクターに提供されるテキスト タグを使用して<xref:System.Speech.Recognition.SemanticResultKey>セマンティクス キーとして。</span><span class="sxs-lookup"><span data-stu-id="94729-112">If the grammar components are used in recognition, you can access the returned <xref:System.Speech.Recognition.SemanticValue> using the text tag provided to the constructor of <xref:System.Speech.Recognition.SemanticResultKey> as a semantic key.</span></span> <span data-ttu-id="94729-113"><xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティ、<xref:System.Speech.Recognition.SemanticValue>インスタンスの定義で使用される文法コンポーネントによって決定されます<xref:System.Speech.Recognition.SemanticResultKey>します。</span><span class="sxs-lookup"><span data-stu-id="94729-113">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of the <xref:System.Speech.Recognition.SemanticValue> instance will be determined by the grammar components used in the definition of <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">
          <span data-ttu-id="94729-114">
            <c>builders</c> 引数が指定する <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトによって関連付けられた <see cref="T:System.Speech.Recognition.SemanticValue" /> インスタンスにアクセスするためにセマンティクス キーとして使用するタグ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="94729-114">The tag to be used as a semantic key to access the <see cref="T:System.Speech.Recognition.SemanticValue" /> instance associated with the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects specified by the <c>builders</c> argument.</span>
          </span>
        </param>
        <param name="builders">
          <span data-ttu-id="94729-115">
            <c>semanticResultKey</c> で定義されているタグでアクセス可能な <see cref="T:System.Speech.Recognition.SemanticValue" /> オブジェクトに関連付けられる文法コンポーネントの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="94729-115">An array of grammar components that will be associated with a <see cref="T:System.Speech.Recognition.SemanticValue" /> object accessible with the tag defined in <c>semanticResultKey</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94729-116">音声認識文法を作成するために使用される 1 つ以上の <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトにセマンティクス キーを割り当てます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="94729-116">Assigns a semantic key to one or more <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects used to create a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94729-117">暗黙的な変換は、によって、`builders`引数サポート<xref:System.Speech.Recognition.SemanticResultValue>、 <xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.Choices>と<xref:System.String>オブジェクトもします。</span><span class="sxs-lookup"><span data-stu-id="94729-117">Because of implicit conversions, the `builders` argument supports <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, and <xref:System.String> objects as well.</span></span> <span data-ttu-id="94729-118">暗黙的な変換の詳細については、次を参照してください。<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="94729-118">For more information on implicit conversions, see <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</span></span>  
  
 <span data-ttu-id="94729-119">認識操作を実行するときに、<xref:System.Speech.Recognition.GrammarBuilder>で提供されているオブジェクト、`builders`引数を順次に処理されます。</span><span class="sxs-lookup"><span data-stu-id="94729-119">When performing a recognition operation, the <xref:System.Speech.Recognition.GrammarBuilder> objects provided in the `builders` argument are treated as sequential.</span></span> <span data-ttu-id="94729-120">たとえば場合、次<xref:System.Speech.Recognition.SemanticResultValue>を構築するために使用、 <xref:System.Speech.Recognition.Grammar>、認識エンジンへの入力が認識される順序で単語"the quick brown fox"を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="94729-120">For example, if the following <xref:System.Speech.Recognition.SemanticResultValue> is used to construct a <xref:System.Speech.Recognition.Grammar>, input to the recognition engine must contain the words "the quick brown fox" in sequence to be recognized.</span></span>  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 <span data-ttu-id="94729-121">`semanticResultKey`引数には、使用されるタグが含まれています。 アクセスを、<xref:System.Speech.Recognition.SemanticValue>が返される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="94729-121">The `semanticResultKey` argument contains the tag used to access the <xref:System.Speech.Recognition.SemanticValue> which might be returned.</span></span>  
  
 <span data-ttu-id="94729-122"><xref:System.Speech.Recognition.SemanticValue.Value%2A>の<xref:System.Speech.Recognition.SemanticValue>によって決定されます、<xref:System.Speech.Recognition.GrammarBuilder>インスタンスによって提供される、`builders`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="94729-122">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> of the <xref:System.Speech.Recognition.SemanticValue> is determined by the <xref:System.Speech.Recognition.GrammarBuilder> instances provided by the `builders` parameter.</span></span>  
  
 <span data-ttu-id="94729-123">場合、<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトの定義のインスタンスを含まない<xref:System.Speech.Recognition.SemanticResultValue>の値、<xref:System.Speech.Recognition.SemanticValue>は`null`します。</span><span class="sxs-lookup"><span data-stu-id="94729-123">If the <xref:System.Speech.Recognition.GrammarBuilder> objects contain no defining instances of <xref:System.Speech.Recognition.SemanticResultValue>, the value of the <xref:System.Speech.Recognition.SemanticValue> is `null`.</span></span>  
  
 <span data-ttu-id="94729-124">場合、<xref:System.Speech.Recognition.GrammarBuilder>で提供されているオブジェクト、`builders`パラメーターを提供するタグなし (に関連付けられていない、<xref:System.Speech.Recognition.SemanticResultKey>オブジェクト)<xref:System.Speech.Recognition.SemanticResultValue>認識ロジックでのインスタンスによって使用されるインスタンス<xref:System.Speech.Recognition.SemanticResultValue>を定義する<xref:System.Speech.Recognition.SemanticValue.Value%2A>のプロパティ、<xref:System.Speech.Recognition.SemanticValue>が生成されます。</span><span class="sxs-lookup"><span data-stu-id="94729-124">If the <xref:System.Speech.Recognition.GrammarBuilder> objects provided in the `builders` parameter provide an untagged (not associated with a <xref:System.Speech.Recognition.SemanticResultKey> object) <xref:System.Speech.Recognition.SemanticResultValue> instance that is used by the recognition logic, that instance of <xref:System.Speech.Recognition.SemanticResultValue> will define the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of the <xref:System.Speech.Recognition.SemanticValue> that is produced.</span></span>  
  
 <span data-ttu-id="94729-125">、1 つあり、1 つだけがタグなし<xref:System.Speech.Recognition.SemanticResultValue>インスタンス、<xref:System.Speech.Recognition.GrammarBuilder>で指定されたオブジェクト、`builders`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="94729-125">There should be one, and only one, untagged <xref:System.Speech.Recognition.SemanticResultValue> instance in the <xref:System.Speech.Recognition.GrammarBuilder> objects specified by the `builders` parameter.</span></span> <span data-ttu-id="94729-126">複数のインスタンスがタグなし場合<xref:System.Speech.Recognition.SemanticResultValue>に関連付けられている、<xref:System.Speech.Recognition.SemanticResultKey>の値セットに各試行は、<xref:System.Speech.Recognition.SemanticValue>認識結果の生成します。</span><span class="sxs-lookup"><span data-stu-id="94729-126">If multiple instances of untagged <xref:System.Speech.Recognition.SemanticResultValue> are associated with the <xref:System.Speech.Recognition.SemanticResultKey>, each will attempt to the set the value of the <xref:System.Speech.Recognition.SemanticValue> produced in the recognition result.</span></span> <span data-ttu-id="94729-127">これは許可されていませんし、認識エンジンは、使用しようとすると、例外が発生する<xref:System.Speech.Recognition.Grammar>などを使用して作成、<xref:System.Speech.Recognition.SemanticResultKey>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="94729-127">This is not permitted, and the recognizer will generate an exception when it attempts to use a <xref:System.Speech.Recognition.Grammar> created using such a <xref:System.Speech.Recognition.SemanticResultKey> instance.</span></span>  
  
 <span data-ttu-id="94729-128">インスタンス<xref:System.Speech.Recognition.SemanticResultValue>に含まれている、<xref:System.Speech.Recognition.GrammarBuilder>で指定されたオブジェクト、`builders`パラメーター別に既に関連付けられていると<xref:System.Speech.Recognition.SemanticResultKey>現在に影響を与えるありません<xref:System.Speech.Recognition.SemanticResultKey>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="94729-128">Instances of <xref:System.Speech.Recognition.SemanticResultValue> contained in the <xref:System.Speech.Recognition.GrammarBuilder> objects specified by the `builders` parameter and already associated with another <xref:System.Speech.Recognition.SemanticResultKey> have no effect on the current <xref:System.Speech.Recognition.SemanticResultKey> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94729-129">次の例では、作成、 <xref:System.Speech.Recognition.Grammar> 「自分のパスワードは...」をワイルドカードで実際の入力が一致すると、フォームのパスワードの入力を認識します。</span><span class="sxs-lookup"><span data-stu-id="94729-129">The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form "My password is …", where the actual input is matched with a wildcard.</span></span>  
  
 <span data-ttu-id="94729-130">ワイルドカードにタグを<xref:System.Speech.Recognition.SpeechRecognizer>キー値が"Password"。</span><span class="sxs-lookup"><span data-stu-id="94729-130">The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is "Password".</span></span> <span data-ttu-id="94729-131"><xref:System.Speech.Recognition.Grammar.SpeechRecognized>ハンドラーは、このタグの存在を確認します、パスワードのオーディオ入力を取得し、パスワードを確認します。</span><span class="sxs-lookup"><span data-stu-id="94729-131">The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.</span></span>  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">
          <span data-ttu-id="94729-132">
            <c>phrases</c> 引数が指定する <see cref="T:System.String" /> オブジェクトによって関連付けられた <see cref="T:System.Speech.Recognition.SemanticValue" /> インスタンスにアクセスするために使用するタグ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="94729-132">The tag to be used access the <see cref="T:System.Speech.Recognition.SemanticValue" /> instance associated with the <see cref="T:System.String" /> objects specified by the <c>phrases</c> argument.</span>
          </span>
        </param>
        <param name="phrases">
          <span data-ttu-id="94729-133">連結されたテキストが <c>semanticResultKey</c> で定義されているタグでアクセス可能な <see cref="T:System.Speech.Recognition.SemanticValue" /> オブジェクトに関連付けられている、1 つ以上の <see cref="T:System.String" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="94729-133">One or more <see cref="T:System.String" /> objects, whose concatenated text will be associated with a <see cref="T:System.Speech.Recognition.SemanticValue" /> object accessible with the tag defined in <c>semanticResultKey</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="94729-134">音声認識文法を作成するために使用される 1 つ以上の <see cref="T:System.String" /> インスタンスにセマンティクス キーを割り当てます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="94729-134">Assigns a semantic key to one or more <see cref="T:System.String" /> instances used to create a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94729-135">認識操作を実行するときに、<xref:System.String>で使用されるオブジェクト、`phrases`パラメーターを順次に処理されます。</span><span class="sxs-lookup"><span data-stu-id="94729-135">When performing a recognition operation, the <xref:System.String> objects used in the `phrases` parameter are treated as sequential.</span></span> <span data-ttu-id="94729-136">たとえば場合、次<xref:System.Speech.Recognition.SemanticResultValue>を構築するために使用、 <xref:System.Speech.Recognition.Grammar>、認識エンジンへの入力が認識される順序で単語"the quick brown fox"を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="94729-136">For example, if the following <xref:System.Speech.Recognition.SemanticResultValue> is used to construct a <xref:System.Speech.Recognition.Grammar>, input to the recognition engine must contain the words "the quick brown fox" in sequence to be recognized.</span></span>  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 <span data-ttu-id="94729-137">`semanticResultKey`引数は、使用するキーを決定します。 にアクセスする、<xref:System.Speech.Recognition.SemanticValue>が返される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="94729-137">The `semanticResultKey` argument determines the key used to access the <xref:System.Speech.Recognition.SemanticValue> which might be returned.</span></span>  
  
 <span data-ttu-id="94729-138">構築する場合、<xref:System.Speech.Recognition.Grammar>を使用して、<xref:System.Speech.Recognition.GrammarBuilder>文字列オブジェクトの配列にセマンティクス キーを格納しているオブジェクト、<xref:System.Speech.Recognition.SemanticValue.Value%2A>の<xref:System.Speech.Recognition.SemanticValue>認識操作によって生成されると、認識で使用される文字列になります。</span><span class="sxs-lookup"><span data-stu-id="94729-138">If you construct a <xref:System.Speech.Recognition.Grammar> using a <xref:System.Speech.Recognition.GrammarBuilder> object that contains a semantic key with an array of string objects,  the <xref:System.Speech.Recognition.SemanticValue.Value%2A> of the <xref:System.Speech.Recognition.SemanticValue> produced by a recognition operation  will be the string used in recognition.</span></span> <span data-ttu-id="94729-139">前の例では、つまり<xref:System.Speech.Recognition.SemanticValue.Value%2A>"the quick brown fox"となります。</span><span class="sxs-lookup"><span data-stu-id="94729-139">In the preceding example, this means that <xref:System.Speech.Recognition.SemanticValue.Value%2A> would be "the quick brown fox".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94729-140">次の例では、作成、<xref:System.Speech.Recognition.Grammar>から、<xref:System.Speech.Recognition.GrammarBuilder>を使用するオブジェクト、<xref:System.Speech.Recognition.SemanticResultKey>の配列で定義されている<xref:System.String>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="94729-140">The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.</span></span>  
  
 <span data-ttu-id="94729-141">認識エンジンを使用して、<xref:System.Speech.Recognition.Grammar>が作成された「色赤い緑色青い 0」という語句を認識します。</span><span class="sxs-lookup"><span data-stu-id="94729-141">A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase "color red green blue zero".</span></span> <span data-ttu-id="94729-142">セマンティクス、<xref:System.Speech.Recognition.RecognizedPhrase>によって返される認識が含まれます、<xref:System.Speech.Recognition.SemanticValue>で、<xref:System.Speech.Recognition.SemanticValue.Value%2A>の「青赤、緑」。</span><span class="sxs-lookup"><span data-stu-id="94729-142">The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of "red green blue".</span></span> <span data-ttu-id="94729-143">アクセスできる、 <xref:System.Speech.Recognition.SemanticValue> "code"タグを使用します。</span><span class="sxs-lookup"><span data-stu-id="94729-143">You can access the <xref:System.Speech.Recognition.SemanticValue> using the "code" tag.</span></span>  
  
 <span data-ttu-id="94729-144">ため、`SemanticResultValue("zero", 5)`に追加、 <xref:System.Speech.Recognition.GrammarBuilder>、ルート<xref:System.Speech.Recognition.SemanticValue>オブジェクト、 <xref:System.Speech.Recognition.RecognizedPhrase> 5 の値になります。</span><span class="sxs-lookup"><span data-stu-id="94729-144">Because of the `SemanticResultValue("zero", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.</span></span>  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="94729-145">現在の <see cref="T:System.Speech.Recognition.GrammarBuilder" /> インスタンスから構築された <see cref="T:System.Speech.Recognition.SemanticResultKey" /> のインスタンスを返します </span>
          <span class="sxs-lookup">
            <span data-stu-id="94729-145">Returns an instance of <see cref="T:System.Speech.Recognition.GrammarBuilder" /> constructed from the current <see cref="T:System.Speech.Recognition.SemanticResultKey" /> instance.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="94729-146">使用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>を使用すると、<xref:System.Speech.Recognition.GrammarBuilder>を受け取るコンス トラクター<xref:System.Speech.Recognition.SemanticResultKey>を引数として (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>)。</span><span class="sxs-lookup"><span data-stu-id="94729-146">The use of <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> is equivalent to using the <xref:System.Speech.Recognition.GrammarBuilder> constructor which takes <xref:System.Speech.Recognition.SemanticResultKey> as an argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="94729-147">次の例では、作成、<xref:System.Speech.Recognition.Grammar>背景色を変更するためのコマンドをサポートするオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="94729-147">The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.</span></span>  
  
 <span data-ttu-id="94729-148">A<xref:System.Speech.Recognition.Choices>オブジェクト (`colorChoice`) を使用して入力の背景色のオプションの一覧を含む、<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>メソッド<xref:System.Speech.Recognition.GrammarBuilder>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="94729-148">A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> method with <xref:System.Speech.Recognition.GrammarBuilder> instances.</span></span> <span data-ttu-id="94729-149"><xref:System.Speech.Recognition.GrammarBuilder>経由でインスタンスが取得した、<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>メソッドを<xref:System.Speech.Recognition.SemanticResultValue>色文字列から作成されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="94729-149">The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.</span></span>  
  
 <span data-ttu-id="94729-150">A<xref:System.Speech.Recognition.GrammarBuilder>呼び出すことによって取得し、<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>上、<xref:System.Speech.Recognition.SemanticResultKey>インスタンスで、セマンティックの選択肢をキーに使用される`colorChoice`します。</span><span class="sxs-lookup"><span data-stu-id="94729-150">A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.</span></span>  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>