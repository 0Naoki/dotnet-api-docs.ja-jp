<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d41242796c25031134a175d7e82a84cb6e4c818" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69231071" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5d182-101"><see cref="T:System.Speech.Recognition.SemanticResultValue" /> 値とキー文字列を関連付けて、<see cref="T:System.Speech.Recognition.SemanticValue" /> オブジェクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="5d182-101">Associates a key string with <see cref="T:System.Speech.Recognition.SemanticResultValue" /> values to define <see cref="T:System.Speech.Recognition.SemanticValue" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d182-102">System.string のセマンティック式の基本単位は<xref:System.Speech.Recognition.SemanticValue>、キーと値のペアであるです。</span><span class="sxs-lookup"><span data-stu-id="5d182-102">The basic unit of semantic expression in System.Speech is the <xref:System.Speech.Recognition.SemanticValue>, which is a key/value pair.</span></span>  
  
 <span data-ttu-id="5d182-103">オブジェクト<xref:System.Speech.Recognition.SemanticResultKey>を使用すると<xref:System.Speech.Recognition.SemanticResultValue> 、オブジェクトや<xref:System.Speech.Recognition.GrammarBuilder>文字列に含まれているインスタンスにタグを付けること<xref:System.Speech.Recognition.SemanticValue>ができるので、値が認識時にインスタンスから簡単にアクセスできるようになります。</span><span class="sxs-lookup"><span data-stu-id="5d182-103">Using <xref:System.Speech.Recognition.SemanticResultKey> objects, you tag <xref:System.Speech.Recognition.SemanticResultValue> instances contained in <xref:System.Speech.Recognition.GrammarBuilder> objects and strings so that the values may readily be accessed from <xref:System.Speech.Recognition.SemanticValue> instances on recognition.</span></span>  
  
 <span data-ttu-id="5d182-104">オブジェクトとオブジェクト<xref:System.Speech.Recognition.SemanticResultValue>を<xref:System.Speech.Recognition.SemanticResultKey> <xref:System.Speech.Recognition.GrammarBuilder> and<xref:System.Speech.Recognition.Choices>オブジェクトと共に使用して、音声認識文法のセマンティック構造を定義できます。</span><span class="sxs-lookup"><span data-stu-id="5d182-104">You can use <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> objects, in conjunction with <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects, to define the semantic structure for a speech recognition grammar.</span></span> <span data-ttu-id="5d182-105">認識結果のセマンティック情報にアクセスするには、の<xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>プロパティ<xref:System.Speech.Recognition.RecognizedPhrase>を使用してのインスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="5d182-105">To access the semantic information in a recognition result, obtain an instance of <xref:System.Speech.Recognition.SemanticValue> through the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
  
## Examples  
 <span data-ttu-id="5d182-106">次の例では<xref:System.Speech.Recognition.Grammar> 、"My password is..." という形式のパスワード入力を認識するを作成します。実際の入力は、ワイルドカードと一致します。</span><span class="sxs-lookup"><span data-stu-id="5d182-106">The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form "My password is …", where the actual input is matched with a wildcard.</span></span>  
  
 <span data-ttu-id="5d182-107">ワイルドカードにはセマンティックキーがタグ付けされ<xref:System.Speech.Recognition.Grammar.SpeechRecognized> 、ハンドラーはパスワード入力が発生したことを確認するためにこのタグが存在するかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="5d182-107">The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.</span></span>  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)"><span data-ttu-id="5d182-108">SemanticResultKey を使用して SemanticResultValue を抽出する</span><span class="sxs-lookup"><span data-stu-id="5d182-108">Using a SemanticResultKey to Extract a SemanticResultValue</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5d182-109"><see cref="T:System.Speech.Recognition.SemanticResultKey" /> のインスタンスを構築し、文法コンポーネントにキーを関連付けます。</span><span class="sxs-lookup"><span data-stu-id="5d182-109">Constructs an instance of <see cref="T:System.Speech.Recognition.SemanticResultKey" /> and associates the key with grammar components.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d182-110">の<xref:System.Speech.Recognition.SemanticResultKey>コンストラクターは、テキストタグ (セマンティックキー) と、音声認識文法に追加する文法コンポーネントのセットを指定します。</span><span class="sxs-lookup"><span data-stu-id="5d182-110">The constructors for <xref:System.Speech.Recognition.SemanticResultKey> specify a text tag (the semantic key) and a set of grammar components to add to a speech recognition grammar.</span></span>  
  
 <span data-ttu-id="5d182-111">文法コンポーネントは、オブジェクトの<xref:System.Speech.Recognition.GrammarBuilder>配列として、またはインスタンスの<xref:System.String>配列として指定できます。</span><span class="sxs-lookup"><span data-stu-id="5d182-111">The grammar components can be specified either as an array of <xref:System.Speech.Recognition.GrammarBuilder> objects, or as an array of <xref:System.String> instances.</span></span>  
  
 <span data-ttu-id="5d182-112">文法コンポーネントが認識で使用されている場合は、の<xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.SemanticResultKey>コンストラクターに提供されたテキストタグを使用して返されたにセマンティックキーとしてアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="5d182-112">If the grammar components are used in recognition, you can access the returned <xref:System.Speech.Recognition.SemanticValue> using the text tag provided to the constructor of <xref:System.Speech.Recognition.SemanticResultKey> as a semantic key.</span></span> <span data-ttu-id="5d182-113">インスタンスのプロパティは、の<xref:System.Speech.Recognition.SemanticResultKey>定義で使用される文法コンポーネントによって決定されます。 <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.SemanticValue></span><span class="sxs-lookup"><span data-stu-id="5d182-113">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of the <xref:System.Speech.Recognition.SemanticValue> instance will be determined by the grammar components used in the definition of <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey"><span data-ttu-id="5d182-114"><paramref name="builders" /> 引数が指定する <see cref="T:System.Speech.Recognition.SemanticValue" /> オブジェクトによって関連付けられた <see cref="T:System.Speech.Recognition.GrammarBuilder" /> インスタンスにアクセスするためにセマンティクス キーとして使用するタグ。</span><span class="sxs-lookup"><span data-stu-id="5d182-114">The tag to be used as a semantic key to access the <see cref="T:System.Speech.Recognition.SemanticValue" /> instance associated with the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects specified by the <paramref name="builders" /> argument.</span></span></param>
        <param name="builders"><span data-ttu-id="5d182-115"><paramref name="semanticResultKey" /> で定義されているタグでアクセス可能な <see cref="T:System.Speech.Recognition.SemanticValue" /> オブジェクトに関連付けられる文法コンポーネントの配列。</span><span class="sxs-lookup"><span data-stu-id="5d182-115">An array of grammar components that will be associated with a <see cref="T:System.Speech.Recognition.SemanticValue" /> object accessible with the tag defined in <paramref name="semanticResultKey" />.</span></span></param>
        <summary><span data-ttu-id="5d182-116">音声認識文法を作成するために使用される 1 つ以上の <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトにセマンティクス キーを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="5d182-116">Assigns a semantic key to one or more <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects used to create a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d182-117">暗黙的な変換のため、 `builders`引数は<xref:System.Speech.Recognition.SemanticResultValue>、 <xref:System.Speech.Recognition.SemanticResultKey> <xref:System.Speech.Recognition.Choices>、、、 <xref:System.String>およびの各オブジェクトもサポートします。</span><span class="sxs-lookup"><span data-stu-id="5d182-117">Because of implicit conversions, the `builders` argument supports <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, and <xref:System.String> objects as well.</span></span> <span data-ttu-id="5d182-118">暗黙の変換の詳細について<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>は、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5d182-118">For more information on implicit conversions, see <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</span></span>  
  
 <span data-ttu-id="5d182-119">認識操作<xref:System.Speech.Recognition.GrammarBuilder>を実行すると、 `builders`引数に指定されたオブジェクトはシーケンシャルとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="5d182-119">When performing a recognition operation, the <xref:System.Speech.Recognition.GrammarBuilder> objects provided in the `builders` argument are treated as sequential.</span></span> <span data-ttu-id="5d182-120">たとえば、次<xref:System.Speech.Recognition.SemanticResultValue>のを使用してを<xref:System.Speech.Recognition.Grammar>構築する場合、認識エンジンへの入力には、認識される順序で "the quick brown fox" という語が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5d182-120">For example, if the following <xref:System.Speech.Recognition.SemanticResultValue> is used to construct a <xref:System.Speech.Recognition.Grammar>, input to the recognition engine must contain the words "the quick brown fox" in sequence to be recognized.</span></span>  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 <span data-ttu-id="5d182-121">引数`semanticResultKey`には、返される可能性がある<xref:System.Speech.Recognition.SemanticValue>へのアクセスに使用されるタグが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5d182-121">The `semanticResultKey` argument contains the tag used to access the <xref:System.Speech.Recognition.SemanticValue> which might be returned.</span></span>  
  
 <span data-ttu-id="5d182-122">のは<xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.GrammarBuilder> 、パラメーター`builders`によって提供されるインスタンスによって決定されます。<xref:System.Speech.Recognition.SemanticValue></span><span class="sxs-lookup"><span data-stu-id="5d182-122">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> of the <xref:System.Speech.Recognition.SemanticValue> is determined by the <xref:System.Speech.Recognition.GrammarBuilder> instances provided by the `builders` parameter.</span></span>  
  
 <span data-ttu-id="5d182-123">の<xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.SemanticValue> `null`定義インスタンスがオブジェクトに含まれていない場合、の値はになります。 <xref:System.Speech.Recognition.SemanticResultValue></span><span class="sxs-lookup"><span data-stu-id="5d182-123">If the <xref:System.Speech.Recognition.GrammarBuilder> objects contain no defining instances of <xref:System.Speech.Recognition.SemanticResultValue>, the value of the <xref:System.Speech.Recognition.SemanticValue> is `null`.</span></span>  
  
 <span data-ttu-id="5d182-124"><xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.SemanticResultKey>パラメーターに指定されたオブジェクトが、認識ロジックで使用されるタグなしの(オブジェクトに関連付けられていない)インスタンスを提供する場合、そのインスタンスは、<xref:System.Speech.Recognition.GrammarBuilder> `builders` <xref:System.Speech.Recognition.SemanticValue.Value%2A>生成さ<xref:System.Speech.Recognition.SemanticValue>れるのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="5d182-124">If the <xref:System.Speech.Recognition.GrammarBuilder> objects provided in the `builders` parameter provide an untagged (not associated with a <xref:System.Speech.Recognition.SemanticResultKey> object) <xref:System.Speech.Recognition.SemanticResultValue> instance that is used by the recognition logic, that instance of <xref:System.Speech.Recognition.SemanticResultValue> will define the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of the <xref:System.Speech.Recognition.SemanticValue> that is produced.</span></span>  
  
 <span data-ttu-id="5d182-125">パラメーターによって<xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.GrammarBuilder>指定されたオブジェクトには、タグなしのインスタンスが1つだけ存在します。 `builders`</span><span class="sxs-lookup"><span data-stu-id="5d182-125">There should be one, and only one, untagged <xref:System.Speech.Recognition.SemanticResultValue> instance in the <xref:System.Speech.Recognition.GrammarBuilder> objects specified by the `builders` parameter.</span></span> <span data-ttu-id="5d182-126">タグなし<xref:System.Speech.Recognition.SemanticResultValue>の複数のインスタンスがに関連<xref:System.Speech.Recognition.SemanticResultKey>付けられている場合、は、認識結果<xref:System.Speech.Recognition.SemanticValue>に生成されたの値を設定しようとします。</span><span class="sxs-lookup"><span data-stu-id="5d182-126">If multiple instances of untagged <xref:System.Speech.Recognition.SemanticResultValue> are associated with the <xref:System.Speech.Recognition.SemanticResultKey>, each will attempt to the set the value of the <xref:System.Speech.Recognition.SemanticValue> produced in the recognition result.</span></span> <span data-ttu-id="5d182-127">これは許可されていません。この<xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.SemanticResultKey>ようなインスタンスを使用して作成されたを使用しようとすると、レコグナイザーは例外を生成します。</span><span class="sxs-lookup"><span data-stu-id="5d182-127">This is not permitted, and the recognizer will generate an exception when it attempts to use a <xref:System.Speech.Recognition.Grammar> created using such a <xref:System.Speech.Recognition.SemanticResultKey> instance.</span></span>  
  
 <span data-ttu-id="5d182-128"><xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.SemanticResultKey>パラメーターによって<xref:System.Speech.Recognition.SemanticResultKey>指定されたオブジェクトに含まれていて、既に別のに関連付けられているのインスタンスは、現在のインスタンスには影響しません。 `builders`</span><span class="sxs-lookup"><span data-stu-id="5d182-128">Instances of <xref:System.Speech.Recognition.SemanticResultValue> contained in the <xref:System.Speech.Recognition.GrammarBuilder> objects specified by the `builders` parameter and already associated with another <xref:System.Speech.Recognition.SemanticResultKey> have no effect on the current <xref:System.Speech.Recognition.SemanticResultKey> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5d182-129">次の例では<xref:System.Speech.Recognition.Grammar> 、"My password is..." という形式のパスワード入力を認識するを作成します。実際の入力は、ワイルドカードと一致します。</span><span class="sxs-lookup"><span data-stu-id="5d182-129">The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form "My password is …", where the actual input is matched with a wildcard.</span></span>  
  
 <span data-ttu-id="5d182-130">ワイルドカードには、キー <xref:System.Speech.Recognition.SpeechRecognizer>値が "Password" であるというタグが付けられます。</span><span class="sxs-lookup"><span data-stu-id="5d182-130">The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is "Password".</span></span> <span data-ttu-id="5d182-131">ハンドラー <xref:System.Speech.Recognition.Grammar.SpeechRecognized>は、このタグの存在を確認し、パスワードのオーディオ入力を取得して、パスワードを確認します。</span><span class="sxs-lookup"><span data-stu-id="5d182-131">The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.</span></span>  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey"><span data-ttu-id="5d182-132"><paramref name="phrases" /> 引数が指定する <see cref="T:System.String" /> オブジェクトによって関連付けられた <see cref="T:System.Speech.Recognition.SemanticValue" /> インスタンスにアクセスするために使用するタグ。</span><span class="sxs-lookup"><span data-stu-id="5d182-132">The tag to be used access the <see cref="T:System.Speech.Recognition.SemanticValue" /> instance associated with the <see cref="T:System.String" /> objects specified by the <paramref name="phrases" /> argument.</span></span></param>
        <param name="phrases"><span data-ttu-id="5d182-133">連結されたテキストが <paramref name="semanticResultKey" /> で定義されているタグでアクセス可能な <see cref="T:System.String" /> オブジェクトに関連付けられている、1 つ以上の <see cref="T:System.Speech.Recognition.SemanticValue" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5d182-133">One or more <see cref="T:System.String" /> objects, whose concatenated text will be associated with a <see cref="T:System.Speech.Recognition.SemanticValue" /> object accessible with the tag defined in <paramref name="semanticResultKey" />.</span></span></param>
        <summary><span data-ttu-id="5d182-134">音声認識文法を作成するために使用される 1 つ以上の <see cref="T:System.String" /> インスタンスにセマンティクス キーを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="5d182-134">Assigns a semantic key to one or more <see cref="T:System.String" /> instances used to create a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d182-135">認識操作<xref:System.String>を実行すると、 `phrases`パラメーターで使用されるオブジェクトはシーケンシャルとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="5d182-135">When performing a recognition operation, the <xref:System.String> objects used in the `phrases` parameter are treated as sequential.</span></span> <span data-ttu-id="5d182-136">たとえば、次<xref:System.Speech.Recognition.SemanticResultValue>のを使用してを<xref:System.Speech.Recognition.Grammar>構築する場合、認識エンジンへの入力には、認識される順序で "the quick brown fox" という語が含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5d182-136">For example, if the following <xref:System.Speech.Recognition.SemanticResultValue> is used to construct a <xref:System.Speech.Recognition.Grammar>, input to the recognition engine must contain the words "the quick brown fox" in sequence to be recognized.</span></span>  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 <span data-ttu-id="5d182-137">引数`semanticResultKey`は、返される可能性があるへ<xref:System.Speech.Recognition.SemanticValue>のアクセスに使用するキーを決定します。</span><span class="sxs-lookup"><span data-stu-id="5d182-137">The `semanticResultKey` argument determines the key used to access the <xref:System.Speech.Recognition.SemanticValue> which might be returned.</span></span>  
  
 <span data-ttu-id="5d182-138">文字列<xref:System.Speech.Recognition.Grammar> <xref:System.Speech.Recognition.GrammarBuilder> オブジェクトの<xref:System.Speech.Recognition.SemanticValue.Value%2A>配列を含むセマンティックキーを含むオブジェクトを使用してを構築する場合、認識操作によって生成されるのは認識に使用される文字列になります。<xref:System.Speech.Recognition.SemanticValue></span><span class="sxs-lookup"><span data-stu-id="5d182-138">If you construct a <xref:System.Speech.Recognition.Grammar> using a <xref:System.Speech.Recognition.GrammarBuilder> object that contains a semantic key with an array of string objects,  the <xref:System.Speech.Recognition.SemanticValue.Value%2A> of the <xref:System.Speech.Recognition.SemanticValue> produced by a recognition operation  will be the string used in recognition.</span></span> <span data-ttu-id="5d182-139">前の例では、これは<xref:System.Speech.Recognition.SemanticValue.Value%2A> "the quick brown fox" であることを意味します。</span><span class="sxs-lookup"><span data-stu-id="5d182-139">In the preceding example, this means that <xref:System.Speech.Recognition.SemanticValue.Value%2A> would be "the quick brown fox".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5d182-140">次の例では<xref:System.Speech.Recognition.Grammar> 、オブジェクト<xref:System.Speech.Recognition.GrammarBuilder>の<xref:System.String>配列によっ<xref:System.Speech.Recognition.SemanticResultKey>て定義されたを使用するオブジェクトからを作成します。</span><span class="sxs-lookup"><span data-stu-id="5d182-140">The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.</span></span>  
  
 <span data-ttu-id="5d182-141"><xref:System.Speech.Recognition.Grammar>作成されたを使用している認識エンジンは、"color red green blue zero" という語句を認識します。</span><span class="sxs-lookup"><span data-stu-id="5d182-141">A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase "color red green blue zero".</span></span> <span data-ttu-id="5d182-142">認識によって<xref:System.Speech.Recognition.RecognizedPhrase>返されるのセマンティクスには<xref:System.Speech.Recognition.SemanticValue> 、が<xref:System.Speech.Recognition.SemanticValue.Value%2A> "red green blue" であるが含まれます。</span><span class="sxs-lookup"><span data-stu-id="5d182-142">The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of "red green blue".</span></span> <span data-ttu-id="5d182-143">には、 <xref:System.Speech.Recognition.SemanticValue> "code" タグを使用してアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="5d182-143">You can access the <xref:System.Speech.Recognition.SemanticValue> using the "code" tag.</span></span>  
  
 <span data-ttu-id="5d182-144"><xref:System.Speech.Recognition.RecognizedPhrase> <xref:System.Speech.Recognition.SemanticValue>が`SemanticResultValue("zero", 5)` に<xref:System.Speech.Recognition.GrammarBuilder>追加されたため、のルートオブジェクトの値は5になります。</span><span class="sxs-lookup"><span data-stu-id="5d182-144">Because of the `SemanticResultValue("zero", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.</span></span>  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5d182-145">現在の <see cref="T:System.Speech.Recognition.GrammarBuilder" /> インスタンスから構築された <see cref="T:System.Speech.Recognition.SemanticResultKey" /> のインスタンスを返します</span><span class="sxs-lookup"><span data-stu-id="5d182-145">Returns an instance of <see cref="T:System.Speech.Recognition.GrammarBuilder" /> constructed from the current <see cref="T:System.Speech.Recognition.SemanticResultKey" /> instance.</span></span></summary>
        <returns><span data-ttu-id="5d182-146">現在の <see langword="SemanticResultKey" /> インスタンスから構築された <see cref="T:System.Speech.Recognition.GrammarBuilder" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="5d182-146">An instance of <see cref="T:System.Speech.Recognition.GrammarBuilder" /> constructed from the current <see langword="SemanticResultKey" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d182-147">の<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>使用は、引数 ( <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>) としてを<xref:System.Speech.Recognition.SemanticResultKey>受け取るコンストラクターを使用することと同じです。</span><span class="sxs-lookup"><span data-stu-id="5d182-147">The use of <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> is equivalent to using the <xref:System.Speech.Recognition.GrammarBuilder> constructor which takes <xref:System.Speech.Recognition.SemanticResultKey> as an argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5d182-148">次の例では<xref:System.Speech.Recognition.Grammar> 、背景色を変更するコマンドをサポートするオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="5d182-148">The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.</span></span>  
  
 <span data-ttu-id="5d182-149">背景色の`colorChoice`オプションの一覧を含む<xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Choices>オブジェクト () は、メソッドとインスタンスを使用して塗りつぶされます。<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29></span><span class="sxs-lookup"><span data-stu-id="5d182-149">A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> method with <xref:System.Speech.Recognition.GrammarBuilder> instances.</span></span> <span data-ttu-id="5d182-150">インスタンスは、色文字列から<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>作成され<xref:System.Speech.Recognition.SemanticResultValue>たオブジェクトのメソッドを通じて取得されます。 <xref:System.Speech.Recognition.GrammarBuilder></span><span class="sxs-lookup"><span data-stu-id="5d182-150">The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.</span></span>  
  
 <span data-ttu-id="5d182-151">次<xref:System.Speech.Recognition.GrammarBuilder>に、 <xref:System.Speech.Recognition.SemanticResultKey>インスタンスでを<xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder>呼び出して、を取得します。これは、の`colorChoice`セマンティック選択に使用されます。</span><span class="sxs-lookup"><span data-stu-id="5d182-151">A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.</span></span>  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
