<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f957a323dec74ac73ed944c20db03f0b11613e4a" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55349906" /></Metadata><TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognitionEngine = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="5803d-101">インプロセス音声認識エンジンにアクセスしてエンジンを管理するための手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="5803d-101">Provides the means to access and manage an in-process speech recognition engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-102">インストールされている音声認識機能のいずれかのこのクラスのインスタンスを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="5803d-103">認識機能のインストールに関する情報を取得するには、使用、静的な<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-104">このクラスは、音声認識エンジン インプロセスで実行されているはあり、次のように、音声認識のさまざまな角度から制御を提供します。</span><span class="sxs-lookup"><span data-stu-id="5803d-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="5803d-105">インプロセス音声の認識エンジンを作成するには、いずれかを使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="5803d-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="5803d-106">音声認識文法を管理するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A>メソッド、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="5803d-107">で、認識エンジンに対する入力を構成するを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>、または<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="5803d-108">音声認識を実行するのには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="5803d-109">認識がサイレント状態または予期しない入力を処理する方法を変更するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="5803d-110">使用して、認識エンジンが返す代替グリフの番号を変更する、<xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="5803d-111">認識エンジンで認識の結果を返します、<xref:System.Speech.Recognition.RecognitionResult>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="5803d-112">認識エンジンへの変更を同期するには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="5803d-113">認識エンジンでは、1 つ以上のスレッドを使用して、タスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="5803d-114">使用して、認識エンジンに対する入力をエミュレートするために、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="5803d-115"><xref:System.Speech.Recognition.SpeechRecognitionEngine>オブジェクトがオブジェクトをインスタンス化するプロセスの唯一を使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="5803d-116">これに対し、<xref:System.Speech.Recognition.SpeechRecognizer>を使いたい任意のアプリケーションと 1 つの認識を共有します。</span><span class="sxs-lookup"><span data-stu-id="5803d-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5803d-117">常に呼び出す<xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A>音声レコグナイザーへの最後の参照を解放する前にします。</span><span class="sxs-lookup"><span data-stu-id="5803d-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="5803d-118">それ以外の場合、使用されているリソースは解放されませんガベージ コレクターは、認識エンジン オブジェクトのまで`Finalize`メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-119">次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="5803d-120">この例を使用するため、`Multiple`のモード、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>メソッド、認識を実行には、コンソール ウィンドウを閉じるか、デバッグを停止するまでです。</span><span class="sxs-lookup"><span data-stu-id="5803d-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5803d-121"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5803d-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-122">構築することができます、<xref:System.Speech.Recognition.SpeechRecognitionEngine>から、次のいずれかのインスタンス。</span><span class="sxs-lookup"><span data-stu-id="5803d-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="5803d-123">システムの既定の音声認識エンジン</span><span class="sxs-lookup"><span data-stu-id="5803d-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="5803d-124">名前を指定する特定の音声認識エンジン</span><span class="sxs-lookup"><span data-stu-id="5803d-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="5803d-125">指定したロケールの既定の音声認識エンジン</span><span class="sxs-lookup"><span data-stu-id="5803d-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="5803d-126">指定した条件を満たす特定の認識エンジンを<xref:System.Speech.Recognition.RecognizerInfo>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="5803d-127">音声認識エンジンが認識を開始する前に、少なくとも 1 つの音声認識文法を読み込むし、認識エンジンの入力を構成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5803d-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="5803d-128">文法を読み込むには、呼び出し、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-129">オーディオの入力を構成するには、次のいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-130">システムの既定の音声認識エンジンを使用して、<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5803d-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-131">音声認識エンジンが音声認識を開始する前に、認識文法を少なくとも 1 つを読み込むし、認識エンジンの入力を構成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5803d-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="5803d-132">文法を読み込むには、呼び出し、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-133">オーディオの入力を構成するには、次のいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Globalization.CultureInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="5803d-134">音声認識エンジンがサポートする必要があるロケール。</span><span class="sxs-lookup"><span data-stu-id="5803d-134">The locale that the speech recognizer must support.</span></span></param>
        <summary><span data-ttu-id="5803d-135">指定したロケールの既定の音声認識エンジンを使用して、<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5803d-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-136">Microsoft Windows と System.Speech API は、有効なすべての言語、国コードをそのまま使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="5803d-137">指定された言語を使用して、音声認識を実行する、`CultureInfo`引数、言語、国コードをインストールする必要がありますをサポートする音声認識エンジン。</span><span class="sxs-lookup"><span data-stu-id="5803d-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="5803d-138">Microsoft Windows 7 に同梱されている音声認識エンジンは、次の言語、国コードで動作します。</span><span class="sxs-lookup"><span data-stu-id="5803d-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="5803d-139">en GB。</span><span class="sxs-lookup"><span data-stu-id="5803d-139">en-GB.</span></span> <span data-ttu-id="5803d-140">English (United Kingdom)</span><span class="sxs-lookup"><span data-stu-id="5803d-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="5803d-141">en-us (英語)。</span><span class="sxs-lookup"><span data-stu-id="5803d-141">en-US.</span></span> <span data-ttu-id="5803d-142">英語 (米国)</span><span class="sxs-lookup"><span data-stu-id="5803d-142">English (United States)</span></span>  
  
-   <span data-ttu-id="5803d-143">de-de などがあります。</span><span class="sxs-lookup"><span data-stu-id="5803d-143">de-DE.</span></span> <span data-ttu-id="5803d-144">ドイツ語 (ドイツ)</span><span class="sxs-lookup"><span data-stu-id="5803d-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="5803d-145">ES-ES します。</span><span class="sxs-lookup"><span data-stu-id="5803d-145">es-ES.</span></span> <span data-ttu-id="5803d-146">スペイン語 (スペイン)</span><span class="sxs-lookup"><span data-stu-id="5803d-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="5803d-147">個</span><span class="sxs-lookup"><span data-stu-id="5803d-147">fr-FR.</span></span> <span data-ttu-id="5803d-148">フランス語 (フランス)</span><span class="sxs-lookup"><span data-stu-id="5803d-148">French (France)</span></span>  
  
-   <span data-ttu-id="5803d-149">JA-JP します。</span><span class="sxs-lookup"><span data-stu-id="5803d-149">ja-JP.</span></span> <span data-ttu-id="5803d-150">日本語 (日本)</span><span class="sxs-lookup"><span data-stu-id="5803d-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="5803d-151">ZH-CN します。</span><span class="sxs-lookup"><span data-stu-id="5803d-151">zh-CN.</span></span> <span data-ttu-id="5803d-152">中国語 (中国)</span><span class="sxs-lookup"><span data-stu-id="5803d-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="5803d-153">zh-tw があります。</span><span class="sxs-lookup"><span data-stu-id="5803d-153">zh-TW.</span></span> <span data-ttu-id="5803d-154">中国語 (台湾)</span><span class="sxs-lookup"><span data-stu-id="5803d-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="5803d-155">"En"、"fr"などの 2 文字の言語コードまたは"es"も使用できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="5803d-156">音声認識エンジンが認識を開始する前に、少なくとも 1 つの音声認識文法を読み込むし、認識エンジンの入力を構成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5803d-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="5803d-157">文法を読み込むには、呼び出し、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-158">オーディオの入力を構成するには、次のいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-159">次の例では、EN-US ロケールの音声認識エンジンの初期化方法と基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-160">インストールされた音節認識機能はいずれもこのロケールをサポートしないか、または <paramref name="culture" /> が不変のカルチャです。</span><span class="sxs-lookup"><span data-stu-id="5803d-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-161"><paramref name="Culture" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-161"><paramref name="Culture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Speech.Recognition.RecognizerInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerInfo" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo"><span data-ttu-id="5803d-162">特定の音声認識エンジンの情報。</span><span class="sxs-lookup"><span data-stu-id="5803d-162">The information for the specific speech recognizer.</span></span></param>
        <summary><span data-ttu-id="5803d-163">使用する認識エンジンを指定する <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトの情報を使用して、<see cref="T:System.Speech.Recognition.RecognizerInfo" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5803d-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-164">インストールされている音声認識機能のいずれかのこのクラスのインスタンスを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="5803d-165">認識機能のインストールに関する情報を取得する、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-166">音声認識エンジンが認識を開始する前に、少なくとも 1 つの音声認識文法を読み込むし、認識エンジンの入力を構成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5803d-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="5803d-167">文法を読み込むには、呼び出し、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-168">オーディオの入力を構成するには、次のいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-169">次の例では、英語の言語をサポートする音声認識エンジンの初期化方法と基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : string -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerId" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId"><span data-ttu-id="5803d-170">使用する音声レコグナイザーのトークン名。</span><span class="sxs-lookup"><span data-stu-id="5803d-170">The token name of the speech recognizer to use.</span></span></param>
        <summary><span data-ttu-id="5803d-171">使用する認識エンジンの名前を指定する文字列パラメーターを使用して、<see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5803d-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-172">認識エンジンのトークン名の値である、<xref:System.Speech.Recognition.RecognizerInfo.Id%2A>のプロパティ、<xref:System.Speech.Recognition.RecognizerInfo>によって返されるオブジェクト、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A>認識エンジンのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="5803d-173">インストールされているすべての認識機能のコレクションを取得する静的なを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-174">音声認識エンジンが認識を開始する前に、少なくとも 1 つの音声認識文法を読み込むし、認識エンジンの入力を構成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5803d-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="5803d-175">文法を読み込むには、呼び出し、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-176">オーディオの入力を構成するには、次のいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-177">次の例では、Windows の音声認識エンジンの 8.0 のインスタンスを作成する方法と基本的な音声認識を示すコンソール アプリケーションの一部を示しています (英語 - 米国) です。</span><span class="sxs-lookup"><span data-stu-id="5803d-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-178">そのトークン名の音声認識機能はインストールされていないか、または <paramref name="recognizerId" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="5803d-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-179"><paramref name="recognizerId" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-179"><paramref name="recognizerId" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-180"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> によって受け取られるオーディオの形式を取得します。</span><span class="sxs-lookup"><span data-stu-id="5803d-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="5803d-181"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> インスタンスへの入力時のオーディオの形式、または入力が構成されていないか null 入力に設定されている場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5803d-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-182">オーディオの入力を構成するには、次のいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-183">使用して次の例<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A>を取得し、オーディオ形式のデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-184"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> によって受け取られるオーディオのレベルを取得します。</span><span class="sxs-lookup"><span data-stu-id="5803d-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="5803d-185">音声認識エンジンへの入力のオーディオ レベル (0 ～ 100)。</span><span class="sxs-lookup"><span data-stu-id="5803d-185">The audio level of the input to the speech recognizer, from 0 through 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-186">値 0 は、サイレント状態を表し、100 は、最大の入力の音量を表します。</span><span class="sxs-lookup"><span data-stu-id="5803d-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-187"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> がオーディオ入力のレベルを報告すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-188"><xref:System.Speech.Recognition.SpeechRecognitionEngine> 1 秒間に複数回には、このイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5803d-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="5803d-189">イベントが発生する頻度は、アプリケーションが実行されているコンピューターによって異なります。</span><span class="sxs-lookup"><span data-stu-id="5803d-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="5803d-190">イベントの時点で、オーディオ レベルを取得する、<xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A>プロパティ、関連付けられている<xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="5803d-191">現在、認識エンジンに対する入力のオーディオ レベルを取得する認識エンジンを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="5803d-192"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-193">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-194">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-195">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-195">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-196">次の例は、ハンドラーを追加、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated>イベントを<xref:System.Speech.Recognition.SpeechRecognitionEngine>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="5803d-197">ハンドラーは、コンソールに新しいオーディオ レベルを出力します。</span><span class="sxs-lookup"><span data-stu-id="5803d-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-198"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> に入力を提供しているデバイスによって生成されているオーディオ ストリーム内の現在の位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="5803d-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="5803d-199">入力デバイスによって生成されているオーディオ ストリームの現在の位置。</span><span class="sxs-lookup"><span data-stu-id="5803d-199">The current location in the audio stream being generated by the input device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-200"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>プロパティは、生成されたオーディオ ストリーム内の入力デバイスの位置を参照します。</span><span class="sxs-lookup"><span data-stu-id="5803d-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="5803d-201">これに対し、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>プロパティ参照がオーディオ入力内の認識エンジンの位置。</span><span class="sxs-lookup"><span data-stu-id="5803d-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="5803d-202">これらの位置は、さまざまなであることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-202">These positions can be different.</span></span> <span data-ttu-id="5803d-203">たとえば、認識エンジンが受け取った場合どの it されていない入力が、認識結果が次の値を生成、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>プロパティは、の値より小さい、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-204">次の例では、インプロセス音声認識エンジンは、音声入力に一致するのに口述文法を使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="5803d-205">ハンドラーを<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>をコンソールに出力イベント、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A>音声認識エンジンがその入力に音声を検出した場合。</span><span class="sxs-lookup"><span data-stu-id="5803d-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-206"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> がオーディオ信号の問題を検出したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-207">どのような問題が発生させるには、使用、<xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A>プロパティ、関連付けられている<xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="5803d-208"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-209">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-210">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-211">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-211">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-212">次の例は、に関する情報を収集するイベント ハンドラーを定義、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-213"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> によって受け取られるオーディオの状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="5803d-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="5803d-214">音声レコグナイザーへのオーディオ入力の状態。</span><span class="sxs-lookup"><span data-stu-id="5803d-214">The state of the audio input to the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-215"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>プロパティのメンバーとオーディオの状態を表す、<xref:System.Speech.Recognition.AudioState>列挙体。</span><span class="sxs-lookup"><span data-stu-id="5803d-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-216">オーディオの状態変化が <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> によって受け取られるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-217">イベントの時点でオーディオの状態を取得する、<xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A>プロパティ、関連付けられている<xref:System.Speech.Recognition.AudioStateChangedEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="5803d-218">認識エンジンへの入力の現在のオーディオの状態を取得する認識エンジンを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="5803d-219">オーディオの状態に関する詳細については、次を参照してください。、<xref:System.Speech.Recognition.AudioState>列挙体。</span><span class="sxs-lookup"><span data-stu-id="5803d-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="5803d-220"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-221">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-222">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-223">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-223">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-224">次の例のハンドラーを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>レコグナイザーを記述するイベントの新しい<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A>コンソールに変更されるたびにのメンバーを使用して、<xref:System.Speech.Recognition.AudioState>列挙体。</span><span class="sxs-lookup"><span data-stu-id="5803d-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.BabbleTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-225"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が認識を終了する前にバックグラウンド ノイズのみを含む入力を受け入れる時間間隔を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="5803d-226">時間の間隔。</span><span class="sxs-lookup"><span data-stu-id="5803d-226">The duration of the time interval.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-227">各音声認識エンジンには、サイレント状態と音声認識とを区別するためのアルゴリズムがあります。</span><span class="sxs-lookup"><span data-stu-id="5803d-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="5803d-228">認識エンジンは、サイレント以外の状態の入力の認識エンジンのいずれかの初期規則と一致しません、バック グラウンド ノイズが読み込まれ、音声認識文法を有効になっているように分類します。</span><span class="sxs-lookup"><span data-stu-id="5803d-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="5803d-229">認識エンジンは、バブル タイムアウト間隔内でバック グラウンド ノイズと無音状態のみを受信する場合、認識エンジンはその認識操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="5803d-230">非同期認識操作の場合、認識エンジンを発生させます、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベント、場所、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType>プロパティは`true`、および<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType>プロパティが`null`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="5803d-231">同期の認識操作とエミュレーションでは、認識エンジンが返されます`null`、有効なのではなく<xref:System.Speech.Recognition.RecognitionResult>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="5803d-232">バブル タイムアウト期間が 0 に設定されている場合、認識エンジンにバブル タイムアウトのチェックは実行されません。</span><span class="sxs-lookup"><span data-stu-id="5803d-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="5803d-233">タイムアウト間隔は、負でない値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="5803d-234">既定値は、0 秒です。</span><span class="sxs-lookup"><span data-stu-id="5803d-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-235">次の例では、コンソール アプリケーションを設定する基本的な音声認識を示しますの一部を示しています、<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>のプロパティを<xref:System.Speech.Recognition.SpeechRecognitionEngine>音声認識を開始する前にします。</span><span class="sxs-lookup"><span data-stu-id="5803d-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="5803d-236">音声認識エンジンのハンドラー<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベントのイベント情報を示すためにコンソールに出力する方法、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>のプロパティを<xref:System.Speech.Recognition.SpeechRecognitionEngine>認識操作の影響を与えます。</span><span class="sxs-lookup"><span data-stu-id="5803d-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder. 
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5803d-237">このプロパティが 0 秒未満の値に設定されています。</span><span class="sxs-lookup"><span data-stu-id="5803d-237">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5803d-238"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトを破棄します。</span><span class="sxs-lookup"><span data-stu-id="5803d-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognitionEngine.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-239"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトを破棄します。</span><span class="sxs-lookup"><span data-stu-id="5803d-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognitionEngine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="5803d-240">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5803d-240"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5803d-241"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトを破棄し、セッション中に使用するリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5803d-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5803d-242">同期音声認識に音声ではなくテキストを使用して、音声認識エンジンに対する入力をエミュレートします。</span><span class="sxs-lookup"><span data-stu-id="5803d-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-243">これらのメソッドは、システム オーディオの入力をバイパスし、として認識エンジンにテキストを提示<xref:System.String>オブジェクトの配列として<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="5803d-244">これは、アプリケーションまたは文法のデバッグまたはテストするときに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="5803d-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="5803d-245">たとえば、エミュレーションを使用すると、単語と文法では、かどうかと、単語が認識されるときに、どのようなセマンティクスは返されるを決定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="5803d-246">使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>エミュレーション操作中に、音声認識エンジンへのオーディオ入力を無効にする方法。</span><span class="sxs-lookup"><span data-stu-id="5803d-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="5803d-247">音声認識エンジンが発生、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント認識操作がエミュレートされていない場合と同様です。</span><span class="sxs-lookup"><span data-stu-id="5803d-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="5803d-248">認識エンジンは、新しい行と余分な空白を無視し、区切り記号をリテラルの入力として扱います。</span><span class="sxs-lookup"><span data-stu-id="5803d-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5803d-249"><xref:System.Speech.Recognition.RecognitionResult>エミュレートされた入力に対して音声認識エンジンによって生成されたオブジェクトの値を持つ`null`の<xref:System.Speech.Recognition.RecognitionResult.Audio%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="5803d-250">非同期認識をエミュレートするために使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="5803d-251">認識操作の入力。</span><span class="sxs-lookup"><span data-stu-id="5803d-251">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="5803d-252">同期音声認識に音声ではなくテキストを使用して、音声認識エンジンに対する語句の入力をエミュレートします。</span><span class="sxs-lookup"><span data-stu-id="5803d-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <returns><span data-ttu-id="5803d-253">認識操作の結果。操作が不適切だったり、認識エンジンが有効でない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5803d-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-254">音声認識エンジンが発生、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント認識操作がエミュレートされていない場合と同様です。</span><span class="sxs-lookup"><span data-stu-id="5803d-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="5803d-255">Vista および Windows 7 に付属しているレコグナイザーは大文字小文字を区別し、入力語句に文法規則を適用する場合は、幅を文字します。</span><span class="sxs-lookup"><span data-stu-id="5803d-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="5803d-256">この種類の比較の詳細については、次を参照してください。、<xref:System.Globalization.CompareOptions>列挙値<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>と<xref:System.Globalization.CompareOptions.IgnoreWidth>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="5803d-257">認識対象も新しい行と余分な空白を無視し、区切り記号をリテラルの入力として扱います。</span><span class="sxs-lookup"><span data-stu-id="5803d-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-258">次のコード例は、エミュレートされた入力、関連付けられている認識結果と、関連する音声認識エンジンによって発生したイベントを説明するコンソール アプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="5803d-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="5803d-259">例では、次の出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-260">認識エンジンに読み込まれている音声認識文法がありません。</span><span class="sxs-lookup"><span data-stu-id="5803d-260">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-261"><paramref name="inputText" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-261"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-262"><paramref name="inputText" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="5803d-262"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="5803d-263">認識操作のための必要を格納する単語単位の配列。</span><span class="sxs-lookup"><span data-stu-id="5803d-263">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="5803d-264">エミュレートされた認識操作に使用する比較の種類を示す列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="5803d-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="5803d-265">同期音声認識にオーディオではなくテキストを使用して、音声認識エンジンに対する特定の語の入力をエミュレートし、語と読み込まれている音声認識文法との間で認識エンジンが Unicode 比較をどのように行うかを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="5803d-266">認識操作の結果。操作が不適切だったり、認識エンジンが有効でない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5803d-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-267">音声認識エンジンが発生、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント認識操作がエミュレートされていない場合と同様です。</span><span class="sxs-lookup"><span data-stu-id="5803d-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="5803d-268">認識エンジンを使用して`compareOptions`入力語句に文法規則が適用するときにします。</span><span class="sxs-lookup"><span data-stu-id="5803d-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="5803d-269">Vista および Windows 7 に付属しているレコグナイザー場合大文字小文字は無視、<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>または<xref:System.Globalization.CompareOptions.IgnoreCase>値が存在します。</span><span class="sxs-lookup"><span data-stu-id="5803d-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="5803d-270">認識エンジンは、文字幅を常に無視し、決して、カナ型を無視します。</span><span class="sxs-lookup"><span data-stu-id="5803d-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="5803d-271">認識エンジンは、新しい行と余分な空白を無視し、区切り記号をリテラルの入力として扱います。</span><span class="sxs-lookup"><span data-stu-id="5803d-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="5803d-272">詳細については、文字幅、ひらがなとカタカナは、次を参照してください。、<xref:System.Globalization.CompareOptions>列挙体。</span><span class="sxs-lookup"><span data-stu-id="5803d-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-273">認識エンジンに読み込まれている音声認識文法がありません。</span><span class="sxs-lookup"><span data-stu-id="5803d-273">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-274"><paramref name="wordUnits" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-274"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-275"><paramref name="wordUnits" /> は 1 つ以上の <see langword="null" /> 要素を含みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-275"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5803d-276"><paramref name="compareOptions" /> は <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、または <see cref="F:System.Globalization.CompareOptions.StringSort" /> フラグを含みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-276"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="5803d-277">認識操作の入力語句。</span><span class="sxs-lookup"><span data-stu-id="5803d-277">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="5803d-278">エミュレートされた認識操作に使用する比較の種類を示す列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="5803d-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="5803d-279">同期音声認識にオーディオではなくテキストを使用して、音声認識エンジンに対するフレーズの入力をエミュレートし、フレーズと読み込まれている音声認識文法との間で認識エンジンが Unicode 比較をどのように行うかを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="5803d-280">認識操作の結果。操作が不適切だったり、認識エンジンが有効でない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5803d-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-281">音声認識エンジンが発生、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント認識操作がエミュレートされていない場合と同様です。</span><span class="sxs-lookup"><span data-stu-id="5803d-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="5803d-282">認識エンジンを使用して`compareOptions`入力語句に文法規則が適用するときにします。</span><span class="sxs-lookup"><span data-stu-id="5803d-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="5803d-283">Vista および Windows 7 に付属しているレコグナイザー場合大文字小文字は無視、<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>または<xref:System.Globalization.CompareOptions.IgnoreCase>値が存在します。</span><span class="sxs-lookup"><span data-stu-id="5803d-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="5803d-284">認識エンジンは、文字幅を常に無視し、決して、カナ型を無視します。</span><span class="sxs-lookup"><span data-stu-id="5803d-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="5803d-285">認識エンジンは、新しい行と余分な空白を無視し、区切り記号をリテラルの入力として扱います。</span><span class="sxs-lookup"><span data-stu-id="5803d-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="5803d-286">詳細については、文字幅、ひらがなとカタカナは、次を参照してください。、<xref:System.Globalization.CompareOptions>列挙体。</span><span class="sxs-lookup"><span data-stu-id="5803d-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-287">認識エンジンに読み込まれている音声認識文法がありません。</span><span class="sxs-lookup"><span data-stu-id="5803d-287">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-288"><paramref name="inputText" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-288"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-289"><paramref name="inputText" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="5803d-289"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5803d-290"><paramref name="compareOptions" /> は <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、または <see cref="F:System.Globalization.CompareOptions.StringSort" /> フラグを含みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-290"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5803d-291">非同期音声認識に音声ではなくテキストを使用して、音声認識エンジンに対する入力をエミュレートします。</span><span class="sxs-lookup"><span data-stu-id="5803d-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-292">これらのメソッドは、システム オーディオの入力をバイパスし、として認識エンジンにテキストを提示<xref:System.String>オブジェクトの配列として<xref:System.Speech.Recognition.RecognizedWordUnit>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="5803d-293">これは、アプリケーションまたは文法のデバッグまたはテストするときに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="5803d-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="5803d-294">たとえば、エミュレーションを使用すると、単語と文法では、かどうかと、単語が認識されるときに、どのようなセマンティクスは返されるを決定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="5803d-295">使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>エミュレーション操作中に、音声認識エンジンへのオーディオ入力を無効にする方法。</span><span class="sxs-lookup"><span data-stu-id="5803d-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="5803d-296">音声認識エンジンが発生、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント認識操作がエミュレートされていない場合と同様です。</span><span class="sxs-lookup"><span data-stu-id="5803d-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="5803d-297">認識エンジンには、非同期認識操作が完了すると、生成、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="5803d-298">認識エンジンは、新しい行と余分な空白を無視し、区切り記号をリテラルの入力として扱います。</span><span class="sxs-lookup"><span data-stu-id="5803d-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5803d-299"><xref:System.Speech.Recognition.RecognitionResult>エミュレートされた入力に対して音声認識エンジンによって生成されたオブジェクトの値を持つ`null`の<xref:System.Speech.Recognition.RecognitionResult.Audio%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="5803d-300">同期の認識をエミュレートするために使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="5803d-301">認識操作の入力。</span><span class="sxs-lookup"><span data-stu-id="5803d-301">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="5803d-302">非同期音声認識に音声ではなくテキストを使用して、音声認識エンジンに対する語句の入力をエミュレートします。</span><span class="sxs-lookup"><span data-stu-id="5803d-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-303">音声認識エンジンが発生、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント認識操作がエミュレートされていない場合と同様です。</span><span class="sxs-lookup"><span data-stu-id="5803d-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="5803d-304">認識エンジンには、非同期認識操作が完了すると、生成、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="5803d-305">Vista および Windows 7 に付属しているレコグナイザーは大文字小文字を区別し、入力語句に文法規則を適用する場合は、幅を文字します。</span><span class="sxs-lookup"><span data-stu-id="5803d-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="5803d-306">この種類の比較の詳細については、次を参照してください。、<xref:System.Globalization.CompareOptions>列挙値<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>と<xref:System.Globalization.CompareOptions.IgnoreWidth>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="5803d-307">認識対象も新しい行と余分な空白を無視し、区切り記号をリテラルの入力として扱います。</span><span class="sxs-lookup"><span data-stu-id="5803d-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-308">次のコード例は、非同期のエミュレートされた入力、関連付けられている認識結果と、音声認識エンジンによって生成される、関連するイベントを説明するコンソール アプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="5803d-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="5803d-309">例では、次の出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHander);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHander(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-310">認識エンジンに、読み込まれている音声認識文法がないか、認識エンジンに、未完了の非同期認識操作が存在しています。</span><span class="sxs-lookup"><span data-stu-id="5803d-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-311"><paramref name="inputText" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-311"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-312"><paramref name="inputText" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="5803d-312"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="5803d-313">認識操作のための必要を格納する単語単位の配列。</span><span class="sxs-lookup"><span data-stu-id="5803d-313">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="5803d-314">エミュレートされた認識操作に使用する比較の種類を示す列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="5803d-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="5803d-315">非同期音声認識にオーディオではなく <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> の配列を使用して、共有された音声認識エンジンに対する特定の語の入力をエミュレートし、語と読み込まれている音声認識文法との間で認識エンジンが Unicode 比較をどのように行うかを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-316">音声認識エンジンが発生、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント認識操作がエミュレートされていない場合と同様です。</span><span class="sxs-lookup"><span data-stu-id="5803d-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="5803d-317">認識エンジンには、非同期認識操作が完了すると、生成、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="5803d-318">認識エンジンを使用して`compareOptions`入力語句に文法規則が適用するときにします。</span><span class="sxs-lookup"><span data-stu-id="5803d-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="5803d-319">Vista および Windows 7 に付属しているレコグナイザー場合大文字小文字は無視、<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>または<xref:System.Globalization.CompareOptions.IgnoreCase>値が存在します。</span><span class="sxs-lookup"><span data-stu-id="5803d-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="5803d-320">認識対象は、文字幅を常に無視して、カナ型を無視することはありません。</span><span class="sxs-lookup"><span data-stu-id="5803d-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="5803d-321">認識対象も新しい行と余分な空白を無視し、区切り記号をリテラルの入力として扱います。</span><span class="sxs-lookup"><span data-stu-id="5803d-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="5803d-322">詳細については、文字幅、ひらがなとカタカナは、次を参照してください。、<xref:System.Globalization.CompareOptions>列挙体。</span><span class="sxs-lookup"><span data-stu-id="5803d-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-323">認識エンジンに、読み込まれている音声認識文法がないか、認識エンジンに、未完了の非同期認識操作が存在しています。</span><span class="sxs-lookup"><span data-stu-id="5803d-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-324"><paramref name="wordUnits" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-324"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-325"><paramref name="wordUnits" /> は 1 つ以上の <see langword="null" /> 要素を含みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-325"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5803d-326"><paramref name="compareOptions" /> は <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、または <see cref="F:System.Globalization.CompareOptions.StringSort" /> フラグを含みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-326"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="5803d-327">認識操作の入力語句。</span><span class="sxs-lookup"><span data-stu-id="5803d-327">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="5803d-328">エミュレートされた認識操作に使用する比較の種類を示す列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="5803d-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="5803d-329">非同期音声認識にオーディオではなくテキストを使用して、音声認識エンジンに対するフレーズの入力をエミュレートし、フレーズと読み込まれている音声認識文法との間で認識エンジンが Unicode 比較をどのように行うかを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-330">音声認識エンジンが発生、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント認識操作がエミュレートされていない場合と同様です。</span><span class="sxs-lookup"><span data-stu-id="5803d-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="5803d-331">認識エンジンには、非同期認識操作が完了すると、生成、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="5803d-332">認識エンジンを使用して`compareOptions`入力語句に文法規則が適用するときにします。</span><span class="sxs-lookup"><span data-stu-id="5803d-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="5803d-333">Vista および Windows 7 に付属しているレコグナイザー場合大文字小文字は無視、<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>または<xref:System.Globalization.CompareOptions.IgnoreCase>値が存在します。</span><span class="sxs-lookup"><span data-stu-id="5803d-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="5803d-334">認識対象は、文字幅を常に無視して、カナ型を無視することはありません。</span><span class="sxs-lookup"><span data-stu-id="5803d-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="5803d-335">認識対象も新しい行と余分な空白を無視し、区切り記号をリテラルの入力として扱います。</span><span class="sxs-lookup"><span data-stu-id="5803d-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="5803d-336">詳細については、文字幅、ひらがなとカタカナは、次を参照してください。、<xref:System.Globalization.CompareOptions>列挙体。</span><span class="sxs-lookup"><span data-stu-id="5803d-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-337">認識エンジンに、読み込まれている音声認識文法がないか、認識エンジンに、未完了の非同期認識操作が存在しています。</span><span class="sxs-lookup"><span data-stu-id="5803d-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-338"><paramref name="inputText" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-338"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-339"><paramref name="inputText" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="5803d-339"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5803d-340"><paramref name="compareOptions" /> は <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、または <see cref="F:System.Globalization.CompareOptions.StringSort" /> フラグを含みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-340"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-341"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> がエミュレートされた入力の非同期認識操作を終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-342">各<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>メソッドが非同期認識操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5803d-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="5803d-343"><xref:System.Speech.Recognition.SpeechRecognitionEngine>発生させる、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>非同期操作を終了したときにイベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="5803d-344"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>操作が発生する可能性、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="5803d-345"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>イベントが最後にこのようなイベントを認識エンジンが、特定の操作を発生させます。</span><span class="sxs-lookup"><span data-stu-id="5803d-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="5803d-346">エミュレートされた認識が成功した場合、次のいずれかを使用して認識結果にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="5803d-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="5803d-347"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>プロパティ、<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs>オブジェクト用のハンドラーで、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="5803d-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> プロパティで、<xref:System.Speech.Recognition.SpeechRecognizedEventArgs>オブジェクト用のハンドラーで、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="5803d-349">エミュレートされた認識が、失敗した場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベントは発生せず、<xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A>は null になります。</span><span class="sxs-lookup"><span data-stu-id="5803d-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="5803d-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> は、<xref:System.ComponentModel.AsyncCompletedEventArgs> から派生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="5803d-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> は、<xref:System.Speech.Recognition.RecognitionEventArgs> から派生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="5803d-352"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-353">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-354">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-355">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-355">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-356">次の例は、音声認識文法を読み込みますを非同期のエミュレートされた入力、関連付けられている認識結果、および音声認識エンジンによって生成される、関連するイベントを示すコンソール アプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="5803d-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call mathches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-357"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が明確な入力の最後に認識操作を終了する前に受け入れる無音状態の間隔を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="5803d-358">無音状態の間隔の時間。</span><span class="sxs-lookup"><span data-stu-id="5803d-358">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-359">音声認識エンジンは、認識の入力があいまいな場合に、このタイムアウト間隔を使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="5803d-360">たとえば、いずれかの認識をサポートする音声認識文法を"新しいゲームをしてください"または「新しいゲーム」、"新しいゲームをしてください"、明確な入力は、「新しいゲーム」はあいまいな入力です。</span><span class="sxs-lookup"><span data-stu-id="5803d-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="5803d-361">このプロパティは、音声認識エンジンが認識操作を終了する前に追加の入力を待機はどのくらいの期間を決定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="5803d-362">タイムアウト間隔を 10 秒、包括的に 0 秒からできます。</span><span class="sxs-lookup"><span data-stu-id="5803d-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="5803d-363">既定では 150 (ミリ秒) です。</span><span class="sxs-lookup"><span data-stu-id="5803d-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="5803d-364">あいまいな入力のタイムアウト間隔を設定するには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5803d-365">このプロパティが、0 秒未満または 10 秒を超える値に設定されています。</span><span class="sxs-lookup"><span data-stu-id="5803d-365">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeoutAmbiguous : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-366"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が不明確な入力の最後に認識操作を終了する前に受け入れる無音状態の間隔を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="5803d-367">無音状態の間隔の時間。</span><span class="sxs-lookup"><span data-stu-id="5803d-367">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-368">音声認識エンジンは、認識の入力があいまいな場合に、このタイムアウト間隔を使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="5803d-369">たとえば、いずれかの認識をサポートする音声認識文法を"新しいゲームをしてください"または「新しいゲーム」、"新しいゲームをしてください"、明確な入力は、「新しいゲーム」はあいまいな入力です。</span><span class="sxs-lookup"><span data-stu-id="5803d-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="5803d-370">このプロパティは、音声認識エンジンが認識操作を終了する前に追加の入力を待機はどのくらいの期間を決定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="5803d-371">タイムアウト間隔を 10 秒、包括的に 0 秒からできます。</span><span class="sxs-lookup"><span data-stu-id="5803d-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="5803d-372">既定値は、500 ミリ秒です。</span><span class="sxs-lookup"><span data-stu-id="5803d-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="5803d-373">明確な入力のタイムアウト間隔を設定するには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5803d-374">このプロパティが、0 秒未満または 10 秒を超える値に設定されています。</span><span class="sxs-lookup"><span data-stu-id="5803d-374">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-375">この <see cref="T:System.Speech.Recognition.Grammar" /> インスタンスに読み込まれる <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="5803d-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <value><span data-ttu-id="5803d-376"><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="5803d-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5803d-377">次の例では、各音声認識文法が音声認識エンジンによって現在読み込まれているため、コンソールに情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5803d-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5803d-378">このメソッドは、コレクションの要素を列挙中に、コレクションが変更された場合、エラーを回避するために文法のコレクションをコピーします。</span><span class="sxs-lookup"><span data-stu-id="5803d-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.InitialSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-379"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が認識を終了する前に無音状態のみを含む入力を受け入れる時間間隔を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="5803d-380">無音状態の間隔の時間。</span><span class="sxs-lookup"><span data-stu-id="5803d-380">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-381">各音声認識エンジンには、サイレント状態と音声認識とを区別するためのアルゴリズムがあります。</span><span class="sxs-lookup"><span data-stu-id="5803d-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="5803d-382">場合は、認識エンジンの入力は、サイレント状態を初期サイレント タイムアウト期間中には、認識エンジンはその認識操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="5803d-383">非同期認識操作とエミュレーションでは、認識エンジンを発生させます、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベント、場所、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType>プロパティは`true`、および<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType>プロパティが`null`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="5803d-384">同期の認識操作とエミュレーションでは、認識エンジンが返されます`null`、有効なのではなく<xref:System.Speech.Recognition.RecognitionResult>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="5803d-385">初期サイレント タイムアウト間隔が 0 に設定されている場合、認識エンジンは、初期サイレント タイムアウト チェックは実行されません。</span><span class="sxs-lookup"><span data-stu-id="5803d-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="5803d-386">タイムアウト間隔は、負でない値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="5803d-387">既定値は、0 秒です。</span><span class="sxs-lookup"><span data-stu-id="5803d-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-388">次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="5803d-389">例のセット、<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>のプロパティを<xref:System.Speech.Recognition.SpeechRecognitionEngine>音声認識を開始する前にします。</span><span class="sxs-lookup"><span data-stu-id="5803d-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="5803d-390">音声認識エンジンのハンドラー<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベントのイベント情報を示すためにコンソールに出力する方法、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>のプロパティを<xref:System.Speech.Recognition.SpeechRecognitionEngine>プロパティに影響する認識操作。</span><span class="sxs-lookup"><span data-stu-id="5803d-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder. 
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5803d-391">このプロパティが 0 秒未満の値に設定されています。</span><span class="sxs-lookup"><span data-stu-id="5803d-391">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberSignature Language="F#" Value="static member InstalledRecognizers : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-392">現在のシステムにインストールされているすべての音声認識に関する情報を返します。</span><span class="sxs-lookup"><span data-stu-id="5803d-392">Returns information for all of the installed speech recognizers on the current system.</span></span></summary>
        <returns><span data-ttu-id="5803d-393">インストールされたレコグナイザーを記述する <see cref="T:System.Speech.Recognition.RecognizerInfo" /> オブジェクトの読み取り専用コレクション。</span><span class="sxs-lookup"><span data-stu-id="5803d-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-394">現在の認識エンジンに関する情報を取得する、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-395">次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="5803d-396">例では、によって返されるコレクションを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>英語の言語をサポートする音声認識エンジンを検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="5803d-397">読み込む文法オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-397">The grammar object to load.</span></span></param>
        <summary><span data-ttu-id="5803d-398"><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトを同期的に読み込みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-399">場合に、認識エンジンが例外をスロー、<xref:System.Speech.Recognition.Grammar>オブジェクトが既に読み込まれて、非同期的に読み込みまたはをすべて認識エンジンに読み込めませんでした。</span><span class="sxs-lookup"><span data-stu-id="5803d-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="5803d-400">同じを読み込むことができません<xref:System.Speech.Recognition.Grammar>オブジェクトの複数のインスタンスに<xref:System.Speech.Recognition.SpeechRecognitionEngine>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="5803d-401">代わりに、作成、新しい<xref:System.Speech.Recognition.Grammar>オブジェクトごとに<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5803d-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="5803d-402">認識エンジンが実行されている場合、アプリケーションが使用する必要があります<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>を読み込み、アンロードが有効にすると、または文法を無効にする前に、音声認識エンジンを一時停止します。</span><span class="sxs-lookup"><span data-stu-id="5803d-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="5803d-403">文法を読み込むときに、既定で有効です。</span><span class="sxs-lookup"><span data-stu-id="5803d-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="5803d-404">読み込む文法を無効にするには、<xref:System.Speech.Recognition.Grammar.Enabled%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="5803d-405">読み込み、<xref:System.Speech.Recognition.Grammar>非同期的にオブジェクトを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-406">次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="5803d-407">例は、作成、<xref:System.Speech.Recognition.DictationGrammar>音声認識エンジンに読み込みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-408"><paramref name="Grammar" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-408"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-409"><paramref name="Grammar" /> が有効な状態ではありません。</span><span class="sxs-lookup"><span data-stu-id="5803d-409"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="5803d-410">読み込む音声認識文法。</span><span class="sxs-lookup"><span data-stu-id="5803d-410">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="5803d-411">非同期的に音声認識文法を読み込みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-411">Asynchronously loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-412">認識エンジンの読み込みが完了すると、<xref:System.Speech.Recognition.Grammar>オブジェクトを生成、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="5803d-413">場合に、認識エンジンが例外をスロー、<xref:System.Speech.Recognition.Grammar>オブジェクトが既に読み込まれて、非同期的に読み込みまたはをすべて認識エンジンに読み込めませんでした。</span><span class="sxs-lookup"><span data-stu-id="5803d-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="5803d-414">同じを読み込むことができません<xref:System.Speech.Recognition.Grammar>オブジェクトの複数のインスタンスに<xref:System.Speech.Recognition.SpeechRecognitionEngine>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="5803d-415">代わりに、作成、新しい<xref:System.Speech.Recognition.Grammar>オブジェクトごとに<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5803d-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="5803d-416">認識エンジンが実行されている場合、アプリケーションが使用する必要があります<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>を読み込み、アンロードが有効にすると、または文法を無効にする前に、音声認識エンジンを一時停止します。</span><span class="sxs-lookup"><span data-stu-id="5803d-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="5803d-417">文法を読み込むときに、既定で有効です。</span><span class="sxs-lookup"><span data-stu-id="5803d-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="5803d-418">読み込む文法を無効にするには、<xref:System.Speech.Recognition.Grammar.Enabled%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="5803d-419">音声認識文法を同期的に読み込むには使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-420"><paramref name="Grammar" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-420"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-421"><paramref name="Grammar" /> が有効な状態ではありません。</span><span class="sxs-lookup"><span data-stu-id="5803d-421"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="5803d-422">非同期操作は取り消されました。</span><span class="sxs-lookup"><span data-stu-id="5803d-422">The asynchronous operation was canceled.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-423"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの非同期読み込みを終了するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-424">認識エンジンの<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッドが非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5803d-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="5803d-425"><xref:System.Speech.Recognition.SpeechRecognitionEngine>操作が完了すると、このイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5803d-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="5803d-426">取得する、<xref:System.Speech.Recognition.Grammar>認識エンジンが読み込まれているオブジェクト、 <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> 、関連付けられているプロパティ<xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="5803d-427">現在の取得に<xref:System.Speech.Recognition.Grammar>認識エンジンが読み込まれて、オブジェクトを使用して、認識エンジンの<xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="5803d-428">認識エンジンが実行されている場合、アプリケーションが使用する必要があります<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>を読み込み、アンロードが有効にすると、または文法を無効にする前に、音声認識エンジンを一時停止します。</span><span class="sxs-lookup"><span data-stu-id="5803d-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="5803d-429"><xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-430">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-431">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-432">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-432">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-433">次の例では、インプロセス音声認識エンジンを作成し、文法および自由発話のディクテーションを受け入れるための特定の単語を認識するための 2 種類が作成されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="5803d-434">例では、構築、<xref:System.Speech.Recognition.Grammar>オブジェクトから完成した音声認識文法の各種し非同期的に読み込みます、<xref:System.Speech.Recognition.Grammar>オブジェクトを<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5803d-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="5803d-435">ハンドラーを認識エンジンの<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベントでは、名前をコンソールに書き込み、<xref:System.Speech.Recognition.Grammar>を認識し、認識結果のテキストをそれぞれ実行に使用されたオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-436"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が各認識操作に対して返す代替認識結果の最大数を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span></span></summary>
        <value><span data-ttu-id="5803d-437">返される代替結果の数。</span><span class="sxs-lookup"><span data-stu-id="5803d-437">The number of alternate results to return.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-438"><xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>のプロパティ、<xref:System.Speech.Recognition.RecognitionResult>クラスのコレクションを格納する<xref:System.Speech.Recognition.RecognizedPhrase>入力の解釈を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="5803d-439">既定値<xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A>10。</span><span class="sxs-lookup"><span data-stu-id="5803d-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5803d-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> が 0 未満の値に設定されています。</span><span class="sxs-lookup"><span data-stu-id="5803d-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberSignature Language="F#" Value="member this.QueryRecognizerSetting : string -&gt; obj" Usage="speechRecognitionEngine.QueryRecognizerSetting settingName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="5803d-441">返す設定の名前です。</span><span class="sxs-lookup"><span data-stu-id="5803d-441">The name of the setting to return.</span></span></param>
        <summary><span data-ttu-id="5803d-442">レコグナイザーの設定の値を返します。</span><span class="sxs-lookup"><span data-stu-id="5803d-442">Returns the values of settings for the recognizer.</span></span></summary>
        <returns><span data-ttu-id="5803d-443">設定値。</span><span class="sxs-lookup"><span data-stu-id="5803d-443">The value of the setting.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-444">認識エンジンの設定は、文字列、64 ビットの整数、またはメモリ アドレス データに含めることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="5803d-445">次の表に、Microsoft Speech API (SAPI) が定義されている設定に準拠しているレコグナイザーします。</span><span class="sxs-lookup"><span data-stu-id="5803d-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="5803d-446">次の設定では、設定をサポートする各認識エンジンと同じ範囲が必要です。</span><span class="sxs-lookup"><span data-stu-id="5803d-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="5803d-447">SAPI 準拠の認識エンジンでは、これらの設定をサポートする必要はありませんし、その他の設定をサポートすることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="5803d-448">name</span><span class="sxs-lookup"><span data-stu-id="5803d-448">Name</span></span>|<span data-ttu-id="5803d-449">説明</span><span class="sxs-lookup"><span data-stu-id="5803d-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="5803d-450">認識エンジンの CPU 使用量を指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="5803d-451">範囲は 0 ~ 100 です。</span><span class="sxs-lookup"><span data-stu-id="5803d-451">The range is from 0 to 100.</span></span> <span data-ttu-id="5803d-452">既定値は 50 です。</span><span class="sxs-lookup"><span data-stu-id="5803d-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="5803d-453">音声認識エンジンが認識操作を完了する前に、明確な入力の末尾に無音状態の長さを示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="5803d-454">範囲は 0 ~ 10,000 ミリ秒 (ms) です。</span><span class="sxs-lookup"><span data-stu-id="5803d-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="5803d-455">この設定は、認識エンジンに対する対応<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="5803d-456">既定の 150ms を = です。</span><span class="sxs-lookup"><span data-stu-id="5803d-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="5803d-457">音声認識エンジンが認識操作を完了する前に、あいまいな入力の末尾に無音状態の長さを示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="5803d-458">範囲は 0 ~ 10,000 ミリ秒です。</span><span class="sxs-lookup"><span data-stu-id="5803d-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="5803d-459">この設定は、認識エンジンに対する対応<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="5803d-460">既定の 500 ミリ秒になります。</span><span class="sxs-lookup"><span data-stu-id="5803d-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="5803d-461">音響モデル適応は ON です。 かどうかを示します (値 = `1`) または OFF (値 = `0`)。</span><span class="sxs-lookup"><span data-stu-id="5803d-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="5803d-462">既定値は`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="5803d-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="5803d-463">バック グラウンドで調整がオンかどうかを示します (値 = `1`) または OFF (値 = `0`)、レジストリの設定が引き続き発生するとします。</span><span class="sxs-lookup"><span data-stu-id="5803d-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="5803d-464">既定値は`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="5803d-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="5803d-465">認識エンジンの設定を更新するには、いずれかを使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-466">次の例は、EN-US ロケールをサポートする認識エンジンに定義された設定数の値を出力するコンソール アプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="5803d-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="5803d-467">例では、次の出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-468"><paramref name="settingName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-468"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-469"><paramref name="settingName" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="5803d-469"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="5803d-470">認識エンジンは、その名前で設定されていません。</span><span class="sxs-lookup"><span data-stu-id="5803d-470">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5803d-471">同期音声認識操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5803d-471">Starts a synchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-472">これらのメソッドは、1 つの同期の認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="5803d-473">認識エンジンは、その読み込み済みで有効になっている音声認識文法に対してこの操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="5803d-474">このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="5803d-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="5803d-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="5803d-476">認識エンジンが音声として識別できる入力を検出したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="5803d-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="5803d-478">アクティブな文法のいずれかの入力があいまいな一致を作成するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="5803d-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="5803d-480">認識エンジンが認識操作を終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="5803d-481">認識エンジンは発生しません、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベントのいずれかを使用する場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="5803d-482"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>メソッドを返す、<xref:System.Speech.Recognition.RecognitionResult>オブジェクト、または`null`操作が不適切だったり、認識エンジンが有効でない場合。</span><span class="sxs-lookup"><span data-stu-id="5803d-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="5803d-483">次の理由により同期の認識操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="5803d-484">タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>プロパティ、または、`initialSilenceTimeout`のパラメーター、<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="5803d-485">認識エンジンが音声を検出するが読み込み済みで有効になっているのいずれかで一致が検出されない<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="5803d-486">認識エンジンが音声認識または認識に関してサイレント状態のタイミングでどのように処理する方法を変更するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="5803d-487"><xref:System.Speech.Recognition.SpeechRecognitionEngine>が少なくとも 1 つ<xref:System.Speech.Recognition.Grammar>認識を実行する前にオブジェクトが読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="5803d-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="5803d-488">音声認識文法を読み込むには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-489">非同期認識を実行するには、いずれかを使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberSignature Language="F#" Value="member this.Recognize : unit -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-490">同期音声認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-490">Performs a synchronous speech recognition operation.</span></span></summary>
        <returns><span data-ttu-id="5803d-491">入力の認識結果。操作が不適切だったり、認識エンジンが有効でない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5803d-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-492">このメソッドでは、1 つの認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="5803d-493">認識エンジンは、その読み込み済みで有効になっている音声認識文法に対してこの操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="5803d-494">このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="5803d-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="5803d-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="5803d-496">認識エンジンが音声として識別できる入力を検出したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="5803d-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="5803d-498">アクティブな文法のいずれかの入力があいまいな一致を作成するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="5803d-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="5803d-500">認識エンジンが認識操作を終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="5803d-501">認識エンジンは発生しません、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベントがこのメソッドを使用する場合。</span><span class="sxs-lookup"><span data-stu-id="5803d-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="5803d-502"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize>メソッドを返します。 を<xref:System.Speech.Recognition.RecognitionResult>オブジェクト、または`null`操作が成功しなかった場合。</span><span class="sxs-lookup"><span data-stu-id="5803d-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="5803d-503">次の理由により同期の認識操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="5803d-504">タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="5803d-505">認識エンジンが音声を検出するが読み込み済みで有効になっているのいずれかで一致が検出されない<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="5803d-506">非同期認識を実行するには、いずれかを使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-507">次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="5803d-508">例は、作成、<xref:System.Speech.Recognition.DictationGrammar>インプロセス音声認識エンジンに読み込みますや、1 つの認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="F#" Value="member this.Recognize : TimeSpan -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize initialSilenceTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout"><span data-ttu-id="5803d-509">音声認識エンジンが認識を終了するまでに無音のみを含む入力を受け入れる時間間隔。</span><span class="sxs-lookup"><span data-stu-id="5803d-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span></span></param>
        <summary><span data-ttu-id="5803d-510">指定した最初のサイレント状態のタイムアウト期間の同期音声認識の操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span></span></summary>
        <returns><span data-ttu-id="5803d-511">入力の認識結果。操作が不適切だったり、認識エンジンが有効でない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="5803d-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-512">指定された時間間隔内で、音声認識エンジンが音声を検出したかどうか`initialSilenceTimeout`引数、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> 1 つの認識操作を実行してから終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="5803d-513">`initialSilenceTimeout`パラメーターには、認識エンジンのよりも優先されます<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="5803d-514">このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="5803d-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="5803d-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="5803d-516">認識エンジンが音声として識別できる入力を検出したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="5803d-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="5803d-518">アクティブな文法のいずれかの入力があいまいな一致を作成するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="5803d-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="5803d-520">認識エンジンが認識操作を終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="5803d-521">認識エンジンは発生しません、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベントがこのメソッドを使用する場合。</span><span class="sxs-lookup"><span data-stu-id="5803d-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="5803d-522"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize>メソッドを返します。 を<xref:System.Speech.Recognition.RecognitionResult>オブジェクト、または`null`操作が成功しなかった場合。</span><span class="sxs-lookup"><span data-stu-id="5803d-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="5803d-523">次の理由により同期の認識操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="5803d-524">タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>または、`initialSilenceTimeout`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5803d-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="5803d-525">認識エンジンが音声を検出するが読み込み済みで有効になっているのいずれかで一致が検出されない<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="5803d-526">非同期認識を実行するには、いずれかを使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-527">次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="5803d-528">例は、作成、<xref:System.Speech.Recognition.DictationGrammar>インプロセス音声認識エンジンに読み込みますや、1 つの認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5803d-529">非同期音声認識操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5803d-529">Starts an asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-530">これらのメソッド実行の 1 つまたは複数の非同期認識操作。</span><span class="sxs-lookup"><span data-stu-id="5803d-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="5803d-531">認識エンジンは、その読み込み済みで有効になっている音声認識文法に対する各操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="5803d-532">このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="5803d-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="5803d-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="5803d-534">認識エンジンが音声として識別できる入力を検出したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="5803d-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="5803d-536">アクティブな文法のいずれかの入力があいまいな一致を作成するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="5803d-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="5803d-538">認識エンジンが認識操作を終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="5803d-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="5803d-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="5803d-540">場合に発生します、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>操作が完了するとします。</span><span class="sxs-lookup"><span data-stu-id="5803d-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="5803d-541">非同期認識操作の結果を取得するには、認識エンジンのイベント ハンドラーを結び付ける<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="5803d-542">認識エンジンは、同期または非同期認識操作を正常に完了するたびに、このイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5803d-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="5803d-543">認識が、失敗した場合、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>プロパティ<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>のハンドラーにアクセスできる、オブジェクト、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベントになります`null`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="5803d-544">次の理由で非同期認識操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="5803d-545">タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="5803d-546">認識エンジンが音声を検出するが読み込み済みで有効になっているのいずれかで一致が検出されない<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="5803d-547"><xref:System.Speech.Recognition.SpeechRecognitionEngine>が少なくとも 1 つ<xref:System.Speech.Recognition.Grammar>認識を実行する前にオブジェクトが読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="5803d-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="5803d-548">音声認識文法を読み込むには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="5803d-549">認識エンジンが音声認識または認識に関してサイレント状態のタイミングでどのように処理する方法を変更するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="5803d-550">同期の認識を実行するには、いずれかを使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-551">単一の非同期音声認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-551">Performs a single, asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-552">このメソッドは、1 つの非同期認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="5803d-553">認識エンジンは、その読み込み済みで有効になっている音声認識文法に対する操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="5803d-554">このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="5803d-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="5803d-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="5803d-556">認識エンジンが音声として識別できる入力を検出したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="5803d-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="5803d-558">アクティブな文法のいずれかの入力があいまいな一致を作成するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="5803d-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="5803d-560">認識エンジンが認識操作を終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="5803d-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="5803d-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="5803d-562">場合に発生します、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>操作が完了するとします。</span><span class="sxs-lookup"><span data-stu-id="5803d-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="5803d-563">非同期認識操作の結果を取得するには、認識エンジンのイベント ハンドラーを結び付ける<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="5803d-564">認識エンジンは、同期または非同期認識操作を正常に完了するたびに、このイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5803d-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="5803d-565">認識が、失敗した場合、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>プロパティ<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>のハンドラーにアクセスできる、オブジェクト、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベントになります`null`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="5803d-566">同期の認識を実行するには、いずれかを使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-567">次の例では、基本的な非同期音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="5803d-568">例は、作成、<xref:System.Speech.Recognition.DictationGrammar>インプロセス音声認識エンジンに読み込みますや、1 つの非同期認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="5803d-569">イベント ハンドラーは、認識エンジンが操作中に発生するイベントを示すために含まれています。</span><span class="sxs-lookup"><span data-stu-id="5803d-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : System.Speech.Recognition.RecognizeMode -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="5803d-570">1 つまたは複数の認識操作を実行するかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-570">Indicates whether to perform one or multiple recognition operations.</span></span></param>
        <summary><span data-ttu-id="5803d-571">1 つ以上の非同期音声認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-571">Performs one or more asynchronous speech recognition operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-572">場合`mode`は<xref:System.Speech.Recognition.RecognizeMode.Multiple>、認識エンジンの続行まで非同期認識操作を実行する、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="5803d-573">このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="5803d-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。</span><span class="sxs-lookup"><span data-stu-id="5803d-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="5803d-575">認識エンジンが音声として識別できる入力を検出したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="5803d-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="5803d-577">アクティブな文法のいずれかの入力があいまいな一致を作成するときに発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="5803d-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。</span><span class="sxs-lookup"><span data-stu-id="5803d-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="5803d-579">認識エンジンが認識操作を終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="5803d-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。</span><span class="sxs-lookup"><span data-stu-id="5803d-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="5803d-581">場合に発生します、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>操作が完了するとします。</span><span class="sxs-lookup"><span data-stu-id="5803d-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="5803d-582">非同期認識操作の結果を取得するには、認識エンジンのイベント ハンドラーを結び付ける<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="5803d-583">認識エンジンは、同期または非同期認識操作を正常に完了するたびに、このイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5803d-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="5803d-584">認識が、失敗した場合、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A>プロパティ<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>のハンドラーにアクセスできる、オブジェクト、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベントになります`null`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="5803d-585">次の理由で非同期認識操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="5803d-586">タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、<xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="5803d-587">認識エンジンが音声を検出するが読み込み済みで有効になっているのいずれかで一致が検出されない<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="5803d-588">同期の認識を実行するには、いずれかを使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-589">次の例では、基本的な非同期音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="5803d-590">例は、作成、<xref:System.Speech.Recognition.DictationGrammar>インプロセス音声認識エンジンに読み込みますや、複数の非同期認識操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="5803d-591">30 秒後に、非同期操作が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="5803d-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="5803d-592">イベント ハンドラーは、認識エンジンが操作中に発生するイベントを示すために含まれています。</span><span class="sxs-lookup"><span data-stu-id="5803d-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncCancel : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-593">現在の認識操作の完了を待たずに非同期認識を終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-594">このメソッドは、すぐに非同期認識を終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="5803d-595">場合は、現在の非同期認識操作の入力を受け取っては、入力が切り捨てられるし、操作が完了したら、既存の入力。</span><span class="sxs-lookup"><span data-stu-id="5803d-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="5803d-596">認識エンジンが発生、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>非同期操作が取り消され、設定したときにイベント、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>のプロパティ、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="5803d-597">このメソッドによって開始された非同期操作のキャンセル、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="5803d-598">入力を切り捨てずに非同期認識を停止する、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-599">次の例の使用方法を示すコンソール アプリケーションの一部を示しています、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="5803d-600">例は、作成し、音声認識文法を読み込みます化し、継続的非同期認識操作を開始しますし、操作をキャンセルする前に、2 秒間一時停止します。</span><span class="sxs-lookup"><span data-stu-id="5803d-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="5803d-601">認識エンジンが、ファイルから入力を受け取る c:\temp\audioinput\sample.wav します。</span><span class="sxs-lookup"><span data-stu-id="5803d-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="5803d-602">イベント ハンドラーは、認識エンジンが操作中に発生するイベントを示すために含まれています。</span><span class="sxs-lookup"><span data-stu-id="5803d-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncStop : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-603">現在の認識操作の完了後に非同期認識を停止します。</span><span class="sxs-lookup"><span data-stu-id="5803d-603">Stops asynchronous recognition after the current recognition operation completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-604">このメソッドは、入力を切り捨てずに非同期認識を終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="5803d-605">現在の非同期認識操作の入力を受け取っては、認識エンジンが入力の受け付けを現在の認識操作が完了するまで続行されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="5803d-606">認識エンジンが発生、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>イベントの非同期操作が停止し、設定すると、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>のプロパティ、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="5803d-607">このメソッドによって開始された非同期操作を停止します、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="5803d-608">既存の入力だけの非同期認識をすぐに取り消す場合に、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-609">次の例の使用方法を示すコンソール アプリケーションの一部を示しています、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="5803d-610">例は、作成し、音声認識文法を読み込みます化し、継続的非同期認識操作を開始しますし、操作を停止する前に、2 秒間一時停止します。</span><span class="sxs-lookup"><span data-stu-id="5803d-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="5803d-611">認識エンジンが、ファイルから入力を受け取る c:\temp\audioinput\sample.wav します。</span><span class="sxs-lookup"><span data-stu-id="5803d-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="5803d-612">イベント ハンドラーは、認識エンジンが操作中に発生するイベントを示すために含まれています。</span><span class="sxs-lookup"><span data-stu-id="5803d-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.RecognizeCompleted : EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " Usage="member this.RecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-613"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が非同期認識操作を終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-614"><xref:System.Speech.Recognition.SpeechRecognitionEngine>オブジェクトの<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>メソッドが非同期認識操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="5803d-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="5803d-615">認識エンジンは、非同期の操作を終了、このイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="5803d-616">ハンドラーを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>アクセスできる、イベント、<xref:System.Speech.Recognition.RecognitionResult>で、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="5803d-617">認識が成功すると、なかった場合<xref:System.Speech.Recognition.RecognitionResult>なります`null`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="5803d-618">プロパティにアクセスすることができます、タイムアウトまたはオーディオ入力の中断の認識が失敗する原因となったかどうかを判断する<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>、または<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>します。</span><span class="sxs-lookup"><span data-stu-id="5803d-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="5803d-619">詳細については、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5803d-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="5803d-620">最適な認識が拒否された候補の詳細を取得するハンドラーをアタッチ、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="5803d-621"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-622">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-623">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-624">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-624">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-625">次の例では、「ジャズ カテゴリ アーティストの一覧の表示」や「絶対的のアルバムを表示する」などの語句を認識します。</span><span class="sxs-lookup"><span data-stu-id="5803d-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="5803d-626">この例のハンドラーを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>認識の結果に関する情報をコンソールに表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="5803d-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-627">処理中のオーディオ入力内の <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> の現在の位置を取得します。</span><span class="sxs-lookup"><span data-stu-id="5803d-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span></span></summary>
        <value><span data-ttu-id="5803d-628">処理中のオーディオ入力の認識エンジンの位置。</span><span class="sxs-lookup"><span data-stu-id="5803d-628">The position of the recognizer in the audio input that it is processing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-629">オーディオの位置は、各音声認識エンジンに固有です。</span><span class="sxs-lookup"><span data-stu-id="5803d-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="5803d-630">有効にする場合、入力ストリームの値 0 が確立されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="5803d-631"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>プロパティ参照、<xref:System.Speech.Recognition.SpeechRecognitionEngine>がオーディオ入力内のオブジェクトの位置。</span><span class="sxs-lookup"><span data-stu-id="5803d-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="5803d-632">これに対し、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>プロパティは、生成されたオーディオ ストリーム内の入力デバイスの位置を参照します。</span><span class="sxs-lookup"><span data-stu-id="5803d-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="5803d-633">これらの位置は、さまざまなであることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-633">These positions can be different.</span></span> <span data-ttu-id="5803d-634">たとえば、認識エンジンが受け取った場合どの it されていない入力が、認識結果が次の値を生成、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>プロパティは、の値より小さい、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-635"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> の現在のインスタンスに関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="5803d-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="5803d-636">現在の音声認識エンジンに関する情報です。</span><span class="sxs-lookup"><span data-stu-id="5803d-636">Information about the current speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-637">現在のシステムのインストールされている音声認識エンジンのすべてに関する情報を取得する、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-638">次の例では、現在のプロセスで音声認識エンジンのデータの部分的な一覧を取得します。</span><span class="sxs-lookup"><span data-stu-id="5803d-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="5803d-639">詳細については、「<xref:System.Speech.Recognition.RecognizerInfo>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5803d-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-640">変更を受け入れるために実行中の <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> を一時停止すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-641">アプリケーションを使用する必要があります<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>のインスタンスが実行を一時停止する<xref:System.Speech.Recognition.SpeechRecognitionEngine>その設定を変更する前に、または<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="5803d-642"><xref:System.Speech.Recognition.SpeechRecognitionEngine>変更を受け入れる準備ができた場合は、このイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="5803d-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="5803d-643">たとえば、<xref:System.Speech.Recognition.SpeechRecognitionEngine>は、一時停止できます読み込み、アンロードを有効にして無効にした<xref:System.Speech.Recognition.Grammar>オブジェクトし、の値を変更、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="5803d-644">詳細については、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="5803d-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-645"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-646">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-647">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-648">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-648">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-649">次の例では、コンソール アプリケーションをロードおよびアンロード<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="5803d-650">アプリケーションを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>音声認識エンジンの更新プログラムを受信できるようにを一時停止を要求するメソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="5803d-651">アプリケーション、ロードまたはアンロード、<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="5803d-652">各更新プログラムのハンドラーで<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベントの名前と読み込まれた現在の状態の書き込み<xref:System.Speech.Recognition.Grammar>コンソールへのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="5803d-653">文法が読み込まれ、アンロード、として、アプリケーションは、ファームの動物の名前、ファームの動物の名前と、果物の名前、果物の名前のみに最初に認識します。</span><span class="sxs-lookup"><span data-stu-id="5803d-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5803d-654">認識エンジンが状態の更新を停止することを要求します。</span><span class="sxs-lookup"><span data-stu-id="5803d-654">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-655">認識エンジンへの変更を同期するのにには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="5803d-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="5803d-656">たとえば、読み込み、認識エンジンが入力を処理する際に、音声認識文法をアンロードするか、このメソッドを使用し、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>認識エンジンの状態と、アプリケーションの動作を同期するイベントです。</span><span class="sxs-lookup"><span data-stu-id="5803d-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="5803d-657">認識エンジンについて、一時停止または非同期操作が完了するし、が生成されますでこのメソッドが呼び出されたときに、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="5803d-658">A<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント ハンドラーは、認識エンジンに対する認識操作の間の状態を変更できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="5803d-659">処理するときに<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント、イベント ハンドラーを返すまで、認識エンジンを一時停止します。</span><span class="sxs-lookup"><span data-stu-id="5803d-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5803d-660">認識エンジンが発生する前に、認識エンジンに対する入力が変更された場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント、要求が破棄されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="5803d-661">このメソッドが呼び出されたとき。</span><span class="sxs-lookup"><span data-stu-id="5803d-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="5803d-662">認識エンジンをすぐに生成、認識エンジンが入力を処理されていない場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="5803d-663">認識エンジンが認識操作を一時停止し、生成、認識エンジンがサイレント状態のバック グラウンド ノイズで構成される入力を処理する場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="5803d-664">認識エンジンが認識操作を完了し、生成、認識エンジンがサイレント状態またはバック グラウンド ノイズの構成がない入力を処理する場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="5803d-665">認識エンジンが処理している間、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="5803d-666">認識エンジンは、入力との値を処理しません、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>プロパティは変わりません。</span><span class="sxs-lookup"><span data-stu-id="5803d-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="5803d-667">認識エンジンの入力を収集しの値は引き続き、<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>プロパティを変更することができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-668">認識エンジンが状態の更新を停止することを要求します。</span><span class="sxs-lookup"><span data-stu-id="5803d-668">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-669">認識エンジンが生成するとき、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベント、<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>のプロパティ、<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>は`null`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="5803d-670">ユーザー トークンを提供するには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="5803d-671">オーディオの位置のオフセットを指定するには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-672">次の例では、コンソール アプリケーションをロードおよびアンロード<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="5803d-673">アプリケーションを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>音声認識エンジンの更新プログラムを受信できるようにを一時停止を要求するメソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="5803d-674">アプリケーション、ロードまたはアンロード、<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="5803d-675">各更新プログラムのハンドラーで<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>イベントの名前と読み込まれた現在の状態の書き込み<xref:System.Speech.Recognition.Grammar>コンソールへのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="5803d-676">文法が読み込まれ、アンロード、として、アプリケーションは、ファームの動物の名前、ファームの動物の名前と、果物の名前、果物の名前のみに最初に認識します。</span><span class="sxs-lookup"><span data-stu-id="5803d-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="5803d-677">操作に関する情報を含むユーザー定義情報。</span><span class="sxs-lookup"><span data-stu-id="5803d-677">User-defined information that contains information for the operation.</span></span></param>
        <summary><span data-ttu-id="5803d-678">認識エンジンが状態の更新を停止し、関連イベントのユーザー トークンを提供することを要求します。</span><span class="sxs-lookup"><span data-stu-id="5803d-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-679">認識エンジンが生成するとき、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> 、イベント、<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>のプロパティ、<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>の値を格納、`userToken`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5803d-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="5803d-680">オーディオの位置のオフセットを指定するには、使用、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="5803d-681">操作に関する情報を含むユーザー定義情報。</span><span class="sxs-lookup"><span data-stu-id="5803d-681">User-defined information that contains information for the operation.</span></span></param>
        <param name="audioPositionAheadToRaiseUpdate"><span data-ttu-id="5803d-682">要求を遅延するための、現在の <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> からのオフセット。</span><span class="sxs-lookup"><span data-stu-id="5803d-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span></span></param>
        <summary><span data-ttu-id="5803d-683">認識エンジンが状態の更新を停止し、関連イベントのオフセットとユーザー トークンを提供することを要求します。</span><span class="sxs-lookup"><span data-stu-id="5803d-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-684">認識エンジンが認識エンジンのまで認識エンジンの更新要求を開始できません<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>現在に等しい<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>plus`audioPositionAheadToRaiseUpdate`します。</span><span class="sxs-lookup"><span data-stu-id="5803d-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="5803d-685">認識エンジンが生成するとき、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> 、イベント、<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A>のプロパティ、<xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs>の値を格納、`userToken`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5803d-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberSignature Language="F#" Value="member this.SetInputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechRecognitionEngine.SetInputToAudioStream (audioSource, audioFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="5803d-686">オーディオ入力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="5803d-686">The audio input stream.</span></span></param>
        <param name="audioFormat"><span data-ttu-id="5803d-687">オーディオ入力の形式。</span><span class="sxs-lookup"><span data-stu-id="5803d-687">The format of the audio input.</span></span></param>
        <summary><span data-ttu-id="5803d-688"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトを、オーディオ ストリームからの入力を受け取るように構成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-689">認識エンジンでは、認識操作中に、入力ストリームの末尾に達すると、使用可能な入力の認識操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="5803d-690">後続の認識操作は、認識エンジンに対する入力を更新する場合を除き、例外を生成できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-691">次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="5803d-692">例では、オーディオ ファイルのフレーズを含む、example.wav から入力を使用して"1 つのテストをテストする 2 つ 3"および"先々 cooper"、一時停止で区切られました。</span><span class="sxs-lookup"><span data-stu-id="5803d-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="5803d-693">例では、次の出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetInputToDefaultAudioDevice : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-694"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトを、既定のオーディオ デバイスからの入力を受け取るように構成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5803d-695">次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="5803d-696">例では、既定のオーディオ デバイスからの出力を使用して、複数を実行します。 非同期認識操作、および終了するときに、ユーザーは、語句を utters"exit"。</span><span class="sxs-lookup"><span data-stu-id="5803d-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetInputToNull : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-697">音声レコグナイザーに対する入力を無効にします。</span><span class="sxs-lookup"><span data-stu-id="5803d-697">Disables the input to the speech recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-698">構成、<xref:System.Speech.Recognition.SpeechRecognitionEngine>オブジェクトの入力を使用する場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>と<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>メソッド、または一時的にオフライン認識エンジンを実行するとき。</span><span class="sxs-lookup"><span data-stu-id="5803d-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveFile : string -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="5803d-699">入力として使用するファイルのパス。</span><span class="sxs-lookup"><span data-stu-id="5803d-699">The path of the file to use as input.</span></span></param>
        <summary><span data-ttu-id="5803d-700"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトを、WAVE オーディオ形式 (.wav) ファイルからの入力を受け取るように構成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-701">認識エンジンでは、認識操作中に、入力ファイルの末尾に達すると、使用可能な入力の認識操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="5803d-702">後続の認識操作は、認識エンジンに対する入力を更新する場合を除き、例外を生成できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-703">次の例では、.wav ファイルのオーディオの認識を実行し、コンソールに、認識されたテキストを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="5803d-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveStream audioSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="5803d-704">オーディオ データが含まれるストリーム。</span><span class="sxs-lookup"><span data-stu-id="5803d-704">The stream containing the audio data.</span></span></param>
        <summary><span data-ttu-id="5803d-705"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトを、WAVE オーディオ形式 (.wav) データを含むストリームからの入力を受け取るように構成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-706">認識エンジンでは、認識操作中に、入力ストリームの末尾に達すると、使用可能な入力の認識操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="5803d-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="5803d-707">後続の認識操作は、認識エンジンに対する入力を更新する場合を除き、例外を生成できます。</span><span class="sxs-lookup"><span data-stu-id="5803d-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-708"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が音声として識別できる入力を検出すると発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-709">各音声認識エンジンには、サイレント状態と音声認識とを区別するためのアルゴリズムがあります。</span><span class="sxs-lookup"><span data-stu-id="5803d-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="5803d-710">ときに、<xref:System.Speech.Recognition.SpeechRecognitionEngine>音声認識操作を実行発生、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>のアルゴリズムが音声として入力を識別するときにイベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="5803d-711"><xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A>プロパティ、関連付けられている<xref:System.Speech.Recognition.SpeechDetectedEventArgs>オブジェクトが、認識エンジンが音声を認識する場合、入力ストリーム内の場所を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="5803d-712"><xref:System.Speech.Recognition.SpeechRecognitionEngine>発生させる、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>イベントのいずれかが発生する前に、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>、または<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="5803d-713">詳細については、次を参照してください。、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="5803d-714"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-715">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-716">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-717">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-717">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-718">次の例は、送信元と送信先の都市でフライトを選択するためのコンソール アプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="5803d-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="5803d-719">アプリケーション「たいシカゴにマイアミから飛行」など、語句が認識します。</span><span class="sxs-lookup"><span data-stu-id="5803d-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="5803d-720">この例では、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>イベント レポートを<xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>各時間の音声が検出されました。</span><span class="sxs-lookup"><span data-stu-id="5803d-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-721"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が文法の複数の完全な語句のコンポーネントである可能性がある単語を認識した場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-722"><xref:System.Speech.Recognition.SpeechRecognitionEngine>多数生成<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>のイベントを入力のフレーズを識別しようとしました。</span><span class="sxs-lookup"><span data-stu-id="5803d-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="5803d-723">部分的に認識されているフレーズのテキストにアクセスすることができます、<xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>のプロパティ、<xref:System.Speech.Recognition.SpeechHypothesizedEventArgs>オブジェクト用のハンドラーで、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="5803d-724">通常、これらのイベントの処理は、のみのデバッグに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="5803d-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="5803d-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> は、<xref:System.Speech.Recognition.RecognitionEventArgs> から派生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="5803d-726">詳細については、次を参照してください。、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティおよび<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="5803d-727"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-728">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-729">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-730">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-730">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-731">次の例では、「アーティスト ジャズのカテゴリの一覧を表示する」などの語句を認識します。</span><span class="sxs-lookup"><span data-stu-id="5803d-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="5803d-732">この例では、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>コンソールで、認識が不完全な語句のフラグメントを表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="5803d-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-733"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が読み込み済みで有効な <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトのどのリストにも一致しない入力を受け取ると、発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-734">入力が一致しないことに十分な確実性が読み込み済みで有効になっているのいずれかを判断した場合、認識エンジンはこのイベントを発生させます。<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="5803d-735"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>のプロパティ、 <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> 、拒否されたを含む<xref:System.Speech.Recognition.RecognitionResult>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="5803d-736">ハンドラーを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>認識を取得するイベント<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>が拒否されたとその<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>スコア。</span><span class="sxs-lookup"><span data-stu-id="5803d-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="5803d-737">アプリケーションが使用されている場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンス、入力の承諾または拒否のいずれかでどの音声では、信頼レベルを変更することができます、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="5803d-738">音声認識が非音声を使用して入力に応答する方法を変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="5803d-739"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-740">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-741">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-742">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-742">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-743">次の例では、「ジャズ カテゴリ アーティストの一覧の表示」や「絶対的のアルバムを表示する」などの語句を認識します。</span><span class="sxs-lookup"><span data-stu-id="5803d-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="5803d-744">例では、ハンドラーを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 、音声入力のための十分な文法の内容に一致することはできません、コンソールの通知を表示するイベント<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>を認識します。</span><span class="sxs-lookup"><span data-stu-id="5803d-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="5803d-745">ハンドラーでは、認識結果も表示されます<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>が確信度の低いスコアにより拒否されました。</span><span class="sxs-lookup"><span data-stu-id="5803d-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5803d-746"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> が読み込み済みで有効な <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトのいずれかのリストに一致する入力を受け取ると、発生します。</span><span class="sxs-lookup"><span data-stu-id="5803d-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-747">いずれかを使用して認識操作を開始することができます、<xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>または<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="5803d-748">認識エンジンが発生、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>入力は、ロードのいずれかに一致するいると判断した場合、イベント<xref:System.Speech.Recognition.Grammar>認識を構成するために信頼のための十分なレベルのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="5803d-749"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>のプロパティ、<xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs>承諾を含む<xref:System.Speech.Recognition.RecognitionResult>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="5803d-750">ハンドラーの<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベントは、認識された語句と認識の一覧を取得できます<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>低い信頼度スコアを持つ。</span><span class="sxs-lookup"><span data-stu-id="5803d-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="5803d-751">アプリケーションが使用されている場合、<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンス、入力の承諾または拒否のいずれかでどの音声では、信頼レベルを変更することができます、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="5803d-752">音声認識が非音声を使用して入力に応答する方法を変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="5803d-753">認識エンジンは、文法に一致する入力を受け取るときに、<xref:System.Speech.Recognition.Grammar>オブジェクトが生成できるその<xref:System.Speech.Recognition.Grammar.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="5803d-754"><xref:System.Speech.Recognition.Grammar>オブジェクトの<xref:System.Speech.Recognition.Grammar.SpeechRecognized>音声認識エンジンの前にイベントが発生した<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="5803d-755">特定の文法に固有のすべてのタスクは、のハンドラーによって常に実行する必要があります、<xref:System.Speech.Recognition.Grammar.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="5803d-756"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="5803d-757">イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。</span><span class="sxs-lookup"><span data-stu-id="5803d-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="5803d-758">デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="5803d-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="5803d-759">イベント ハンドラー デリゲートの詳細については、次を参照してください。[イベントとデリゲート](https://go.microsoft.com/fwlink/?LinkId=162418)します。</span><span class="sxs-lookup"><span data-stu-id="5803d-759">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-760">次の例は、音声認識文法の構造を作成するコンソール アプリケーションの一部を<xref:System.Speech.Recognition.Grammar>オブジェクト、およびそれを読み込んだ、<xref:System.Speech.Recognition.SpeechRecognitionEngine>認識を実行します。</span><span class="sxs-lookup"><span data-stu-id="5803d-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="5803d-761">音声入力の例を示します、 <xref:System.Speech.Recognition.SpeechRecognitionEngine>、関連付けられている認識結果、および音声認識エンジンによって生成される、関連するイベントです。</span><span class="sxs-lookup"><span data-stu-id="5803d-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="5803d-762">トリガーは「miami シカゴから飛行する」などの入力を読み上げ、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="5803d-763">"飛行 me ヒューストンからシカゴに"というフレーズを話すはトリガーされません、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="5803d-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="5803d-764">例では、ハンドラーを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>正常に表示するイベントが語句と、コンソールが含まれているセマンティクスを認識します。</span><span class="sxs-lookup"><span data-stu-id="5803d-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognitionEngine.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5803d-765">すべての <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトを認識エンジンから削除します。</span><span class="sxs-lookup"><span data-stu-id="5803d-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-766">認識エンジンが現在読み込んでいる場合、<xref:System.Speech.Recognition.Grammar>までこのメソッドは、非同期的に待機、<xref:System.Speech.Recognition.Grammar>のすべてをアンロードする前に、読み込むが、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="5803d-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="5803d-767">特定の文法をアンロードするを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-768">次の例では、音声認識文法の同期のロードとアンロードを示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="5803d-769">アンロードする文法オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-769">The grammar object to unload.</span></span></param>
        <summary><span data-ttu-id="5803d-770"><see cref="T:System.Speech.Recognition.Grammar" /> インスタンスから、指定された <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトをアンロードします。</span><span class="sxs-lookup"><span data-stu-id="5803d-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-771">認識エンジンが実行されている場合、アプリケーションが使用する必要があります<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>を一時停止、<xref:System.Speech.Recognition.SpeechRecognitionEngine>インスタンスの読み込み、アンロードが有効にする、または無効にする前に、<xref:System.Speech.Recognition.Grammar>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5803d-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="5803d-772">すべてをアンロードする<xref:System.Speech.Recognition.Grammar>、オブジェクトを使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-773">次の例では、音声認識文法の同期のロードとアンロードを示すコンソール アプリケーションの一部を示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-774"><paramref name="Grammar" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-774"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5803d-775">文法は、この認識エンジンに読み込まれていないか、この認識エンジンは現在文法を非同期に読み込んでいます。</span><span class="sxs-lookup"><span data-stu-id="5803d-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5803d-776">認識エンジンの設定の値を更新します。</span><span class="sxs-lookup"><span data-stu-id="5803d-776">Updates the value of a setting for the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-777">認識エンジンの設定は、文字列、64 ビットの整数、またはメモリ アドレス データに含めることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="5803d-778">次の表に、Microsoft Speech API (SAPI) が定義されている設定に準拠しているレコグナイザーします。</span><span class="sxs-lookup"><span data-stu-id="5803d-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="5803d-779">次の設定では、設定をサポートする各認識エンジンと同じ範囲が必要です。</span><span class="sxs-lookup"><span data-stu-id="5803d-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="5803d-780">SAPI 準拠の認識エンジンでは、これらの設定をサポートする必要はありませんし、その他の設定をサポートすることができます。</span><span class="sxs-lookup"><span data-stu-id="5803d-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="5803d-781">name</span><span class="sxs-lookup"><span data-stu-id="5803d-781">Name</span></span>|<span data-ttu-id="5803d-782">説明</span><span class="sxs-lookup"><span data-stu-id="5803d-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="5803d-783">認識エンジンの CPU 使用量を指定します。</span><span class="sxs-lookup"><span data-stu-id="5803d-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="5803d-784">範囲は 0 ~ 100 です。</span><span class="sxs-lookup"><span data-stu-id="5803d-784">The range is from 0 to 100.</span></span> <span data-ttu-id="5803d-785">既定値は 50 です。</span><span class="sxs-lookup"><span data-stu-id="5803d-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="5803d-786">音声認識エンジンが認識操作を完了する前に、明確な入力の末尾に無音状態の長さを示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="5803d-787">範囲は 0 ~ 10,000 ミリ秒 (ms) です。</span><span class="sxs-lookup"><span data-stu-id="5803d-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="5803d-788">この設定は、認識エンジンに対する対応<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="5803d-789">既定の 150ms を = です。</span><span class="sxs-lookup"><span data-stu-id="5803d-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="5803d-790">音声認識エンジンが認識操作を完了する前に、あいまいな入力の末尾に無音状態をミリ秒 (ms) の長さを示します。</span><span class="sxs-lookup"><span data-stu-id="5803d-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="5803d-791">範囲は 0 ~ 10,000 ミリ秒です。</span><span class="sxs-lookup"><span data-stu-id="5803d-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="5803d-792">この設定は、認識エンジンに対する対応<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="5803d-793">既定の 500 ミリ秒になります。</span><span class="sxs-lookup"><span data-stu-id="5803d-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="5803d-794">音響モデル適応は ON です。 かどうかを示します (値 = `1`) または OFF (値 = `0`)。</span><span class="sxs-lookup"><span data-stu-id="5803d-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="5803d-795">既定値は`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="5803d-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="5803d-796">バック グラウンドで調整がオンかどうかを示します (値 = `1`) または OFF (値 = `0`)、レジストリの設定が引き続き発生するとします。</span><span class="sxs-lookup"><span data-stu-id="5803d-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="5803d-797">既定値は`1`(ON)。</span><span class="sxs-lookup"><span data-stu-id="5803d-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="5803d-798">使用して、認識エンジンの設定のいずれかを返す、<xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="5803d-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="5803d-799">例外です`PersistedBackgroundAdaptation`、プロパティ値の設定を使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>メソッドは、現在のインスタンスに対してのみ有効になります<xref:System.Speech.Recognition.SpeechRecognitionEngine>既定の設定に戻すが後にします。</span><span class="sxs-lookup"><span data-stu-id="5803d-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="5803d-800">音声認識が非音声を使用して入力に応答する方法を変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="5803d-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * int -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="5803d-801">更新する設定の名前。</span><span class="sxs-lookup"><span data-stu-id="5803d-801">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="5803d-802">設定の新しい値。</span><span class="sxs-lookup"><span data-stu-id="5803d-802">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="5803d-803"><see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> の指定された設定を、指定された整数値で更新します。</span><span class="sxs-lookup"><span data-stu-id="5803d-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-804">例外です`PersistedBackgroundAdaptation`、プロパティ値の設定を使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>メソッドは、現在のインスタンスに対してのみ有効になります<xref:System.Speech.Recognition.SpeechRecognitionEngine>既定の設定に戻すが後にします。</span><span class="sxs-lookup"><span data-stu-id="5803d-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="5803d-805">参照してください<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>用のサポートされている設定について説明します。</span><span class="sxs-lookup"><span data-stu-id="5803d-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5803d-806">次の例は、EN-US ロケールをサポートする認識エンジンに定義された設定数の値を出力するコンソール アプリケーションの一部です。</span><span class="sxs-lookup"><span data-stu-id="5803d-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="5803d-807">この例では、信頼度レベルの設定を更新し、更新された値をチェックする認識エンジンを照会します。</span><span class="sxs-lookup"><span data-stu-id="5803d-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="5803d-808">例では、次の出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="5803d-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-809"><paramref name="settingName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-809"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-810"><paramref name="settingName" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="5803d-810"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="5803d-811">認識エンジンは、その名前で設定されていません。</span><span class="sxs-lookup"><span data-stu-id="5803d-811">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * string -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="5803d-812">更新する設定の名前。</span><span class="sxs-lookup"><span data-stu-id="5803d-812">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="5803d-813">設定の新しい値。</span><span class="sxs-lookup"><span data-stu-id="5803d-813">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="5803d-814">指定された音声認識エンジンの設定を、指定された文字列値で更新します。</span><span class="sxs-lookup"><span data-stu-id="5803d-814">Updates the specified speech recognition engine setting with the specified string value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5803d-815">例外です`PersistedBackgroundAdaptation`、プロパティ値の設定を使用して、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>メソッドは、現在のインスタンスに対してのみ有効になります<xref:System.Speech.Recognition.SpeechRecognitionEngine>既定の設定に戻すが後にします。</span><span class="sxs-lookup"><span data-stu-id="5803d-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="5803d-816">参照してください<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>用のサポートされている設定について説明します。</span><span class="sxs-lookup"><span data-stu-id="5803d-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5803d-817"><paramref name="settingName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="5803d-817"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5803d-818"><paramref name="settingName" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="5803d-818"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="5803d-819">認識エンジンは、その名前で設定されていません。</span><span class="sxs-lookup"><span data-stu-id="5803d-819">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>