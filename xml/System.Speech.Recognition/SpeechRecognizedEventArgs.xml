<Type Name="SpeechRecognizedEventArgs" FullName="System.Speech.Recognition.SpeechRecognizedEventArgs">
  <TypeSignature Language="C#" Value="public class SpeechRecognizedEventArgs : System.Speech.Recognition.RecognitionEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SpeechRecognizedEventArgs extends System.Speech.Recognition.RecognitionEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognizedEventArgs&#xA;Inherits RecognitionEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognizedEventArgs : System::Speech::Recognition::RecognitionEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.RecognitionEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e59c2-101"><see cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />、<see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />、および <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" /> のイベントに情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="e59c2-101">Provides information for the <see cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />, <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />, and <see cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" /> events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e59c2-102">A`SpeechRecognized`によってイベントが発生した、 <xref:System.Speech.Recognition.Grammar>、<xref:System.Speech.Recognition.SpeechRecognizer>と<xref:System.Speech.Recognition.SpeechRecognitionEngine>クラスです。</span><span class="sxs-lookup"><span data-stu-id="e59c2-102">A `SpeechRecognized` event is raised by the <xref:System.Speech.Recognition.Grammar>, <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.</span></span>  
  
 <span data-ttu-id="e59c2-103">`SpeechRecognized` イベントは、1 つまたは複数認識操作から代替の受け入れを十分に高い信頼スコアがあるときに生成されます。</span><span class="sxs-lookup"><span data-stu-id="e59c2-103">`SpeechRecognized` events are generated when one or more of the alternates from a recognition operation have a high enough confidence score to be accepted.</span></span> <span data-ttu-id="e59c2-104">認識された語句に関する詳細情報を取得するには、アクセス、<xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A>イベントのハンドラーのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="e59c2-104">To obtain detailed information about a recognized phrase, access the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the handler for the event.</span></span>  
  
 <span data-ttu-id="e59c2-105">`SpeechRecognizedEventArgs` 派生した、<xref:System.Speech.Recognition.RecognitionEventArgs>クラスです。</span><span class="sxs-lookup"><span data-stu-id="e59c2-105">`SpeechRecognizedEventArgs` derives from the <xref:System.Speech.Recognition.RecognitionEventArgs> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e59c2-106">次の例は、音声認識の文法を読み込んで、音声入力を共有認識エンジン、関連付けられている認識の結果、および音声認識エンジンによって生成される関連するイベントについて説明するコンソール アプリケーションです。</span><span class="sxs-lookup"><span data-stu-id="e59c2-106">The following example is part of a console application that loads a speech recognition grammar and demonstrates speech input to the shared recognizer, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="e59c2-107">Windows 音声認識が実行されていない場合、このアプリケーションの起動と Windows 音声認識が開始もします。</span><span class="sxs-lookup"><span data-stu-id="e59c2-107">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span>  
  
 <span data-ttu-id="e59c2-108">「する Miami にシカゴからスライド」をトリガーするように入力を読み上げ、<xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="e59c2-108">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span> <span data-ttu-id="e59c2-109">"飛行 me ヒューストンからシカゴに"という語句を話すはトリガーされません、<xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>イベント。</span><span class="sxs-lookup"><span data-stu-id="e59c2-109">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="e59c2-110">例では、ハンドラーを使用して、<xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>を正常に表示するイベントには、語句と、コンソールに含まれているセマンティクスが認識されています。</span><span class="sxs-lookup"><span data-stu-id="e59c2-110">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
    <altmember cref="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
  </Docs>
  <Members />
</Type>