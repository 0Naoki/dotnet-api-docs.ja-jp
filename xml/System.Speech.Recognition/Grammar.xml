<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bbc3b691eb06452429906f2486581a6af078106" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53517208" /></Metadata><TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <TypeSignature Language="F#" Value="type Grammar = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アプリケーションが音声認識の制約を定義するために使用できる、音声認識の文法を参照するランタイム オブジェクト。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 音声認識文法は、一連のルールまたは意味のある入力として認識できる、音声認識エンジンを定義する制約です。 作成と音声認識文法の使用に関する詳細については、次を参照してください[音声認識](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14))、[文法を使用して XML の作成](https://msdn.microsoft.com/library/2d799487-49c6-4cc9-b42f-f71cd3824fe1)、[作成文法を使用して GrammarBuilder](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。、および[SrgsGrammar を使用して文法を作成](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361680(v%3doffice.14))です。  
  
 文法を作成した後にビルドする必要があります、<xref:System.Speech.Recognition.Grammar>オブジェクトの音声認識エンジンを読み込むことができ、音声認識を管理する時、アプリケーションを使用できます。 使用することができます、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクターを作成する、<xref:System.Speech.Recognition.Grammar>インスタンスから、<xref:System.Speech.Recognition.GrammarBuilder>または<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>オブジェクト、またはファイルから、または<xref:System.IO.Stream>でサポートされている形式の文法の説明を格納しています。 サポートされている形式を以下に示します。  
  
-   W3C に準拠する XML フォーマット ファイル[Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   .Cfg ファイル拡張子を持つバイナリ ファイルにコンパイルされている文法  
  
 XML 形式の文法ファイルに関連する引数を受け入れる文法コンス トラクターは、音声認識エンジンでの読み込みと使用量の最適化をバイナリ形式の XML 文法をコンパイルします。 構築に必要な時間の量を減らすことができます、<xref:System.Speech.Recognition.Grammar>オブジェクトを XML 形式の文法のいずれかを使用して、事前に文法をコンパイルしてから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>メソッド。  
  
 管理対象として、アプリケーションの音声認識エンジンを<xref:System.Speech.Recognition.SpeechRecognizer>または<xref:System.Speech.Recognition.SpeechRecognitionEngine>オブジェクト、複数の音声認識文法を読み込むことができます。 アプリケーション別に有効または無効に個々 の文法を設定して、<xref:System.Speech.Recognition.Grammar.Enabled%2A>プロパティ、および認識を使用して動作を変更<xref:System.Speech.Recognition.Grammar>プロパティなど、<xref:System.Speech.Recognition.Grammar.Priority%2A>と<xref:System.Speech.Recognition.Grammar.Weight%2A>プロパティ。  
  
 文法の<xref:System.Speech.Recognition.Grammar.SpeechRecognized>入力文法からのパスと一致すると、イベントが発生します。  
  
> [!NOTE]
>  任意の URI またはビルドするために使用する DLL の安全性を確認することをお勧め、<xref:System.Speech.Recognition.Grammar>オブジェクト。  
>   
>  Windows および音声のプラットフォームを構築するアプリケーションのセキュリティを提供する<xref:System.Speech.Recognition.Grammar>DLL からまたはスクリプトをサポートする文法からのインスタンス。  
>   
>  スクリプトで<xref:System.Speech.Recognition.Grammar>で web ページからダウンロードした場合、オブジェクトは常に実行、`Internet Zone`します。 共通言語ランタイム (CLR) は、文法定義を取得する読み込まれた DLL を分離します。  
  
   
  
## Examples  
 次の例では、構築、 <xref:System.Speech.Recognition.Grammar> XML ファイル (cities.xml) で定義されている音声認識文法からオブジェクト。 Cities.xml ファイルの内容は、次の XML の例が表示されます。  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクターを作成する、<xref:System.Speech.Recognition.Grammar>インスタンスから、<xref:System.Speech.Recognition.GrammarBuilder>または<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>オブジェクト、またはファイルから、または<xref:System.IO.Stream>でサポートされている形式の文法の説明を格納しています。 サポートされている形式を以下に示します。  
  
-   W3C に準拠する XML フォーマット ファイル[Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   .Cfg ファイル拡張子を持つバイナリ ファイルにコンパイルされている文法  
  
 XML 形式の文法ファイルに関連する引数を受け入れる文法コンス トラクターは、音声認識エンジンでの読み込みと使用量の最適化をバイナリ形式の XML 文法をコンパイルします。 構築に必要な時間の量を減らすことができます、<xref:System.Speech.Recognition.Grammar>オブジェクトを XML 形式の文法のいずれかを使用して、事前に文法をコンパイルしてから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>メソッド。  
  
 音声認識の文法では、ルート ルールを定義できます。 作成する、<xref:System.Speech.Recognition.Grammar>のルート規則として使用するには、どのルールを指定するオブジェクトを受け入れるコンス トラクターを使用して、`ruleName`パラメーター。  
  
 作成する、<xref:System.Speech.Recognition.Grammar>相対的な規則の参照を解決するベース URI を指定するオブジェクトを受け取るコンス トラクターを使用して、`baseUri`パラメーター。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">サポートされている形式で音声認識の文法を記述するストリーム。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> から <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが、初期化ハンドラーにパラメーターを指定しないと、説明は、引数を必要と初期化ハンドラーを定義しないでください。  
  
 このコンス トラクターを作成できる、<xref:System.Speech.Recognition.Grammar>インスタンス、次の形式から。  
  
-   W3C に準拠する XML フォーマット ファイル[Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   .Cfg ファイル拡張子を持つバイナリ ファイルにコンパイルされている文法  
  
 このコンス トラクターでは、音声認識エンジンでの読み込みと使用量の最適化をバイナリ形式を XML 形式の文法ファイルをコンパイルします。 構築に必要な時間の量を減らすことができます、<xref:System.Speech.Recognition.Grammar>オブジェクトを XML 形式の文法のいずれかを使用して、事前に文法をコンパイルしてから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>メソッド。  
  
 SRGS 文法には、ルート ルールを定義できます。 作成する、<xref:System.Speech.Recognition.Grammar>ストリームからオブジェクトし、ルート規則を指定を使用して、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>または<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクター。  
  
 作成する、<xref:System.Speech.Recognition.Grammar>ストリームからオブジェクトを使用して、相対的な規則参照の解決に使用するベース URI を指定、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクター。  
  
   
  
## Examples  
 次の例では、ファイル ストリームを使用してローカル SRGS ファイル (cities.xml) から、音声認識文法を作成します。 Cities.xml ファイルの内容は、次の c# の例が表示されます。  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stream" /> は、ルート ルールを含まない文法を表します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">ストリームに文法の有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.GrammarBuilder -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">音声認識文法の制約を格納している <see cref="T:System.Speech.Recognition.GrammarBuilder" /> のインスタンス。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトから <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用しての詳細については、<xref:System.Speech.Recognition.GrammarBuilder>クラスを参照してください、文法が定義[文法を使用して GrammarBuilder を作成する](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)します。  
  
   
  
## Examples  
 次の例は、使用する音声認識文法を作成<xref:System.Speech.Recognition.Choices>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。 <xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクターを作成、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。  
  
```csharp  
  
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar srgsDocument" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが、初期化ハンドラーにパラメーターを指定しないと、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>引数を必要と初期化ハンドラーを含めることはできません。  
  
 A<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>ルート ルールを持つことができます。 作成する、<xref:System.Speech.Recognition.Grammar>オブジェクトを指定したルート ルールを使用して、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>または<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクター。  
  
 音声認識を作成する<xref:System.Speech.Recognition.Grammar>から、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>を使用して、相対的な規則の参照の解決に使用するベース URI を指定し、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクター。  
  
   
  
## Examples  
 次の例での音声認識文法の作成、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>構築に使用し、インスタンス、<xref:System.Speech.Recognition.Grammar>オブジェクト。  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="srgsDocument" /> にはルート ルールが含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" /> には、解決できないルール参照が含まれています。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">サポートされている形式で音声認識文法を記述するファイルのパス。</param>
        <summary>ファイルから <see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが、初期化ハンドラーにパラメーターを指定しないと、説明は、引数を必要と初期化ハンドラーを定義しないでください。  
  
 このコンス トラクターを作成できる、<xref:System.Speech.Recognition.Grammar>インスタンス、次の形式から。  
  
-   W3C に準拠する XML フォーマット ファイル[Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   .Cfg ファイル拡張子を持つバイナリ ファイルにコンパイルされている文法  
  
 このコンス トラクターでは、音声認識エンジンでの読み込みと使用量の最適化をバイナリ形式を XML 形式の文法ファイルをコンパイルします。 構築に必要な時間の量を減らすことができます、<xref:System.Speech.Recognition.Grammar>オブジェクトを XML 形式の文法のいずれかを使用して、事前に文法をコンパイルしてから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>メソッド。  
  
 SRGS 文法には、ルート ルールを定義できます。 作成する、<xref:System.Speech.Recognition.Grammar>文字列からオブジェクトし、ルート規則を指定を使用して、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクター。  
  
 作成する、<xref:System.Speech.Recognition.Grammar>を使用して、相対的な規則の参照を解決するベース URI を指定するオブジェクトがファイル ストリームで使用してファイルを開く、<xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType>コンス トラクター。  
  
   
  
## Examples  
 次の例では、音声認識文法を読み込みますを構築するローカル SRGS ファイルから、<xref:System.Speech.Recognition.Grammar>オブジェクト。 C# の例を次の XML の例では、cities.xml ファイルの内容が表示されます。  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> に空の文字列 ("") を含むか、ルート規則を含まない文法についてファイルで定義します。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">ファイルに有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">サポートされている形式で音声認識の文法を記述するストリーム。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> と指定したルート ルールから <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが、初期化ハンドラーにパラメーターを指定しないと、説明は、引数を必要と初期化ハンドラーを定義しないでください。  
  
 このコンス トラクターを作成できる、<xref:System.Speech.Recognition.Grammar>インスタンス、次の形式から。  
  
-   W3C に準拠する XML フォーマット ファイル[Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   .Cfg ファイル拡張子を持つバイナリ ファイルにコンパイルされている文法  
  
 このコンス トラクターでは、音声認識エンジンでの読み込みと使用量の最適化をバイナリ形式を XML 形式の文法ファイルをコンパイルします。 構築に必要な時間の量を減らすことができます、<xref:System.Speech.Recognition.Grammar>オブジェクトを XML 形式の文法のいずれかを使用して、事前に文法をコンパイルしてから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>メソッド。  
  
 作成する、<xref:System.Speech.Recognition.Grammar>ストリームからを使用して、相対的な規則の参照の解決に使用するベース URI を指定し、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクター。  
  
   
  
## Examples  
 次の例では、ファイル ストリームからローカル SRGS ファイル (cities.xml) を読み込みし、文法のルートとして使用するルールを指定します。 C# の例を次の XML の例では、cities.xml ファイルの内容が表示されます。  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="ruleName" /> が <see langword="null" /> で文法の説明がルート規則を定義していません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">ストリームに有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子、または <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトと指定したルート ルールから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが、初期化ハンドラーにパラメーターを指定しないと、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>引数を必要と初期化ハンドラーを含めることはできません。  
  
 作成する、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>を使用して、相対的な規則の参照の解決に使用するベース URI を指定し、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクター。  
  
   
  
## Examples  
 次の例での音声認識文法の作成、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>インスタンスし、文法のルート規則として使用するルールを指定します。 例では、構築、<xref:System.Speech.Recognition.Grammar>オブジェクトから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>インスタンスし、音声認識エンジンに読み込みます。  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting aynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="ruleName" /> が <see langword="null" /> で <paramref name="srgsDocument" /> にルート規則が含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" /> には、解決できないルール参照が含まれています。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">サポートされている形式で音声認識文法を記述するファイルのパス。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <summary>ファイルから <see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化し、ルート ルールを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが、初期化ハンドラーにパラメーターを指定しないと、説明は、引数を必要と初期化ハンドラーを定義しないでください。  
  
 このコンス トラクターを作成できる、<xref:System.Speech.Recognition.Grammar>インスタンス、次の形式から。  
  
-   W3C に準拠する XML フォーマット ファイル[Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   .Cfg ファイル拡張子を持つバイナリ ファイルにコンパイルされている文法  
  
 このコンス トラクターでは、音声認識エンジンでの読み込みと使用量の最適化をバイナリ形式を XML 形式の文法ファイルをコンパイルします。 構築に必要な時間の量を減らすことができます、<xref:System.Speech.Recognition.Grammar>オブジェクトを XML 形式の文法のいずれかを使用して、事前に文法をコンパイルしてから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>メソッド。  
  
 作成する、<xref:System.Speech.Recognition.Grammar>を使用して相対的な規則の参照を解決するには、ファイルのファイル ストリームを開きを使用するベース URI を指定する、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>コンス トラクター。  
  
   
  
## Examples  
 次の例では、ファイルからローカル SRGS ファイル (cities.xml) を読み込みし、文法のルートとして使用するルールを指定します。 C# の例を次の XML の例では、cities.xml ファイルの内容が表示されます。  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="path" /> が空の文字列 ("") か、<paramref name="ruleName" /> が <see langword="null" /> で文法の説明がルート規則を定義していません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">ファイルに有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">文法の仕様を含む入出力オブジェクト (ファイル、VisualStudio リソース、DLL など) に接続された <see cref="T:System.IO.Stream" />。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> と指定したルート ルールから <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターも指定できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stream" /> は、次のような文法に接続されています。 
-   <paramref name="ruleName" /> に指定された規則を含みません。  
  
-   <paramref name="parameters" /> で指定されたパラメーターと異なる初期化パラメーターが必要です。  
  
-   文法の既定のベース <see cref="T:System.Uri" /> ルールでは解決できない相対的なルール参照が含まれます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">サポートされている形式で音声認識の文法を記述するストリーム。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="baseUri">文法の説明で相対的なルール参照を解決するために使用するベース URI または <see langword="null" />。</param>
        <summary>ストリームから <see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化し、ルート規則を指定して、相対的な規則の参照を解決するためのベース URI (Uniform Resource Identifier) を定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが、初期化ハンドラーにパラメーターを指定しないと、説明は、引数を必要と初期化ハンドラーを定義しないでください。  
  
 このコンス トラクターを作成できる、<xref:System.Speech.Recognition.Grammar>インスタンス、次の形式から。  
  
-   W3C に準拠する XML フォーマット ファイル[Speech Recognition Grammar Specification (SRGS) Version 1.0](https://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   .Cfg ファイル拡張子を持つバイナリ ファイルにコンパイルされている文法  
  
 このコンス トラクターでは、音声認識エンジンでの読み込みと使用量の最適化をバイナリ形式を XML 形式の文法ファイルをコンパイルします。 構築に必要な時間の量を減らすことができます、<xref:System.Speech.Recognition.Grammar>オブジェクトを XML 形式の文法のいずれかを使用して、事前に文法をコンパイルしてから、<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>メソッド。  
  
 このコンス トラクターでは検証されません`baseUri`します。 ただし、`LoadGrammar`のメソッド、<xref:System.Speech.Recognition.SpeechRecognitionEngine>または<xref:System.Speech.Recognition.SpeechRecognizer>オブジェクトは、すべての文法の説明で規則の参照を解決できない場合に例外をスローします。 場合`baseUri`ない`null`、`LoadGrammar`メソッドは、それ以外の場合に解決できない規則の参照を解決するのには、URI を使用します。 場合`baseUri`ファイルを表します、`LoadGrammar`相対的な規則の参照を解決しようとしたときに、指定したファイルとファイルのディレクトリの両方を使用します。  
  
   
  
## Examples  
 次の例では、ファイル ストリームからローカル SRGS ファイル (shuttle.xml) を読み込みます。 ファイルは、cities.xml ファイルで規則への相対的なルール参照が含まれています、規則の参照の解決に使用するベース URI を指定します。 C# の例を次に示す XML の例に、shuttle.xml および cities.xml ファイルの内容が表示されます。  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="ruleName" /> が <see langword="null" /> で文法の説明がルート規則を定義していません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">ストリームに有効な説明が含まれていないか、解決できない規則の参照を含む文法について説明しています。</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約を格納している <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> のインスタンス。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> のインスタンスから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化し、文法へのエントリ ポイントである規則の名前を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターも指定できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   いずれかのパラメーターに無効な値が含まれています。  
  
-   <paramref name="srgsDocument" /> で指定された <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> は、<paramref name="ruleName" /> が指定した規則を含みません。  
  
-   配置パラメーターの内容が、ルールのいずれの初期化ハンドラーの引数とも一致しません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子、または <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="baseUri"><see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> で相対的なルール参照を解決するために使用するベース URI または <see langword="null" />。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化します。ルート規則を指定し、相対的な規則の参照を解決するためにベース URI (Uniform Resource Identifier) を定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターが、初期化ハンドラーにパラメーターを指定しないと、<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>引数を必要と初期化ハンドラーを含めることはできません。  
  
 このコンス トラクターでは検証されません`baseUri`します。 ただし、`LoadGrammar`のメソッド、<xref:System.Speech.Recognition.SpeechRecognitionEngine>または<xref:System.Speech.Recognition.SpeechRecognizer>オブジェクトは、すべての文法の説明で規則の参照を解決できない場合に例外をスローします。 場合`baseUri`ない`null`、`LoadGrammar`メソッドは、それ以外の場合に解決できない規則の参照を解決するのには、URI を使用します。 場合`baseUri`ファイルを表します、`LoadGrammar`相対的な規則の参照を解決しようとしたとき、指定されたファイルとファイルのディレクトリの両方をメソッドが使用されます。  
  
   
  
## Examples  
 次の例での音声認識文法の作成、 <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> cities.xml ファイルへの相対的なルール参照が含まれていますを規則の参照を解決するための URI を指定します。 C# の例を次の XML の例では、cities.xml ファイルの内容が表示されます。  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="ruleName" /> は解決できないか、パブリックではないか、<paramref name="ruleName" /> が <see langword="null" /> で <paramref name="srgsDocument" /> にルート規則が含まれていません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="srgsDocument" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="srgsDocument" /> には、解決できないルール参照が含まれています。</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : string * string * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (path, ruleName, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">文法仕様を含むファイル (DLL を含む) のパス。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary>文法定義を含むファイルから <see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンスを初期化し、文法へのエントリ ポイントであるルールの名前を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターも指定できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   いずれかのパラメーターに無効な値が含まれています。  
  
-   <paramref name="path" /> で指定されたファイルには、<paramref name="ruleName" /> で指定されている有効な文法または規則が含まれていません。  
  
-   配置パラメーターの内容が、ルールのいずれの初期化ハンドラーの引数とも一致しません。  
  
-   文法には、文法の既定のベース <see cref="T:System.Uri" /> ルールでは解決できない相対的なルール参照があります。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.IO.Stream * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (stream, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">文法の仕様を含む入出力オブジェクト (ファイル、VisualStudio リソース、DLL など) に接続された <see cref="T:System.IO.Stream" />。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="baseUri">文法の説明で相対的なルール参照を解決するために使用するベース URI または <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティによって指定された初期化ハンドラーに渡されるパラメーター、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルール。 このパラメーターは null でもかまいません。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> クラスの新しいインスタンス <see cref="T:System.IO.Stream" /> を初期化し、ルート規則および相対参照を解決するためのベース URI を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターも指定できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   いずれかのパラメーターに無効な値が含まれています。  
  
-   <paramref name="stream" /> は、 <paramref name="ruleName" /> で指定されている規則を含まない文法に接続されています。  
  
-   配置パラメーターの内容が、ルールのいずれの初期化ハンドラーの引数とも一致しません。  
  
-   文法には、文法の既定のベース <see cref="T:System.Uri" /> ルールまたは <paramref name="baseUri" /> によって提供された URI では解決できない相対的なルール参照が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Grammar : System.Speech.Recognition.SrgsGrammar.SrgsDocument * string * Uri * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="new System.Speech.Recognition.Grammar (srgsDocument, ruleName, baseUri, parameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">音声認識文法の制約を格納している <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> のインスタンス。</param>
        <param name="ruleName">音声認識文法のエントリ ポイントとして使用するルールの識別子。または、文法の説明の既定のルート ルールを使用する場合は <see langword="null" />。</param>
        <param name="baseUri">文法の説明で相対的なルール参照を解決するために使用するベース URI または <see langword="null" />。</param>
        <param name="parameters">エントリ ポイントの <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> プロパティ、または作成する <see cref="T:System.Speech.Recognition.Grammar" /> のルート ルールによって指定された初期化ハンドラーに渡されるパラメーター。このパラメーターは null でもかまいません。</param>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> のインスタンスから <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> クラスの新しいインスタンスを初期化し、文法へのエントリ ポイントである規則の名前と、相対参照を解決するためのベース URI を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 初期化ハンドラーのパラメーターも指定できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   いずれかのパラメーターに無効な値が含まれています。  
  
-   <paramref name="srgsDocument" /> で指定された <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> は、<paramref name="ruleName" /> が指定した規則を含みません。  
  
-   配置パラメーターの内容が、ルールのいずれの初期化ハンドラーの引数とも一致しません。  
  
-   文法には、文法の既定のベース <see cref="T:System.Uri" /> ルールまたは <paramref name="baseUri" /> によって提供された URI では解決できない相対的なルール参照があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Speech.Recognition.Grammar.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音声認識エンジンが <see cref="T:System.Speech.Recognition.Grammar" /> を使用して認識を実行できるかどうかを制御する値を取得または設定します。</summary>
        <value><see langword="Enabled" /> プロパティは、音声認識エンジンが音声認識文法を使用して認識を実行している場合は <see langword="true" /> を、それ以外の場合は <see langword="false" /> を返します。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンス<xref:System.Speech.Recognition.Grammar>有効になっているまたは音声認識エンジンによって読み込まれるとは無関係に無効になっている可能性があります。  
  
   
  
## Examples  
 次の例は、に関する情報を書き込みます、<xref:System.Speech.Recognition.Grammar>オブジェクトを[コンソール](https://go.microsoft.com/fwlink/?LinkId=159613)します。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">音声認識文法仕様</related>
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStg : bool" Usage="System.Speech.Recognition.Grammar.IsStg" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文法が厳密に型指定されているかどうかを取得します。</summary>
        <value><see langword="IsStg" /> プロパティは、厳密に型指定された場合には <see langword="true" /> を返し、それ以外の場合は <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 厳密に型<xref:System.Speech.Recognition.Grammar>オブジェクト (`IsStg` equals `true`) クライアント アプリケーションに厳密に型指定された結果 (オブジェクトではなく生のテキスト) を返すことができます。 たとえば、厳密に型指定された文法を返す可能性があります<xref:System.DateTime>認識された生の入力ではなくオブジェクトします。  
  
 厳密に型指定された文法を実装するには、文法の規則にコードをアタッチします。 認識エンジンは、特定の規則を処理してとして作成した現在の部分的な結果を入力する、関連付けられているコードが実行される、テキスト情報は、豊富な型のオブジェクトになります。 これにより、クライアントをより簡単に強化されたセマンティック チェックを使用して、複数のカルチャ、および内部の文法のロジックをサポートできます。  
  
 厳密に型指定されたインスタンス<xref:System.Speech.Recognition.Grammar>オブジェクトは通常としてアセンブリにリソースから取得した、<xref:System.Type>の共通言語ランタイム (CLR)。 さまざまな言語をサポートするために使用されるローカライズされた型は、このような例を示します<xref:System.Speech.Recognition.Grammar>オブジェクト。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>継承する、厳密に型指定された文法<see cref="T:System.Speech.Recognition.Grammar" />の既定の動作をオーバーライドする必要があります<see langword="IsStg" />、返すある<see langword="false" />します。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Loaded : bool" Usage="System.Speech.Recognition.Grammar.Loaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> が音声認識エンジンによって読み込まれたかどうかを取得します。</summary>
        <value><see langword="Loaded" /> プロパティは、参照されている音声認識文法が音声認識エンジンに現在読み込まれている場合は <see langword="true" /> を、それ以外の場合は <see langword="false" /> を返します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 回、<xref:System.Speech.Recognition.Grammar>読み込まれると、値の<xref:System.Speech.Recognition.Grammar.Weight%2A>、および<xref:System.Speech.Recognition.Grammar.Priority%2A>変更ことはできません。  
  
   
  
## Examples  
 次の例は、に関する情報を書き込みます、<xref:System.Speech.Recognition.Grammar>オブジェクトを[コンソール](https://go.microsoft.com/fwlink/?LinkId=159613)します。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberSignature Language="F#" Value="static member LoadLocalizedGrammarFromType : Type * obj[] -&gt; System.Speech.Recognition.Grammar" Usage="System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType (type, onInitParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">アセンブリでは、<see cref="T:System.Type" /> に基づくオブジェクトの <see cref="T:System.Speech.Recognition.Grammar" /> です。</param>
        <param name="onInitParameters"><see cref="T:System.Speech.Recognition.Grammar" /> に基づいて localizedobject の初期化メソッドに渡すパラメーター。 このパラメーターは null でもかまいません。</param>
        <summary><see langword="LoadLocalizedGrammarFromType" /> メソッドは、<see cref="T:System.Speech.Recognition.Grammar" /> から派生する <see cref="T:System.Type" /> オブジェクトのローカライズ インスタンスを返します。</summary>
        <returns><see langword="LoadLocalizedGrammarFromType" /> メソッドは、<see cref="T:System.Speech.Recognition.Grammar" /> に基づいて有効なオブジェクトを返します。エラーがある場合は <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して取得する文法のローカライズ`LoadLocalizedGrammarFromType`は通常、厳密に型指定 (を参照してください<xref:System.Speech.Recognition.Grammar.IsStg%2A>厳密に型指定された文法の詳細については)。 場合`onInitParameters`が null 参照 (Visual Basic では Nothing) をローカライズされた文法が初期化メソッドがない、または引数を受け取らないメソッドのいずれかが必要です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Speech.Recognition.Grammar.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの名前を取得または設定します。</summary>
        <value><see langword="Name" /> プロパティは、<see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの名前を返します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、2 つ作成されます<xref:System.Speech.Recognition.Grammar>桁と小数部のオブジェクト。 文法オブジェクトは名前と相対的な重みと優先順位、割り当てられているし、インプロセス音声認識エンジンによって読み込まれます。 `CreateDigitsGrammar`、 `CreateFractionsGrammar`、および`recognizer_SpeechRecognized`メソッドはここに表示されません。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Speech.Recognition.Grammar.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの優先順位の値を取得または設定します。</summary>
        <value><see langword="Priority" /> プロパティは、特定の <see cref="T:System.Speech.Recognition.Grammar" /> の相対的優先順位を表す整数値を返します。 範囲は -128 ～ 127 です。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Priority`プロパティを使用して、文法の 1 つ以上が、同一の認識結果を生成するときに、文法を選択します。 音声認識エンジンが複数の音声認識文法の読み込みし、有効になっている、入力に一致するかどうかと照合が最善の結果を認識エンジンから、認識エンジンが一番多い文法を使用して`Priority`します。 結果は同じ認識文法もが同じ`Priority`値、認識エンジンを使用する文法が定義されていません。  
  
   
  
## Examples  
 次の例では、2 つ作成されます<xref:System.Speech.Recognition.Grammar>桁と小数部のオブジェクト。 <xref:System.Speech.Recognition.Grammar>オブジェクトの名前と相対的な重みと優先順位、割り当てられているし、インプロセス音声認識エンジンによって読み込まれます。 `CreateDigitsGrammar`、 `CreateFractionsGrammar`、および`recognizer_SpeechRecognized`メソッドはここに表示されません。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResourceName : string with get, set" Usage="System.Speech.Recognition.Grammar.ResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Speech.Recognition.Grammar" /> を読み込むために使用されたバイナリ リソースの名前を示す値を取得または設定します。</summary>
        <value><see langword="ResourceName" /> プロパティは <see cref="T:System.Speech.Recognition.Grammar" /> で使用される厳密に型指定された文法が読み込まれたバイナリ リソースの名前を返します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RuleName : string" Usage="System.Speech.Recognition.Grammar.RuleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトのルート規則またはエントリ ポイントの名前を取得します。</summary>
        <value><see langword="RuleName" /> プロパティは、参照先音声認識文法のルート規則の ID を返します。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 構築する、<xref:System.Speech.Recognition.Grammar>オブジェクトしそのルート ルールの名前を設定のいずれかを使用して、<xref:System.Speech.Recognition.Grammar.%23ctor%2A>を受け取るコンス トラクター、`ruleName`パラメーター。  
  
 場合のルート ルールを<xref:System.Speech.Recognition.Grammar>名前を持たない、プロパティを返す`null`します。  
  
 ルート規則<xref:System.Speech.Recognition.Grammar>からインスタンスが構築された<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト通常名前が付けられていないため<xref:System.Speech.Recognition.Grammar.RuleName%2A>返します`null`します。  
  
   
  
## Examples  
 次の例は、に関する情報を書き込みます、<xref:System.Speech.Recognition.Grammar>オブジェクトを[コンソール](https://go.microsoft.com/fwlink/?LinkId=159613)します。  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音声認識エンジンが <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトを使用して認識を実行するときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 音声認識エンジンも発生します。、`SpeechRecognized`イベントの入力を認識するとします。 <xref:System.Speech.Recognition.Grammar>オブジェクトの<xref:System.Speech.Recognition.Grammar.SpeechRecognized>音声認識エンジンの前にイベントが発生した`SpeechRecognized`イベント。 詳細については、次を参照してください。、 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>、および<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>イベント。  
  
 特定の文法に固有のすべてのタスクは、のハンドラーによって常に処理する必要があります、<xref:System.Speech.Recognition.Grammar>オブジェクトの<xref:System.Speech.Recognition.Grammar.SpeechRecognized>イベント。  
  
   
  
## Examples  
 次の例では、イベント ハンドラーの使用、<xref:System.Speech.Recognition.Grammar>オブジェクトの<xref:System.Speech.Recognition.Grammar.SpeechRecognized>イベント。 認識結果を出力、[コンソール](https://go.microsoft.com/fwlink/?LinkId=159613)します。  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.StgInit : obj[] -&gt; unit" Usage="grammar.StgInit parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">厳密に型指定された文法を初期化するために渡すパラメーター。このパラメーターは null でもかまいません。</param>
        <summary><see langword="StgInit" /> メソッドは、厳密に型指定された文法を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 厳密に型<xref:System.Speech.Recognition.Grammar>オブジェクト (`IsStg` equals `true`) クライアント アプリケーションに厳密に型指定された結果 (オブジェクトではなく生のテキスト) を返すことができます。 たとえば、厳密に型指定された文法を返す可能性があります<xref:System.DateTime>認識された生の入力ではなくオブジェクトします。  
  
 厳密に型指定された文法を実装するには、文法の規則にコードをアタッチします。 認識エンジンは、特定の規則を処理してとして作成した現在の部分的な結果を入力する、関連付けられているコードが実行される、テキスト情報は、豊富な型のオブジェクトになります。 これにより、クライアントをより簡単に強化されたセマンティック チェックを使用して、複数のカルチャ、および内部の文法のロジックをサポートできます。  
  
 厳密に型指定されたインスタンス<xref:System.Speech.Recognition.Grammar>オブジェクトは通常としてアセンブリにリソースから取得した、<xref:System.Type>の共通言語ランタイム (CLR)。 さまざまな言語をサポートするために使用されるローカライズされた型は、このような例を示します<xref:System.Speech.Recognition.Grammar>オブジェクト。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>厳密に型指定された文法には、初期化が必要な場合<see langword="StgInit" />コンス トラクターまたは初期化メソッドで呼び出す必要があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.Weight : single with get, set" Usage="System.Speech.Recognition.Grammar.Weight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトの重さの値を取得または設定します。</summary>
        <value><see langword="Weight" /> プロパティは浮動小数点値を返し、認識エンジンのインスタンスが音声入力を処理するときに文法に割り当てる相対的な重みを示します。 範囲は 0.0 から 1.0 の包括的には。 既定では 1.0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 認識エンジンの使用の複雑なのため**重み**、その直接の予測可能な特定の文法のパフォーマンスに与える影響は<xref:System.Speech.Recognition.Grammar.Priority%2A>します。  
  
 音声認識は、重み付けシステムです。 文法の重み、代替方法については、文法内で定義されている重みや音声モデルによって定義された確率の組み合わせに基づくすべての認識可能なパスを評価します。 音声認識エンジンは、これらの重みと順位付けの潜在的な代替認識のために確率の組み合わせを使用します。 文法により高い重みをより下位の重みを持つ文法認識代替の順位付けに貢献します。  
  
 効果、<xref:System.Speech.Recognition.Grammar.Weight%2A>音声認識エンジンのプロパティは、認識エンジンの実装に依存します。 ただし、<xref:System.Speech.Recognition.Grammar.Weight%2A>プロパティは、アプリケーションの音声認識の精度の調整に使用できる、認識エンジンに関する完全な情報と、特定の認識環境の診断調査を制御した後のみに使用する必要がありますを使用します。  
  
   
  
## Examples  
 次の例では、2 つ作成されます<xref:System.Speech.Recognition.Grammar>桁と小数部のオブジェクト。 <xref:System.Speech.Recognition.Grammar>オブジェクトの名前と相対的な重みと優先順位、割り当てられているし、インプロセス音声認識エンジンによって読み込まれます。 `CreateDigitsGrammar`、 `CreateFractionsGrammar`、および`recognizer_SpeechRecognized`メソッドはここに表示されません。  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>