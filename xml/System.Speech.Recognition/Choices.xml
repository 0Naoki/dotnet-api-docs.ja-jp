<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9d3b469e1808b2873205fca67ce30d9095f572a" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39866419" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>音声認識文法の制約内の代替のセットを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Speech.Recognition.Choices>オブジェクトは、いくつかの値のいずれかの語句のコンポーネントを表します。 音声認識文法を作成するときに、このクラスを使用して、<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。  
  
 など、<xref:System.Speech.Recognition.Choices>オブジェクトは、コンポーネントを表すことができます*colorChoice*語句内"に色を変更する*colorChoice*"ここで、使用できる値は*colorChoice*は"red"または「緑色」または"blue"。  
  
> [!NOTE]
>  使用する、<xref:System.Speech.Recognition.Choices>句のオプション コンポーネントとしてオブジェクトを作成、<xref:System.Speech.Recognition.Choices>し、オブジェクトに追加、<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType>オブジェクト`minRepeat`と`maxRepeat`それぞれ 0 と 1 に設定します。 オプションのコンポーネントが話されるかどうか、省略可能なコンポーネントを含む語句を認識できます。  
  
 <xref:System.Speech.Recognition.Choices>クラスと同じ機能を提供する、`one-of`によって定義された XML 要素、 [Speech Recognition Grammar Specification (SRGS) Version 1.0](https://www.w3.org/TR/speech-grammar/)と似ています、<xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>クラス、 <xref:System.Speech.Recognition.SrgsGrammar>名前空間。  
  
 音声認識文法を定義する詳細については、次を参照してください。[音声認識](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919)と[GrammarBuilder 文法の作成](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)です。  
  
   
  
## Examples  
 次の例は、単語の音声認識文法を作成します"の背景を設定*colorChoice*"ここで、 *colorChoice*定義の色のいずれかを指定できます。 <xref:System.Speech.Recognition.GrammarBuilder>文法の制約を定義するために使用します。  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Recognition.Choices" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 構築することができます、<xref:System.Speech.Recognition.Choices>オブジェクトを既定のコンス トラクター (空のオブジェクトを返します) のグループからを使用して<xref:System.String>オブジェクト、またはのセットから<xref:System.Speech.Recognition.GrammarBuilder>オブジェクト。  
  
 <xref:System.Speech.Recognition.GrammarBuilder>オブジェクトからの暗黙的な変換をサポートしている<xref:System.Speech.Recognition.SemanticResultValue>と<xref:System.Speech.Recognition.SemanticResultKey>、<xref:System.Speech.Recognition.Choices>キャストを使用してこれらのオブジェクトの配列から構築できます。  
  
   
  
## Examples  
 次の例では<xref:System.Speech.Recognition.Choices>代替の 2 つのリストを作成するオブジェクト。  
  
 最初の<xref:System.Speech.Recognition.Choices>の配列からオブジェクトが構築された<xref:System.String>オブジェクト。 他の<xref:System.Speech.Recognition.Choices>の配列からオブジェクトが構築された<xref:System.Speech.Recognition.GrammarBuilder>のキャストによって暗黙的に変換されたオブジェクト。  
  
 この例では、<xref:System.Speech.Recognition.GrammarBuilder>語句をアセンブルするオブジェクトを使用して、<xref:System.Speech.Recognition.Choices>オブジェクトと音声の認識に使用できる 2 つ追加の文字列形式で入力「[phoneType] スマート フォンは呼び出し [contactlList]」の例"携帯電話の呼び出し Jane"。  
  
```  
public GrammarBuilder ChoicesContructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>空の代替セットを含む、<see cref="T:System.Speech.Recognition.Choices" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは、代替の有効な場合は、空のセットを返します。 いずれかを使用する代替手段を追加することができます、<xref:System.Speech.Recognition.Choices.Add%2A>メソッド。  
  
   
  
## Examples  
 次の例では<xref:System.Speech.Recognition.Choices>と<xref:System.Speech.Recognition.GrammarBuilder>"自分のセルに呼び出し Anne"と"自分の勤務先電話番号に呼び出し James"などの音声入力の認識に使用できる語句を作成するオブジェクト。 暗黙的なキャストを使用する例を示します<xref:System.Speech.Recognition.Choices>と<xref:System.String>に<xref:System.Speech.Recognition.GrammarBuilder>します。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">代替のセットを格納する配列。</param>
        <summary>1 つ以上の <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを含む配列から <see cref="T:System.Speech.Recognition.GrammarBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各<xref:System.Speech.Recognition.GrammarBuilder>で`alternateChoices`代わりに 1 つを定義します。 場合`alternateChoices`空の配列は、コンス トラクターは、代替の空のセットを返します。 いずれかを使用する代替手段を追加することができます、<xref:System.Speech.Recognition.Choices.Add%2A>メソッド。  
  
 コンス トラクターがスローされます、<xref:System.ArgumentNullException>とき`alternateChoices`は`null`や配列の要素のいずれかが`null`します。  
  
 <xref:System.Speech.Recognition.GrammarBuilder>クラスの暗黙的な変換のサポートを提供する<xref:System.Speech.Recognition.Choices>、 <xref:System.Speech.Recognition.SemanticResultValue>、および<xref:System.Speech.Recognition.SemanticResultKey>オブジェクトを<xref:System.Speech.Recognition.GrammarBuilder>インスタンス、正しくキャストを使用して、このコンス トラクターこともできますを作成する、 <xref:System.Speech.Recognition.Choices>これらのオブジェクトの任意の組み合わせの一覧からオブジェクトです。  
  
   
  
## Examples  
 次の例では`Choices`と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトを作成する、 <xref:System.Speech.Recognition.Grammar> "自分のセルに呼び出し Anne"と"自分の勤務先電話番号に呼び出し James"などの語句。 暗黙的なキャストを使用する例を示します`Choices`と<xref:System.String>に<xref:System.Speech.Recognition.GrammarBuilder>します。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">代替のセットを格納する配列。</param>
        <summary>1 つ以上の <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを含む配列から <see cref="T:System.String" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各<xref:System.String>で`phrases`代わりに 1 つを定義します。 音声認識エンジンは、音声入力に一致するのに文字列配列内の項目のいずれかを使用できます。 場合`phrases`空の配列は、コンス トラクターは、代替の空のセットを返します。 いずれかを使用する代替手段を追加することができます、<xref:System.Speech.Recognition.Choices.Add%2A>メソッド。  
  
 コンス トラクターがスローされます、<xref:System.ArgumentNullException>とき`phrases`は`null`または配列要素のいずれかが`null`します。 コンス トラクターがスローされます、<xref:System.ArgumentException>配列内の任意の要素が空の文字列 ("")。  
  
   
  
## Examples  
 次の例では<xref:System.Speech.Recognition.Choices>と<xref:System.Speech.Recognition.GrammarBuilder>オブジェクトを作成する、 <xref:System.Speech.Recognition.Grammar> "自分のセルに呼び出し Anne"と"自分の勤務先電話番号に呼び出し James"などの語句。 暗黙的なキャストを使用する例を示します`Choices`と<xref:System.String>に<xref:System.Speech.Recognition.GrammarBuilder>します。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>代替のセットに項目を追加します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">この <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトに追加する <see cref="T:System.Speech.Recognition.Choices" /> オブジェクト。</param>
        <summary>1 つ以上の <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトを含む配列を代替のセットに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 暗黙的な変換のサポートのため<xref:System.Speech.Recognition.Choices>、 <xref:System.Speech.Recognition.SemanticResultKey>、および<xref:System.Speech.Recognition.SemanticResultValue>オブジェクトを<xref:System.Speech.Recognition.GrammarBuilder>にこれら 3 つのクラスを追加することがあります、<xref:System.Speech.Recognition.Choices>インスタンスもします。  
  
 場合`alternateChoices`空の配列は、このメソッドは、代替のセットを更新しません。  
  
 アプリケーションは、両方を使用できます<xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29>と<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>に代わる方法を追加する、<xref:System.Speech.Recognition.Choices>オブジェクト。  
  
 このメソッドは、<xref:System.ArgumentNullException>とき`alternateChoices`は`null`または配列要素のいずれかが`null`。  
  
   
  
## Examples  
 次の例では、"自分のセルに呼び出し Anne"と"自分の勤務先電話番号に呼び出し James"などの語句の音声認識文法を作成します。 この例の両方のオーバー ロードを使用して、<xref:System.Speech.Recognition.Choices.Add%2A>文法を構築するメソッド。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">この <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトに追加する文字列。</param>
        <summary>1 つ以上の <see cref="T:System.String" /> オブジェクトを含む配列を代替のセットに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションは、両方を使用できます<xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29>と<xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29>に代わる方法を追加する、<xref:System.Speech.Recognition.Choices>オブジェクト。  
  
 場合`phrases`空の配列は、このメソッドは、代替のセットを更新しません。  
  
 このメソッドは、<xref:System.ArgumentNullException>とき`phrases`は`null`または配列要素のいずれかが`null`。 このメソッドは、<xref:System.ArgumentException>配列内の任意の要素が空の文字列 ("")。  
  
   
  
## Examples  
 次の例は、"自分のセルに呼び出し Anne"および"自分の勤務先電話番号に呼び出し James"に類似した語句の音声認識文法を作成します。 この例の両方のオーバー ロードを使用して、<xref:System.Speech.Recognition.Choices.Add%2A>文法を構築するメソッド。  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトから <see cref="T:System.Speech.Recognition.Choices" /> オブジェクトを返します。</summary>
        <returns>この <see cref="T:System.Speech.Recognition.GrammarBuilder" /> オブジェクトと一致する <see cref="T:System.Speech.Recognition.Choices" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder>このメソッドによって 1 つに相当によって返される、次のいずれかが返されます。  
  
-   呼び出す、<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A>コンス トラクターのパラメーターとしてこのオブジェクトを使用します。  
  
-   このオブジェクトのキャスト暗黙的または明示的なを使用して、<xref:System.Speech.Recognition.GrammarBuilder>します。  
  
   
  
## Examples  
 次の例では、背景色を変更するための音声認識文法を作成します。  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>