<Type Name="WebSuccessAuditEvent" FullName="System.Web.Management.WebSuccessAuditEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df98286f3110a67a7c2e2465c6145842e9d1e97f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37751351" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebSuccessAuditEvent : System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebSuccessAuditEvent extends System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebSuccessAuditEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebSuccessAuditEvent&#xA;Inherits WebAuditEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebSuccessAuditEvent : System::Web::Management::WebAuditEvent" />
  <TypeSignature Language="F#" Value="type WebSuccessAuditEvent = class&#xA;    inherit WebAuditEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebAuditEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>正常終了したセキュリティ イベントに関する情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 状態監視には、運用環境と運用スタッフがデプロイされた Web アプリケーションの管理が使用できます。 <xref:System.Web.Management>名前空間には、アプリケーションの正常性状態データとのこのデータを処理するプロバイダーの種類をパッケージ化する正常性イベントの種類が含まれています。 正常性イベントの管理を支援するサポート型も含まれています。  
  
 <xref:System.Web.Management.WebSuccessAuditEvent>クラスは、成功したセキュリティ関連の操作が発生したときに使用されます。 この例では、Web 要求の URL 承認の成功です。  
  
 次の一覧が、機能の種類のイベントについて説明します<xref:System.Web.Management.WebSuccessAuditEvent>が ASP.NET によって発生します。  
  
-   ファイルの承認。 成功の条件が監査されます。 ASP.NET では、ファイルの承認が、Windows Identity が要求に関連付けられている場合のみしようとしました。 関連するイベントの監査のコードは<xref:System.Web.Management.WebEventCodes.AuditFileAuthorizationSuccess>します。  
  
-   URL ベースの承認 承認が付与 URL リソースへのアクセスを示します。 成功の条件が監査されます。 関連するイベントの監査のコードは<xref:System.Web.Management.WebEventCodes.AuditUrlAuthorizationSuccess>します。  
  
-   その他のセキュリティの条件。 次は、関連するイベント コードの一覧です。  
  
    -   <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess>  
  
    -   <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess>  
  
 ときに、<xref:System.Web.Management.WebSuccessAuditEvent>が発生すると、関連する Audit Success Events Raised パフォーマンス カウンターと、チェックをインクリメント ASP.NET 状態監視、`healthMonitoring`すべてのプロバイダーがイベントをサブスクライブするかどうかを判断する構成。 プロバイダーは、イベントをサブスクライブして、ASP.NET は処理のためにイベントをディスパッチします。  
  
> [!NOTE]
>  システム モニター (PerfMon) で監査成功イベントの発生したパフォーマンス カウンターを表示する、**カウンターの追加**ウィンドウ選択**ASP.NET**から、**パフォーマンス オブジェクト**ドロップダウン リストで、**監査成功イベントの発生**パフォーマンス カウンター、およびクリック、**追加**ボタンをクリックします。 詳細については、次を参照してください。 [ASP.NET アプリケーションのパフォーマンスの監視](http://msdn.microsoft.com/library/c96da1d1-6077-48d3-88e2-d9127ed91cf5)します。  
  
 成功の監査が予期された状態を表すために、それらをサブスクライブすることがありますはしません。 サイトの監査のアクセスを提供するために、それらをサブスクライブできます。  
  
> [!NOTE]
>  ほとんどの場合に実装されると、ASP.NET 状態監視の種類を使用することができ、内の値を指定することで、状態監視システムを制御するが、`healthMonitoring`構成セクション。 独自のカスタム イベントとプロバイダーを作成する正常性監視の種類から派生することもできます。 派生の例については、<xref:System.Web.Management.WebSuccessAuditEvent>クラスをこのトピックで例を参照してください。  
  
   
  
## Examples  
 次のコード例から派生させる方法を示しています、<xref:System.Web.Management.WebSuccessAuditEvent>カスタム監査イベントを作成するクラス。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#1)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#1)]  
  
 次の例は、ASP.NET 状態監視イベントを使用できるようにする構成ファイルの抜粋です。  
  
```  
<healthMonitoring   
..enabled="true"  
..heartBeatInterval="0">   
  <providers>  
    <add name="EventLogProvider"   
    type="System.Web.Management.EventLogWebEventProvider,  
    System.Web,Version=2.0.3600.0,Culture=neutral,  
    PublicKeyToken=b03f5f7f11d50a3a"/>  
  </providers>  
  <eventMappings>  
    <add  name="SampleWebSuccessAuditEvent"   
      type="SamplesAspNet.SampleWebSuccessAuditEvent,  
      websuccessauditevent,Version=1.0.1663.31140,   
      Culture=neutral,   
      PublicKeyToken=0d1fa0f69d94de96,   
      processorArchitecture=MSIL"/>  
  </eventMappings>  
  <rules>  
    <add name="Custom Failure Audit Default"  
      eventName=" SampleWebFailureAuditEvent "  
      provider="EventLogProvider"  
      profile="Default"/>    
  </rules>  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Management.WebAuditEvent" />
    <altmember cref="T:System.Web.Management.WebFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebEventCodes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebSuccessAuditEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebSuccessAuditEvent : string * obj * int -&gt; System.Web.Management.WebSuccessAuditEvent" Usage="new System.Web.Management.WebSuccessAuditEvent (message, eventSource, eventCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">イベントの説明。</param>
        <param name="eventSource">イベントのソースであるオブジェクト。</param>
        <param name="eventCode">イベントに関連付けられているコード。 カスタム イベントを実装する場合、イベント コードを <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" /> より大きくする必要があります。</param>
        <summary>指定されたパラメーターを使用して、<see cref="T:System.Web.Management.WebSuccessAuditEvent" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは、ASP.NET 状態監視システムによって内部的に使用されます。 インスタンス化を利用しないが、<xref:System.Web.Management.WebSuccessAuditEvent>が、オブジェクトは、このクラスから継承する独自のイベントの種類を実装する場合に、このコンス トラクターに呼び出すことができます。  
  
> [!NOTE]
>  <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>コンス トラクターは、コードから直接使用するものはありません。 ASP.NET によって呼び出されます。 呼び出すことができます、<xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>コンス トラクターから派生する場合、<xref:System.Web.Management.WebSuccessAuditEvent>クラス。  
  
   
  
## Examples  
 次のコード例でこのコンス トラクターを呼び出す方法を示しています、`SampleWebSuccessAuditEvent`クラス。 このコード例が示されている例の一部、<xref:System.Web.Management.WebSuccessAuditEvent>クラス。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#2)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebSuccessAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebSuccessAuditEvent : string * obj * int * int -&gt; System.Web.Management.WebSuccessAuditEvent" Usage="new System.Web.Management.WebSuccessAuditEvent (message, eventSource, eventCode, eventDetailCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">イベントの説明。</param>
        <param name="eventSource">イベントのソースであるオブジェクト。</param>
        <param name="eventCode">イベントに関連付けられているコード。 カスタム イベントを実装する場合、イベント コードを <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" /> より大きくする必要があります。</param>
        <param name="eventDetailCode">イベントの詳細な識別子を指定する <see cref="T:System.Web.Management.WebEventCodes" /> 値。</param>
        <summary>指定されたパラメーターを使用して、<see cref="T:System.Web.Management.WebSuccessAuditEvent" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターは、ASP.NET 状態監視システムによって内部的に使用されます。 インスタンス化を利用しないが、<xref:System.Web.Management.WebSuccessAuditEvent>が、オブジェクトは、このクラスから継承する独自のイベントの種類を実装する場合に、このコンス トラクターに呼び出すことができます。  
  
> [!NOTE]
>  <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>コンス トラクターは、コードから直接使用するものはありません。 ASP.NET によって呼び出されます。 呼び出すことができます、<xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>コンス トラクターから派生する場合、<xref:System.Web.Management.WebSuccessAuditEvent>クラス。  
  
   
  
## Examples  
 次のコード例でこのコンス トラクターを呼び出す方法を示しています、`SampleWebSuccessAuditEvent`クラス。 このコード例が示されている例の一部、<xref:System.Web.Management.WebSuccessAuditEvent>クラス。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#3)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementPerfCounters">
      <MemberSignature Language="C#" Value="protected internal override void IncrementPerfCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void IncrementPerfCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.IncrementPerfCounters" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub IncrementPerfCounters ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void IncrementPerfCounters();" />
      <MemberSignature Language="F#" Value="override this.IncrementPerfCounters : unit -&gt; unit" Usage="webSuccessAuditEvent.IncrementPerfCounters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Audit Success Events Raised パフォーマンス カウンターをインクリメントします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 監査の Success Events Raised パフォーマンス カウンターは、アプリケーションの開始後に発生した成功した監査イベントの数を追跡します。 このメソッドは、親も呼び出して<xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A>メソッドで、イベントが発生したカウンターをインクリメントします。 このカウンターは、発生したイベントの合計数を追跡します。  
  
 システム モニター (PerfMon) でこれらのパフォーマンス カウンターを表示する、**カウンターの追加**ウィンドウ選択**ASP.NET**から、**パフォーマンス オブジェクト**ドロップダウン リストで、パフォーマンス カウンターを表示するには、をクリックする、**追加**ボタンをクリックします。 詳細については、次を参照してください。 [ASP.NET アプリケーションのパフォーマンスの監視](http://msdn.microsoft.com/library/c96da1d1-6077-48d3-88e2-d9127ed91cf5)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>