<Type Name="Socket" FullName="System.Net.Sockets.Socket">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0e76abada1c0fd76185042cd11feb08da2fac8ab" /><Meta Name="ms.sourcegitcommit" Value="ec93491ea3720925bf4f5481b6d46c096cb3919e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/24/2019" /><Meta Name="ms.locfileid" Value="70016990" /></Metadata><TypeSignature Language="C#" Value="public class Socket : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Socket extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.Socket" />
  <TypeSignature Language="VB.NET" Value="Public Class Socket&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Socket : IDisposable" />
  <TypeSignature Language="F#" Value="type Socket = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8ef83-101">Berkeley ソケット インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-101">Implements the Berkeley sockets interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-102">クラス<xref:System.Net.Sockets.Socket>には、ネットワーク通信用の豊富なメソッドとプロパティのセットが用意されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-102">The <xref:System.Net.Sockets.Socket> class provides a rich set of methods and properties for network communications.</span></span> <span data-ttu-id="8ef83-103">クラス<xref:System.Net.Sockets.Socket>を使用すると、 <xref:System.Net.Sockets.ProtocolType>列挙に示されているいずれかの通信プロトコルを使用して、同期データ転送と非同期データ転送の両方を実行できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-103">The <xref:System.Net.Sockets.Socket> class allows you to perform both synchronous and asynchronous data transfer using any of the communication protocols listed in the <xref:System.Net.Sockets.ProtocolType> enumeration.</span></span>  
  
 <span data-ttu-id="8ef83-104">クラス<xref:System.Net.Sockets.Socket>は、非同期メソッドの .NET Framework 名前付けパターンに従います。</span><span class="sxs-lookup"><span data-stu-id="8ef83-104">The <xref:System.Net.Sockets.Socket> class follows the .NET Framework naming pattern for asynchronous methods.</span></span> <span data-ttu-id="8ef83-105">たとえば、同期<xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、非同期<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドと<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドに対応します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-105">For example, the synchronous <xref:System.Net.Sockets.Socket.Receive%2A> method corresponds to the asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods.</span></span>  
  
 <span data-ttu-id="8ef83-106">アプリケーションで実行中に必要なスレッドが1つだけの場合は、次のメソッドを使用します。これらのメソッドは、同期操作モード用に設計されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-106">If your application only requires one thread during execution, use the following methods, which are designed for synchronous operation mode.</span></span>  
  
-   <span data-ttu-id="8ef83-107">TCP などの接続指向プロトコルを使用している場合、サーバーは<xref:System.Net.Sockets.Socket.Listen%2A>メソッドを使用して接続をリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-107">If you are using a connection-oriented protocol such as TCP, your server can listen for connections using the <xref:System.Net.Sockets.Socket.Listen%2A> method.</span></span> <span data-ttu-id="8ef83-108">メソッド<xref:System.Net.Sockets.Socket.Accept%2A>は、受信接続要求を処理し、 <xref:System.Net.Sockets.Socket>データをリモートホストと通信するために使用できるを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-108">The <xref:System.Net.Sockets.Socket.Accept%2A> method processes any incoming connection requests and returns a <xref:System.Net.Sockets.Socket> that you can use to communicate data with the remote host.</span></span> <span data-ttu-id="8ef83-109">この返され<xref:System.Net.Sockets.Socket>たを使用<xref:System.Net.Sockets.Socket.Send%2A>し<xref:System.Net.Sockets.Socket.Receive%2A>て、メソッドまたはメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-109">Use this returned <xref:System.Net.Sockets.Socket> to call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span> <span data-ttu-id="8ef83-110">ローカル IP アドレスとポート番号を<xref:System.Net.Sockets.Socket.Listen%2A>指定する場合は、メソッドを呼び出す前にメソッドを呼び出します。<xref:System.Net.Sockets.Socket.Bind%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-110">Call the <xref:System.Net.Sockets.Socket.Bind%2A> method prior to calling the <xref:System.Net.Sockets.Socket.Listen%2A> method if you want to specify the local IP address and port number.</span></span> <span data-ttu-id="8ef83-111">基になるサービスプロバイダーがフリーポートを割り当てる場合は、ポート番号を0にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-111">Use a port number of zero if you want the underlying service provider to assign a free port for you.</span></span> <span data-ttu-id="8ef83-112">リッスンして<xref:System.Net.Sockets.Socket.Connect%2A>いるホストに接続する場合は、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-112">If you want to connect to a listening host, call the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-113">データを通信するに<xref:System.Net.Sockets.Socket.Send%2A>は、メソッドまたは<xref:System.Net.Sockets.Socket.Receive%2A>メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-113">To communicate data, call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
-   <span data-ttu-id="8ef83-114">UDP などのコネクションレスプロトコルを使用している場合は、接続をリッスンする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-114">If you are using a connectionless protocol such as UDP, you do not need to listen for connections at all.</span></span> <span data-ttu-id="8ef83-115">受信データグラム<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>を受け入れるには、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-115">Call the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method to accept any incoming datagrams.</span></span> <span data-ttu-id="8ef83-116">メソッドを<xref:System.Net.Sockets.Socket.SendTo%2A>使用して、データグラムをリモートホストに送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-116">Use the <xref:System.Net.Sockets.Socket.SendTo%2A> method to send datagrams to a remote host.</span></span>  
  
 <span data-ttu-id="8ef83-117">実行中に個別のスレッドを使用して通信を処理するには、非同期操作モード用に設計された次のメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-117">To process communications using separate threads during execution, use the following methods, which are designed for asynchronous operation mode.</span></span>  
  
-   <span data-ttu-id="8ef83-118">TCP などの接続指向プロトコルを使用している場合は、、 <xref:System.Net.Sockets.Socket>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>および<xref:System.Net.Sockets.Socket.EndConnect%2A>の各メソッドを使用して、リッスンしているホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-118">If you are using a connection-oriented protocol such as TCP, use the <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, and <xref:System.Net.Sockets.Socket.EndConnect%2A> methods to connect with a listening host.</span></span> <span data-ttu-id="8ef83-119">、、 <xref:System.Net.Sockets.Socket.BeginSend%2A> <xref:System.Net.Sockets.Socket.EndSend%2A> および<xref:System.Net.Sockets.Socket.EndReceive%2A>の各メソッドを使用して、データを非同期に通信します。 <xref:System.Net.Sockets.Socket.BeginReceive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-119">Use the <xref:System.Net.Sockets.Socket.BeginSend%2A> and <xref:System.Net.Sockets.Socket.EndSend%2A> or <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods to communicate data asynchronously.</span></span> <span data-ttu-id="8ef83-120">受信接続要求は、および<xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.EndAccept%2A>を使用して処理できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-120">Incoming connection requests can be processed using <xref:System.Net.Sockets.Socket.BeginAccept%2A> and <xref:System.Net.Sockets.Socket.EndAccept%2A>.</span></span>  
  
-   <span data-ttu-id="8ef83-121">UDP などのコネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.BeginSendTo%2A>および<xref:System.Net.Sockets.Socket.EndSendTo%2A>を使用してデータグラム<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>を<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>送信したり、データグラムを受信したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-121">If you are using a connectionless protocol such as UDP, you can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.EndSendTo%2A> to send datagrams, and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> and <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> to receive datagrams.</span></span>  
  
 <span data-ttu-id="8ef83-122">1つのソケットに対して複数の非同期操作を実行する場合、それらの操作は、開始された順序で完了するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-122">If you perform multiple asynchronous operations on a socket, they do not necessarily complete in the order in which they are started.</span></span>  
  
 <span data-ttu-id="8ef83-123">データの送受信が終了したら、 <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドを使用して<xref:System.Net.Sockets.Socket>を無効にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-123">When you are finished sending and receiving data, use the <xref:System.Net.Sockets.Socket.Shutdown%2A> method to disable the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-124">を呼び出し<xref:System.Net.Sockets.Socket.Shutdown%2A>た後、 <xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出して、に関連付け<xref:System.Net.Sockets.Socket>られているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-124">After calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method to release all resources associated with the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 <span data-ttu-id="8ef83-125">クラスを<xref:System.Net.Sockets.Socket>使用すると、 <xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを使用してを構成できます。 <xref:System.Net.Sockets.Socket></span><span class="sxs-lookup"><span data-stu-id="8ef83-125">The <xref:System.Net.Sockets.Socket> class allows you to configure your <xref:System.Net.Sockets.Socket> using the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span> <span data-ttu-id="8ef83-126">メソッドを使用して<xref:System.Net.Sockets.Socket.GetSocketOption%2A> 、これらの設定を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-126">Retrieve these settings using the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-127">比較的単純なアプリケーションを作成していて、最大のパフォーマンスを必要と<xref:System.Net.Sockets.TcpClient>し<xref:System.Net.Sockets.TcpListener>ない場合<xref:System.Net.Sockets.UdpClient>は、、、およびを使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-127">If you are writing a relatively simple application and do not require maximum performance, consider using <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.TcpListener>, and <xref:System.Net.Sockets.UdpClient>.</span></span> <span data-ttu-id="8ef83-128">これらのクラスは、通信のため<xref:System.Net.Sockets.Socket>のより簡単でわかりやすいインターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-128">These classes provide a simpler and more user-friendly interface to <xref:System.Net.Sockets.Socket> communications.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-129">次のコード例では、 <xref:System.Net.Sockets.Socket>クラスを使用して HTTP サーバーにデータを送信し、応答を受信する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-129">The following code example shows how the <xref:System.Net.Sockets.Socket> class can be used to send data to an HTTP server and receive the response.</span></span> <span data-ttu-id="8ef83-130">この例では、ページ全体が受信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-130">This example blocks until the entire page is received.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket/CPP/socket.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket/CS/socket.cs#1)]
 [!code-vb[System.Net.Sockets.Socket#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Socket/VB/socket.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-131">発信接続を確立するか、受信要求を受け入れる。</span><span class="sxs-lookup"><span data-stu-id="8ef83-131">To establish an outgoing connection or accept an incoming request.</span></span></permission>
    <threadsafe><span data-ttu-id="8ef83-132">このクラスのインスタンスは、スレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-132">Instances of this class are thread safe.</span></span></threadsafe>
    <altmember cref="N:System.Net" />
    <altmember cref="N:System.Net.Cache" />
    <altmember cref="N:System.Net.Security" />
    <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
    <related type="Article" href="~/docs/framework/network-programming/index.md"><span data-ttu-id="8ef83-133">.NET Framework のネットワーク プログラミング</span><span class="sxs-lookup"><span data-stu-id="8ef83-133">Network Programming in the .NET Framework</span></span></related>
    <related type="Article" href="~/docs/framework/network-programming/best-practices-for-system-net-classes.md"><span data-ttu-id="8ef83-134">System.Net クラスのベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="8ef83-134">Best Practices for System.Net Classes</span></span></related>
    <related type="Article" href="~/docs/framework/network-programming/cache-management-for-network-applications.md"><span data-ttu-id="8ef83-135">ネットワーク アプリケーションのキャッシュ管理</span><span class="sxs-lookup"><span data-stu-id="8ef83-135">Cache Management for Network Applications</span></span></related>
    <related type="Article" href="~/docs/framework/network-programming/internet-protocol-version-6.md"><span data-ttu-id="8ef83-136">インターネット プロトコル バージョン 6</span><span class="sxs-lookup"><span data-stu-id="8ef83-136">Internet Protocol Version 6</span></span></related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md"><span data-ttu-id="8ef83-137">ネットワーク プログラミングのサンプル</span><span class="sxs-lookup"><span data-stu-id="8ef83-137">Network Programming Samples</span></span></related>
    <related type="Article" href="~/docs/framework/network-programming/network-tracing.md"><span data-ttu-id="8ef83-138">.NET Framework のネットワークのトレース</span><span class="sxs-lookup"><span data-stu-id="8ef83-138">Network Tracing in the .NET Framework</span></span></related>
    <related type="Article" href="~/docs/framework/network-programming/security-in-network-programming.md"><span data-ttu-id="8ef83-139">ネットワーク プログラミングにおけるセキュリティ</span><span class="sxs-lookup"><span data-stu-id="8ef83-139">Security in Network Programming</span></span></related>
    <related type="Article" href="~/docs/framework/network-programming/socket-performance-enhancements-in-version-3-5.md"><span data-ttu-id="8ef83-140">バージョン 3.5 のソケット パフォーマンスの強化</span><span class="sxs-lookup"><span data-stu-id="8ef83-140">Socket Performance Enhancements in Version 3.5</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-141"><see cref="T:System.Net.Sockets.Socket" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-141">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.SocketInformation socketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.SocketInformation socketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::SocketInformation socketInformation);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.SocketInformation -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket socketInformation" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socketInformation" Type="System.Net.Sockets.SocketInformation" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="socketInformation"><span data-ttu-id="8ef83-142"><see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> によって返されるソケット情報。</span><span class="sxs-lookup"><span data-stu-id="8ef83-142">The socket information returned by <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</span></span></param>
        <summary><span data-ttu-id="8ef83-143"><see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> から返された値を指定して、<see cref="T:System.Net.Sockets.Socket" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-143">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified value returned from <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-144">各呼び出しの引数<xref:System.Net.Sockets.Socket.%23ctor%2A>と同じバイト配列を使用してコンストラクターを複数回呼び出す場合は、基になる同じ<xref:System.Net.Sockets.Socket>ソケットを使用して複数のマネージを作成します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-144">If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket>s with the same underlying socket.</span></span> <span data-ttu-id="8ef83-145">この方法は推奨されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-145">This practice is strongly discouraged.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket (socketType, protocolType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="socketType"><span data-ttu-id="8ef83-146"><see cref="T:System.Net.Sockets.SocketType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-146">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span></span></param>
        <param name="protocolType"><span data-ttu-id="8ef83-147"><see cref="T:System.Net.Sockets.ProtocolType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-147">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-148">指定したソケットの種類とプロトコルを使用して、<see cref="T:System.Net.Sockets.Socket" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-148">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified socket type and protocol.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-149">パラメーター `socketType` <xref:System.Net.Sockets.Socket>はクラスの型を指定し、パラメーター `protocolType`はによって<xref:System.Net.Sockets.Socket>使用されるプロトコルを指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-149">The `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-150">2つのパラメーターは独立していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-150">The two parameters are not independent.</span></span> <span data-ttu-id="8ef83-151">多くの<xref:System.Net.Sockets.Socket>場合、型はプロトコルで暗黙の型になります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-151">Often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol.</span></span> <span data-ttu-id="8ef83-152">型とプロトコルの<xref:System.Net.Sockets.Socket>型の組み合わせによって無効<xref:System.Net.Sockets.Socket>なが生成された<xref:System.Net.Sockets.SocketException>場合、このコンストラクターはをスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-152">If the combination of <xref:System.Net.Sockets.Socket> type and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-153">このコンストラクターがを<xref:System.Net.Sockets.SocketException>スローする場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-153">If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-154">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-154">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-155">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-155">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-156">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-156">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-157"><paramref name="socketType" /> と <paramref name="protocolType" /> を組み合わせると、無効なソケットになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-157">The combination of  <paramref name="socketType" /> and <paramref name="protocolType" /> results in an invalid socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily addressFamily, valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::AddressFamily addressFamily, System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.AddressFamily * System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket (addressFamily, socketType, protocolType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addressFamily" Type="System.Net.Sockets.AddressFamily" />
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
      </Parameters>
      <Docs>
        <param name="addressFamily"><span data-ttu-id="8ef83-158"><see cref="T:System.Net.Sockets.AddressFamily" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="8ef83-158">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</span></span></param>
        <param name="socketType"><span data-ttu-id="8ef83-159"><see cref="T:System.Net.Sockets.SocketType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-159">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span></span></param>
        <param name="protocolType"><span data-ttu-id="8ef83-160"><see cref="T:System.Net.Sockets.ProtocolType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-160">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-161">指定したアドレス ファミリ、ソケットの種類、およびプロトコルを使用して、<see cref="T:System.Net.Sockets.Socket" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-161">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified address family, socket type and protocol.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-162">パラメーター `addressFamily`は、 <xref:System.Net.Sockets.Socket>クラスが使用するアドレス指定スキームを指定`socketType`します。パラメーターは<xref:System.Net.Sockets.Socket>クラスの型を指定`protocolType`し、パラメーターはによっ<xref:System.Net.Sockets.Socket>て使用されるプロトコルを指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-162">The `addressFamily` parameter specifies the addressing scheme that the <xref:System.Net.Sockets.Socket> class uses, the `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class, and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-163">この3つのパラメーターは独立していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-163">The three parameters are not independent.</span></span> <span data-ttu-id="8ef83-164">アドレスファミリによっては、それらで使用できるプロトコルが制限さ<xref:System.Net.Sockets.Socket>れます。また、多くの場合、プロトコルでは型が暗黙的に使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-164">Some address families restrict which protocols can be used with them, and often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol.</span></span> <span data-ttu-id="8ef83-165">アドレスファミリ、 <xref:System.Net.Sockets.Socket>型、およびプロトコルの種類の組み合わせによって無効<xref:System.Net.Sockets.Socket>なが生成された<xref:System.Net.Sockets.SocketException>場合、このコンストラクターはをスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-165">If the combination of address family, <xref:System.Net.Sockets.Socket> type, and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-166">このコンストラクターがを<xref:System.Net.Sockets.SocketException>スローする場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-166">If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-167">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-167">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-168">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-168">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-169">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-169">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-170"><xref:System.Net.Sockets.Socket>クラスのインスタンスを作成する方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-170">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
 [!code-cpp[Socket_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-171"><paramref name="addressFamily" />、<paramref name="socketType" />、および <paramref name="protocolType" /> を組み合わせると、無効なソケットになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-171">The combination of <paramref name="addressFamily" />, <paramref name="socketType" />, and <paramref name="protocolType" /> results in an invalid socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketException" />
        <altmember cref="T:System.Net.Sockets.AddressFamily" />
        <altmember cref="T:System.Net.Sockets.ProtocolType" />
        <altmember cref="T:System.Net.Sockets.SocketType" />
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Accept ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket Accept() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Accept" />
      <MemberSignature Language="VB.NET" Value="Public Function Accept () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ Accept();" />
      <MemberSignature Language="F#" Value="member this.Accept : unit -&gt; System.Net.Sockets.Socket" Usage="socket.Accept " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef83-172">新しく作成された接続に対して新しい <see cref="T:System.Net.Sockets.Socket" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-172">Creates a new <see cref="T:System.Net.Sockets.Socket" /> for a newly created connection.</span></span></summary>
        <returns><span data-ttu-id="8ef83-173">新しく作成された接続に対する <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-173">A <see cref="T:System.Net.Sockets.Socket" /> for a newly created connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-174"><xref:System.Net.Sockets.Socket.Accept%2A>リッスンしているソケットの接続要求キューから、最初の保留中の接続要求を同期的に抽出し<xref:System.Net.Sockets.Socket>、新しいを作成して返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-174"><xref:System.Net.Sockets.Socket.Accept%2A> synchronously extracts the first pending connection request from the connection request queue of the listening socket, and then creates and returns a new <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-175">この返された値<xref:System.Net.Sockets.Socket>を使用して、接続キューからの追加の接続を受け入れることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-175">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="8ef83-176">ただし、返され<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> <xref:System.Net.Sockets.Socket>たのメソッドを呼び出して、リモートホストのネットワークアドレスとポート番号を識別することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-176">However, you can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> method of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
 <span data-ttu-id="8ef83-177">ブロックモードでは<xref:System.Net.Sockets.Socket.Accept%2A> 、着信接続の試行がキューに置かれるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-177">In blocking mode, <xref:System.Net.Sockets.Socket.Accept%2A> blocks until an incoming connection attempt is queued.</span></span> <span data-ttu-id="8ef83-178">接続が受け入れられると、元<xref:System.Net.Sockets.Socket>のは、終了するまで着信接続要求をキューに挿入し続けます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-178">Once a connection is accepted, the original <xref:System.Net.Sockets.Socket> continues queuing incoming connection requests until you close it.</span></span>  
  
 <span data-ttu-id="8ef83-179">非ブロッキング<xref:System.Net.Sockets.Socket>を使用してこのメソッドを呼び出し、接続要求がキューに登録されて<xref:System.Net.Sockets.SocketException>いない場合、 <xref:System.Net.Sockets.Socket.Accept%2A>はをスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-179">If you call this method using a non-blocking <xref:System.Net.Sockets.Socket>, and no connection requests are queued, <xref:System.Net.Sockets.Socket.Accept%2A> throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-180">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-180">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-181">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-181">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-182"><xref:System.Net.Sockets.Socket.Accept%2A>メソッドを呼び出す前に、まず<xref:System.Net.Sockets.Socket.Listen%2A>メソッドを呼び出して、受信接続要求をリッスンし、キューに挿入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-182">Before calling the <xref:System.Net.Sockets.Socket.Accept%2A> method, you must first call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-183">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-183">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-184">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-184">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-185">次のコード例では、 <xref:System.Net.Sockets.Socket>単純な接続を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-185">The following code example accepts a simple <xref:System.Net.Sockets.Socket> connection.</span></span>  
  
 [!code-cpp[Classic Socket.Accept Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Accept Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Accept Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Accept Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Accept Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Accept Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-186">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-186">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-187"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-187">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-188">受け入れ元のソケットが、接続をリッスンしていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-188">The accepting socket is not listening for connections.</span></span> <span data-ttu-id="8ef83-189"><see cref="M:System.Net.Sockets.Socket.Accept" /> の前に <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> および <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-189">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.Accept" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AcceptAsync">
      <MemberSignature Language="C#" Value="public bool AcceptAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AcceptAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AcceptAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AcceptAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.AcceptAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-190">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-190">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-191">受信接続の試行を受け入れる非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-191">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="8ef83-192">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-192"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-193">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-193">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-194">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-194"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-195">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-195">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-196">接続指向プロトコルでは、メソッド<xref:System.Net.Sockets.Socket.AcceptAsync%2A>を使用して、着信接続の試行を非同期的に処理できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-196">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="8ef83-197">接続を非同期に受け入れると、別の実行スレッド内でデータを送受信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-197">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="8ef83-198"><xref:System.Net.Sockets.Socket.AcceptAsync%2A>メソッドを呼び出す前に、 <xref:System.Net.Sockets.Socket.Listen%2A>メソッドを呼び出して受信接続要求をリッスンし、キューに挿入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-198">Before calling the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="8ef83-199">完了が通知されるようにするには、EventHandler\<SocketAsyncEventArgs > delegate を実装するコールバックメソッドを作成し、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベントにフックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-199">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and hook it to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="8ef83-200"><xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-200">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-201">呼び出し元は、 <xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType>プロパティで使用するを指定することによって、 <xref:System.Net.Sockets.Socket>着信接続に使用する既存のを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-201">The caller can optionally specify an existing <xref:System.Net.Sockets.Socket> to use for the incoming connection by specifying the <xref:System.Net.Sockets.Socket> to use with the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="8ef83-202"><xref:System.Net.Sockets.Socket.SocketType%2A> <xref:System.Net.Sockets.Socket.AddressFamily%2A> <xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.ProtocolType%2A> <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType>プロパティが null の場合、新しいは、現在<xref:System.Net.Sockets.Socket>のと同じ、、およびを使用して構築され、プロパティとして設定されます。 <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8ef83-202">If the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property is null, a new <xref:System.Net.Sockets.Socket> is constructed with the same <xref:System.Net.Sockets.Socket.AddressFamily%2A>, <xref:System.Net.Sockets.Socket.SocketType%2A>, and <xref:System.Net.Sockets.Socket.ProtocolType%2A> as the current <xref:System.Net.Sockets.Socket> and set as the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="8ef83-203">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.AcceptAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-203">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-204">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-204">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-205">必要に応じて、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドが成功した後に、ソケットの最初のデータブロックを受け取るバッファーを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-205">Optionally, a buffer may be provided in which to receive the initial block of data on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="8ef83-206">この場合、プロパティは<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 、受信するデータが格納されているバッファーに設定する必要<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>があります。また、プロパティは、バッファー内で受信するデータの最大バイト数に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-206">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to receive and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the maximum number of bytes of data to receive in the buffer.</span></span> <span data-ttu-id="8ef83-207">これらのプロパティは、 <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=nameWithType>メソッドを使用して設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-207">These properties can be set using the <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8ef83-208">渡されたバッファーの一部は、基になる Winsock AcceptEx 呼び出しで使用するために、内部的に使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-208">Part of the buffer passed in will be consumed internally for use by the underlying Winsock AcceptEx call.</span></span> <span data-ttu-id="8ef83-209">これは、返されるデータの量が、指定された<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>インスタンスのプロパティの値よりも小さいことを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-209">This means that the amount of data returned will always be less than the value of the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> instance provided.</span></span> <span data-ttu-id="8ef83-210">内部で使用されるバッファーの量は、ソケットのアドレスファミリによって異なります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-210">The amount of the buffer used internally varies based on the address family of the socket.</span></span> <span data-ttu-id="8ef83-211">必要な最小バッファーサイズは288バイトです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-211">The minimum buffer size required is 288 bytes.</span></span> <span data-ttu-id="8ef83-212">より大きなバッファーサイズが指定されている<xref:System.Net.Sockets.Socket>場合、では、Winsock AcceptEx 呼び出しによって受信されたアドレスデータ以外の追加データが必要になり、この追加データが受信されるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-212">If a larger buffer size is specified, then the <xref:System.Net.Sockets.Socket> will expect some extra data other than the address data received by the Winsock AcceptEx call and will wait until this extra data is received.</span></span> <span data-ttu-id="8ef83-213">タイムアウトが発生した場合、接続はリセットされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-213">If a timeout occurs, the connection is reset.</span></span> <span data-ttu-id="8ef83-214">したがって、余分なデータが特定の量になることが予想される場合は、バッファーサイズを最小バッファーサイズに設定し、この量を加算する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-214">So if extra data is expected of  a specific amount, then the buffer size should be set to the minimum buffer size plus this amount.</span></span>  
  
 <span data-ttu-id="8ef83-215">完了コールバックメソッドは、 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>プロパティを調べて、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A>操作が成功したかどうかを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-215">The completion callback method should examine the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> property to determine if the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> operation was successful.</span></span>  
  
 <span data-ttu-id="8ef83-216">イベント<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>は、接続が受け入れら<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>れず、プロパティがに<xref:System.Net.Sockets.SocketError.ConnectionReset>設定される場合に発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-216">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event can occur in some cases when no connection has been accepted and cause the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> property to be set to <xref:System.Net.Sockets.SocketError.ConnectionReset>.</span></span> <span data-ttu-id="8ef83-217">これは、ハーフオープンの SYN タイプスキャンを使用したポートスキャンの結果として発生する可能性があります (SYN > SYN-ACK-> RST シーケンス)。</span><span class="sxs-lookup"><span data-stu-id="8ef83-217">This can occur as a result of port scanning using a half-open SYN type scan (a SYN -> SYN-ACK -> RST sequence).</span></span> <span data-ttu-id="8ef83-218">この条件を<xref:System.Net.Sockets.Socket.AcceptAsync%2A>処理するには、メソッドを使用するアプリケーションを準備する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-218">Applications using the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method should be prepared to handle this condition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-219">引数が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-219">An argument is not valid.</span></span> <span data-ttu-id="8ef83-220">この例外は、提供されたバッファーのサイズが不足している場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-220">This exception occurs if the buffer provided is not large enough.</span></span> <span data-ttu-id="8ef83-221">バッファーは、2 \* (sizeof(SOCKADDR_STORAGE + 16) バイト以上であることが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-221">The buffer must be at least 2 \* (sizeof(SOCKADDR_STORAGE + 16) bytes.</span></span>  
  
<span data-ttu-id="8ef83-222">この例外は、複数のバッファーが指定されているときに、<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティが null 値ではない場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-222">This exception also occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-223">引数が範囲外です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-223">An argument is out of range.</span></span> <span data-ttu-id="8ef83-224">この例外は、<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> が 0 未満の場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-224">The exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-225">無効な操作が要求されました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-225">An invalid operation was requested.</span></span> <span data-ttu-id="8ef83-226">この例外は、受け入れ側の <see cref="T:System.Net.Sockets.Socket" /> が接続をリッスンしていない場合、または受け入れられたソケットがバインドされている場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-226">This exception occurs if the accepting <see cref="T:System.Net.Sockets.Socket" /> is not listening for connections or the accepted socket is bound.</span></span>  
  
<span data-ttu-id="8ef83-227"><see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> メソッドを呼び出す前に、<see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> メソッドと <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-227">You must call the <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> method before calling the <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> method.</span></span>  
  
<span data-ttu-id="8ef83-228">この例外は、ソケットが既に接続されている、またはソケット操作が指定された <paramref name="e" /> パラメーターを使用して既に進行中の場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-228">This exception also occurs if the socket is already connected or a socket operation was already in progress using the specified <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-229">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-229">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-230">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-230">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-231"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-231">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="AddressFamily">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.AddressFamily AddressFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.AddressFamily AddressFamily" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.AddressFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressFamily As AddressFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::AddressFamily AddressFamily { System::Net::Sockets::AddressFamily get(); };" />
      <MemberSignature Language="F#" Value="member this.AddressFamily : System.Net.Sockets.AddressFamily" Usage="System.Net.Sockets.Socket.AddressFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.AddressFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-232"><see cref="T:System.Net.Sockets.Socket" /> のアドレス ファミリを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-232">Gets the address family of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="8ef83-233"><see cref="T:System.Net.Sockets.AddressFamily" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-233">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-234">は<xref:System.Net.Sockets.AddressFamily> 、 <xref:System.Net.Sockets.Socket>クラスのインスタンスが使用できるアドレス指定スキームを指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-234">The <xref:System.Net.Sockets.AddressFamily> specifies the addressing scheme that an instance of the <xref:System.Net.Sockets.Socket> class can use.</span></span> <span data-ttu-id="8ef83-235">このプロパティは読み取り専用で、 <xref:System.Net.Sockets.Socket>が作成されるときに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-235">This property is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-236">次のコード例では<xref:System.Net.Sockets.AddressFamily>、 <xref:System.Net.Sockets.SocketType>、、 <xref:System.Net.Sockets.ProtocolType>およびをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-236">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.AddressFamily" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.Socket.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-237">ネットワークから受信した、読み取り可能なデータ量を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-237">Gets the amount of data that has been received from the network and is available to be read.</span></span></summary>
        <value><span data-ttu-id="8ef83-238">ネットワークから受信した、読み取り可能なデータのバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-238">The number of bytes of data received from the network and available to be read.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-239">非ブロッキング<xref:System.Net.Sockets.Socket>を使用している場合は<xref:System.Net.Sockets.Socket.Available%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に、データが読み取り用にキューに格納されているかどうかを判断することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-239">If you are using a non-blocking <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Available%2A> is a good way to determine whether data is queued for reading, before calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-240">使用可能なデータは、読み取り用にネットワークバッファーにキューに格納されているデータの総量です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-240">The available data is the total amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="8ef83-241">データがネットワークバッファーに格納されてい<xref:System.Net.Sockets.Socket.Available%2A>ない場合、は0を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-241">If no data is queued in the network buffer, <xref:System.Net.Sockets.Socket.Available%2A> returns 0.</span></span>  
  
 <span data-ttu-id="8ef83-242">リモートホストがシャットダウンまたは接続を閉じると、 <xref:System.Net.Sockets.Socket.Available%2A>はを<xref:System.Net.Sockets.SocketException>スローすることがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-242">If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.Socket.Available%2A> can throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-243">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-243">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-244">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-244">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-245">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-245">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-246">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-246">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-247">次のコード例では、Ioonread と使用可能なプロパティを呼び出して、呼び出しの結果を比較しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-247">The following code example compares the results of calling IOControl with FIONREAD and the Available property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl/CPP/iocontrolserver.cpp#1)]
 [!code-csharp[NCLSocketIoControl#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl/CS/iocontrolserver.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-248">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-248">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-249"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-249">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="F:System.Net.Sockets.SocketType.Dgram" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAccept">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-250">受信接続の試行を受け入れる非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-250">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="8ef83-251"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-251">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-252">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-252">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-253">受信接続の試行を受け入れる非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-253">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="8ef83-254">非同期の <see cref="T:System.Net.Sockets.Socket" /> 作成を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-254">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-255">接続指向プロトコルでは、メソッド<xref:System.Net.Sockets.Socket.BeginAccept%2A>を使用して、着信接続の試行を非同期的に処理できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-255">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="8ef83-256">接続を非同期に受け入れると、別の実行スレッド内でデータを送受信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-256">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="8ef83-257"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出す前に、 <xref:System.Net.Sockets.Socket.Listen%2A>メソッドを呼び出して受信接続要求をリッスンし、キューに挿入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-257">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="8ef83-258"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前を<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-258">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-259">これを行うには、少なくとも、 <xref:System.Net.Sockets.Socket> `state`パラメーターを使用してリッスン<xref:System.Net.Sockets.Socket.BeginAccept%2A>しているオブジェクトをに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-259">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="8ef83-260">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を保持する小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-260">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-261">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginAccept%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-261">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-262">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-262">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="8ef83-263">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginAccept%2A>出すと、通常、システムは別のスレッドを使用して、指定さ<xref:System.Net.Sockets.Socket.EndAccept%2A>れたコールバックメソッドを実行し、保留中の接続が取得されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-263">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span> <span data-ttu-id="8ef83-264"><xref:System.Net.Sockets.Socket.EndAccept%2A>は、リモートホスト<xref:System.Net.Sockets.Socket>との間でデータを送受信するために使用できる新しいオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-264"><xref:System.Net.Sockets.Socket.EndAccept%2A> will return a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="8ef83-265">この返された値<xref:System.Net.Sockets.Socket>を使用して、接続キューからの追加の接続を受け入れることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-265">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="8ef83-266"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出した後に元のスレッドがブロックされるように<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-266">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-267">元のスレッドの実行を<xref:System.Threading.ManualResetEvent>継続する場合は、コールバックメソッドので Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-267">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="8ef83-268">また、呼び出し元のスレッドを使用してコールバックメソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-268">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="8ef83-269">この場合、 <xref:System.IAsyncResult.CompletedSynchronously%2A>返さ<xref:System.IAsyncResult>れるのプロパティは、メソッドが<xref:System.Net.Sockets.Socket.BeginAccept%2A>同期的に完了したことを示すように設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-269">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="8ef83-270">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-270">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-271"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドへの保留中の呼び出しを取り消すには<xref:System.Net.Sockets.Socket>、を閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-271">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-272">非同期操作の実行中に<xref:System.Net.Sockets.Socket.BeginAccept%2A> メソッドが呼び出されると、メソッドに渡されたコールバックが呼び出されます。<xref:System.Net.Sockets.Socket.Close%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-272">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="8ef83-273">後続のメソッドの<xref:System.Net.Sockets.Socket.EndAccept%2A>呼び出しでは、操作が取り消されたことを示すためにが<xref:System.ObjectDisposedException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-273">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-274">返され<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> <xref:System.Net.Sockets.Socket>たのプロパティを使用して、リモートホストのネットワークアドレスとポート番号を識別できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-274">You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-275">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-275">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-276">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-276">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-277">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-277">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-278">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-278">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-279">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-279">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-280">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-280">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-281">次のコード例では、受信接続を非同期的に受信しようとしています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-281">The following code example attempts to receive an incoming connection asynchronously.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Async_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Async_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-282"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-282">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-283">このメソッドには Windows NT が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-283">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-284">受け入れ元のソケットが、接続をリッスンしていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-284">The accepting socket is not listening for connections.</span></span> <span data-ttu-id="8ef83-285"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> の前に <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> および <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-285">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span>  
  
<span data-ttu-id="8ef83-286">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-286">-or-</span></span> 
<span data-ttu-id="8ef83-287">受け入れられたソケットがバインドされています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-287">The accepted socket is bound.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-288"><paramref name="receiveSize" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-288"><paramref name="receiveSize" /> is less than 0.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-289">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-289">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-290">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-290">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-291">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-291">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (int receiveSize, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(int32 receiveSize, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (receiveSize As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(int receiveSize, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (receiveSize, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiveSize" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="receiveSize"><span data-ttu-id="8ef83-292">送信元から受け入れるバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-292">The number of bytes to accept from the sender.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-293"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-293">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-294">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-294">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-295">受信接続の試行を受け入れる非同期操作を開始し、クライアント アプリケーションによって送信されるデータの最初のブロックを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-295">Begins an asynchronous operation to accept an incoming connection attempt and receives the first block of data sent by the client application.</span></span></summary>
        <returns><span data-ttu-id="8ef83-296">非同期の <see cref="T:System.Net.Sockets.Socket" /> 作成を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-296">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-297">接続指向プロトコルでは、メソッド<xref:System.Net.Sockets.Socket.BeginAccept%2A>を使用して、着信接続の試行を非同期的に処理できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-297">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="8ef83-298">接続を非同期に受け入れると、別の実行スレッド内でデータを送受信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-298">Accepting connections asynchronously enables you to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="8ef83-299">このオーバーロードでは、 `receiveSize`パラメーターの初期転送時に受け入れるバイト数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-299">This overload allows you to specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-300"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出す前に、 <xref:System.Net.Sockets.Socket.Listen%2A>メソッドを呼び出して受信接続要求をリッスンし、キューに挿入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-300">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="8ef83-301"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前を<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-301">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-302">これを行うには、少なくとも、 <xref:System.Net.Sockets.Socket> `state`パラメーターを使用してリッスン<xref:System.Net.Sockets.Socket.BeginAccept%2A>しているオブジェクトをに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-302">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="8ef83-303">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を保持する小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-303">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-304">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginAccept%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-304">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-305">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-305">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="8ef83-306">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginAccept%2A>出すと、通常、システムは別のスレッドを使用して、指定さ<xref:System.Net.Sockets.Socket.EndAccept%2A>れたコールバックメソッドを実行し、保留中の接続が取得されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-306">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span>  
  
 <span data-ttu-id="8ef83-307"><xref:System.Net.Sockets.Socket.EndAccept%2A>リモートホストと<xref:System.Net.Sockets.Socket>の間でデータを送受信するために使用できる新しいを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-307"><xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="8ef83-308">この返された値<xref:System.Net.Sockets.Socket>を使用して、接続キューからの追加の接続を受け入れることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-308">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="8ef83-309"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出した後に元のスレッドがブロックされるように<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-309">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-310">元のスレッドの実行を<xref:System.Threading.ManualResetEvent>継続する場合は、コールバックメソッドので Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-310">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="8ef83-311">また、呼び出し元のスレッドを使用してコールバックメソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-311">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="8ef83-312">この場合、 <xref:System.IAsyncResult.CompletedSynchronously%2A>返さ<xref:System.IAsyncResult>れるのプロパティは、メソッドが<xref:System.Net.Sockets.Socket.BeginAccept%2A>同期的に完了したことを示すように設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-312">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="8ef83-313">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-313">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-314"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドへの保留中の呼び出しを取り消すには<xref:System.Net.Sockets.Socket>、を閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-314">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span>  <span data-ttu-id="8ef83-315">非同期操作の実行中に<xref:System.Net.Sockets.Socket.BeginAccept%2A> メソッドが呼び出されると、メソッドに渡されたコールバックが呼び出されます。<xref:System.Net.Sockets.Socket.Close%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-315">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="8ef83-316">後続のメソッドの<xref:System.Net.Sockets.Socket.EndAccept%2A>呼び出しでは、操作が取り消されたことを示すためにが<xref:System.ObjectDisposedException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-316">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-317">を呼び出すと、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>返され<xref:System.Net.Sockets.Socket>たオブジェクトのプロパティを使用して、リモートホストのネットワークアドレスとポート番号を識別できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-317">You can call use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-318">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-318">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-319">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-319">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-320">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-320">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-321">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-321">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-322">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-322">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-323">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-323">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-324">次のコード例では、ソケットを開き、非同期接続を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-324">The following code example opens a socket and accepts an asynchronous connection.</span></span> <span data-ttu-id="8ef83-325">この例では、ソケットは最初の10バイトのデータを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-325">In this example, the socket accepts the initial 10 bytes of data.</span></span> <span data-ttu-id="8ef83-326">受信したバイト数とデータは、コールバックデリゲートによってコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-326">The number of bytes received and the data are displayed on the console by the callback delegate.</span></span> <span data-ttu-id="8ef83-327">残り<xref:System.Net.Sockets.Socket.BeginReceive%2A>のデータを受信する方法の詳細については、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-327">See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-328"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-328">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-329">このメソッドには Windows NT が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-329">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-330">受け入れ元のソケットが、接続をリッスンしていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-330">The accepting socket is not listening for connections.</span></span> <span data-ttu-id="8ef83-331"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> の前に <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> および <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-331">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span>  
  
<span data-ttu-id="8ef83-332">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-332">-or-</span></span> 
<span data-ttu-id="8ef83-333">受け入れられたソケットがバインドされています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-333">The accepted socket is bound.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-334"><paramref name="receiveSize" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-334"><paramref name="receiveSize" /> is less than 0.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-335">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-335">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-336">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-336">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-337">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-337">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (System.Net.Sockets.Socket acceptSocket, int receiveSize, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(class System.Net.Sockets.Socket acceptSocket, int32 receiveSize, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (acceptSocket As Socket, receiveSize As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(System::Net::Sockets::Socket ^ acceptSocket, int receiveSize, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : System.Net.Sockets.Socket * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (acceptSocket, receiveSize, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptSocket" Type="System.Net.Sockets.Socket" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="receiveSize" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="acceptSocket"><span data-ttu-id="8ef83-338">受け入れた <see cref="T:System.Net.Sockets.Socket" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-338">The accepted <see cref="T:System.Net.Sockets.Socket" /> object.</span></span> <span data-ttu-id="8ef83-339">この値は <see langword="null" /> の場合もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-339">This value may be <see langword="null" />.</span></span></param>
        <param name="receiveSize"><span data-ttu-id="8ef83-340">受信する最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-340">The maximum number of bytes to receive.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-341"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-341">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-342">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-342">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-343">指定したソケットから受信接続の試行を受け入れる非同期操作を開始し、クライアント アプリケーションによって送信されるデータの最初のブロックを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-343">Begins an asynchronous operation to accept an incoming connection attempt from a specified socket and receives the first block of data sent by the client application.</span></span></summary>
        <returns><span data-ttu-id="8ef83-344">非同期の <see cref="T:System.Net.Sockets.Socket" /> オブジェクトの作成を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-344">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> object creation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-345">接続指向プロトコルでは、メソッド<xref:System.Net.Sockets.Socket.BeginAccept%2A>を使用して、着信接続の試行を非同期的に処理できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-345">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="8ef83-346">接続を非同期に受け入れると、別の実行スレッド内でデータを送受信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-346">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="8ef83-347">このオーバーロードでは、 `acceptSocket`パラメーターで受け入れられたソケットを指定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-347">This overload allows you to specify the accepted socket in the `acceptSocket` parameter.</span></span> <span data-ttu-id="8ef83-348">このパラメーターが`null`の場合、受け入れられたソケットは<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドによって作成されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-348">If this parameter is `null`, the accepted socket is created by the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-349">`receiveSize`パラメーターでは、初期転送時に受け入れるバイト数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-349">You can specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-350"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出す前に、 <xref:System.Net.Sockets.Socket.Listen%2A>メソッドを呼び出して受信接続要求をリッスンし、キューに挿入する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-350">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="8ef83-351"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前を<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-351">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-352">これを行うには、少なくとも、 <xref:System.Net.Sockets.Socket> `state`パラメーターを使用してリッスン<xref:System.Net.Sockets.Socket.BeginAccept%2A>しているオブジェクトをに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-352">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="8ef83-353">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を保持する小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-353">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-354">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginAccept%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-354">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-355">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-355">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="8ef83-356">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginAccept%2A>出すと、通常、システムは別のスレッドを使用して、指定さ<xref:System.Net.Sockets.Socket.EndAccept%2A>れたコールバックメソッドを実行し、保留中の接続が取得されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-356">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span>  
  
 <span data-ttu-id="8ef83-357"><xref:System.Net.Sockets.Socket.EndAccept%2A>リモートホストと<xref:System.Net.Sockets.Socket>の間でデータを送受信するために使用できる新しいオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-357"><xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="8ef83-358">この返された値<xref:System.Net.Sockets.Socket>を使用して、接続キューからの追加の接続を受け入れることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-358">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="8ef83-359"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出した後に元のスレッドがブロックされるように<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-359">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-360">元のスレッドの実行を<xref:System.Threading.ManualResetEvent>継続する場合は、コールバックメソッドので Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-360">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="8ef83-361">また、呼び出し元のスレッドを使用してコールバックメソッドを呼び出すこともできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-361">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="8ef83-362">この場合、 <xref:System.IAsyncResult.CompletedSynchronously%2A>返さ<xref:System.IAsyncResult>れるのプロパティは、メソッドが<xref:System.Net.Sockets.Socket.BeginAccept%2A>同期的に完了したことを示すように設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-362">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="8ef83-363">コールバックメソッドの記述の詳細については、「[コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-363">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-364"><xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドへの保留中の呼び出しを取り消すには<xref:System.Net.Sockets.Socket>、を閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-364">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-365">非同期操作の実行中に<xref:System.Net.Sockets.Socket.BeginAccept%2A> メソッドが呼び出されると、メソッドに渡されたコールバックが呼び出されます。<xref:System.Net.Sockets.Socket.Close%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-365">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="8ef83-366">後続のメソッドの<xref:System.Net.Sockets.Socket.EndAccept%2A>呼び出しでは、操作が取り消されたことを示すためにが<xref:System.ObjectDisposedException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-366">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-367">返され<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> <xref:System.Net.Sockets.Socket>たオブジェクトのプロパティを使用して、リモートホストのネットワークアドレスとポート番号を識別できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-367">You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-368">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-368">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-369">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-369">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-370">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-370">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-371">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-371">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-372">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-372">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-373">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-373">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-374">次のコード例では、ソケットを開き、非同期接続を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-374">The following code example opens a socket and accepts an asynchronous connection.</span></span> <span data-ttu-id="8ef83-375">この例では、ソケットは最初の10バイトのデータ`acceptSocket`を受け入れ、パラメーターはです。これにより、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドによって、受け入れられたソケットが強制的に作成さ`null`れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-375">In this example, the socket accepts the initial 10 bytes of data and the `acceptSocket` parameter is `null`, which forces the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to create the accepted socket.</span></span> <span data-ttu-id="8ef83-376">受信したバイト数とデータは、コールバックデリゲートによってコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-376">The number of bytes received and the data are displayed on the console by the callback delegate.</span></span> <span data-ttu-id="8ef83-377">残り<xref:System.Net.Sockets.Socket.BeginReceive%2A>のデータを受信する方法の詳細については、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-377">See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#7)]
 [!code-csharp[NCLSocketEnhancements#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-378"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-378">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-379">このメソッドには Windows NT が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-379">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-380">受け入れ元のソケットが、接続をリッスンしていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-380">The accepting socket is not listening for connections.</span></span> <span data-ttu-id="8ef83-381"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> の前に <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> および <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-381">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span>  
  
<span data-ttu-id="8ef83-382">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-382">-or-</span></span> 
<span data-ttu-id="8ef83-383">受け入れられたソケットがバインドされています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-383">The accepted socket is bound.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-384"><paramref name="receiveSize" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-384"><paramref name="receiveSize" /> is less than 0.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-385">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-385">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-386">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-386">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-387">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-387">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-388">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-388">Begins an asynchronous request for a remote host connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.EndPoint remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (remoteEP As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::EndPoint ^ remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.EndPoint end_point, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.EndPoint end_point, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (end_point As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::EndPoint ^ end_point, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.EndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (end_point, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="end_point" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="8ef83-389">リモート ホストを表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-389">An <see cref="T:System.Net.EndPoint" /> that represents the remote host.</span></span></param>
        <param name="end_point"><span data-ttu-id="8ef83-390">リモート ホストを表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-390">An <see cref="T:System.Net.EndPoint" /> that represents the remote host.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-391"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-391">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-392">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-392">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-393">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-393">Begins an asynchronous request for a remote host connection.</span></span></summary>
        <returns><span data-ttu-id="8ef83-394">非同期接続を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-394">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-395">接続指向プロトコルを使用している場合、メソッド<xref:System.Net.Sockets.Socket.BeginConnect%2A>は、 `remoteEP`パラメーターへの接続に対する非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-395">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method starts an asynchronous request for a connection to the `remoteEP` parameter.</span></span> <span data-ttu-id="8ef83-396">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.BeginConnect%2A>場合は、によって既定のリモートホストが確立されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-396">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.BeginConnect%2A> establishes a default remote host.</span></span> <span data-ttu-id="8ef83-397">既定のリモートホストを非同期的に接続または設定すると、別の実行スレッド内でデータを送受信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-397">Connecting or setting the default remote host asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-398"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前<xref:System.Net.Sockets.Socket.BeginConnect%2A>をメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-398">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.</span></span> <span data-ttu-id="8ef83-399">少なくとも、 <xref:System.Net.Sockets.Socket> `state`パラメーターを使用してを<xref:System.Net.Sockets.Socket.BeginConnect%2A>に渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-399">At the very minimum, you must pass the <xref:System.Net.Sockets.Socket> to <xref:System.Net.Sockets.Socket.BeginConnect%2A> through the `state` parameter.</span></span> <span data-ttu-id="8ef83-400">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>を保持する小さいクラスと、その他の必要な情報を作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-400">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information.</span></span> <span data-ttu-id="8ef83-401">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginConnect%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-401">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-402">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndConnect%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-402">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="8ef83-403">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginConnect%2A>出すと、システムは別のスレッドを使用して指定されたコールバックメソッド<xref:System.Net.Sockets.Socket.EndConnect%2A>を実行<xref:System.Net.Sockets.Socket>し、が正常に接続するか例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-403">When your application calls <xref:System.Net.Sockets.Socket.BeginConnect%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndConnect%2A> until the <xref:System.Net.Sockets.Socket> connects successfully or throws an exception.</span></span> <span data-ttu-id="8ef83-404"><xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出した後に元のスレッドがブロックされるように<xref:System.Threading.WaitHandle.WaitOne%2A>するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-404">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="8ef83-405">元のスレッドの実行を<xref:System.Threading.ManualResetEvent>継続する場合は、コールバックメソッドので Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-405">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="8ef83-406">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-406">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-407">UDP などのコネクションレスプロトコルを使用している場合は、データを送受信<xref:System.Net.Sockets.Socket.BeginConnect%2A>する前にを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-407">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.BeginConnect%2A> before sending and receiving data.</span></span> <span data-ttu-id="8ef83-408"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> および<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>を使用して、リモートホストと通信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-408">You can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> to communicate with a remote host.</span></span> <span data-ttu-id="8ef83-409">を呼び出す<xref:System.Net.Sockets.Socket.BeginConnect%2A>と、指定された既定以外のアドレスから到着したデータグラムはすべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-409">If you do call <xref:System.Net.Sockets.Socket.BeginConnect%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="8ef83-410">既定のリモートホストをブロードキャストアドレスに設定する場合は、まずを呼び出し<xref:System.Net.Sockets.Socket.SetSocketOption%2A> 、にブロードキャストを`true`設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-410">If you wish to set your default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="8ef83-411">できない場合、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>はを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-411">If you cannot, <xref:System.Net.Sockets.Socket.BeginConnect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-412">接続指向プロトコルを使用していて、を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>前にを呼び出さない場合、基になるサービスプロバイダーによって、最も適切なローカルネットワークアドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-412">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="8ef83-413">コネクションレスプロトコルを使用している場合、サービスプロバイダーは、メソッド<xref:System.Net.Sockets.Socket.BeginSend%2A>または<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出すまで、ローカルネットワークアドレスとポート番号を割り当てません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-413">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-414">既定のリモートホストを変更する場合は、目的の<xref:System.Net.Sockets.Socket.BeginConnect%2A>エンドポイントを使用してメソッドを再度呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-414">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="8ef83-415"><xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドへの保留中の呼び出しを取り消すには<xref:System.Net.Sockets.Socket>、を閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-415">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-416">非同期操作の実行中に<xref:System.Net.Sockets.Socket.BeginConnect%2A> メソッドが呼び出されると、メソッドに渡されたコールバックが呼び出されます。<xref:System.Net.Sockets.Socket.Close%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-416">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="8ef83-417">後続のメソッドの<xref:System.Net.Sockets.Socket.EndConnect%2A>呼び出しでは、操作が取り消されたことを示すためにが<xref:System.ObjectDisposedException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-417">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-418">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-418">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-419">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-419">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-420">このソケットが以前に切断されて<xref:System.Net.Sockets.Socket.BeginConnect%2A>いた場合は、操作が完了するまで終了しないスレッドでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-420">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="8ef83-421">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-421">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-422">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-422">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-423">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-423">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-424">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-424">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-425">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-425">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-426">次のコード例では、非同期接続の試行を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-426">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Async_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Async_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-427"><paramref name="remoteEP" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-427"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-428">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-428">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-429"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-429">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-430">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-430">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-431"><see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっているか、非同期操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-431">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span></span></exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-432">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-432">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-433">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-433">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-434">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-434">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (address, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="8ef83-435">リモート ホストの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-435">The <see cref="T:System.Net.IPAddress" /> of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="8ef83-436">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="8ef83-436">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="8ef83-437">接続操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-437">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the connect operation is complete.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-438">接続操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-438">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the connect operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-439">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-439">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="8ef83-440">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-440">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8ef83-441">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-441">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="8ef83-442">ホストは <see cref="T:System.Net.IPAddress" /> とポート番号で指定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-442">The host is specified by an <see cref="T:System.Net.IPAddress" /> and a port number.</span></span></summary>
        <returns><span data-ttu-id="8ef83-443">非同期接続を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-443">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-444">非同期<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作は、メソッドを<xref:System.Net.Sockets.Socket.EndConnect%2A>呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-444">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="8ef83-445">通常、メソッドは`requestCallback`デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-445">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="8ef83-446">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-446">This method does not block until the operation is complete.</span></span> <span data-ttu-id="8ef83-447">操作が完了するまでブロックするには、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドのオーバーロードのいずれかまたは<xref:System.Net.Sockets.Socket.EndConnect%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-447">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads, or <xref:System.Net.Sockets.Socket.EndConnect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-448"><xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドへの保留中の呼び出しを取り消すには<xref:System.Net.Sockets.Socket>、を閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-448">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-449">非同期操作の実行中に<xref:System.Net.Sockets.Socket.BeginConnect%2A> メソッドが呼び出されると、メソッドに渡されたコールバックが呼び出されます。<xref:System.Net.Sockets.Socket.Close%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-449">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="8ef83-450">後続のメソッドの<xref:System.Net.Sockets.Socket.EndConnect%2A>呼び出しでは、操作が取り消されたことを示すためにが<xref:System.ObjectDisposedException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-450">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="8ef83-451">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-451">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-452">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-452">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-453">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-453">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-454">このソケットが以前に切断されて<xref:System.Net.Sockets.Socket.BeginConnect%2A>いた場合は、操作が完了するまで終了しないスレッドでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-454">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="8ef83-455">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-455">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="8ef83-456">また、 <xref:System.Net.EndPoint>使用するは異なっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-456">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-457">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-457">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-458">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-458">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-459">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-459">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-460">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-460">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-461">次のコード例では、非同期接続の試行を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-461">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#7)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-462"><paramref name="address" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-462"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-463">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-463">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-464"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-464">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-465"><see cref="T:System.Net.Sockets.Socket" /> はソケット ファミリに含まれません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-465">The <see cref="T:System.Net.Sockets.Socket" /> is not in the socket family.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-466">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-466">The port number is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-467"><paramref name="address" /> の長さが 0 です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-467">The length of <paramref name="address" /> is zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-468"><see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっているか、非同期操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-468">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span></span></exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-469">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-469">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-470">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-470">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-471">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-471">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (addresses, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="8ef83-472">リモート ホストを指定する、少なくとも 1 つの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-472">At least one <see cref="T:System.Net.IPAddress" />, designating the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="8ef83-473">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="8ef83-473">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="8ef83-474">接続操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-474">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the connect operation is complete.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-475">接続操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-475">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the connect operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-476">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-476">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="8ef83-477">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-477">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8ef83-478">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-478">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="8ef83-479">ホストは、<see cref="T:System.Net.IPAddress" /> 配列とポート番号で指定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-479">The host is specified by an <see cref="T:System.Net.IPAddress" /> array and a port number.</span></span></summary>
        <returns><span data-ttu-id="8ef83-480">非同期接続を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-480">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connections.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-481">非同期<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作は、メソッドを<xref:System.Net.Sockets.Socket.EndConnect%2A>呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-481">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="8ef83-482">通常、メソッドは`requestCallback`デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-482">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="8ef83-483">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-483">This method does not block until the operation is complete.</span></span> <span data-ttu-id="8ef83-484">操作が完了するまでブロックするには、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-484">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8ef83-485"><xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドへの保留中の呼び出しを取り消すには<xref:System.Net.Sockets.Socket>、を閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-485">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-486">非同期操作の実行中に<xref:System.Net.Sockets.Socket.BeginConnect%2A> メソッドが呼び出されると、メソッドに渡されたコールバックが呼び出されます。<xref:System.Net.Sockets.Socket.Close%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-486">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="8ef83-487">後続のメソッドの<xref:System.Net.Sockets.Socket.EndConnect%2A>呼び出しでは、操作が取り消されたことを示すためにが<xref:System.ObjectDisposedException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-487">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="8ef83-488">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-488">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-489">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-489">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-490">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-490">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-491">このソケットが以前に切断されて<xref:System.Net.Sockets.Socket.BeginConnect%2A>いた場合は、操作が完了するまで終了しないスレッドでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-491">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="8ef83-492">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-492">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="8ef83-493">また、 <xref:System.Net.EndPoint>使用するは異なっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-493">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-494">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-494">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-495">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-495">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-496">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-496">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-497">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-497">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-498">次のコード例では、非同期接続の試行を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-498">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#2)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-499"><paramref name="addresses" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-499"><paramref name="addresses" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-500">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-500">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-501"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-501">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-502">このメソッドは <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> を使用するソケットで有効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-502">This method is valid for sockets that use <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-503">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-503">The port number is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-504"><paramref name="address" /> の長さが 0 です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-504">The length of <paramref name="address" /> is zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-505"><see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっているか、非同期操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-505">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span></span></exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-506">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-506">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-507">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-507">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-508">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-508">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (host, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="8ef83-509">リモート ホストの名前。</span><span class="sxs-lookup"><span data-stu-id="8ef83-509">The name of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="8ef83-510">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="8ef83-510">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="8ef83-511">接続操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-511">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the connect operation is complete.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-512">接続操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-512">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the connect operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-513">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-513">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="8ef83-514">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-514">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8ef83-515">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-515">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="8ef83-516">ホストはホスト名とポート番号で指定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-516">The host is specified by a host name and a port number.</span></span></summary>
        <returns><span data-ttu-id="8ef83-517">非同期接続を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-517">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-518">非同期<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作は、メソッドを<xref:System.Net.Sockets.Socket.EndConnect%2A>呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-518">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="8ef83-519">通常、メソッドは`requestCallback`デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-519">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="8ef83-520">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-520">This method does not block until the operation is complete.</span></span> <span data-ttu-id="8ef83-521">操作が完了するまでブロックするには、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-521">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8ef83-522"><xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドへの保留中の呼び出しを取り消すには<xref:System.Net.Sockets.Socket>、を閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-522">To cancel a pending call to the  <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-523">非同期操作の実行中に<xref:System.Net.Sockets.Socket.BeginConnect%2A> メソッドが呼び出されると、メソッドに渡されたコールバックが呼び出されます。<xref:System.Net.Sockets.Socket.Close%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-523">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="8ef83-524">後続のメソッドの<xref:System.Net.Sockets.Socket.EndConnect%2A>呼び出しでは、操作が取り消されたことを示すためにが<xref:System.ObjectDisposedException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-524">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="8ef83-525">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-525">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-526">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-526">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-527">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-527">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-528">このソケットが以前に切断されて<xref:System.Net.Sockets.Socket.BeginConnect%2A>いた場合は、操作が完了するまで終了しないスレッドでを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-528">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="8ef83-529">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-529">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="8ef83-530">また、 <xref:System.Net.EndPoint>使用するは異なっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-530">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-531">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-531">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-532">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-532">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-533">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-533">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-534">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-534">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-535">次のコード例では、非同期接続の試行を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-535">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#3)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-536"><paramref name="host" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-536"><paramref name="host" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-537"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-537">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-538">このメソッドは <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリ内のソケットに対して正しいものです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-538">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-539">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-539">The port number is not valid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-540"><see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっているか、非同期操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-540">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span></span></exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-541">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-541">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-542">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-542">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-543">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-543">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginDisconnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginDisconnect (bool reuseSocket, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginDisconnect(bool reuseSocket, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginDisconnect (reuseSocket As Boolean, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginDisconnect(bool reuseSocket, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginDisconnect : bool * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginDisconnect (reuseSocket, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseSocket" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="reuseSocket"><span data-ttu-id="8ef83-544">接続の終了後、このソケットが再利用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-544"><see langword="true" /> if this socket can be reused after the connection is closed; otherwise, <see langword="false" />.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-545"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-545">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-546">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-546">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-547">リモート エンドポイントからの切断の非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-547">Begins an asynchronous request to disconnect from a remote endpoint.</span></span></summary>
        <returns><span data-ttu-id="8ef83-548">非同期操作を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-548">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-549">接続指向プロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.BeginDisconnect%2A>メソッドを呼び出して、リモートエンドポイントからの切断を要求できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-549">If you are using a connection-oriented protocol, you can call the <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> method to request a disconnect from a remote endpoint.</span></span> <span data-ttu-id="8ef83-550">`reuseSocket` が`true`の場合は、ソケットを再利用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-550">If `reuseSocket` is `true`, you can reuse the socket.</span></span>  
  
 <span data-ttu-id="8ef83-551">メソッド<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>は、別のスレッドを使用して、指定されたコールバックメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-551">The <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> method uses a separate thread to invoke the specified callback method.</span></span> <span data-ttu-id="8ef83-552">メソッド<xref:System.Net.Sockets.Socket.EndDisconnect%2A>は、保留中の切断が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-552">The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the pending disconnect is complete.</span></span> <span data-ttu-id="8ef83-553">コールバックメソッドの記述の詳細については、「[コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-553">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-554">例外が発生した場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。 <xref:System.Net.Sockets.SocketException></span><span class="sxs-lookup"><span data-stu-id="8ef83-554">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-555">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-555">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-556">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-556">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-557">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-557">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-558">次のコード例では、非同期通信用のソケットを作成し、いくつかのデータをリモートホストに送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-558">The following code example creates a socket for asynchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="8ef83-559">データが送信されると、 <xref:System.Net.Sockets.Socket.Shutdown%2A>が呼び出され、送信と受信のアクティビティを停止します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-559">When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity.</span></span> <span data-ttu-id="8ef83-560">次<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>に、が呼び出され、切断要求が開始されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-560">Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request.</span></span> <span data-ttu-id="8ef83-561">要求が完了すると、 <xref:System.Net.Sockets.Socket.Connected%2A>プロパティが照会され、ソケットが切断されているかどうかがテストされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-561">When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#11)]
 [!code-csharp[Nclsocketenhancements#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-562">Windows 2000 以前のオペレーティング システムです。このメソッドを使用するには、Windows XP が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-562">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-563"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-563">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-564">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-564">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-565">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-565">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffers, socketFlags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-566">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-566">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-567"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-567">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-568">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-568">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-569">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-569">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="8ef83-570">このオブジェクトは、操作の完了時に <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-570">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8ef83-571">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-571">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-572">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-572">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-573">非同期<xref:System.Net.Sockets.Socket.BeginReceive%2A>操作は、メソッドを<xref:System.Net.Sockets.Socket.EndReceive%2A>呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-573">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="8ef83-574">通常、メソッドは`callback`デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-574">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="8ef83-575">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-575">This method does not block until the operation is complete.</span></span> <span data-ttu-id="8ef83-576">操作が完了するまでブロックするには、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-576">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8ef83-577">保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>のを取り消すには<xref:System.Net.Sockets.Socket.Close%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-577">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-578">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-578">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-579">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-579">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-580">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-580">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-581">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-581">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-582">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-582">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-583">`state`は、ユーザー定義クラスのインスタンス化です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-583">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-584">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-584">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-585">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-585">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-586">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-586">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-587">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-587">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-588"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-588"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-589">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-589">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-590"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-590"><see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-591">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-591">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-592">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-592">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-593">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-593">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffers, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-594">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-594">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-595"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-595">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-596">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-596">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-597">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-597">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-598">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-598">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="8ef83-599">このオブジェクトは、操作の完了時に <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-599">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8ef83-600">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-600">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-601">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-601">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-602">非同期<xref:System.Net.Sockets.Socket.BeginReceive%2A>操作は、メソッドを<xref:System.Net.Sockets.Socket.EndReceive%2A>呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-602">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="8ef83-603">通常、メソッドは`callback`デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-603">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="8ef83-604">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-604">This method does not block until the operation is complete.</span></span> <span data-ttu-id="8ef83-605">操作が完了するまでブロックするには、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-605">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8ef83-606">保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>のを取り消すには<xref:System.Net.Sockets.Socket.Close%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-606">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-607">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-607">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-608">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-608">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-609">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-609">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-610">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-610">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-611">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-611">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-612">`state`は、ユーザー定義クラスのインスタンス化です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-612">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-613">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-613">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-614">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-614">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-615">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-615">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-616">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-616">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-617"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-617"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-618">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-618">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-619"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-619"><see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-620">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-620">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-621">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-621">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-622">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-622">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : byte[] * int * int * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffer, offset, size, socket_flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-623">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-623">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-624">受信データを格納する、<paramref name="buffer" />パラメーター内の、インデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-624">The zero-based position in the <paramref name="buffer" /> parameter at which to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-625">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-625">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-626"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-626">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="socket_flags"><span data-ttu-id="8ef83-627"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-627">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-628">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-628">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-629">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-629">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="8ef83-630">このオブジェクトは、操作の完了時に <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-630">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8ef83-631">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-631">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-632">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-632">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-633">非同期<xref:System.Net.Sockets.Socket.BeginReceive%2A>操作は、メソッドを<xref:System.Net.Sockets.Socket.EndReceive%2A>呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-633">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="8ef83-634">通常、メソッドは`callback`デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-634">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="8ef83-635">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-635">This method does not block until the operation is complete.</span></span> <span data-ttu-id="8ef83-636">操作が完了するまでブロックするには、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-636">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8ef83-637">保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>のを取り消すには<xref:System.Net.Sockets.Socket.Close%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-637">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-638">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-638">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-639">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-639">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-640">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-640">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-641">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-641">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-642">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-642">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-643">`state`は、ユーザー定義クラスのインスタンス化です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-643">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-644">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-644">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-645">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-645">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-646">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-646">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-647">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-647">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-648">次のコード例では、接続されている<xref:System.Net.Sockets.Socket>からデータの非同期受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-648">The following code example begins to asynchronously receive data from a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#11)]
 [!code-csharp[Socket_Async_Send_Receive#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#11)]
 [!code-vb[Socket_Async_Send_Receive#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#11)]  
  
 [!code-cpp[Socket_Async_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Async_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Async_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#7)]  
  
 [!code-cpp[Socket_Async_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Async_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Async_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-649"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-649"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-650">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-650">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-651"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-651"><see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-652"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-652"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-653">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-653">-or-</span></span> 
 <span data-ttu-id="8ef83-654"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-654"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-655">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-655">-or-</span></span> 
 <span data-ttu-id="8ef83-656"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-656"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-657">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-657">-or-</span></span> 
 <span data-ttu-id="8ef83-658"><paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-658"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-659">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-659">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-660">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-660">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-661">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-661">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags flags, out System.Net.Sockets.SocketError error, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags flags, [out] valuetype System.Net.Sockets.SocketError&amp; error, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (buffer As Byte(), offset As Integer, size As Integer, flags As SocketFlags, ByRef error As SocketError, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags flags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % error, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffer, offset, size, flags, error, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="error" Type="System.Net.Sockets.SocketError" RefType="out" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-662">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-662">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-663">受信データを格納する <paramref name="buffer" />内の場所。</span><span class="sxs-lookup"><span data-stu-id="8ef83-663">The location in <paramref name="buffer" /> to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-664">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-664">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-665"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-665">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="flags"><span data-ttu-id="8ef83-666"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-666">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-667">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-667">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <param name="error"><span data-ttu-id="8ef83-668">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-668">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-669">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-669">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-670">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-670">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="8ef83-671">このオブジェクトは、操作の完了時に <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-671">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="8ef83-672">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-672">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-673">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-673">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-674">非同期<xref:System.Net.Sockets.Socket.BeginReceive%2A>操作は、メソッドを<xref:System.Net.Sockets.Socket.EndReceive%2A>呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-674">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="8ef83-675">通常、メソッドは`callback`デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-675">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="8ef83-676">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-676">This method does not block until the operation is complete.</span></span> <span data-ttu-id="8ef83-677">操作が完了するまでブロックするには、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-677">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="8ef83-678">保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>のを取り消すには<xref:System.Net.Sockets.Socket.Close%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-678">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-679">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-679">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-680">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-680">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-681">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-681">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-682">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-682">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-683">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-683">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-684">`state`は、ユーザー定義クラスのインスタンス化です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-684">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-685">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-685">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-686">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-686">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-687">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-687">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-688">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-688">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-689"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-689"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-690">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-690">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-691"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-691"><see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-692"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-692"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-693">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-693">-or-</span></span> 
 <span data-ttu-id="8ef83-694"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-694"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-695">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-695">-or-</span></span> 
 <span data-ttu-id="8ef83-696"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-696"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-697">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-697">-or-</span></span> 
 <span data-ttu-id="8ef83-698"><paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-698"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-699">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-699">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-700">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-700">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-701">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-701">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFrom">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, ref System.Net.EndPoint remote_end, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.Net.EndPoint&amp; remote_end, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFrom (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, ByRef remote_end As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, System::Net::EndPoint ^ % remote_end, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceiveFrom (buffer, offset, size, socket_flags, remote_end, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" RefType="ref" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="remote_end" Type="System.Net.EndPoint" RefType="ref" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-702">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-702">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-703">データを格納する、<paramref name="buffer" />パラメーター内の、インデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-703">The zero-based position in the <paramref name="buffer" /> parameter at which to store the data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-704">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-704">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-705"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-705">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="socket_flags"><span data-ttu-id="8ef83-706"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-706">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-707">データのソースを表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-707">An <see cref="T:System.Net.EndPoint" /> that represents the source of the data.</span></span></param>
        <param name="remote_end"><span data-ttu-id="8ef83-708">データのソースを表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-708">An <see cref="T:System.Net.EndPoint" /> that represents the source of the data.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-709"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-709">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-710">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-710">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-711">指定したネットワーク デバイスから、データの非同期の受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-711">Begins to asynchronously receive data from a specified network device.</span></span></summary>
        <returns><span data-ttu-id="8ef83-712">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-712">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-713">メソッド<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>は、リモートホストからのコネクションレスデータグラムの非同期読み取りを開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-713">The <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method starts asynchronously reading connectionless datagrams from a remote host.</span></span> <span data-ttu-id="8ef83-714"><xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドを呼び出すと、別の実行スレッド内でデータを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-714">Calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method gives you the ability to receive data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-715"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>をメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-715">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-716">これを行うには、少なくとも、 `state`通信に使用される接続さ<xref:System.Net.Sockets.Socket>れたまたは既定値がパラメーターに含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-716">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="8ef83-717">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を保持する小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-717">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-718">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-718">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-719">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-719">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-720">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>出すと、システムは別のスレッドを使用して指定されたコールバックメソッドを<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>実行し<xref:System.Net.Sockets.Socket> 、がデータを読み取るか例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-720">When your application calls <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, the system will use a separate thread to execute the specified callback method, and it will block on <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> until the <xref:System.Net.Sockets.Socket> reads data or throws an exception.</span></span> <span data-ttu-id="8ef83-721"><xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドを呼び出した後に元のスレッドがブロックされるように<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-721">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-722">元のスレッドの実行を継続する場合は、コールバックメソッドの T:System.Threading.ManualResetEvent に対して Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-722">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="8ef83-723">コールバックメソッドの記述の詳細については、「[コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-723">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-724">を呼び出す<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>前に、 <xref:System.Net.Sockets.Socket.Bind%2A>メソッドを使用<xref:System.Net.Sockets.Socket>してをローカルエンドポイントに明示的<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>にバインドする<xref:System.Net.Sockets.SocketException>か、をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-724">Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method, or <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-725">このメソッドは、データを`buffer`パラメーターに読み込み、データの送信元のリモートホストエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-725">This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent.</span></span> <span data-ttu-id="8ef83-726">このエンドポイントを取得する方法の詳細につい<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>ては、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-726">For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>.</span></span> <span data-ttu-id="8ef83-727">このメソッドは、不明なホストまたは複数のホストからコネクションレスのデータグラムを非同期的に受信する場合に最も役立ちます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-727">This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.</span></span> <span data-ttu-id="8ef83-728">このような場合<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 、は、ローカルネットワークバッファーに受信した最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-728">In these cases, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="8ef83-729">受信したデータグラムがのサイズを超える場合、 `buffer`メソッドは<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>可能な限り`buffer`多くのメッセージを格納し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-729">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-730">信頼性の低いプロトコルを使用している場合は、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-730">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="8ef83-731">信頼できるプロトコルを使用している場合は、余分なデータがサービスプロバイダーによって保持され、十分な<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>大きさのバッファーを持つメソッドを呼び出すことによって取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-731">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="8ef83-732">リモートホストエンドポイントが常に返されることを保証するには、アプリケーション<xref:System.Net.Sockets.Socket>で<xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを使用してをローカルエンドポイントに明示的に`optionLevel`バインドし、パラメーターをに<xref:System.Net.Sockets.SocketOptionLevel.IP>設定してメソッドを呼び出します。また<xref:System.Net.Sockets.SocketOptionLevel.IPv6>は<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 、 <xref:System.Net.Sockets.SocketOptionName.PacketInformation> `optionValue`必要に応じて、パラメーターをに設定し、パラメーターを使用して、メソッドを呼び出す前にこのオプションを有効にします。`optionName`</span><span class="sxs-lookup"><span data-stu-id="8ef83-732">To guarantee that the remote host endpoint is always returned, an application should explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method and then call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method with the `optionLevel` parameter set to <xref:System.Net.Sockets.SocketOptionLevel.IP> or <xref:System.Net.Sockets.SocketOptionLevel.IPv6> as appropriate, the `optionName` parameter set to <xref:System.Net.Sockets.SocketOptionName.PacketInformation>, and the `optionValue` parameter to enable this option before calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-733">そうしないと、受信側がメソッドを<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>呼び出した後に、送信者が複数のデータグラムを送信した場合に、リモートホストエンドポイントが返されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-733">Otherwise, it is possible for the remote host endpoint to not be returned when the sender has sent a number of datagrams before the receiver has called the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-734"><xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>はコネクションレスプロトコルを対象としていますが、接続指向プロトコルを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-734">Although <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="8ef83-735">これを選択する場合は、最初に<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを /  <xref:System.Net.Sockets.Socket.BeginConnect%2A>呼び出してリモートホスト接続を確立するか、 <xref:System.Net.Sockets.Socket.Accept%2A>または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出して受信接続要求を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-735">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> / <xref:System.Net.Sockets.Socket.BeginConnect%2A> method or accept an incoming connection request by calling the <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-736">接続を確立また<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>は受け入れる前にメソッドを呼び出すと、が<xref:System.Net.Sockets.SocketException>取得されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-736">If you call the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method before establishing or accepting a connection, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-737">また、 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-737">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-738">どちらの場合<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>も、メソッドは`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストからのデータのみを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-738">In either of these cases, the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-739">接続指向のソケットでは<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 、は`size`パラメーターで指定されたバイト数まで、使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-739">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-740">保留中<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>のを取り消すには<xref:System.Net.Sockets.Socket.Close%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-740">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-741">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-741">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-742">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-742">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-743">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-743">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-744">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-744">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-745">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-745">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-746">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-746">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-747">次のコード例では、リモートホストからコネクションレスのデータグラムを非同期的に受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-747">The following code example asynchronously receives connectionless datagrams from a remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#41](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#41)]
 [!code-csharp[Socket_Async_Send_Receive#41](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#41)]
 [!code-vb[Socket_Async_Send_Receive#41](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-748"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-748"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-749">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-749">-or-</span></span> 
 <span data-ttu-id="8ef83-750"><paramref name="remoteEP" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-750"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-751">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-751">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-752"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-752"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-753">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-753">-or-</span></span> 
 <span data-ttu-id="8ef83-754"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-754"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-755">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-755">-or-</span></span> 
 <span data-ttu-id="8ef83-756"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-756"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-757">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-757">-or-</span></span> 
 <span data-ttu-id="8ef83-758"><paramref name="size" /> が、 <paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-758"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-759"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-759">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-760">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-760">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-761">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-761">Marshaling a Delegate as a Callback Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveMessageFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveMessageFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveMessageFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveMessageFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceiveMessageFrom (buffer, offset, size, socketFlags, remoteEP, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" RefType="ref" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-762">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-762">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-763">データを格納する、<paramref name="buffer" />パラメーター内の、インデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-763">The zero-based position in the <paramref name="buffer" /> parameter at which to store the data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-764">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-764">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-765"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-765">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-766">データのソースを表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-766">An <see cref="T:System.Net.EndPoint" /> that represents the source of the data.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-767"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-767">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-768">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-768">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-769">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータの非同期受信を開始して、データ バッファー内の指定した位置に格納します。さらに、エンドポイントとパケット情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-769">Begins to asynchronously receive the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint and packet information.</span></span></summary>
        <returns><span data-ttu-id="8ef83-770">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-770">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-771">非同期の受信操作は、メソッドを<xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A>呼び出すことによって完了する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-771">The asynchronous receive operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A> method.</span></span> <span data-ttu-id="8ef83-772">通常、メソッドは`asyncCallback`デリゲートによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-772">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="8ef83-773">このメソッドは、操作が完了するまでブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-773">This method does not block until the operation completes.</span></span> <span data-ttu-id="8ef83-774">操作が完了するまでブロックするには<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-774">To block until the operation completes, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-775">保留中<xref:System.Net.Sockets.Socket.BeginReceiveMessageFrom%2A>のを取り消すには<xref:System.Net.Sockets.Socket.Close%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-775">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceiveMessageFrom%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-776">非同期プログラミングモデルの使用方法の詳細については、「[同期メソッドの非同期呼び出し](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-776">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="8ef83-777">このメソッドは、データを`buffer`パラメーターに読み込み、データの送信元のリモートホストエンドポイント、および受信パケットに関する情報をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-777">This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent, as well as information about the received packet.</span></span> <span data-ttu-id="8ef83-778">このエンドポイントを取得する方法の詳細につい<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>ては、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-778">For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>.</span></span> <span data-ttu-id="8ef83-779">このメソッドは、不明なホストまたは複数のホストからコネクションレスのデータグラムを非同期的に受信する場合に最も役立ちます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-779">This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-780">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-780">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-781">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-781">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-782">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-782">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-783">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-783">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-784">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-784">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-785">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-785">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-786"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-786"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-787">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-787">-or-</span></span> 
 <span data-ttu-id="8ef83-788"><paramref name="remoteEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-788"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-789">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-789">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-790"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-790"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-791">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-791">-or-</span></span> 
 <span data-ttu-id="8ef83-792"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-792"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-793">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-793">-or-</span></span> 
 <span data-ttu-id="8ef83-794"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-794"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-795">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-795">-or-</span></span> 
 <span data-ttu-id="8ef83-796"><paramref name="size" /> が、 <paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-796"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-797"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-797">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-798">Windows 2000 以前のオペレーティング システムです。このメソッドを使用するには、Windows XP が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-798">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-799">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-799">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffers, socketFlags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-800">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-800">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-801"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-801">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-802"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-802">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-803">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-803">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-804">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-804">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-805">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-805">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-806">メソッド<xref:System.Net.Sockets.Socket.BeginSend%2A> <xref:System.Net.Sockets.Socket.Connect%2A>は、、、 <xref:System.Net.Sockets.Socket.Accept%2A>、のいずれか<xref:System.Net.Sockets.Socket.BeginAccept%2A>のメソッドで確立され<xref:System.Net.Sockets.Socket.BeginConnect%2A>たリモートホストに対して、非同期の送信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-806">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-807"><xref:System.Net.Sockets.Socket.BeginSend%2A>最初<xref:System.Net.Sockets.Socket.Accept%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>に、 、、またはを呼び出さない場合、は例外をスローします。<xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-807"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-808">メソッドを<xref:System.Net.Sockets.Socket.BeginSend%2A>呼び出すと、別の実行スレッド内でデータを送信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-808">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-809"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前<xref:System.Net.Sockets.Socket.BeginSend%2A>をメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-809">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="8ef83-810">これを行うには、少なくとも、 `state`通信に使用される接続さ<xref:System.Net.Sockets.Socket>れたまたは既定値がパラメーターに含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-810">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="8ef83-811">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を格納するための小さなクラスまたは構造体を作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-811">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-812">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginSend%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-812">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-813">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndSend%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-813">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="8ef83-814">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginSend%2A>出すと、システムは別のスレッドを使用して指定されたコールバックメソッド<xref:System.Net.Sockets.Socket.EndSend%2A>を実行<xref:System.Net.Sockets.Socket>し、が要求したバイト数を送信するか、例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-814">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="8ef83-815"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを呼び出した後に元のスレッドがブロックされるようにする<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>には、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-815">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8ef83-816">元のスレッドの実行を継続する場合は、コールバックメソッドの T:System.Threading.ManualResetEvent に対して Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-816">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="8ef83-817">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-817">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-818">接続指向プロトコルを想定してい<xref:System.Net.Sockets.Socket.BeginSend%2A>ますが、最初にメソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出して既定のリモートホストを確立した場合、コネクションレスプロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-818">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="8ef83-819">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信すること<xref:System.Net.Sockets.Socket.BeginSendTo%2A>を計画している場合は、を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-819">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="8ef83-820"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> で<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-820">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-821">または<xref:System.Net.Sockets.Socket.BeginSend%2A> を<xref:System.Net.Sockets.Socket.BeginConnect%2A>呼び出してからを呼び出す前に、既定のリモートホストを変更することもできます。 <xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-821">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-822">コネクションレスプロトコルを使用する場合は、バッファーのサイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-822">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-823">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.BeginSend%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-823">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-824">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketflags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-824">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-825">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-825">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-826">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-826">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-827">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-827">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-828">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-828">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-829">`state`は、ユーザー定義クラスのインスタンス化です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-829">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-830">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-830">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-831">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-831">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-832">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-832">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-833">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-833">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-834">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-834">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-835">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-835">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-836"><paramref name="buffers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-836"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-837"><paramref name="buffers" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-837"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-838">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-838">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-839">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-839">See remarks section below.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-840"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-840">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-841">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-841">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-842">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-842">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-843">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-843">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffers, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-844">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-844">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-845"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-845">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-846">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-846">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-847"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-847">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-848">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-848">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-849">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-849">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-850">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-850">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-851">メソッド<xref:System.Net.Sockets.Socket.BeginSend%2A> <xref:System.Net.Sockets.Socket.Connect%2A>は、、、 <xref:System.Net.Sockets.Socket.Accept%2A>、のいずれか<xref:System.Net.Sockets.Socket.BeginAccept%2A>のメソッドで確立され<xref:System.Net.Sockets.Socket.BeginConnect%2A>たリモートホストに対して、非同期の送信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-851">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-852"><xref:System.Net.Sockets.Socket.BeginSend%2A>最初<xref:System.Net.Sockets.Socket.Accept%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>に、 、、またはを呼び出さない場合、は例外をスローします。<xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-852"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-853">メソッドを<xref:System.Net.Sockets.Socket.BeginSend%2A>呼び出すと、別の実行スレッド内でデータを送信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-853">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-854"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前<xref:System.Net.Sockets.Socket.BeginSend%2A>をメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-854">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="8ef83-855">これを行うには、少なくとも、 `state`通信に使用される接続さ<xref:System.Net.Sockets.Socket>れたまたは既定値がパラメーターに含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-855">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="8ef83-856">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を格納するための小さなクラスまたは構造体を作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-856">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-857">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginSend%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-857">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-858">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndSend%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-858">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="8ef83-859">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginSend%2A>出すと、システムは別のスレッドを使用して指定されたコールバックメソッド<xref:System.Net.Sockets.Socket.EndSend%2A>を実行<xref:System.Net.Sockets.Socket>し、が要求したバイト数を送信するか、例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-859">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="8ef83-860"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを呼び出した後に元のスレッドがブロックされるようにする<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>には、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-860">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8ef83-861">元のスレッドの実行を<xref:System.Threading.ManualResetEvent>継続する場合は、コールバックメソッドので Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-861">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="8ef83-862">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-862">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-863">接続指向プロトコルを想定してい<xref:System.Net.Sockets.Socket.BeginSend%2A>ますが、最初にメソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出して既定のリモートホストを確立した場合、コネクションレスプロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-863">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="8ef83-864">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信すること<xref:System.Net.Sockets.Socket.BeginSendTo%2A>を計画している場合は、を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-864">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="8ef83-865"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> で<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-865">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-866">または<xref:System.Net.Sockets.Socket.BeginSend%2A> を<xref:System.Net.Sockets.Socket.BeginConnect%2A>呼び出してからを呼び出す前に、既定のリモートホストを変更することもできます。 <xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-866">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-867">コネクションレスプロトコルを使用する場合は、バッファーのサイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-867">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-868">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.BeginSend%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-868">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-869">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketflags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-869">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-870">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-870">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-871">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-871">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-872">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-872">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-873">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-873">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-874">`state`は、ユーザー定義クラスのインスタンス化です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-874">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-875">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-875">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-876">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-876">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-877">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-877">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-878">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-878">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-879">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-879">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-880">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-880">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-881"><paramref name="buffers" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-881"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-882"><paramref name="buffers" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-882"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-883">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-883">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-884">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-884">See remarks section below.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-885"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-885">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-886">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-886">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-887">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-887">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-888">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-888">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffer, offset, size, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-889">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-889">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-890">送信を開始する、<paramref name="buffer" /> パラメーター内の、インデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-890">The zero-based position in the <paramref name="buffer" /> parameter at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-891">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-891">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-892"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-892">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-893">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-893">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-894"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-894">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-895">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-895">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-896">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-896">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-897">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-897">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-898">メソッド<xref:System.Net.Sockets.Socket.BeginSend%2A> <xref:System.Net.Sockets.Socket.Connect%2A>は、、、 <xref:System.Net.Sockets.Socket.Accept%2A>、のいずれか<xref:System.Net.Sockets.Socket.BeginAccept%2A>のメソッドで確立され<xref:System.Net.Sockets.Socket.BeginConnect%2A>たリモートホストに対して、非同期の送信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-898">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-899"><xref:System.Net.Sockets.Socket.BeginSend%2A>最初<xref:System.Net.Sockets.Socket.Accept%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>に、 、、またはを呼び出さない場合、は例外をスローします。<xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-899"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-900">メソッドを<xref:System.Net.Sockets.Socket.BeginSend%2A>呼び出すと、別の実行スレッド内でデータを送信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-900">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-901"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前<xref:System.Net.Sockets.Socket.BeginSend%2A>をメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-901">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="8ef83-902">これを行うには、少なくとも、 `state`通信に使用される接続さ<xref:System.Net.Sockets.Socket>れたまたは既定値がパラメーターに含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-902">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="8ef83-903">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を格納するための小さなクラスまたは構造体を作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-903">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-904">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginSend%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-904">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-905">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndSend%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-905">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="8ef83-906">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginSend%2A>出すと、システムは別のスレッドを使用して指定されたコールバックメソッド<xref:System.Net.Sockets.Socket.EndSend%2A>を実行<xref:System.Net.Sockets.Socket>し、が要求したバイト数を送信するか、例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-906">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="8ef83-907"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを呼び出した後に元のスレッドがブロックされるようにする<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>には、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-907">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8ef83-908">元のスレッドの実行を継続する場合は、コールバックメソッドの T:System.Threading.ManualResetEvent に対して Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-908">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="8ef83-909">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-909">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-910">接続指向プロトコルを想定してい<xref:System.Net.Sockets.Socket.BeginSend%2A>ますが、最初にメソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出して既定のリモートホストを確立した場合、コネクションレスプロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-910">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="8ef83-911">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信すること<xref:System.Net.Sockets.Socket.BeginSendTo%2A>を計画している場合は、を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-911">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="8ef83-912"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> で<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-912">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-913">または<xref:System.Net.Sockets.Socket.BeginSend%2A> を<xref:System.Net.Sockets.Socket.BeginConnect%2A>呼び出してからを呼び出す前に、既定のリモートホストを変更することもできます。 <xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-913">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-914">コネクションレスプロトコルを使用する場合は、バッファーのサイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-914">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-915">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.BeginSend%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-915">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-916">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketflags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-916">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-917">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-917">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-918">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-918">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-919">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-919">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-920">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-920">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-921">`state`は、ユーザー定義クラスのインスタンス化です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-921">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-922">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-922">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-923">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-923">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-924">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-924">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-925">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-925">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-926">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-926">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-927">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-927">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-928"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-928"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-929">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-929">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-930">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-930">See remarks section below.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-931"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-931"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-932">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-932">-or-</span></span> 
 <span data-ttu-id="8ef83-933"><paramref name="offset" /> が <paramref name="buffer" /> の長さより小さい値です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-933"><paramref name="offset" /> is less than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-934">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-934">-or-</span></span> 
 <span data-ttu-id="8ef83-935"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-935"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-936">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-936">-or-</span></span> 
 <span data-ttu-id="8ef83-937"><paramref name="size" /> が、 <paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-937"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-938"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-938">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-939">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-939">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-940">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-940">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-941">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-941">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * int * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffer, offset, size, socket_flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-942">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-942">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-943">送信を開始する、<paramref name="buffer" /> パラメーター内の、インデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-943">The zero-based position in the <paramref name="buffer" /> parameter at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-944">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-944">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-945"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-945">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="socket_flags"><span data-ttu-id="8ef83-946"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-946">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-947"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-947">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-948">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-948">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-949">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-949">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-950">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-950">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-951">メソッド<xref:System.Net.Sockets.Socket.BeginSend%2A> <xref:System.Net.Sockets.Socket.Connect%2A>は、、、 <xref:System.Net.Sockets.Socket.Accept%2A>、のいずれか<xref:System.Net.Sockets.Socket.BeginAccept%2A>のメソッドで確立され<xref:System.Net.Sockets.Socket.BeginConnect%2A>たリモートホストに対して、非同期の送信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-951">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="8ef83-952"><xref:System.Net.Sockets.Socket.BeginSend%2A>最初<xref:System.Net.Sockets.Socket.Accept%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>に、 、、またはを呼び出さない場合、は例外をスローします。<xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-952"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-953">メソッドを<xref:System.Net.Sockets.Socket.BeginSend%2A>呼び出すと、別の実行スレッド内でデータを送信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-953">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-954"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前<xref:System.Net.Sockets.Socket.BeginSend%2A>をメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-954">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="8ef83-955">これを行うには、少なくとも、 `state`通信に使用される接続さ<xref:System.Net.Sockets.Socket>れたまたは既定値がパラメーターに含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-955">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="8ef83-956">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を格納するための小さなクラスまたは構造体を作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-956">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-957">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginSend%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-957">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-958">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndSend%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-958">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="8ef83-959">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginSend%2A>出すと、システムは別のスレッドを使用して指定されたコールバックメソッド<xref:System.Net.Sockets.Socket.EndSend%2A>を実行<xref:System.Net.Sockets.Socket>し、が要求したバイト数を送信するか、例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-959">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="8ef83-960"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを呼び出した後に元のスレッドがブロックされるようにする<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>には、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-960">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8ef83-961">元のスレッドの実行を継続する場合は、コールバックメソッドの T:System.Threading.ManualResetEvent に対して Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-961">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="8ef83-962">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-962">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-963">接続指向プロトコルを想定してい<xref:System.Net.Sockets.Socket.BeginSend%2A>ますが、最初にメソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出して既定のリモートホストを確立した場合、コネクションレスプロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-963">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="8ef83-964">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信すること<xref:System.Net.Sockets.Socket.BeginSendTo%2A>を計画している場合は、を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-964">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="8ef83-965"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> で<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-965">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-966">または<xref:System.Net.Sockets.Socket.BeginSend%2A> を<xref:System.Net.Sockets.Socket.BeginConnect%2A>呼び出してからを呼び出す前に、既定のリモートホストを変更することもできます。 <xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-966">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-967">コネクションレスプロトコルを使用する場合は、バッファーのサイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-967">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-968">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.BeginSend%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-968">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-969">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketflags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-969">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-970">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-970">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-971">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-971">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-972">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-972">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-973">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-973">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-974">`state`は、ユーザー定義クラスのインスタンス化です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-974">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-975">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-975">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-976">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-976">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-977">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-977">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-978">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-978">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-979">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-979">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-980">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-980">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-981">次のコード例では、リモートホストへのデータの非同期送信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-981">The following code example begins asynchronously sending data to a remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Async_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Async_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-982"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-982"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-983">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-983">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-984">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-984">See remarks section below.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-985"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-985"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-986">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-986">-or-</span></span> 
 <span data-ttu-id="8ef83-987"><paramref name="offset" /> が <paramref name="buffer" /> の長さより小さい値です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-987"><paramref name="offset" /> is less than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-988">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-988">-or-</span></span> 
 <span data-ttu-id="8ef83-989"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-989"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-990">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-990">-or-</span></span> 
 <span data-ttu-id="8ef83-991"><paramref name="size" /> が、 <paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-991"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-992"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-992">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-993">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-993">Marshaling a Delegate as a Callback Method</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-client-socket-example.md"><span data-ttu-id="8ef83-994">非同期クライアント ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-994">Asynchronous Client Socket Example</span></span></related>
        <related type="Article" href="~/docs/framework/network-programming/asynchronous-server-socket-example.md"><span data-ttu-id="8ef83-995">非同期サーバー ソケットの例</span><span class="sxs-lookup"><span data-stu-id="8ef83-995">Asynchronous Server Socket Example</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSendFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-996">接続された <see cref="T:System.Net.Sockets.Socket" /> オブジェクトに、ファイルを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-996">Sends a file asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSendFile">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendFile (string fileName, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendFile(string fileName, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendFile (fileName As String, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendFile(System::String ^ fileName, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendFile : string * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendFile (fileName, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="8ef83-997">送信するファイルのパスと名前を格納する文字列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-997">A string that contains the path and name of the file to send.</span></span> <span data-ttu-id="8ef83-998">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-998">This parameter can be <see langword="null" />.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-999"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-999">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-1000">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1000">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-1001"><see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> フラグを使用して、接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトにファイル <paramref name="fileName" /> を送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1001">Sends the file <paramref name="fileName" /> to a connected <see cref="T:System.Net.Sockets.Socket" /> object using the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> flag.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1002">非同期送信を表す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1002">An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1003">このオーバーロードは、接続`fileName`されているソケットにファイルを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1003">This overload sends the file `fileName` to the connected socket.</span></span> <span data-ttu-id="8ef83-1004">が`fileName`ローカルディレクトリにある場合は、ファイル名だけで識別されます。それ以外の場合は、ファイルの完全なパスと名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1004">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="8ef83-1005">ワイルドカード ("..\\\\\\\\\myfile.txt ") と UNC 共有名 (" \ shared directory \myfile.txt ") がサポートされています。 \\</span><span class="sxs-lookup"><span data-stu-id="8ef83-1005">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="8ef83-1006">ファイルが見つからない場合は、例外<xref:System.IO.FileNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1006">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="8ef83-1007">このメソッドは、 `TransmitFile` Windows Sockets 2 API で検出された関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1007">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="8ef83-1008">関数とそのフラグの`TransmitFile`詳細については、 [Windows ソケット](/windows/desktop/WinSock/)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1008">For more information about the `TransmitFile` function and its flags, see the [Windows Sockets](/windows/desktop/WinSock/) documentation.</span></span>  
  
 <span data-ttu-id="8ef83-1009">メソッド<xref:System.Net.Sockets.Socket.BeginSendFile%2A> <xref:System.Net.Sockets.Socket.Connect%2A>は、、、 <xref:System.Net.Sockets.Socket.Accept%2A>、のいずれか<xref:System.Net.Sockets.Socket.BeginAccept%2A>のメソッドで確立され<xref:System.Net.Sockets.Socket.BeginConnect%2A>たリモートホストに対して、非同期の送信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1009">The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>,<xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods.</span></span> <span data-ttu-id="8ef83-1010"><xref:System.Net.Sockets.Socket.BeginSendFile%2A>最初<xref:System.Net.Sockets.Socket.Accept%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>に、 、、またはを呼び出さない場合、例外がスローされます。<xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1010"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-1011"><xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドを呼び出すと、別の実行スレッド内でファイルを送信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1011">Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method enables you to send a file within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-1012">操作を完了するには、 <xref:System.AsyncCallback>デリゲートパラメーターによって呼び出されるコールバックメソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1012">To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter.</span></span> <span data-ttu-id="8ef83-1013">これを行うには、少なくとも、 `state`パラメーターには通信<xref:System.Net.Sockets.Socket>に使用されるオブジェクトが含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1013">To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication.</span></span> <span data-ttu-id="8ef83-1014">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を保持するクラスまたは構造体を作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1014">If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-1015">パラメーター`state`を使用して、このカスタムオブジェクト<xref:System.Net.Sockets.Socket.BeginSendFile%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1015">Pass an instance of this custom object to the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1016">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndSendFile%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1016">Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method.</span></span> <span data-ttu-id="8ef83-1017">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginSendFile%2A>出すと、システムは別のスレッドを使用して指定されたコール<xref:System.Net.Sockets.Socket.EndSendFile%2A>バックメソッド<xref:System.Net.Sockets.Socket>を実行し、がファイル全体を送信するか、例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1017">When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception.</span></span> <span data-ttu-id="8ef83-1018">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1018">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-1019">接続指向プロトコルを想定してい<xref:System.Net.Sockets.Socket.BeginSendFile%2A>ますが、最初にメソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出して既定のリモートホストを確立した場合、コネクションレスプロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1019">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="8ef83-1020">コネクションレスプロトコルを使用する場合は、ファイルのサイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1020">With connectionless protocols, you must be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-1021">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.BeginSendFile%2A>されず、 <xref:System.Net.Sockets.SocketException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1021">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1022">例外が発生した場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。 <xref:System.Net.Sockets.SocketException></span><span class="sxs-lookup"><span data-stu-id="8ef83-1022">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1023">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1023">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1024">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1024">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1025">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1025">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1026">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1026">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-1027">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1027">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1028">次のコード例では、非同期通信用のソケットを作成して接続します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1028">The following code example creates and connects a socket for asynchronous communication.</span></span> <span data-ttu-id="8ef83-1029">まず、ファイル ".txt" をリモートホストに非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1029">First, the file "text.txt" is sent asynchronously to the remote host.</span></span> <span data-ttu-id="8ef83-1030">コールバックデリゲートは<xref:System.Net.Sockets.Socket.EndSendFile%2A> 、転送を完了するためにを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1030">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#9)]
 [!code-csharp[NCLSocketEnhancements#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1031"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1031">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1032">ソケットがリモート ホストに接続されていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1032">The socket is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="8ef83-1033">ファイル <paramref name="fileName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1033">The file <paramref name="fileName" /> was not found.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1034">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1034">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-1035">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1035">See remarks section below.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendFile">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendFile(string fileName, unsigned int8[] preBuffer, unsigned int8[] postBuffer, valuetype System.Net.Sockets.TransmitFileOptions flags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendFile (fileName As String, preBuffer As Byte(), postBuffer As Byte(), flags As TransmitFileOptions, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendFile(System::String ^ fileName, cli::array &lt;System::Byte&gt; ^ preBuffer, cli::array &lt;System::Byte&gt; ^ postBuffer, System::Net::Sockets::TransmitFileOptions flags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendFile : string * byte[] * byte[] * System.Net.Sockets.TransmitFileOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendFile (fileName, preBuffer, postBuffer, flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="preBuffer" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="postBuffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="flags" Type="System.Net.Sockets.TransmitFileOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="8ef83-1036">送信されるファイルのパスと名前を格納する文字列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1036">A string that contains the path and name of the file to be sent.</span></span> <span data-ttu-id="8ef83-1037">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1037">This parameter can be <see langword="null" />.</span></span></param>
        <param name="preBuffer"><span data-ttu-id="8ef83-1038">ファイルが送信される前に送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1038">A <see cref="T:System.Byte" /> array that contains data to be sent before the file is sent.</span></span> <span data-ttu-id="8ef83-1039">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1039">This parameter can be <see langword="null" />.</span></span></param>
        <param name="postBuffer"><span data-ttu-id="8ef83-1040">ファイルが送信された後で送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1040">A <see cref="T:System.Byte" /> array that contains data to be sent after the file is sent.</span></span> <span data-ttu-id="8ef83-1041">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1041">This parameter can be <see langword="null" />.</span></span></param>
        <param name="flags"><span data-ttu-id="8ef83-1042"><see cref="T:System.Net.Sockets.TransmitFileOptions" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1042">A bitwise combination of <see cref="T:System.Net.Sockets.TransmitFileOptions" /> values.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-1043">このオプションの完了時に呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1043">An <see cref="T:System.AsyncCallback" /> delegate to be invoked when this operation completes.</span></span> <span data-ttu-id="8ef83-1044">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1044">This parameter can be <see langword="null" />.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-1045">この要求の状態情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1045">A user-defined object that contains state information for this request.</span></span> <span data-ttu-id="8ef83-1046">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1046">This parameter can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="8ef83-1047">接続された <see cref="T:System.Net.Sockets.Socket" /> オブジェクトに、ファイルとデータのバッファーを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1047">Sends a file and buffers of data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1048">非同期操作を表す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1048">An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1049">このオーバーロードには、送信するファイルの名前と値の<xref:System.Net.Sockets.TransmitFileOptions>ビットごとの組み合わせが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1049">This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values.</span></span> <span data-ttu-id="8ef83-1050">パラメーター `preBuffer`には、ファイルの前に配置するデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1050">The `preBuffer` parameter contains any data you want to precede the file.</span></span> <span data-ttu-id="8ef83-1051">`postBuffer`ファイルに従う必要があるデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1051">`postBuffer` contains data you want to follow the file.</span></span> <span data-ttu-id="8ef83-1052">が`fileName`ローカルディレクトリにある場合は、ファイル名だけで識別されます。それ以外の場合は、ファイルの完全なパスと名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1052">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="8ef83-1053">ワイルドカード ("..\\\\\\\\\myfile.txt ") と UNC 共有名 (" \ shared directory \myfile.txt ") がサポートされています。 \\</span><span class="sxs-lookup"><span data-stu-id="8ef83-1053">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="8ef83-1054">ファイルが見つからない場合は、例外<xref:System.IO.FileNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1054">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="8ef83-1055">パラメーター `flags`は、ファイル転送に関する追加情報を Window Sockets service プロバイダーに提供します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1055">The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="8ef83-1056">このパラメーターの使用方法の詳細については<xref:System.Net.Sockets.TransmitFileOptions>、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1056">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="8ef83-1057">このメソッドは、 `TransmitFile` Windows Sockets 2 API で検出された関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1057">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="8ef83-1058">関数とそのフラグの`TransmitFile`詳細については、 [Windows ソケット](/windows/desktop/WinSock/)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1058">For more information about the `TransmitFile` function and its flags, see the [Windows Sockets](/windows/desktop/WinSock/) documentation.</span></span>  
  
 <span data-ttu-id="8ef83-1059">メソッド<xref:System.Net.Sockets.Socket.BeginSendFile%2A> <xref:System.Net.Sockets.Socket.Connect%2A>は、、、 <xref:System.Net.Sockets.Socket.Accept%2A>、のいずれか<xref:System.Net.Sockets.Socket.BeginAccept%2A>のメソッドで確立され<xref:System.Net.Sockets.Socket.BeginConnect%2A>たリモートホストに対して、非同期の送信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1059">The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods.</span></span> <span data-ttu-id="8ef83-1060"><xref:System.Net.Sockets.Socket.BeginSendFile%2A>最初<xref:System.Net.Sockets.Socket.Accept%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>に、 、、またはを呼び出さない場合、例外がスローされます。<xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1060"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="8ef83-1061">メソッドを<xref:System.Net.Sockets.Socket.BeginSendFile%2A>呼び出すと、別の実行スレッド内でファイルを送信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1061">Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method gives you the ability to send a file within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-1062">操作を完了するには、 <xref:System.AsyncCallback>デリゲートパラメーターによって呼び出されるコールバックメソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1062">To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter.</span></span> <span data-ttu-id="8ef83-1063">これを行うには、少なくとも、 `state`パラメーターには通信<xref:System.Net.Sockets.Socket>に使用されるオブジェクトが含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1063">To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication.</span></span> <span data-ttu-id="8ef83-1064">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>とその他の必要な情報を保持するクラスまたは構造体を作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1064">If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="8ef83-1065">パラメーター`state`を使用して、このカスタムオブジェクト<xref:System.Net.Sockets.Socket.BeginSendFile%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1065">Pass an instance of this custom object to the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1066">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndSendFile%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1066">Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method.</span></span> <span data-ttu-id="8ef83-1067">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginSendFile%2A>出すと、システムは別のスレッドを使用して指定されたコール<xref:System.Net.Sockets.Socket.EndSendFile%2A>バックメソッド<xref:System.Net.Sockets.Socket>を実行し、がファイル全体を送信するか、例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1067">When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception.</span></span> <span data-ttu-id="8ef83-1068">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1068">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-1069">接続指向プロトコルを想定してい<xref:System.Net.Sockets.Socket.BeginSendFile%2A>ますが、最初にメソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出して既定のリモートホストを確立した場合、コネクションレスプロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1069">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="8ef83-1070">コネクションレスプロトコルを使用する場合は、ファイルのサイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1070">With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-1071">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.BeginSendFile%2A>されず、 <xref:System.Net.Sockets.SocketException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1071">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1072">例外が発生した場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。 <xref:System.Net.Sockets.SocketException></span><span class="sxs-lookup"><span data-stu-id="8ef83-1072">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1073">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1073">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1074">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1074">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1075">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1075">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1076">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1076">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-1077">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1077">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1078">次のコード例では、非同期通信用のソケットを作成して接続し、リモートホストへのファイル "test.txt" の非同期送信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1078">The following code example creates and connects a socket for asynchronous communication and begins sending the file "text.txt" asynchronously to the remote host.</span></span> <span data-ttu-id="8ef83-1079">この例`preBuffer`では、ファイルと`postBuffer`共に送信するデータのとが作成され、 <xref:System.Net.Sockets.TransmitFileOptions>既定値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1079">In this example, a `preBuffer` and a `postBuffer` of data is created to send with the file and the default <xref:System.Net.Sockets.TransmitFileOptions> value is used.</span></span> <span data-ttu-id="8ef83-1080">コールバックデリゲートは<xref:System.Net.Sockets.Socket.EndSendFile%2A> 、転送を完了するためにを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1080">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#10)]
 [!code-csharp[NCLSocketEnhancements#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1081"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1081">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1082">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1082">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-1083">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1083">See remarks section below.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1084">オペレーティング システムは Windows NT 以降ではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1084">The operating system is not Windows NT or later.</span></span>  
  
<span data-ttu-id="8ef83-1085">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-1085">-or-</span></span>
  
 <span data-ttu-id="8ef83-1086">ソケットがリモート ホストに接続されていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1086">The socket is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="8ef83-1087">ファイル <paramref name="fileName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1087">The file <paramref name="fileName" /> was not found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendTo">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, System.Net.EndPoint remote_end, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.Net.EndPoint remote_end, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendTo (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, remote_end As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, System::Net::EndPoint ^ remote_end, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginSendTo : byte[] * int * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendTo (buffer, offset, size, socket_flags, remote_end, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="remote_end" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-1088">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1088">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-1089">データ送信を開始する、<paramref name="buffer" /> 内の、インデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1089">The zero-based position in <paramref name="buffer" /> at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-1090">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1090">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-1091"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1091">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="socket_flags"><span data-ttu-id="8ef83-1092"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1092">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-1093">リモート デバイスを表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1093">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</span></span></param>
        <param name="remote_end"><span data-ttu-id="8ef83-1094">リモート デバイスを表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1094">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</span></span></param>
        <param name="callback"><span data-ttu-id="8ef83-1095"><see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1095">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="8ef83-1096">この要求のステータス情報を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1096">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="8ef83-1097">特定のリモート ホストにデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1097">Sends data asynchronously to a specific remote host.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1098">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1098">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1099">メソッド<xref:System.Net.Sockets.Socket.BeginSendTo%2A>は、 `remoteEP`パラメーターで指定されたリモートホストに対して非同期の送信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1099">The <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method starts an asynchronous send operation to the remote host specified in the `remoteEP` parameter.</span></span> <span data-ttu-id="8ef83-1100">メソッドを<xref:System.Net.Sockets.Socket.BeginSendTo%2A>呼び出すと、別の実行スレッド内でデータを送信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1100">Calling the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method gives you the ability to send data within a separate execution thread.</span></span> <span data-ttu-id="8ef83-1101">コネクションレスプロトコルを想定し<xref:System.Net.Sockets.Socket.BeginSendTo%2A>ていますが、コネクションレスプロトコルと接続指向プロトコルの両方で動作します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1101">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.BeginSendTo%2A> works with both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="8ef83-1102"><xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成し、その名前<xref:System.Net.Sockets.Socket.BeginSendTo%2A>をメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1102">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method.</span></span> <span data-ttu-id="8ef83-1103">これを行うには、少なくとも、 `state`通信に使用される接続さ<xref:System.Net.Sockets.Socket>れたまたは既定値がパラメーターに含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1103">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="8ef83-1104">コールバックでより多くの情報が必要な場合は、 <xref:System.Net.Sockets.Socket>を保持する小さいクラスと、その他の必要な情報を作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1104">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information.</span></span> <span data-ttu-id="8ef83-1105">パラメーター`state`を使用して、このクラス<xref:System.Net.Sockets.Socket.BeginSendTo%2A>のインスタンスをメソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1105">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1106">コールバックメソッドは、メソッド<xref:System.Net.Sockets.Socket.EndSendTo%2A>を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1106">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method.</span></span> <span data-ttu-id="8ef83-1107">アプリケーションがを呼び<xref:System.Net.Sockets.Socket.BeginSendTo%2A>出すと、システムは別のスレッドを使用して指定されたコールバックメソッド<xref:System.Net.Sockets.Socket.EndSendTo%2A>を実行<xref:System.Net.Sockets.Socket>し、が要求したバイト数を送信するか、例外をスローするまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1107">When your application calls <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSendTo%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="8ef83-1108"><xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドを呼び出した後に元のスレッドがブロックされるようにする<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>には、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1108">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="8ef83-1109">元のスレッドの実行を継続する場合は、コールバックメソッドの T:System.Threading.ManualResetEvent に対して Set メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1109">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="8ef83-1110">コールバックメソッドの記述の詳細については[、「コールバックメソッドとしてのデリゲートのマーシャリング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1110">For additional information about writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="8ef83-1111">接続指向プロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Accept%2A>、最初に、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、、 <xref:System.Net.Sockets.SocketException>のいずれか<xref:System.Net.Sockets.Socket.BeginAccept%2A>のメソッドを<xref:System.Net.Sockets.Socket.BeginSendTo%2A>呼び出す必要があります。それ以外の場合は、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1111">If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, or <xref:System.Net.Sockets.Socket.BeginSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-1112"><xref:System.Net.Sockets.Socket.BeginSendTo%2A>は`remoteEP` <xref:System.Net.Sockets.Socket.Connect%2A>、パラメーターを無視し、、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.EndPoint> <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドで確立されたにデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1112"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> will ignore the `remoteEP` parameter and send data to the <xref:System.Net.EndPoint> established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1113">コネクションレスプロトコルを使用している場合は、を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前に、メソッドまたは<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを使用して既定のリモートホストを確立する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1113">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="8ef83-1114">この操作は、 <xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを呼び出す場合にのみ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1114">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="8ef83-1115"><xref:System.Net.Sockets.Socket.Connect%2A>を呼び出す<xref:System.Net.Sockets.Socket.BeginConnect%2A> 前にまたはメソッドを呼び出した場合、パラメーターは、その送信操作に対してのみ、指定された既定のリモートホストをオーバーライドします。<xref:System.Net.Sockets.Socket.SendTo%2A> `remoteEP`</span><span class="sxs-lookup"><span data-stu-id="8ef83-1115">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="8ef83-1116">また、 <xref:System.Net.Sockets.Socket.Bind%2A>メソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1116">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="8ef83-1117">この場合、基になるサービスプロバイダーによって、最も適切なローカルネットワークアドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1117">In this case, the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="8ef83-1118">基になるサービスプロバイダーで空きポートを選択する場合は、ポート番号を0にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1118">Use a port number of zero if you want the underlying service provider to select a free port.</span></span> <span data-ttu-id="8ef83-1119">割り当てられたローカルネットワークアドレスとポート番号を識別する必要がある場合は<xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 、 <xref:System.Net.Sockets.Socket.EndSendTo%2A>メソッドが正常に完了した後でプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1119">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="8ef83-1120">ブロードキャストアドレスにデータを送信する場合は、最初に<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1120">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-1121">-バッファーのサイズが、基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1121">-You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-1122">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.EndSendTo%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1122">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.EndSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-1123">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketflags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-1123">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1124">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1124">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1125">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1125">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1126">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1126">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1127">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1127">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1128">非同期<xref:System.Net.Sockets.Socket>メソッドに対して、実行コンテキスト (セキュリティコンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1128">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="8ef83-1129">特定のコンテキスト (特定の非同期<xref:System.Net.Sockets.Socket>メソッド、 <xref:System.Net.Sockets.Socket>特定のインスタンス、および特定のコールバック) を初めて使用した後、そのコンテキストを使用すると、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1129">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1130">次のコード例では、指定したリモートホストにデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1130">The following code example asynchronously sends data to the specified remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#3)]
 [!code-csharp[Socket_Async_Send_Receive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#3)]
 [!code-vb[Socket_Async_Send_Receive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1131"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1131"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-1132">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-1132">-or-</span></span> 
 <span data-ttu-id="8ef83-1133"><paramref name="remoteEP" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1133"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1134">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1134">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-1135"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1135"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-1136">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-1136">-or-</span></span> 
 <span data-ttu-id="8ef83-1137"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1137"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-1138">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-1138">-or-</span></span> 
 <span data-ttu-id="8ef83-1139"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1139"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-1140">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-1140">-or-</span></span> 
 <span data-ttu-id="8ef83-1141"><paramref name="size" /> が、 <paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1141"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1142"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1142">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-1143">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1143">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <related type="Article" href="~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md"><span data-ttu-id="8ef83-1144">コールバック メソッドとしてのデリゲートのマーシャ リング</span><span class="sxs-lookup"><span data-stu-id="8ef83-1144">Marshaling a Delegate as a Callback Method</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public void Bind (System.Net.EndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Bind(class System.Net.EndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Bind (localEP As EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Bind(System::Net::EndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="member this.Bind : System.Net.EndPoint -&gt; unit" Usage="socket.Bind localEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="8ef83-1145"><see cref="T:System.Net.Sockets.Socket" /> に関連付けるローカル <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1145">The local <see cref="T:System.Net.EndPoint" /> to associate with the <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="8ef83-1146"><see cref="T:System.Net.Sockets.Socket" /> をローカル エンドポイントと関連付けます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1146">Associates a <see cref="T:System.Net.Sockets.Socket" /> with a local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1147">特定の<xref:System.Net.Sockets.Socket.Bind%2A>ローカルエンドポイントを使用する必要がある場合は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1147">Use the <xref:System.Net.Sockets.Socket.Bind%2A> method if you need to use a specific local endpoint.</span></span> <span data-ttu-id="8ef83-1148">メソッド<xref:System.Net.Sockets.Socket.Listen%2A>を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A>前に、を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1148">You must call <xref:System.Net.Sockets.Socket.Bind%2A> before you can call the <xref:System.Net.Sockets.Socket.Listen%2A> method.</span></span> <span data-ttu-id="8ef83-1149">特定のローカルエンドポイントを<xref:System.Net.Sockets.Socket.Bind%2A>使用する必要<xref:System.Net.Sockets.Socket.Connect%2A>がない限り、メソッドを使用する前にを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1149">You do not need to call <xref:System.Net.Sockets.Socket.Bind%2A> before using the <xref:System.Net.Sockets.Socket.Connect%2A> method unless you need to use a specific local endpoint.</span></span> <span data-ttu-id="8ef83-1150">このメソッドは、 <xref:System.Net.Sockets.Socket.Bind%2A>コネクションレスプロトコルと接続指向プロトコルの両方で使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1150">You can use the <xref:System.Net.Sockets.Socket.Bind%2A> method on both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="8ef83-1151">を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A>前に、まず、データを<xref:System.Net.IPEndPoint>通信するローカルのを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1151">Before calling <xref:System.Net.Sockets.Socket.Bind%2A>, you must first create the local <xref:System.Net.IPEndPoint> from which you intend to communicate data.</span></span> <span data-ttu-id="8ef83-1152">どのローカルアドレスが割り当てられてもかまわない場合は、アドレス<xref:System.Net.IPEndPoint>パラメーター <xref:System.Net.IPAddress.Any?displayProperty=nameWithType>としてを使用してを作成すると、基になるサービスプロバイダーによって最も適切なネットワークアドレスが割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1152">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="8ef83-1153">これは、複数のネットワークインターフェイスがある場合に、アプリケーションの簡素化に役立つ可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1153">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="8ef83-1154">使用されるローカルポートを気にしない場合は、ポート番号<xref:System.Net.IPEndPoint>として0を使用してを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1154">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="8ef83-1155">この場合、サービスプロバイダーは1024と5000の間の使用可能なポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1155">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span>  
  
 <span data-ttu-id="8ef83-1156">上記の方法を使用する場合は、 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A>を呼び出すことによって、どのローカルネットワークアドレスとポート番号が割り当てられているかを調べることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1156">If you use the above approach, you can discover what local network address and port number has been assigned by calling the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A>.</span></span> <span data-ttu-id="8ef83-1157">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> <xref:System.Net.Sockets.Socket.Connect%2A>は、メソッドまたは<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドを呼び出した後に、ローカルに割り当てられたネットワークアドレスを返しません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1157">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> will not return the locally assigned network address until after you have made a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="8ef83-1158">コネクションレスプロトコルを使用している場合は、送信または受信が完了するまで、この情報にアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1158">If you are using a connectionless protocol, you will not have access to this information until you have completed a send or receive.</span></span>  
  
 <span data-ttu-id="8ef83-1159">UDP ソケットが受信パケット<xref:System.Net.Sockets.Socket.SetSocketOption%2A>のインターフェイス情報を受け取る場合は、メソッドを呼び出し<xref:System.Net.Sockets.Socket.Bind%2A>た直後に socket オプションをに<xref:System.Net.Sockets.SocketOptionName.PacketInformation>設定して、メソッドを明示的に呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1159">If a UDP socket wants to receive interface information on received packets,  the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method should be explicitly called with the socket option set to <xref:System.Net.Sockets.SocketOptionName.PacketInformation> immediately after calling the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1160">マルチキャストデータグラムを受信する場合は、マルチキャストポート<xref:System.Net.Sockets.Socket.Bind%2A>番号を指定してメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1160">If you intend to receive multicast datagrams, you must call the <xref:System.Net.Sockets.Socket.Bind%2A> method with a multicast port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1161">メソッドを使用し<xref:System.Net.Sockets.Socket.Bind%2A>て、コネクションレスのデータグラムを受信する場合は、メソッドを呼び出す必要があります。 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1161">You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method if you intend to receive connectionless datagrams using the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1162">メソッドの<xref:System.Net.Sockets.SocketException> <xref:System.Net.Sockets.Socket.Bind%2A>呼び出し時にを受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1162">If you receive a <xref:System.Net.Sockets.SocketException> when calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1163">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1163">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1164">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1164">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1165">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1165">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1166">次のコード例では<xref:System.Net.Sockets.Socket> 、指定したローカルエンドポイントを使用してをバインドします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1166">The following code example binds a <xref:System.Net.Sockets.Socket> using the specified local endpoint.</span></span>  
  
 [!code-cpp[Classic Socket.Bind Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Bind Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Bind Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Bind Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Bind Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Bind Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1167"><paramref name="localEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1167"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1168">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1168">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1169"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1169">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-1170">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1170">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-1171">によっ<paramref name="localEP" />て定義されたホストからの接続を受け入れる場合。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1171">for accepting connections from the host defined by <paramref name="localEP" />.</span></span> <span data-ttu-id="8ef83-1172">関連付けられた列挙型:<see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="8ef83-1172">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" /></span></span></permission>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Blocking">
      <MemberSignature Language="C#" Value="public bool Blocking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Blocking" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Blocking" />
      <MemberSignature Language="VB.NET" Value="Public Property Blocking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Blocking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Blocking : bool with get, set" Usage="System.Net.Sockets.Socket.Blocking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1173"><see cref="T:System.Net.Sockets.Socket" /> がブロッキング モードかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1173">Gets or sets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is in blocking mode.</span></span></summary>
        <value><span data-ttu-id="8ef83-1174"><see cref="T:System.Net.Sockets.Socket" /> がブロックする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1174"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> will block; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8ef83-1175">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1175">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1176">プロパティ<xref:System.Net.Sockets.Socket.Blocking%2A>は、 <xref:System.Net.Sockets.Socket>がブロッキングモードであるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1176">The <xref:System.Net.Sockets.Socket.Blocking%2A> property indicates whether a <xref:System.Net.Sockets.Socket> is in blocking mode.</span></span>  
  
 <span data-ttu-id="8ef83-1177">ブロックモードで、すぐには完了しないメソッド呼び出しを行う場合、要求された操作が完了するまで、アプリケーションは実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1177">If you are in blocking mode, and you make a method call which does not complete immediately, your application will block execution until the requested operation completes.</span></span> <span data-ttu-id="8ef83-1178">要求された操作が完了していなくても実行を続行する<xref:System.Net.Sockets.Socket.Blocking%2A>場合は`false`、プロパティをに変更します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1178">If you want execution to continue even though the requested operation is not complete, change the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false`.</span></span> <span data-ttu-id="8ef83-1179">プロパティ<xref:System.Net.Sockets.Socket.Blocking%2A>は、非同期メソッドには影響しません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1179">The <xref:System.Net.Sockets.Socket.Blocking%2A> property has no effect on asynchronous methods.</span></span> <span data-ttu-id="8ef83-1180">非同期的にデータを送受信し、実行をブロックする場合は、 <xref:System.Threading.ManualResetEvent>クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1180">If you are sending and receiving data asynchronously and want to block execution, use the <xref:System.Threading.ManualResetEvent> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1181">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1181">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1182">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1182">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1183">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1183">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1184">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1184">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1185">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1185">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1186"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1186">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CancelConnectAsync">
      <MemberSignature Language="C#" Value="public static void CancelConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelConnectAsync (e As SocketAsyncEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelConnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member CancelConnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; unit" Usage="System.Net.Sockets.Socket.CancelConnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-1187"><see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> メソッドの 1 つを呼び出してリモート ホストへの接続を要求するために使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1187">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object used to request the connection to the remote host by calling one of the <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> methods.</span></span></param>
        <summary><span data-ttu-id="8ef83-1188">リモート ホスト接続への非同期要求を取り消します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1188">Cancels an asynchronous request for a remote host connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1189">メソッド<xref:System.Net.Sockets.Socket.CancelConnectAsync%2A>は、リモートホスト接続の非同期要求をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1189">The <xref:System.Net.Sockets.Socket.CancelConnectAsync%2A> method cancels an asynchronous request for a remote host connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1190"><paramref name="e" /> パラメーターおよび <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> を null 値にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1190">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1191">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1191">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1192"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1192">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-1193">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1193">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Close">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1194"><see cref="T:System.Net.Sockets.Socket" /> 接続を閉じ、関連付けられたすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1194">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="socket.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef83-1195"><see cref="T:System.Net.Sockets.Socket" /> 接続を閉じ、関連付けられたすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1195">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1196">メソッド<xref:System.Net.Sockets.Socket.Close%2A>は、リモートホスト接続を閉じ、に関連付けられているすべて<xref:System.Net.Sockets.Socket>のマネージリソースとアンマネージリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1196">The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1197">終了時に、 <xref:System.Net.Sockets.Socket.Connected%2A>プロパティがに`false`設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1197">Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="8ef83-1198">接続指向プロトコルの場合は、 <xref:System.Net.Sockets.Socket.Shutdown%2A> <xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出す前にを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1198">For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="8ef83-1199">これにより、接続されたソケットが閉じられる前に、すべてのデータが送信され、受信されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1199">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="8ef83-1200">を呼び<xref:System.Net.Sockets.Socket.Close%2A>出さず<xref:System.Net.Sockets.Socket.Shutdown%2A>にを呼び出す必要がある場合は、 <xref:System.Net.Sockets.Socket>オプションをに`false`設定<xref:System.Net.Sockets.SocketOptionName.DontLinger>し、タイムアウト間隔をゼロ以外に指定することにより、送信転送用のキューに置かれたデータが送信されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1200">If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket> option to `false` and specifying a non-zero time-out interval.</span></span> <span data-ttu-id="8ef83-1201"><xref:System.Net.Sockets.Socket.Close%2A>は、このデータが送信されるか、指定されたタイムアウトが経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1201"><xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="8ef83-1202">をに<xref:System.Net.Sockets.SocketOptionName.DontLinger> `false`設定し、タイムアウト間隔をゼロに指定すると<xref:System.Net.Sockets.Socket.Close%2A> 、によって接続が解放され、キューに置かれた送信データが自動的に破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1202">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1203"><xref:System.Net.Sockets.SocketOptionName.DontLinger>ソケットオプションをに`false`設定するには<xref:System.Net.Sockets.LingerOption>、を作成し、enabled プロパティ`true`をに設定し<xref:System.Net.Sockets.LingerOption.LingerTime%2A> 、プロパティを目的のタイムアウト期間に設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1203">To set the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time out period.</span></span> <span data-ttu-id="8ef83-1204">これ<xref:System.Net.Sockets.LingerOption>を<xref:System.Net.Sockets.SocketOptionName.DontLinger> socket オプションと共に使用して<xref:System.Net.Sockets.Socket.SetSocketOption%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1204">Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1205">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1205">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1206">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1206">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1207">を<xref:System.Net.Sockets.Socket>閉じるコード例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1207">The following code example closes a <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.DontLinger" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberSignature Language="F#" Value="member this.Close : int -&gt; unit" Usage="socket.Close timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="8ef83-1208">最大 <paramref name="timeout" /> 秒まで待ってから残りのデータを送信し、ソケットを閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1208">Wait up to <paramref name="timeout" /> seconds to send any remaining data, then close the socket.</span></span></param>
        <summary><span data-ttu-id="8ef83-1209"><see cref="T:System.Net.Sockets.Socket" /> 接続を閉じ、すべての関連付けられているリソースを指定したタイムアウトで解放して、キューに置かれたデータの送信を許可します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1209">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources with a specified timeout to allow queued data to be sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1210">メソッド<xref:System.Net.Sockets.Socket.Close%2A>は、リモートホスト接続を閉じ、に関連付けられているすべて<xref:System.Net.Sockets.Socket>のマネージリソースとアンマネージリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1210">The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1211">終了時に、 <xref:System.Net.Sockets.Socket.Connected%2A>プロパティがに`false`設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1211">Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="8ef83-1212">接続指向プロトコルの場合は、を呼び出す<xref:System.Net.Sockets.Socket.Shutdown%2A> <xref:System.Net.Sockets.Socket.Close%2A>前にを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1212">For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling <xref:System.Net.Sockets.Socket.Close%2A>.</span></span> <span data-ttu-id="8ef83-1213">これにより、接続されたソケットが閉じられる前に、すべてのデータが送信され、受信されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1213">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="8ef83-1214"><xref:System.Net.Sockets.Socket.Close%2A>を呼び出さず<xref:System.Net.Sockets.Socket.Shutdown%2A>にを呼び出す必要がある場合は、 <xref:System.Net.Sockets.SocketOptionName.DontLinger>オプションをに`false`設定し、タイムアウト間隔をゼロ以外に指定することにより、送信転送用のキューに置かれたデータが送信されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1214">If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName.DontLinger> option to `false` and specifying a non-zero time-out interval.</span></span> <span data-ttu-id="8ef83-1215"><xref:System.Net.Sockets.Socket.Close%2A>は、このデータが送信されるか、指定されたタイムアウトが経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1215"><xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="8ef83-1216">をに<xref:System.Net.Sockets.SocketOptionName.DontLinger> `false`設定し、タイムアウト間隔をゼロに指定すると<xref:System.Net.Sockets.Socket.Close%2A> 、によって接続が解放され、キューに置かれた送信データが自動的に破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1216">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1217"><xref:System.Net.Sockets.SocketOptionName.DontLinger>ソケットオプションをに`false`設定するには<xref:System.Net.Sockets.LingerOption>、を作成し、enabled プロパティ`true`をに設定し<xref:System.Net.Sockets.LingerOption.LingerTime%2A> 、プロパティを目的のタイムアウト期間に設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1217">To set the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time-out period.</span></span> <span data-ttu-id="8ef83-1218">これ<xref:System.Net.Sockets.LingerOption>を<xref:System.Net.Sockets.SocketOptionName.DontLinger> socket オプションと共に使用して<xref:System.Net.Sockets.Socket.SetSocketOption%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1218">Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1219">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1219">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1220">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1220">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1221">を<xref:System.Net.Sockets.Socket>閉じる方法を次のコード例に示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1221">The following code example demonstrates how to close a <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.DontLinger" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1222">リモート ホストへの接続を確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1222">Establishes a connection to a remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.EndPoint -&gt; unit" Usage="socket.Connect remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="8ef83-1223">リモート デバイスを表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1223">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</span></span></param>
        <summary><span data-ttu-id="8ef83-1224">リモート ホストへの接続を確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1224">Establishes a connection to a remote host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1225">TCP などの接続指向プロトコルを使用している場合、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>は、と指定された<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>リモートエンドポイントとの間のネットワーク接続を同期的に確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1225">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="8ef83-1226">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.Connect%2A>場合は、によって既定のリモートホストが確立されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1226">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="8ef83-1227">を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>た後、 <xref:System.Net.Sockets.Socket.Send%2A>メソッドを使用してリモートデバイスにデータを送信したり、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドを使用してリモートデバイスからデータを受信したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1227">After you call <xref:System.Net.Sockets.Socket.Connect%2A>, you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1228">UDP などのコネクションレスプロトコルを使用している場合は、データを送受信<xref:System.Net.Sockets.Socket.Connect%2A>する前にを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1228">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="8ef83-1229"><xref:System.Net.Sockets.Socket.SendTo%2A> および<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>を使用して、リモートホストと同期的に通信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1229">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="8ef83-1230">を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A>と、指定された既定以外のアドレスから到着したデータグラムはすべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1230">If you do call <xref:System.Net.Sockets.Socket.Connect%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="8ef83-1231">既定のリモートホストをブロードキャストアドレスに設定する<xref:System.Net.Sockets.Socket.SetSocketOption%2A>場合は<xref:System.Net.Sockets.Socket.Connect%2A> 、最初にメソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があり<xref:System.Net.Sockets.SocketException>ます。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1231">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-1232">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1232">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1233">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1233">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="8ef83-1234">を呼び出す<xref:System.Net.Sockets.Socket.Blocking%2A> <xref:System.Net.Sockets.Socket.Connect%2A> 前にプロパティ`false`をに明示的に設定しない限り、メソッドはブロックされます。 <xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1234">The <xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-1235">TCP のような接続指向プロトコルを使用していて、ブロックを無効<xref:System.Net.Sockets.Socket.Connect%2A>にした<xref:System.Net.Sockets.SocketException>場合、は接続に時間がかかるため、をスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1235">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="8ef83-1236">コネクションレスプロトコルは、既定のリモートホストを確立するだけなので、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1236">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="8ef83-1237">を使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>すると、特定のエラーコードを取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1237">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1238">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1238">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="8ef83-1239">エラーによって WSAEWOULDBLOCK が返された場合、リモートホスト接続は接続指向<xref:System.Net.Sockets.Socket>で開始されていますが、まだ正常に完了していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1239">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="8ef83-1240">メソッドを使用して、 <xref:System.Net.Sockets.Socket>が接続を終了したことを確認します。 <xref:System.Net.Sockets.Socket.Poll%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1240">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1241">接続指向プロトコルを使用していて、を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.Connect%2A>前にを呼び出さなかった場合は、基になるサービスプロバイダーによってローカルネットワークアドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1241">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="8ef83-1242">コネクションレスプロトコルを使用している場合、送信または受信操作が完了するまで、サービスプロバイダーはローカルネットワークアドレスとポート番号を割り当てません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1242">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="8ef83-1243">既定のリモートホストを変更する場合は、目的<xref:System.Net.Sockets.Socket.Connect%2A>のエンドポイントでもう一度を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1243">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1244">ソケットが既に切断されている場合は、この方法を使用して接続を復元することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1244">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="8ef83-1245">いずれかの非同期<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを使用して再接続します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1245">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="8ef83-1246">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1246">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1247">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1247">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1248">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1248">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1249">次のコード例では、リモートエンドポイントに接続し、接続を確認します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1249">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[Classic Socket.Connect Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Connect Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Connect Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Connect Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Connect Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Connect Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1250"><paramref name="remoteEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1250"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1251">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1251">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1252"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1252">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-1253">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1253">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1254"><see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1254">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-1255">リモートホストに接続するために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1255">for connecting to the remote host.</span></span> <span data-ttu-id="8ef83-1256">関連付けられた列挙型:<see cref="F:System.Net.NetworkAccess.Connect" /></span><span class="sxs-lookup"><span data-stu-id="8ef83-1256">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Connect" /></span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.Blocking" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="socket.Connect (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="8ef83-1257">リモート ホストの IP アドレス。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1257">The IP address of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="8ef83-1258">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1258">The port number of the remote host.</span></span></param>
        <summary><span data-ttu-id="8ef83-1259">リモート ホストへの接続を確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1259">Establishes a connection to a remote host.</span></span> <span data-ttu-id="8ef83-1260">ホストは、IP アドレスとポート番号で指定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1260">The host is specified by an IP address and a port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1261">TCP などの接続指向プロトコルを使用している場合、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>は、と指定された<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>リモートエンドポイントとの間のネットワーク接続を同期的に確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1261">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="8ef83-1262">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.Connect%2A>場合は、によって既定のリモートホストが確立されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1262">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="8ef83-1263">を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A>と、 <xref:System.Net.Sockets.Socket.Send%2A>メソッドを使用してリモートデバイスにデータを送信したり、リモートデバイスから<xref:System.Net.Sockets.Socket.Receive%2A>メソッドを使用してデータを受信したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1263">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1264">UDP などのコネクションレスプロトコルを使用している場合は、データを送受信<xref:System.Net.Sockets.Socket.Connect%2A>する前にを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1264">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="8ef83-1265"><xref:System.Net.Sockets.Socket.SendTo%2A> および<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>を使用して、リモートホストと同期的に通信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1265">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="8ef83-1266">指定した以外<xref:System.Net.Sockets.Socket.Connect%2A>のアドレスから受信したデータグラムを呼び出すと、指定した既定値は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1266">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="8ef83-1267">既定のリモートホストをブロードキャストアドレスに設定する<xref:System.Net.Sockets.Socket.SetSocketOption%2A>場合は<xref:System.Net.Sockets.Socket.Connect%2A> 、最初にメソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があり<xref:System.Net.Sockets.SocketException>ます。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1267">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-1268">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1268">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1269">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1269">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="8ef83-1270"><xref:System.Net.Sockets.Socket.Connect%2A>を呼び出す<xref:System.Net.Sockets.Socket.Blocking%2A> `false` 前にプロパティをに明示的に設定しない限り、メソッドは<xref:System.Net.Sockets.Socket.Connect%2A>ブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1270"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-1271">TCP のような接続指向プロトコルを使用していて、ブロックを無効<xref:System.Net.Sockets.Socket.Connect%2A>にした<xref:System.Net.Sockets.SocketException>場合、は接続に時間がかかるため、をスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1271">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="8ef83-1272">コネクションレスプロトコルは、既定のリモートホストを確立するだけなので、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1272">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="8ef83-1273">を使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>すると、特定のエラーコードを取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1273">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1274">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1274">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="8ef83-1275">エラーによって WSAEWOULDBLOCK が返された場合、リモートホスト接続は接続指向<xref:System.Net.Sockets.Socket>で開始されていますが、まだ正常に完了していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1275">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="8ef83-1276">メソッドを使用して、 <xref:System.Net.Sockets.Socket>が接続を終了したことを確認します。 <xref:System.Net.Sockets.Socket.Poll%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1276">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1277">接続指向プロトコルを使用していて、を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.Connect%2A>前にを呼び出さなかった場合は、基になるサービスプロバイダーによってローカルネットワークアドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1277">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="8ef83-1278">コネクションレスプロトコルを使用している場合、送信または受信操作が完了するまで、サービスプロバイダーはローカルネットワークアドレスとポート番号を割り当てません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1278">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="8ef83-1279">既定のリモートホストを変更する場合は、目的<xref:System.Net.Sockets.Socket.Connect%2A>のエンドポイントでもう一度を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1279">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1280">ソケットが既に切断されている場合は、この方法を使用して接続を復元することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1280">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="8ef83-1281">いずれかの非同期<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを使用して再接続します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1281">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="8ef83-1282">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1282">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1283">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1283">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1284">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1284">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1285">次のコード例では、リモートエンドポイントに接続し、接続を確認します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1285">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#4)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1286"><paramref name="address" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1286"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-1287">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1287">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1288">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1288">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1289"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1289">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1290">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットで有効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1290">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1291"><paramref name="address" /> の長さが 0 です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1291">The length of <paramref name="address" /> is zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1292"><see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1292">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress[] * int -&gt; unit" Usage="socket.Connect (addresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="8ef83-1293">リモート ホストの IP アドレス。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1293">The IP addresses of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="8ef83-1294">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1294">The port number of the remote host.</span></span></param>
        <summary><span data-ttu-id="8ef83-1295">リモート ホストへの接続を確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1295">Establishes a connection to a remote host.</span></span> <span data-ttu-id="8ef83-1296">ホストは、IP アドレスの配列とポート番号で指定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1296">The host is specified by an array of IP addresses and a port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1297">このメソッドは、通常、1つのホスト<xref:System.Net.Dns.GetHostAddresses%2A>に対して複数の IP アドレスを返すことができるの呼び出しの直後に使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1297">This method is typically used immediately after a call to <xref:System.Net.Dns.GetHostAddresses%2A>, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="8ef83-1298">TCP などの接続指向プロトコルを使用している場合、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>は、と指定された<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>リモートエンドポイントとの間のネットワーク接続を同期的に確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1298">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="8ef83-1299">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.Connect%2A>場合は、によって既定のリモートホストが確立されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1299">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="8ef83-1300">を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A>と、 <xref:System.Net.Sockets.Socket.Send%2A>メソッドを使用してリモートデバイスにデータを送信したり、リモートデバイスから<xref:System.Net.Sockets.Socket.Receive%2A>メソッドを使用してデータを受信したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1300">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1301">UDP などのコネクションレスプロトコルを使用している場合は、データを送受信<xref:System.Net.Sockets.Socket.Connect%2A>する前にを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1301">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="8ef83-1302"><xref:System.Net.Sockets.Socket.SendTo%2A> および<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>を使用して、リモートホストと同期的に通信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1302">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="8ef83-1303">指定した以外<xref:System.Net.Sockets.Socket.Connect%2A>のアドレスから受信したデータグラムを呼び出すと、指定した既定値は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1303">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="8ef83-1304">既定のリモートホストをブロードキャストアドレスに設定する<xref:System.Net.Sockets.Socket.SetSocketOption%2A>場合は<xref:System.Net.Sockets.Socket.Connect%2A> 、最初にメソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があり<xref:System.Net.Sockets.SocketException>ます。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1304">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-1305">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1305">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1306">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1306">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="8ef83-1307"><xref:System.Net.Sockets.Socket.Connect%2A>を呼び出す<xref:System.Net.Sockets.Socket.Blocking%2A> `false` 前にプロパティをに明示的に設定しない限り、メソッドは<xref:System.Net.Sockets.Socket.Connect%2A>ブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1307"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-1308">TCP のような接続指向プロトコルを使用していて、ブロックを無効<xref:System.Net.Sockets.Socket.Connect%2A>にした<xref:System.Net.Sockets.SocketException>場合、は接続に時間がかかるため、をスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1308">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="8ef83-1309">コネクションレスプロトコルは、既定のリモートホストを確立するだけなので、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1309">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="8ef83-1310">を使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>すると、特定のエラーコードを取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1310">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1311">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1311">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="8ef83-1312">エラーによって WSAEWOULDBLOCK が返された場合、リモートホスト接続は接続指向<xref:System.Net.Sockets.Socket>で開始されていますが、まだ正常に完了していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1312">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="8ef83-1313">メソッドを使用して、 <xref:System.Net.Sockets.Socket>が接続を終了したことを確認します。 <xref:System.Net.Sockets.Socket.Poll%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1313">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1314">接続指向プロトコルを使用していて、を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.Connect%2A>前にを呼び出さなかった場合は、基になるサービスプロバイダーによってローカルネットワークアドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1314">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="8ef83-1315">コネクションレスプロトコルを使用している場合、送信または受信操作が完了するまで、サービスプロバイダーはローカルネットワークアドレスとポート番号を割り当てません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1315">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="8ef83-1316">既定のリモートホストを変更する場合は、目的<xref:System.Net.Sockets.Socket.Connect%2A>のエンドポイントでもう一度を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1316">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1317">ソケットが既に切断されている場合は、この方法を使用して接続を復元することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1317">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="8ef83-1318">いずれかの非同期<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを使用して再接続します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1318">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="8ef83-1319">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1319">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1320">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1320">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1321">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1321">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1322">次のコード例では、リモートエンドポイントに接続し、接続を確認します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1322">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#5)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1323"><paramref name="addresses" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1323"><paramref name="addresses" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-1324">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1324">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1325">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1325">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1326"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1326">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1327">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットで有効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1327">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1328"><paramref name="address" /> の長さが 0 です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1328">The length of <paramref name="address" /> is zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1329"><see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1329">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (host As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ host, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="socket.Connect (host, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="8ef83-1330">リモート ホストの名前。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1330">The name of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="8ef83-1331">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1331">The port number of the remote host.</span></span></param>
        <summary><span data-ttu-id="8ef83-1332">リモート ホストへの接続を確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1332">Establishes a connection to a remote host.</span></span> <span data-ttu-id="8ef83-1333">ホストはホスト名とポート番号で指定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1333">The host is specified by a host name and a port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1334">TCP などの接続指向プロトコルを使用している場合、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>は、と指定された<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>リモートホストの間のネットワーク接続を同期的に確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1334">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote host.</span></span> <span data-ttu-id="8ef83-1335">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.Connect%2A>場合は、によって既定のリモートホストが確立されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1335">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="8ef83-1336">を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A>と、 <xref:System.Net.Sockets.Socket.Send%2A>メソッドを使用してリモートデバイスにデータを送信したり、リモートデバイスから<xref:System.Net.Sockets.Socket.Receive%2A>メソッドを使用してデータを受信したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1336">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1337">UDP などのコネクションレスプロトコルを使用している場合は、データを送受信<xref:System.Net.Sockets.Socket.Connect%2A>する前にを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1337">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="8ef83-1338"><xref:System.Net.Sockets.Socket.SendTo%2A> および<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>を使用して、リモートホストと同期的に通信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1338">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="8ef83-1339">指定した以外<xref:System.Net.Sockets.Socket.Connect%2A>のアドレスから受信したデータグラムを呼び出すと、指定した既定値は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1339">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="8ef83-1340">既定のリモートホストをブロードキャストアドレスに設定する<xref:System.Net.Sockets.Socket.SetSocketOption%2A>場合は<xref:System.Net.Sockets.Socket.Connect%2A> 、最初にメソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があり<xref:System.Net.Sockets.SocketException>ます。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1340">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-1341">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1341">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1342">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1342">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="8ef83-1343"><xref:System.Net.Sockets.Socket.Connect%2A>を呼び出す<xref:System.Net.Sockets.Socket.Blocking%2A> `false` 前にプロパティをに明示的に設定しない限り、メソッドは<xref:System.Net.Sockets.Socket.Connect%2A>ブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1343"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-1344">TCP のような接続指向プロトコルを使用していて、ブロックを無効<xref:System.Net.Sockets.Socket.Connect%2A>にした<xref:System.Net.Sockets.SocketException>場合、は接続に時間がかかるため、をスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1344">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="8ef83-1345">コネクションレスプロトコルは、既定のリモートホストを確立するだけなので、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1345">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="8ef83-1346">を使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>すると、特定のエラーコードを取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1346">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1347">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1347">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="8ef83-1348">エラーによって WSAEWOULDBLOCK が返された場合、リモートホスト接続は接続指向<xref:System.Net.Sockets.Socket>で開始されていますが、まだ正常に完了していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1348">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="8ef83-1349">メソッドを使用して、 <xref:System.Net.Sockets.Socket>が接続を終了したことを確認します。 <xref:System.Net.Sockets.Socket.Poll%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1349">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
 <span data-ttu-id="8ef83-1350">Ipv6 を有効にし<xref:System.Net.Sockets.Socket.Connect%28System.String%2CSystem.Int32%29> 、メソッドを呼び出して、ipv6 と ipv4 の両方のアドレスに解決されるホストに接続する場合は、ipv4 アドレスの前に ipv6 アドレスへの接続が最初に試行されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1350">If IPv6 is enabled and the <xref:System.Net.Sockets.Socket.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="8ef83-1351">ホストが IPv6 アドレスでリッスンしていない場合、接続の確立に時間がかかることがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1351">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1352">接続指向プロトコルを使用していて、を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.Connect%2A>前にを呼び出さなかった場合は、基になるサービスプロバイダーによってローカルネットワークアドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1352">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="8ef83-1353">コネクションレスプロトコルを使用している場合、送信または受信操作が完了するまで、サービスプロバイダーはローカルネットワークアドレスとポート番号を割り当てません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1353">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="8ef83-1354">既定のリモートホストを変更する場合は、目的<xref:System.Net.Sockets.Socket.Connect%2A>のエンドポイントでもう一度を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1354">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1355">ソケットが既に切断されている場合は、この方法を使用して接続を復元することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1355">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="8ef83-1356">いずれかの非同期<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを使用して再接続します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1356">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="8ef83-1357">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1357">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1358">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1358">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1359">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1359">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1360">次のコード例では、リモートエンドポイントに接続し、接続を確認します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1360">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#6)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1361"><paramref name="host" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1361"><paramref name="host" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-1362">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1362">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1363">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1363">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1364"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1364">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1365">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットで有効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1365">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1366"><see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1366">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1367">リモート ホストに接続する非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1367">Begins an asynchronous request for a connection to a remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public bool ConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ConnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ConnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-1368">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1368">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1369">リモート ホストに接続する非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1369">Begins an asynchronous request for a connection to a remote host.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1370">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1370"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-1371">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1371">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-1372">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1372"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-1373">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1373">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1374">接続指向プロトコルを使用している場合、メソッド<xref:System.Net.Sockets.Socket.ConnectAsync%2A>は、リモートホストへの接続に対する非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1374">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method starts an asynchronous request for a connection to the remote host.</span></span> <span data-ttu-id="8ef83-1375">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.ConnectAsync%2A>場合は、によって既定のリモートホストが確立されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1375">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.ConnectAsync%2A> establishes a default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-1376">完了が通知されるようにするには、EventHandler\<SocketAsyncEventArgs > delegate を実装するコールバックメソッドを作成し、そのコールバックを<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベントにアタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1376">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="8ef83-1377">呼び出し元は、接続<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>先のリモート<xref:System.Net.IPEndPoint>ホストのにプロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1377">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.</span></span>  
  
 <span data-ttu-id="8ef83-1378">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1378">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-1379">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1379">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-1380">UDP などのコネクションレスプロトコルを使用している場合は、データを送受信<xref:System.Net.Sockets.Socket.ConnectAsync%2A>する前にを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1380">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.ConnectAsync%2A> before sending and receiving data.</span></span> <span data-ttu-id="8ef83-1381"><xref:System.Net.Sockets.Socket.SendToAsync%2A> および<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>を使用して、リモートホストと通信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1381">You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host.</span></span> <span data-ttu-id="8ef83-1382">を呼び出す<xref:System.Net.Sockets.Socket.ConnectAsync%2A>と、指定された既定以外のアドレスから到着したデータグラムはすべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1382">If you do call <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="8ef83-1383">既定のリモートホストを変更する場合は、目的の<xref:System.Net.Sockets.Socket.ConnectAsync%2A>エンドポイントを使用してメソッドを再度呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1383">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="8ef83-1384">既定のリモートホストをブロードキャストアドレスに設定する場合は、まずを呼び出し<xref:System.Net.Sockets.Socket.SetSocketOption%2A> 、にブロードキャストを`true`設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1384">If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="8ef83-1385">この処理が行わ<xref:System.Net.Sockets.Socket.ConnectAsync%2A>れない場合、メソッドはを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1385">If this is not done, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-1386"><xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1386">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-1387">必要に応じて、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドが成功した後に、ソケットでアトミックに送信されるバッファーを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1387">Optionally, a buffer may be provided which will atomically be sent on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="8ef83-1388">この場合、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>プロパティは、送信するデータを格納するバッファーに設定する必要があります<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 。また、プロパティは、バッファーから送信するデータのバイト数に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1388">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the number of bytes of data to send from the buffer.</span></span> <span data-ttu-id="8ef83-1389">接続が確立されると、このバッファーのデータが送信されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1389">Once a connection is established, this buffer of data is sent.</span></span>  
  
 <span data-ttu-id="8ef83-1390">接続指向プロトコルを使用していて、を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.ConnectAsync%2A>前にを呼び出さない場合、基になるサービスプロバイダーによって、最も適切なローカルネットワークアドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1390">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span>  
  
 <span data-ttu-id="8ef83-1391">コネクションレスプロトコルを使用している場合、サービスプロバイダーは、メソッド<xref:System.Net.Sockets.Socket.SendAsync%2A>または<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッドを呼び出すまで、ローカルネットワークの IP アドレスとポート番号を割り当てません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1391">If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="8ef83-1392">との<xref:System.Net.Sockets.Socket.ConnectAsync%2A>アドレス<xref:System.NotSupportedException> ファミリ<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>が同じアドレスファミリでない場合、メソッドはをスローします。 <xref:System.Net.Sockets.Socket></span><span class="sxs-lookup"><span data-stu-id="8ef83-1392">The <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> are not the same address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1393">このメソッドの呼び出し<xref:System.Net.Sockets.SocketException>時にを受け取った場合は<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 、プロパティを使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1393">If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1394">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1394">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1395">引数が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1395">An argument is not valid.</span></span> <span data-ttu-id="8ef83-1396">この例外は、複数のバッファーが指定されているときに、<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティが null 値ではない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1396">This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1397"><paramref name="e" /> パラメーターおよび <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> を null 値にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1397">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1398"><see cref="T:System.Net.Sockets.Socket" /> がリッスンしているか、<paramref name="e" /> パラメーターで指定されている <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1398">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1399">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1399">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1400">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1400">Windows XP or later is required for this method.</span></span> <span data-ttu-id="8ef83-1401">この例外は、ローカル エンドポイントと <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> が同じアドレス ファミリではない場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1401">This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1402"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1402">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-1403">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1403">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public static bool ConnectAsync (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType, System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ConnectAsync(valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType, class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ConnectAsync(System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType, System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member ConnectAsync : System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType * System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="System.Net.Sockets.Socket.ConnectAsync (socketType, protocolType, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="socketType"><span data-ttu-id="8ef83-1404"><see cref="T:System.Net.Sockets.SocketType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1404">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span></span></param>
        <param name="protocolType"><span data-ttu-id="8ef83-1405"><see cref="T:System.Net.Sockets.ProtocolType" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1405">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span></span></param>
        <param name="e"><span data-ttu-id="8ef83-1406">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1406">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1407">リモート ホストに接続する非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1407">Begins an asynchronous request for a connection to a remote host.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1408">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1408"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-1409">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1409">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-1410">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1410"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-1411">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1411">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1412">接続指向プロトコルを使用している場合は、M:System.Net.Sockets.Socket.ConnectAsync (SocketAsyncEventArgs) メソッドによって、の非同期要求が開始されます。このメソッドは、の非同期要求を開始します。リモートホストへの接続。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1412">If you are using a connection-oriented protocol, the M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs) method starts an asynchronous request for a connection to the remote host.</span></span> <span data-ttu-id="8ef83-1413">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.ConnectAsync%2A>場合、は、パラメーター `socketType`と`protocolType`パラメーターで指定された既定のリモートホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1413">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.ConnectAsync%2A> establishes a default remote host specified by the `socketType` and `protocolType` parameters.</span></span>  
  
 <span data-ttu-id="8ef83-1414">完了が通知されるようにするには、EventHandler\<SocketAsyncEventArgs > delegate を実装するコールバックメソッドを作成し、そのコールバックを<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベントにアタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1414">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="8ef83-1415">呼び出し元は、接続<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>先のリモート<xref:System.Net.IPEndPoint>ホストのにプロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1415">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.</span></span>  
  
 <span data-ttu-id="8ef83-1416">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1416">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-1417">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1417">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-1418">UDP などのコネクションレスプロトコルを使用している場合は、データを送受信<xref:System.Net.Sockets.Socket.ConnectAsync%2A>する前にを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1418">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.ConnectAsync%2A> before sending and receiving data.</span></span> <span data-ttu-id="8ef83-1419"><xref:System.Net.Sockets.Socket.SendToAsync%2A> および<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>を使用して、リモートホストと通信することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1419">You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host.</span></span> <span data-ttu-id="8ef83-1420">を呼び出す<xref:System.Net.Sockets.Socket.ConnectAsync%2A>と、指定された既定以外のアドレスから到着したデータグラムはすべて破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1420">If you do call <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="8ef83-1421">既定のリモートホストを変更する場合は、目的の<xref:System.Net.Sockets.Socket.ConnectAsync%2A>エンドポイントを使用してメソッドを再度呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1421">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="8ef83-1422">既定のリモートホストをブロードキャストアドレスに設定する場合は、まずを呼び出し<xref:System.Net.Sockets.Socket.SetSocketOption%2A> 、にブロードキャストを`true`設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1422">If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="8ef83-1423">この処理が行わ<xref:System.Net.Sockets.Socket.ConnectAsync%2A>れない場合、メソッドはを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1423">If this is not done, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-1424"><xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1424">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-1425">必要に応じて、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドが成功した後に、ソケットでアトミックに送信されるバッファーを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1425">Optionally, a buffer may be provided which will atomically be sent on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="8ef83-1426">この場合、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>プロパティは、送信するデータを格納するバッファーに設定する必要があります<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 。また、プロパティは、バッファーから送信するデータのバイト数に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1426">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the number of bytes of data to send from the buffer.</span></span> <span data-ttu-id="8ef83-1427">接続が確立されると、このバッファーのデータが送信されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1427">Once a connection is established, this buffer of data is sent.</span></span>  
  
 <span data-ttu-id="8ef83-1428">接続指向プロトコルを使用していて、を呼び出す<xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.ConnectAsync%2A>前にを呼び出さない場合、基になるサービスプロバイダーによって、最も適切なローカルネットワークアドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1428">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span>  
  
 <span data-ttu-id="8ef83-1429">コネクションレスプロトコルを使用している場合、サービスプロバイダーは、メソッド<xref:System.Net.Sockets.Socket.SendAsync%2A>または<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッドを呼び出すまで、ローカルネットワークの IP アドレスとポート番号を割り当てません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1429">If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="8ef83-1430">との<xref:System.Net.Sockets.Socket.ConnectAsync%2A>アドレス<xref:System.NotSupportedException> ファミリ<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>が同じアドレスファミリでない場合、メソッドはをスローします。 <xref:System.Net.Sockets.Socket></span><span class="sxs-lookup"><span data-stu-id="8ef83-1430">The <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> are not the same address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1431">このメソッドの呼び出し<xref:System.Net.Sockets.SocketException>時にを受け取った場合は<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 、プロパティを使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1431">If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1432">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1432">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1433">引数が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1433">An argument is not valid.</span></span> <span data-ttu-id="8ef83-1434">この例外は、複数のバッファーが指定されているときに、<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティが null 値ではない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1434">This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1435"><paramref name="e" /> パラメーターおよび <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> を null 値にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1435">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1436"><see cref="T:System.Net.Sockets.Socket" /> がリッスンしているか、<paramref name="e" /> パラメーターで指定されている <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1436">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1437">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1437">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1438">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1438">Windows XP or later is required for this method.</span></span> <span data-ttu-id="8ef83-1439">この例外は、ローカル エンドポイントと <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> が同じアドレス ファミリではない場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1439">This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1440"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1440">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-1441">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1441">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Connected : bool" Usage="System.Net.Sockets.Socket.Connected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1442">最後に実行された <see cref="Overload:System.Net.Sockets.Socket.Send" /> 操作または <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 操作の時点で、<see cref="T:System.Net.Sockets.Socket" /> がリモート ホストに接続されていたかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1442">Gets a value that indicates whether a <see cref="T:System.Net.Sockets.Socket" /> is connected to a remote host as of the last <see cref="Overload:System.Net.Sockets.Socket.Send" /> or <see cref="Overload:System.Net.Sockets.Socket.Receive" /> operation.</span></span></summary>
        <value><span data-ttu-id="8ef83-1443">最後に実行された操作の時点で、<see cref="T:System.Net.Sockets.Socket" /> がリモート リソースに接続されていた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1443"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> was connected to a remote resource as of the most recent operation; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1444">プロパティ`Connected`は、 <xref:System.Net.Sockets.Socket>最後の i/o 操作時のの接続状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1444">The `Connected` property gets the connection state of the <xref:System.Net.Sockets.Socket> as of the last I/O operation.</span></span> <span data-ttu-id="8ef83-1445">が返さ`false`れた場合<xref:System.Net.Sockets.Socket> 、が接続されていないか、接続されていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1445">When it returns `false`, the <xref:System.Net.Sockets.Socket> was either never connected, or is no longer connected.</span></span>  
  
 <span data-ttu-id="8ef83-1446"><xref:System.Net.Sockets.Socket.Connected%2A>プロパティの値は、最新の操作での接続の状態を反映します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1446">The value of the <xref:System.Net.Sockets.Socket.Connected%2A> property reflects the state of the connection as of the most recent operation.</span></span> <span data-ttu-id="8ef83-1447">接続の現在の状態を確認する必要がある場合は、非ブロッキングのゼロバイトの送信呼び出しを行います。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1447">If you need to determine the current state of the connection, make a nonblocking, zero-byte Send call.</span></span> <span data-ttu-id="8ef83-1448">呼び出しが正常に返された場合、または WAEWOULDBLOCK エラーコード (10035) をスローした場合、ソケットはまだ接続されています。それ以外の場合、ソケットは接続されなくなります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1448">If the call returns successfully or throws a WAEWOULDBLOCK error code (10035), then the socket is still connected; otherwise, the socket is no longer connected.</span></span>  
  
 <span data-ttu-id="8ef83-1449">ユーザーデータグラムプロトコル<xref:System.Net.Sockets.Socket.Connect%2A> (udp) ソケットでを呼び出すと、プロパティ<xref:System.Net.Sockets.Socket.Connected%2A>は常に`true`を返します。ただし、この操作では、udp の固有のコネクションレス特性は変更されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1449">If you call <xref:System.Net.Sockets.Socket.Connect%2A> on a User Datagram Protocol (UDP) socket, the <xref:System.Net.Sockets.Socket.Connected%2A> property always returns `true`; however, this action does not change the inherent connectionless nature of UDP.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1450">次のコード例では、リモートエンドポイントに接続<xref:System.Net.Sockets.Socket.Connected%2A>し、プロパティをチェックして、接続の現在の状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1450">The following code example connects to a remote endpoint, checks the <xref:System.Net.Sockets.Socket.Connected%2A> property, and checks the current state of the connection.</span></span>  
  
 [!code-cpp[Classic Socket.Connect Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Connect Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Connect Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Connect Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Connect Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Connect Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public void Disconnect (bool reuseSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Disconnect(bool reuseSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Disconnect(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disconnect (reuseSocket As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Disconnect(bool reuseSocket);" />
      <MemberSignature Language="F#" Value="member this.Disconnect : bool -&gt; unit" Usage="socket.Disconnect reuseSocket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseSocket" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="reuseSocket"><span data-ttu-id="8ef83-1451">現在の接続の終了後、このソケットが再利用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1451"><see langword="true" /> if this socket can be reused after the current connection is closed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="8ef83-1452">ソケット接続を閉じ、ソケットを再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1452">Closes the socket connection and allows reuse of the socket.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1453">接続指向プロトコルを使用している場合は、このメソッドを使用してソケットを閉じることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1453">If you are using a connection-oriented protocol, you can use this method to close the socket.</span></span> <span data-ttu-id="8ef83-1454">このメソッドは接続を終了し、 <xref:System.Net.Sockets.Socket.Connected%2A>プロパティを`false`に設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1454">This method ends the connection and sets the <xref:System.Net.Sockets.Socket.Connected%2A> property to `false`.</span></span> <span data-ttu-id="8ef83-1455">ただし、が`reuseSocket` `true`の場合は、ソケットを再利用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1455">However, if `reuseSocket` is `true`, you can reuse the socket.</span></span>  
  
 <span data-ttu-id="8ef83-1456">ソケットが閉じられる前にすべてのデータが送受信されるようにするに<xref:System.Net.Sockets.Socket.Shutdown%2A>は、 <xref:System.Net.Sockets.Socket.Disconnect%2A>メソッドを呼び出す前にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1456">To ensure that all data is sent and received before the socket is closed, you should call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the <xref:System.Net.Sockets.Socket.Disconnect%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1457">を呼び<xref:System.Net.Sockets.Socket.Disconnect%2A>出さず<xref:System.Net.Sockets.Socket.Shutdown%2A>にを呼び出す必要がある場合は<xref:System.Net.Sockets.SocketOptionName.DontLinger> 、 <xref:System.Net.Sockets.Socket>オプション`false`をに設定し、ゼロ以外のタイムアウト間隔を指定して、送信用のキューに格納されたデータが送信されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1457">If you need to call <xref:System.Net.Sockets.Socket.Disconnect%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can set the <xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket> option to `false` and specify a nonzero time-out interval to ensure that data queued for outgoing transmission is sent.</span></span> <span data-ttu-id="8ef83-1458"><xref:System.Net.Sockets.Socket.Disconnect%2A>は、データが送信されるか、指定されたタイムアウトが経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1458"><xref:System.Net.Sockets.Socket.Disconnect%2A> then blocks until the data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="8ef83-1459">をに<xref:System.Net.Sockets.SocketOptionName.DontLinger> `false`設定し、タイムアウト間隔をゼロに指定すると<xref:System.Net.Sockets.Socket.Close%2A> 、によって接続が解放され、キューに置かれた送信データが自動的に破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1459">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1460">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1460">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1461">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1461">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1462">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1462">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1463">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1463">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1464">次のコード例では、同期通信用のソケットを作成し、いくつかのデータをリモートホストに送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1464">The following code example creates a socket for synchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="8ef83-1465">次に、 <xref:System.Net.Sockets.Socket.Shutdown%2A>を呼び出して、送信および受信アクティビティを停止<xref:System.Net.Sockets.Socket.Disconnect%2A>し、を呼び出してソケット接続を閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1465">It then calls <xref:System.Net.Sockets.Socket.Shutdown%2A>, to stop the send and receive activity, and <xref:System.Net.Sockets.Socket.Disconnect%2A>, to close the socket connection.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#12)]
 [!code-csharp[Nclsocketenhancements#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8ef83-1466">このメソッドは、Windows 2000 以前でのみサポートされます。それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1466">This method requires Windows 2000 or earlier, or the exception will be thrown.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1467"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1467">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1468">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1468">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DisconnectAsync">
      <MemberSignature Language="C#" Value="public bool DisconnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DisconnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisconnectAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DisconnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.DisconnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.DisconnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-1469">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1469">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1470">リモート エンドポイントからの切断の非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1470">Begins an asynchronous request to disconnect from a remote endpoint.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1471">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1471"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-1472">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1472">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-1473">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1473"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-1474">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1474">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1475">接続指向プロトコルを使用する場合、 <xref:System.Net.Sockets.Socket.DisconnectAsync%2A>メソッドを呼び出すと、リモートエンドポイントからの切断が要求されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1475">When using a connection-oriented protocol, calling the <xref:System.Net.Sockets.Socket.DisconnectAsync%2A> method requests a disconnect from a remote endpoint.</span></span> <span data-ttu-id="8ef83-1476">パラメーターで`true` <xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=nameWithType> をに設定した場合は、ソケットを再利用できます`e` 。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1476">If you set <xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=nameWithType> to `true` in the `e` parameter, the socket can be reused.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1477"><paramref name="e" /> パラメーターを null 値にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1477">The <paramref name="e" /> parameter cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1478"><paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1478">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1479">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1479">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1480"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1480">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1481">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1481">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1482"><see cref="T:System.Net.Sockets.Socket" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1482">Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="socket.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef83-1483"><see cref="T:System.Net.Sockets.Socket" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1483">Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1484"><xref:System.Net.Sockets.Socket> を使い終わったら、`Dispose`を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1484">Call `Dispose` when you are finished using the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1485">`Dispose`メソッドによって、<xref:System.Net.Sockets.Socket> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1485">The `Dispose` method leaves the <xref:System.Net.Sockets.Socket> in an unusable state.</span></span> <span data-ttu-id="8ef83-1486">`Dispose`呼び出し後は、<xref:System.Net.Sockets.Socket>によって占有されていたメモリをガベージ コレクターがクリアできるよう、<xref:System.Net.Sockets.Socket> へのすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1486">After calling `Dispose`, you must release all references to the <xref:System.Net.Sockets.Socket> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.Socket> was occupying.</span></span>  
  
 <span data-ttu-id="8ef83-1487">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1487">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1488"><xref:System.Net.Sockets.Socket>への最後の参照を解放する前に、必ず`Dispose`を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1488">Always call `Dispose` before you release your last reference to the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1489">そうしないと、ガベージ コレクターが <xref:System.Net.Sockets.Socket> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1489">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.Socket> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="socket.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="8ef83-1490">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1490"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="8ef83-1491"><see cref="T:System.Net.Sockets.Socket" /> が使用しているアンマネージド リソースを解放します。オプションでマネージド リソースも破棄します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1491">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1492">このメソッドは、パブリック`Dispose()`メソッド<xref:System.Object.Finalize%2A>とメソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1492">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="8ef83-1493">`Dispose()``disposing`パラメーターをに`Dispose(Boolean)` 設定して、保護されたメソッド`true`を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1493">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="8ef83-1494"><xref:System.Object.Finalize%2A>をに`disposing` `Dispose` 設定してを呼び出します`false`。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1494"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="8ef83-1495">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Net.Sockets.Socket> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1495">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.Socket> references.</span></span> <span data-ttu-id="8ef83-1496">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1496">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1497">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1497">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1498">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1498">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="8ef83-1499">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1499">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="8ef83-1500"><see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1500">When overriding <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="8ef83-1501">を実装<see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />する方法の詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1501">For more information about how to implement <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="8ef83-1502"><see langword="Dispose" /> および<see cref="M:System.Object.Finalize" />の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」と「 [Finalize メソッドのオーバーライド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1502">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.Socket.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1503"><see cref="T:System.Net.Sockets.Socket" /> でインターネット プロトコル (IP) データグラムの断片化を許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を、取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1503">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows Internet Protocol (IP) datagrams to be fragmented.</span></span></summary>
        <value><span data-ttu-id="8ef83-1504"><see cref="T:System.Net.Sockets.Socket" /> でデータグラムの断片化を許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1504"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows datagram fragmentation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8ef83-1505">既定値は、<see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1505">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1506">データグラムのサイズが、転送メディアの最大転送単位 (MTU) を超えると、断片化が必要になります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1506">Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.</span></span> <span data-ttu-id="8ef83-1507">送信ホスト (すべてのインターネットプロトコルバージョン) または中間ルーター (インターネットプロトコルバージョン4のみ) によって、データグラムが断片化される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1507">Datagrams may be fragmented by the sending host (all Internet Protocol versions) or an intermediate router (Internet Protocol Version 4 only).</span></span> <span data-ttu-id="8ef83-1508">データグラムをフラグメント<xref:System.Net.Sockets.Socket.DontFragment%2A>化する必要があり、オプションが設定されている場合、データグラムは破棄され、インターネット制御メッセージプロトコル (ICMP) のエラーメッセージがデータグラムの送信者に送り返されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1508">If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</span></span>  
  
 <span data-ttu-id="8ef83-1509">伝送制御プロトコル (TCP) ソケットでこのプロパティを設定しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1509">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1510">次のコード例は、 <xref:System.Net.Sockets.Socket.DontFragment%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1510">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1511">このプロパティは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ファミリまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットに対してだけ設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1511">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1512">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1512">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1513"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1513">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DualMode">
      <MemberSignature Language="C#" Value="public bool DualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DualMode" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.DualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DualMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DualMode : bool with get, set" Usage="System.Net.Sockets.Socket.DualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1514"><see cref="T:System.Boolean" /> が IPv4 と IPv6 の両方に使用されるデュアル モード ソケットであるかどうか指定する <see cref="T:System.Net.Sockets.Socket" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1514">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> is a dual-mode socket used for both IPv4 and IPv6.</span></span></summary>
        <value><span data-ttu-id="8ef83-1515"><see cref="T:System.Net.Sockets.Socket" /> がデュアルモードのソケットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1515"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> is a  dual-mode socket; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8ef83-1516">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1516">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DuplicateAndClose">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketInformation DuplicateAndClose (int targetProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Net.Sockets.SocketInformation DuplicateAndClose(int32 targetProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DuplicateAndClose (targetProcessId As Integer) As SocketInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::SocketInformation DuplicateAndClose(int targetProcessId);" />
      <MemberSignature Language="F#" Value="member this.DuplicateAndClose : int -&gt; System.Net.Sockets.SocketInformation" Usage="socket.DuplicateAndClose targetProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoLimitation("We do not support passing sockets across processes, we merely allow this API to pass the socket across AppDomains")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetProcessId" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="targetProcessId"><span data-ttu-id="8ef83-1517">ソケット参照の複製が作成されるターゲット プロセスの ID。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1517">The ID of the target process where a duplicate of the socket reference is created.</span></span></param>
        <summary><span data-ttu-id="8ef83-1518">ターゲット プロセスのソケット参照を複製してこのプロセスのソケットを閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1518">Duplicates the socket reference for the target process, and closes the socket for this process.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1519">ターゲット プロセスに渡されるソケット参照。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1519">The socket reference to be passed to the target process.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1520">ターゲットプロセスでは、 <xref:System.Net.Sockets.Socket.%23ctor%2A>を使用して、重複するソケットインスタンスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1520">The target process should use <xref:System.Net.Sockets.Socket.%23ctor%2A> to create the duplicate socket instance.</span></span>  
  
 <span data-ttu-id="8ef83-1521">各呼び出しの引数<xref:System.Net.Sockets.Socket.%23ctor%2A>と同じバイト配列を使用してコンストラクターを複数回呼び出す場合は、基になる同じ<xref:System.Net.Sockets.Socket>ソケットを使用して複数のマネージインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1521">If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket> instances with the same underlying socket.</span></span> <span data-ttu-id="8ef83-1522">この方法は推奨されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1522">This practice is strongly discouraged.</span></span>  
  
 <span data-ttu-id="8ef83-1523">ソケットを作成するプロセスで非同期メソッド (<xref:System.Net.Sockets.Socket.BeginReceive%2A>または<xref:System.Net.Sockets.Socket.BeginSend%2A>) が使用されている場合は、まず、この<xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A>プロパティを true に設定する必要があります。そうしないと、ソケットは作成プロセスの完了ポートにバインドされるため、<xref:System.ArgumentNullException>ターゲットプロセスでスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1523">If the process creating the socket uses asynchronous methods (<xref:System.Net.Sockets.Socket.BeginReceive%2A> or <xref:System.Net.Sockets.Socket.BeginSend%2A>), the process must first set the <xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A> property to true; otherwise, the socket is bound to the completion port of the creating process, which may cause an <xref:System.ArgumentNullException> to be thrown on the target process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1524"><paramref name="targetProcessID" /> が有効なプロセス ID ではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1524"><paramref name="targetProcessID" /> is not a valid process id.</span></span> 
<span data-ttu-id="8ef83-1525">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-1525">-or-</span></span> 
<span data-ttu-id="8ef83-1526">ソケット参照の複製に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1526">Duplication of the socket reference failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.Socket.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1527"><see cref="T:System.Net.Sockets.Socket" /> でブロードキャスト パケットの送受信を許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1527">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> can send or receive broadcast packets.</span></span></summary>
        <value><span data-ttu-id="8ef83-1528"><see cref="T:System.Net.Sockets.Socket" /> でブロードキャスト パケットを許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1528"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows broadcast packets; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8ef83-1529">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1529">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1530">ブロードキャストは特定のサブネットに限定され、ユーザーデータグラムプロトコル (UDP) を使用する必要があります。インターネットプロトコルバージョン4では、パケットを255.255.255.255 に送信してローカルサブネットにブロードキャストできます。または、宛先ブロードキャストアドレスを使用することもできます。これは、ホスト部分ですべてのビットが設定されたインターネットプロトコル (IP) アドレスのネットワーク部分です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1530">Broadcasting is limited to a specific subnet, and must use User Datagram Protocol (UDP.) For Internet Protocol version 4, you can broadcast to your local subnet by sending a packet to 255.255.255.255; or you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.</span></span> <span data-ttu-id="8ef83-1531">たとえば、IP アドレスが 192.168.1.40 (クラス C のアドレスで、ネットマスクが255.255.255.0 の場合) の場合、ネットワークの部分が最初の3つのオクテットで、ホストの部分が最後のオクテットである場合、転送先のブロードキャストアドレスは192.168.1.255 になります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1531">For example, if your IP address is 192.168.1.40 (a Class C address, with a netmask of 255.255.255.0 -- the network portion is the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</span></span>  
  
 <span data-ttu-id="8ef83-1532">伝送制御プロトコル (TCP) ソケットでこのプロパティを設定しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1532">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1533">次のコード例は、 <xref:System.Net.Sockets.Socket.EnableBroadcast%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1533">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.EnableBroadcast%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1534">このオプションは、データグラム ソケットに対してだけ有効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1534">This option is valid for a datagram socket only.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1535"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1535">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndAccept">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1536">受信接続の試行を非同期的に受け入れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1536">Asynchronously accepts an incoming connection attempt.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (out byte[] buffer, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept([out] unsigned int8[]&amp; buffer, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (ByRef buffer As Byte(), asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer, IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAccept :  * IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept (buffer, asyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-1537">転送されたバイト数を格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1537">An array of type <see cref="T:System.Byte" /> that contains the bytes transferred.</span></span></param>
        <param name="asyncResult"><span data-ttu-id="8ef83-1538">この非同期操作のステータス情報だけではなく、任意のユーザー定義のデータも格納する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1538">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation as well as any user defined data.</span></span></param>
        <summary><span data-ttu-id="8ef83-1539">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.Socket" /> オブジェクトを作成してリモート ホスト通信を処理します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1539">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> object to handle remote host communication.</span></span> <span data-ttu-id="8ef83-1540">このメソッドは、転送される初期データを格納するバッファーを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1540">This method returns a buffer that contains the initial data transferred.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1541">リモート ホストとの通信を処理する <see cref="T:System.Net.Sockets.Socket" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1541">A <see cref="T:System.Net.Sockets.Socket" /> object to handle communication with the remote host.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1542"><xref:System.Net.Sockets.Socket.EndAccept%2A>へ<xref:System.Net.Sockets.Socket.BeginAccept%2A>の呼び出しを完了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1542"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="8ef83-1543">を呼び出す<xref:System.Net.Sockets.Socket.BeginAccept%2A>前に、 <xref:System.AsyncCallback>デリゲートによって呼び出されるコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1543">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1544">このコールバックメソッドは、別のスレッドで実行され、メソッドから<xref:System.Net.Sockets.Socket.BeginAccept%2A>制御が戻った後、システムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1544">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span>  
  
 <span data-ttu-id="8ef83-1545">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> `asyncResult`パラメーターのメソッドを呼び出して、接続<xref:System.Net.Sockets.Socket>試行が行われているを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1545">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="8ef83-1546">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドを呼び出して、接続の試行を正常に完了することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1546">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span> <span data-ttu-id="8ef83-1547">このオーバーロードの<xref:System.Net.Sockets.Socket.BeginAccept%2A> `bytesTransferred`パラメーターには、の呼び出しで受信したデータが格納されます。このパラメーターには、呼び出しで転送されたバイト数が格納されます。 `buffer`</span><span class="sxs-lookup"><span data-stu-id="8ef83-1547">The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.</span></span>  
  
 <span data-ttu-id="8ef83-1548">メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>は、接続が受信接続キューで保留状態になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1548">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="8ef83-1549">メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>は、受信接続を受け入れ、リモートホスト<xref:System.Net.Sockets.Socket>との間でデータを送受信するために使用できる新しいを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1549">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1550">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1550">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1551">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1551">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1552">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1552">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1553">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1553">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1554">次のコード例で<xref:System.Net.Sockets.Socket.BeginAccept%2A>は、を使用してソケットを作成および接続し、最初の10バイトのデータを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1554">The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data.</span></span> <span data-ttu-id="8ef83-1555">コールバックデリゲートは<xref:System.Net.Sockets.Socket.EndAccept%2A> 、非同期要求を終了するためにを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1555">The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request.</span></span> <span data-ttu-id="8ef83-1556">転送されたバイト数とデータは、このメソッド`buffer`の`bytesTransferred`パラメーターとパラメーターで返され、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1556">The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1557">このメソッドには Windows NT が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1557">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1558"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1558">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1559"><paramref name="asyncResult" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1559"><paramref name="asyncResult" /> is empty.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1560"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1560"><paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1561"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> メソッドは既に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1561"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1562"><see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1562">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (asyncResult As IAsyncResult) As Socket" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (result As IAsyncResult) As Socket" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndAccept : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1563">この非同期操作のステータス情報だけではなく、任意のユーザー定義のデータも格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1563">An <see cref="T:System.IAsyncResult" /> that stores state information for this asynchronous operation as well as any user defined data.</span></span></param>
        <param name="result"><span data-ttu-id="8ef83-1564">この非同期操作のステータス情報だけではなく、任意のユーザー定義のデータも格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1564">An <see cref="T:System.IAsyncResult" /> that stores state information for this asynchronous operation as well as any user defined data.</span></span></param>
        <summary><span data-ttu-id="8ef83-1565">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.Socket" /> を作成してリモート ホスト通信を処理します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1565">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1566">リモート ホストとの通信を処理する <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1566">A <see cref="T:System.Net.Sockets.Socket" /> to handle communication with the remote host.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1567"><xref:System.Net.Sockets.Socket.EndAccept%2A>へ<xref:System.Net.Sockets.Socket.BeginAccept%2A>の呼び出しを完了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1567"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="8ef83-1568">を呼び出す<xref:System.Net.Sockets.Socket.BeginAccept%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1568">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1569">このコールバックメソッドは、別のスレッドで実行され、メソッドから<xref:System.Net.Sockets.Socket.BeginAccept%2A>制御が戻った後、システムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1569">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span> <span data-ttu-id="8ef83-1570">メソッドから返され`asyncResult`たパラメーターを受け入れる必要があります。 <xref:System.Net.Sockets.Socket.BeginAccept%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1570">It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1571">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> `asyncResult`パラメーターのメソッドを呼び出して、接続<xref:System.Net.Sockets.Socket>試行が行われているを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1571">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="8ef83-1572">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドを呼び出して、接続の試行を正常に完了することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1572">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span>  
  
 <span data-ttu-id="8ef83-1573">メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>は、接続が受信接続キューで保留状態になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1573">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="8ef83-1574">メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>は、受信接続を受け入れ、リモートホスト<xref:System.Net.Sockets.Socket>との間でデータを送受信するために使用できる新しいを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1574">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1575">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1575">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1576">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1576">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1577">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1577">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1578">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1578">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1579">次のコード例では、非同期要求を終了し<xref:System.Net.Sockets.Socket> 、受信接続要求を受け入れる新しいを作成します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1579">The following code example ends an asynchronous request and creates a new <xref:System.Net.Sockets.Socket> to accept an incoming connection request.</span></span> <span data-ttu-id="8ef83-1580">ソケットを使用した非同期通信を示す完全な例については、[ソケットのコード例](~/docs/framework/network-programming/socket-code-examples.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1580">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Async_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Async_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1581"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1581"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1582"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1582"><paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1583">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1583">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-1584">詳細については、次の「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1584">See the Remarks section for more information.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1585"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1585">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1586"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> メソッドは既に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1586"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1587">このメソッドには Windows NT が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1587">Windows NT is required for this method.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept([out] unsigned int8[]&amp; buffer, [out] int32&amp; bytesTransferred, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (ByRef buffer As Byte(), ByRef bytesTransferred As Integer, asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer, [Runtime::InteropServices::Out] int % bytesTransferred, IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAccept :  *  * IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept (buffer, bytesTransferred, asyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" RefType="out" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="bytesTransferred" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-1588">転送されたバイト数を格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1588">An array of type <see cref="T:System.Byte" /> that contains the bytes transferred.</span></span></param>
        <param name="bytesTransferred"><span data-ttu-id="8ef83-1589">転送されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1589">The number of bytes transferred.</span></span></param>
        <param name="asyncResult"><span data-ttu-id="8ef83-1590">この非同期操作のステータス情報だけではなく、任意のユーザー定義のデータも格納する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1590">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation as well as any user defined data.</span></span></param>
        <summary><span data-ttu-id="8ef83-1591">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.Socket" /> オブジェクトを作成してリモート ホスト通信を処理します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1591">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> object to handle remote host communication.</span></span> <span data-ttu-id="8ef83-1592">このメソッドは、初期データと、転送されたバイト数を格納するバッファーを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1592">This method returns a buffer that contains the initial data and the number of bytes transferred.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1593">リモート ホストとの通信を処理する <see cref="T:System.Net.Sockets.Socket" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1593">A <see cref="T:System.Net.Sockets.Socket" /> object to handle communication with the remote host.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1594"><xref:System.Net.Sockets.Socket.EndAccept%2A>へ<xref:System.Net.Sockets.Socket.BeginAccept%2A>の呼び出しを完了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1594"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="8ef83-1595">を呼び出す<xref:System.Net.Sockets.Socket.BeginAccept%2A>前に、 <xref:System.AsyncCallback>デリゲートによって呼び出されるコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1595">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1596">このコールバックメソッドは、別のスレッドで実行され、メソッドから<xref:System.Net.Sockets.Socket.BeginAccept%2A>制御が戻った後、システムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1596">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span> <span data-ttu-id="8ef83-1597">メソッドから返され`asyncResult`たパラメーターを受け入れる必要があります。 <xref:System.Net.Sockets.Socket.BeginAccept%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1597">It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1598">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> `asyncResult`パラメーターのメソッドを呼び出して、接続<xref:System.Net.Sockets.Socket>試行が行われているを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1598">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="8ef83-1599">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドを呼び出して、接続の試行を正常に完了することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1599">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span> <span data-ttu-id="8ef83-1600">このオーバーロードの<xref:System.Net.Sockets.Socket.BeginAccept%2A> `bytesTransferred`パラメーターには、の呼び出しで受信したデータが格納されます。このパラメーターには、呼び出しで転送されたバイト数が格納されます。 `buffer`</span><span class="sxs-lookup"><span data-stu-id="8ef83-1600">The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.</span></span>  
  
 <span data-ttu-id="8ef83-1601">メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>は、接続が受信接続キューで保留状態になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1601">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="8ef83-1602">メソッド<xref:System.Net.Sockets.Socket.EndAccept%2A>は、受信接続を受け入れ、リモートホスト<xref:System.Net.Sockets.Socket>との間でデータを送受信するために使用できる新しいを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1602">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1603">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1603">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1604">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1604">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1605">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1605">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1606">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1606">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1607">次のコード例で<xref:System.Net.Sockets.Socket.BeginAccept%2A>は、を使用してソケットを作成および接続し、最初の10バイトのデータを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1607">The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data.</span></span> <span data-ttu-id="8ef83-1608">コールバックデリゲートは<xref:System.Net.Sockets.Socket.EndAccept%2A> 、非同期要求を終了するためにを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1608">The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request.</span></span> <span data-ttu-id="8ef83-1609">転送されたバイト数とデータは、このメソッド`buffer`の`bytesTransferred`パラメーターとパラメーターで返され、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1609">The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1610">このメソッドには Windows NT が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1610">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1611"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1611">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1612"><paramref name="asyncResult" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1612"><paramref name="asyncResult" /> is empty.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1613"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1613"><paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1614"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> メソッドは既に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1614"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1615"><see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1615">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (result As IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndConnect : IAsyncResult -&gt; unit" Usage="socket.EndConnect result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1616">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1616">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="result"><span data-ttu-id="8ef83-1617">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1617">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1618">保留中の非同期接続要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1618">Ends a pending asynchronous connection request.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1619"><xref:System.Net.Sockets.Socket.EndConnect%2A>は、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドで開始された非同期リモートホスト接続要求を完了するブロッキングメソッドです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1619"><xref:System.Net.Sockets.Socket.EndConnect%2A> is a blocking method that completes the asynchronous remote host connection request started in the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1620">を呼び出す<xref:System.Net.Sockets.Socket.BeginConnect%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1620">Before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1621">このコールバックメソッドは、別のスレッドで実行され、が<xref:System.Net.Sockets.Socket.BeginConnect%2A>返された後にシステムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1621">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginConnect%2A> returns.</span></span> <span data-ttu-id="8ef83-1622">コールバックメソッドは、パラメーター <xref:System.IAsyncResult>として<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドによって返されたを受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1622">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1623">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> <xref:System.IAsyncResult>パラメーターのメソッドを呼び出して、接続<xref:System.Net.Sockets.Socket>試行が行われているを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1623">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="8ef83-1624">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドを呼び出して、接続の試行を正常に完了することができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1624">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndConnect%2A> method to successfully complete the connection attempt.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1625">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1625">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1626">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1626">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1627">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1627">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1628">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1628">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1629">次のコード例では、非同期接続の試行を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1629">The following code example ends the asynchronous connection attempt.</span></span> <span data-ttu-id="8ef83-1630">ソケットを使用した非同期通信を示す完全な例については、[ソケットのコード例](~/docs/framework/network-programming/socket-code-examples.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1630">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Async_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Async_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1631"><paramref name="asyncResult" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1631"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1632"><see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1632"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1633"><see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" /> は、非同期接続のために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1633"><see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" /> was previously called for the asynchronous connection.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1634">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1634">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1635"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1635">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="EndDisconnect">
      <MemberSignature Language="C#" Value="public void EndDisconnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndDisconnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndDisconnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndDisconnect(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndDisconnect : IAsyncResult -&gt; unit" Usage="socket.EndDisconnect asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1636">この非同期操作のステータス情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1636">An <see cref="T:System.IAsyncResult" /> object that stores state information and any user-defined data for this asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1637">保留中の非同期切断要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1637">Ends a pending asynchronous disconnect request.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1638"><xref:System.Net.Sockets.Socket.EndDisconnect%2A>へ<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>の呼び出しを完了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1638"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginDisconnect%2A>.</span></span> <span data-ttu-id="8ef83-1639">メソッド<xref:System.Net.Sockets.Socket.EndDisconnect%2A>は、切断が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1639">The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the disconnect completes.</span></span> <span data-ttu-id="8ef83-1640">非同期操作の詳細については、MSDN ライブラリの「非同期プログラミングの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1640">For information about asynchronous operations, see the Asynchronous Programming Overview topic in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1641">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1641">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1642">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1642">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1643">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1643">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1644">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1644">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1645">次のコード例では、非同期通信用のソケットを作成し、いくつかのデータをリモートホストに送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1645">The following code example creates a socket for asynchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="8ef83-1646">データが送信されると、 <xref:System.Net.Sockets.Socket.Shutdown%2A>が呼び出され、送信と受信のアクティビティを停止します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1646">When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity.</span></span> <span data-ttu-id="8ef83-1647">次<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>に、が呼び出され、切断要求が開始されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1647">Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request.</span></span> <span data-ttu-id="8ef83-1648">コールバックデリゲートは<xref:System.Net.Sockets.Socket.EndDisconnect%2A> 、非同期要求を終了するためにを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1648">The callback delegate calls <xref:System.Net.Sockets.Socket.EndDisconnect%2A> to end the asynchronous request.</span></span> <span data-ttu-id="8ef83-1649">要求が完了すると、 <xref:System.Net.Sockets.Socket.Connected%2A>プロパティが照会され、ソケットが切断されているかどうかがテストされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1649">When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#11)]
 [!code-csharp[Nclsocketenhancements#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1650">Windows 2000 以前のオペレーティング システムです。このメソッドを使用するには、Windows XP が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1650">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1651"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1651">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1652"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1652"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1653"><see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1653"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1654"><see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" /> は、非同期接続のために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1654"><see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" /> was previously called for the asynchronous connection.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1655">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1655">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.Net.WebException"><span data-ttu-id="8ef83-1656">切断要求がタイムアウトしました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1656">The disconnect request has timed out.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndReceive">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1657">保留中の非同期読み取りを終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1657">Ends a pending asynchronous read.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult -&gt; int" Usage="socket.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1658">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1658">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="result"><span data-ttu-id="8ef83-1659">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1659">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1660">保留中の非同期読み取りを終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1660">Ends a pending asynchronous read.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1661">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1661">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1662">メソッドは、 <xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドで開始された非同期の読み取り操作を完了します。 <xref:System.Net.Sockets.Socket.EndReceive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1662">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1663">を呼び出す<xref:System.Net.Sockets.Socket.BeginReceive%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1663">Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1664">このコールバックメソッドは、別のスレッドで実行され、が<xref:System.Net.Sockets.Socket.BeginReceive%2A>返された後にシステムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1664">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="8ef83-1665">コールバックメソッドは、パラメーター <xref:System.IAsyncResult>として<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドによって返されたを受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1665">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1666">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> <xref:System.IAsyncResult>のメソッドを呼び出して、 <xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドに渡される状態オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1666">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="8ef83-1667">この状態オブジェクト<xref:System.Net.Sockets.Socket>から受信を抽出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1667">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="8ef83-1668">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドを呼び出して、読み取り操作を正常に完了し、読み取ったバイト数を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1668">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="8ef83-1669">メソッド<xref:System.Net.Sockets.Socket.EndReceive%2A>は、データが使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1669">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available.</span></span> <span data-ttu-id="8ef83-1670">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.EndReceive%2A>場合、は、受信ネットワークバッファーで使用可能な最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1670">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="8ef83-1671">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドは、 <xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドの`size`パラメーターで指定したバイト数まで、使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1671">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="8ef83-1672">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.EndReceive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1672">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-1673">受信したデータを取得するに<xref:System.IAsyncResult.AsyncState%2A>は<xref:System.IAsyncResult>、のメソッドを呼び出し、結果の状態オブジェクトに格納されているバッファーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1673">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.</span></span>  
  
 <span data-ttu-id="8ef83-1674">保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>のを取り消すには<xref:System.Net.Sockets.Socket.Close%2A> 、メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1674">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1675">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1675">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1676">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1676">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1677">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1677">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-1678">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1678">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1679">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1679">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1680">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1680">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1681">次のコード例では、保留中の非同期読み取りを終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1681">The following code example ends a pending asynchronous read.</span></span> <span data-ttu-id="8ef83-1682">ソケットを使用した非同期通信を示す完全な例については、[ソケットのコード例](~/docs/framework/network-programming/socket-code-examples.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1682">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Async_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Async_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1683"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1683"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1684"><see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1684"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1685"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> が、非同期の読み取りのために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1685"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1686">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1686">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1687"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1687">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult asyncResult, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef errorCode As SocketError) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult *  -&gt; int" Usage="socket.EndReceive (asyncResult, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1688">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1688">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-1689">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1689">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="8ef83-1690">保留中の非同期読み取りを終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1690">Ends a pending asynchronous read.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1691">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1691">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1692">メソッドは、 <xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドで開始された非同期の読み取り操作を完了します。 <xref:System.Net.Sockets.Socket.EndReceive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1692">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1693">を呼び出す<xref:System.Net.Sockets.Socket.BeginReceive%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1693">Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1694">このコールバックメソッドは、別のスレッドで実行され、が<xref:System.Net.Sockets.Socket.BeginReceive%2A>返された後にシステムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1694">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="8ef83-1695">コールバックメソッドは、パラメーター <xref:System.IAsyncResult>として<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドによって返されたを受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1695">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1696">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> <xref:System.IAsyncResult>のメソッドを呼び出して、 <xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドに渡される状態オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1696">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="8ef83-1697">この状態オブジェクト<xref:System.Net.Sockets.Socket>から受信を抽出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1697">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="8ef83-1698">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドを呼び出して、読み取り操作を正常に完了し、読み取ったバイト数を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1698">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="8ef83-1699">メソッド<xref:System.Net.Sockets.Socket.EndReceive%2A>は、データが使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1699">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available.</span></span> <span data-ttu-id="8ef83-1700">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.EndReceive%2A>場合、は、受信ネットワークバッファーで使用可能な最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1700">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="8ef83-1701">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドは、 <xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドの`size`パラメーターで指定したバイト数まで、使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1701">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="8ef83-1702">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.EndReceive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1702">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-1703">受信したデータを取得するに<xref:System.IAsyncResult.AsyncState%2A>は<xref:System.IAsyncResult>、のメソッドを呼び出し、結果の状態オブジェクトに格納されているバッファーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1703">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1704">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1704">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1705">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1705">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1706">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1706">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-1707">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1707">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1708">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1708">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1709">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1709">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1710"><paramref name="asyncResult" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1710"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1711"><see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1711"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1712"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> が、非同期の読み取りのために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1712"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1713">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1713">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1714"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1714">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFrom">
      <MemberSignature Language="C#" Value="public int EndReceiveFrom (IAsyncResult asyncResult, ref System.Net.EndPoint endPoint);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFrom(class System.IAsyncResult asyncResult, class System.Net.EndPoint&amp; endPoint) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFrom (asyncResult As IAsyncResult, ByRef endPoint As EndPoint) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFrom(IAsyncResult ^ asyncResult, System::Net::EndPoint ^ % endPoint);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public int EndReceiveFrom (IAsyncResult result, ref System.Net.EndPoint end_point);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFrom(class System.IAsyncResult result, class System.Net.EndPoint&amp; end_point) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFrom (result As IAsyncResult, ByRef end_point As EndPoint) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFrom(IAsyncResult ^ result, System::Net::EndPoint ^ % end_point);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFrom : IAsyncResult *  -&gt; int" Usage="socket.EndReceiveFrom (result, end_point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint" RefType="ref" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="end_point" Type="System.Net.EndPoint" RefType="ref" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1715">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1715">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="result"><span data-ttu-id="8ef83-1716">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1716">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="endPoint"><span data-ttu-id="8ef83-1717">コピー元 <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1717">The source <see cref="T:System.Net.EndPoint" />.</span></span></param>
        <param name="end_point"><span data-ttu-id="8ef83-1718">コピー元 <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1718">The source <see cref="T:System.Net.EndPoint" />.</span></span></param>
        <summary><span data-ttu-id="8ef83-1719">特定のエンドポイントからの、保留中の非同期読み込みを終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1719">Ends a pending asynchronous read from a specific endpoint.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1720">正常に完了した場合は、受信したバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1720">If successful, the number of bytes received.</span></span> <span data-ttu-id="8ef83-1721">失敗した場合は、0 を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1721">If unsuccessful, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1722">メソッドは、 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドで開始された非同期の読み取り操作を完了します。 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-1722">The <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1723">を呼び出す<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1723">Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1724">このコールバックメソッドは、別のスレッドで実行され、が<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>返された後にシステムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1724">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> returns.</span></span> <span data-ttu-id="8ef83-1725">コールバックメソッドは、パラメーター <xref:System.IAsyncResult>として<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドによって返されたを受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1725">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1726">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> <xref:System.IAsyncResult>のメソッドを呼び出して、 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドに渡される状態オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1726">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-1727">この状態オブジェクト<xref:System.Net.Sockets.Socket>から受信を抽出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1727">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="8ef83-1728">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>メソッドを呼び出して、読み取り操作を正常に完了し、読み取ったバイト数を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1728">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="8ef83-1729">メソッド<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>は、データが使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1729">The <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="8ef83-1730">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>場合、は、受信ネットワークバッファーで使用可能な最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1730">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="8ef83-1731">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>メソッドは、 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドの`size`パラメーターで指定したバイト数まで、使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1731">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-1732">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1732">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span> <span data-ttu-id="8ef83-1733">受信したデータを取得するに<xref:System.IAsyncResult.AsyncState%2A>は、 <xref:System.IAsyncResult>オブジェクトのメソッドを呼び出し、結果の状態オブジェクトに格納されているバッファーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1733">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> object, and extract the buffer contained in the resulting state object.</span></span> <span data-ttu-id="8ef83-1734">元のホストを特定するには<xref:System.Net.EndPoint> 、を抽出し、 <xref:System.Net.IPEndPoint>にキャストします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1734">To identify the originating host, extract the <xref:System.Net.EndPoint> and cast it to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="8ef83-1735">メソッドを使用して、IP アドレス<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>を取得し、メソッドを使用してポート番号を取得します。 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8ef83-1735">Use the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to obtain the IP address and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to obtain the port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1736">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1736">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1737">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1737">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1738">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1738">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1739">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1739">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1740">次のコード例では、特定<xref:System.Net.EndPoint>のからの保留中の非同期読み取りを終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1740">The following code example ends a pending asynchronous read from a specific <xref:System.Net.EndPoint>.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#10)]
 [!code-csharp[Socket_Async_Send_Receive#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#10)]
 [!code-vb[Socket_Async_Send_Receive#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1741"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1741"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1742"><see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1742"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1743"><see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> が、非同期の読み取りのために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1743"><see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1744">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1744">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1745"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1745">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public int EndReceiveMessageFrom (IAsyncResult asyncResult, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint endPoint, out System.Net.Sockets.IPPacketInformation ipPacketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveMessageFrom(class System.IAsyncResult asyncResult, valuetype System.Net.Sockets.SocketFlags&amp; socketFlags, class System.Net.EndPoint&amp; endPoint, [out] valuetype System.Net.Sockets.IPPacketInformation&amp; ipPacketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveMessageFrom (asyncResult As IAsyncResult, ByRef socketFlags As SocketFlags, ByRef endPoint As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveMessageFrom(IAsyncResult ^ asyncResult, System::Net::Sockets::SocketFlags % socketFlags, System::Net::EndPoint ^ % endPoint, [Runtime::InteropServices::Out] System::Net::Sockets::IPPacketInformation % ipPacketInformation);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveMessageFrom : IAsyncResult *  *  *  -&gt; int" Usage="socket.EndReceiveMessageFrom (asyncResult, socketFlags, endPoint, ipPacketInformation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" RefType="ref" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint" RefType="ref" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ipPacketInformation" Type="System.Net.Sockets.IPPacketInformation" RefType="out" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1746">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1746">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-1747">受信パケットの <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1747">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values for the received packet.</span></span></param>
        <param name="endPoint"><span data-ttu-id="8ef83-1748">コピー元 <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1748">The source <see cref="T:System.Net.EndPoint" />.</span></span></param>
        <param name="ipPacketInformation"><span data-ttu-id="8ef83-1749">受信パケットの <see cref="T:System.Net.IPAddress" /> とインターフェイス。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1749">The <see cref="T:System.Net.IPAddress" /> and interface of the received packet.</span></span></param>
        <summary><span data-ttu-id="8ef83-1750">特定のエンドポイントからの、保留中の非同期読み込みを終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1750">Ends a pending asynchronous read from a specific endpoint.</span></span> <span data-ttu-id="8ef83-1751">また、このメソッドは、<see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> よりもパケットに関するより多くの情報を示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1751">This method also reveals more information about the packet than <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1752">正常に完了した場合は、受信したバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1752">If successful, the number of bytes received.</span></span> <span data-ttu-id="8ef83-1753">失敗した場合は、0 を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1753">If unsuccessful, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1754">操作が完了していない場合、このメソッドは、処理が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1754">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="8ef83-1755">この操作を同期的に実行する<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>には、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1755">To perform this operation synchronously, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-1756">データグラム`ipPacketInformation`がユニキャスト、マルチキャスト、またはブロードキャストアドレスを使用して送信されたかどうかを確認する必要があるかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1756">Examine `ipPacketInformation` if you need to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1757"><paramref name="asyncResult" /> は <see langword="null" /> です</span><span class="sxs-lookup"><span data-stu-id="8ef83-1757"><paramref name="asyncResult" /> is <see langword="null" /></span></span>  
  
<span data-ttu-id="8ef83-1758">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-1758">-or-</span></span> 
 <span data-ttu-id="8ef83-1759"><paramref name="endPoint" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1759"><paramref name="endPoint" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1760"><see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1760"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1761"><see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> が、非同期の読み取りのために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1761"><see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1762">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1762">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1763"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1763">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1764">保留中の非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1764">Ends a pending asynchronous send.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="socket.EndSend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1765">この非同期操作の状態情報を格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1765">An <see cref="T:System.IAsyncResult" /> that stores state information for this asynchronous operation.</span></span></param>
        <param name="result"><span data-ttu-id="8ef83-1766">この非同期操作の状態情報を格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1766">An <see cref="T:System.IAsyncResult" /> that stores state information for this asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1767">保留中の非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1767">Ends a pending asynchronous send.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1768">正常に終了した場合は <see cref="T:System.Net.Sockets.Socket" /> に送信したバイト数。それ以外の場合は無効な <see cref="T:System.Net.Sockets.Socket" /> エラー。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1768">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1769"><xref:System.Net.Sockets.Socket.EndSend%2A>で<xref:System.Net.Sockets.Socket.BeginSend%2A>開始された非同期の送信操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1769"><xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-1770">を呼び出す<xref:System.Net.Sockets.Socket.BeginSend%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1770">Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1771">このコールバックメソッドは、別のスレッドで実行され、が<xref:System.Net.Sockets.Socket.BeginSend%2A>返された後にシステムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1771">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns.</span></span> <span data-ttu-id="8ef83-1772">コールバックメソッドは、パラメーター <xref:System.IAsyncResult>として<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドによって返されたを受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1772">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1773">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> <xref:System.IAsyncResult>パラメーターのメソッドを呼び出して、送信元<xref:System.Net.Sockets.Socket>を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1773">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1774">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndSend%2A>メソッドを呼び出して送信操作を正常に完了し、送信されたバイト数を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1774">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="8ef83-1775">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.EndSend%2A>場合、はデータグラムが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1775">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="8ef83-1776">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.EndSend%2A>は一部のバッファーが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1776">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent.</span></span> <span data-ttu-id="8ef83-1777">からの<xref:System.Net.Sockets.Socket.EndSend%2A>戻り値が、バッファーが完全には送信されてい<xref:System.Net.Sockets.Socket.BeginSend%2A>ないことを示している場合は、メソッドを再度呼び出して、未送信データを保持するようにバッファーを変更します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1777">If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.</span></span>  
  
 <span data-ttu-id="8ef83-1778">送信したデータがネットワークに直ちに表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1778">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-1779">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1779">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-1780"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1780">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1781">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1781">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1782">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1782">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1783">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1783">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-1784">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1784">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1785">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1785">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-1786">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1786">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1787">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1787">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1788">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1788">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1789">次のコード例では、保留中の非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1789">The following code example ends a pending asynchronous send.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#6)]
 [!code-csharp[Socket_Async_Send_Receive#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#6)]
 [!code-vb[Socket_Async_Send_Receive#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1790"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1790"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1791"><see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1791"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1792"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> が、非同期送信のために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1792"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous send.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1793">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1793">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1794"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1794">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.NoDelay" />
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult, ByRef errorCode As SocketError) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult *  -&gt; int" Usage="socket.EndSend (asyncResult, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1795">この非同期操作の状態情報を格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1795">An <see cref="T:System.IAsyncResult" /> that stores state information for this asynchronous operation.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-1796">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1796">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="8ef83-1797">保留中の非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1797">Ends a pending asynchronous send.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1798">正常に終了した場合は <see cref="T:System.Net.Sockets.Socket" /> に送信したバイト数。それ以外の場合は無効な <see cref="T:System.Net.Sockets.Socket" /> エラー。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1798">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1799"><xref:System.Net.Sockets.Socket.EndSend%2A>で<xref:System.Net.Sockets.Socket.BeginSend%2A>開始された非同期の送信操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1799"><xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-1800">を呼び出す<xref:System.Net.Sockets.Socket.BeginSend%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1800">Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1801">このコールバックメソッドは、別のスレッドで実行され、が<xref:System.Net.Sockets.Socket.BeginSend%2A>返された後にシステムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1801">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns.</span></span> <span data-ttu-id="8ef83-1802">コールバックメソッドは、パラメーター <xref:System.IAsyncResult>として<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドによって返されたを受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1802">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1803">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> <xref:System.IAsyncResult>パラメーターのメソッドを呼び出して、送信元<xref:System.Net.Sockets.Socket>を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1803">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1804">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndSend%2A>メソッドを呼び出して送信操作を正常に完了し、送信されたバイト数を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1804">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="8ef83-1805">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.EndSend%2A>場合、はデータグラムが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1805">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="8ef83-1806">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.EndSend%2A>は一部のバッファーが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1806">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent.</span></span> <span data-ttu-id="8ef83-1807">からの<xref:System.Net.Sockets.Socket.EndSend%2A>戻り値が、バッファーが完全には送信されてい<xref:System.Net.Sockets.Socket.BeginSend%2A>ないことを示している場合は、メソッドを再度呼び出して、未送信データを保持するようにバッファーを変更します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1807">If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.</span></span>  
  
 <span data-ttu-id="8ef83-1808">送信したデータがネットワークに直ちに表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1808">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-1809">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1809">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-1810"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1810">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1811">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1811">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1812">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1812">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1813">特定のスレッドによって開始されるすべての i/o は、そのスレッドが終了すると取り消されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1813">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="8ef83-1814">保留中の非同期操作は、操作が完了する前にスレッドが終了した場合に失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1814">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1815">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1815">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-1816">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1816">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1817">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1817">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1818">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1818">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1819"><paramref name="asyncResult" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1819"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1820"><see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1820"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1821"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> が、非同期送信のために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1821"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous send.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1822">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1822">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1823"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1823">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.NoDelay" />
      </Docs>
    </Member>
    <Member MemberName="EndSendFile">
      <MemberSignature Language="C#" Value="public void EndSendFile (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendFile(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendFile (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendFile(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSendFile : IAsyncResult -&gt; unit" Usage="socket.EndSendFile asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1824">この非同期操作の状態情報を格納する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1824">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1825">ファイルの保留中の非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1825">Ends a pending asynchronous send of a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1826"><xref:System.Net.Sockets.Socket.EndSendFile%2A>で<xref:System.Net.Sockets.Socket.BeginSendFile%2A>開始された非同期の送信操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1826"><xref:System.Net.Sockets.Socket.EndSendFile%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendFile%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-1827">を呼び出す<xref:System.Net.Sockets.Socket.BeginSendFile%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1827">Before calling <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, you must create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1828">このコールバックメソッドは、別のスレッドで実行され、が<xref:System.Net.Sockets.Socket.BeginSendFile%2A>返された後にシステムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1828">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSendFile%2A> returns.</span></span> <span data-ttu-id="8ef83-1829">コールバックメソッドは、パラメーター <xref:System.IAsyncResult>として<xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドによって返されたオブジェクトを受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1829">The callback method must accept the <xref:System.IAsyncResult> object returned by the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1830">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> <xref:System.IAsyncResult>パラメーターのメソッドを呼び出して、送信元<xref:System.Net.Sockets.Socket>を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1830">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1831">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndSendFile%2A>メソッドを呼び出して、送信操作を正常に完了できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1831">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method to successfully complete the send operation.</span></span>  
  
 <span data-ttu-id="8ef83-1832">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.EndSendFile%2A>場合、はデータグラムが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1832">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSendFile%2A> blocks until the datagram is sent.</span></span> <span data-ttu-id="8ef83-1833">接続指向プロトコルを使用している場合は<xref:System.Net.Sockets.Socket.EndSendFile%2A> 、ファイル全体が送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1833">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSendFile%2A> blocks until the entire file is sent.</span></span> <span data-ttu-id="8ef83-1834">送信したデータがネットワークに直ちに表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1834">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-1835">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1835">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-1836"><xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1836">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1837">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1837">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1838">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1838">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1839">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1839">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1840">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1840">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1841">次のコード例では、非同期通信用のソケットを作成して接続し、リモートホストへのファイル "test.txt" の非同期送信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1841">The following code example creates and connects a socket for asynchronous communication and begins sending the file "text.txt" asynchronously to the remote host.</span></span> <span data-ttu-id="8ef83-1842">コールバックデリゲートは<xref:System.Net.Sockets.Socket.EndSendFile%2A> 、転送を完了するためにを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1842">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#9)]
 [!code-csharp[NCLSocketEnhancements#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-1843">このメソッドには Windows NT が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1843">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1844"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1844">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1845"><paramref name="asyncResult" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1845"><paramref name="asyncResult" /> is empty.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1846"><see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1846"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1847"><see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> が、非同期の <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> のために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1847"><see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> was previously called for the asynchronous <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1848">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1848">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-1849">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1849">See remarks section below.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendTo">
      <MemberSignature Language="C#" Value="public int EndSendTo (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSendTo(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendTo (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSendTo(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
      <MemberSignature Language="C#" Value="public int EndSendTo (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSendTo(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendTo (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSendTo(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndSendTo : IAsyncResult -&gt; int" Usage="socket.EndSendTo result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="8ef83-1850">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1850">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="result"><span data-ttu-id="8ef83-1851">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1851">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1852">特定の場所への、保留中の非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1852">Ends a pending asynchronous send to a specific location.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1853">正常に完了した場合は送信したバイト数。それ以外の場合は無効な <see cref="T:System.Net.Sockets.Socket" /> エラー。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1853">If successful, the number of bytes sent; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1854"><xref:System.Net.Sockets.Socket.EndSendTo%2A>で<xref:System.Net.Sockets.Socket.BeginSendTo%2A>開始された非同期の送信操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1854"><xref:System.Net.Sockets.Socket.EndSendTo%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-1855">を呼び出す<xref:System.Net.Sockets.Socket.BeginSendTo%2A>前に、 <xref:System.AsyncCallback>デリゲートを実装するコールバックメソッドを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1855">Before calling <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="8ef83-1856">このコールバックメソッドは、別のスレッドで実行され、が<xref:System.Net.Sockets.Socket.BeginReceive%2A>返された後にシステムによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1856">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="8ef83-1857">コールバックメソッドは、パラメーター <xref:System.IAsyncResult>として<xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドによって返されたを受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1857">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="8ef83-1858">コールバックメソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> <xref:System.IAsyncResult>パラメーターのメソッドを呼び出して、送信元<xref:System.Net.Sockets.Socket>を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1858">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1859">を取得<xref:System.Net.Sockets.Socket>した後、 <xref:System.Net.Sockets.Socket.EndSendTo%2A>メソッドを呼び出して送信操作を正常に完了し、送信されたバイト数を返すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1859">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="8ef83-1860">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.EndSendTo%2A>場合、はデータグラムが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1860">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="8ef83-1861">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.EndSendTo%2A>は、要求されたバイト数が送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1861">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSendTo%2A> will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="8ef83-1862">送信したデータがネットワークに直ちに表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1862">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-1863">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1863">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-1864"><xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1864">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1865">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1865">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1866">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1866">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1867">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1867">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1868">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1868">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1869">次のコード例では、特定の場所への非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1869">The following code example ends an asynchronous send to a specific location.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#9)]
 [!code-csharp[Socket_Async_Send_Receive#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#9)]
 [!code-vb[Socket_Async_Send_Receive#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-1870"><paramref name="asyncResult" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1870"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-1871"><see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1871"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1872"><see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" /> が、非同期送信のために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1872"><see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" /> was previously called for the asynchronous send.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1873">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1873">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1874"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1874">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.Socket.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1875"><see cref="T:System.Net.Sockets.Socket" /> で 1 つのプロセスだけにポートのバインドを許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1875">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows only one process to bind to a port.</span></span></summary>
        <value><span data-ttu-id="8ef83-1876"><see cref="T:System.Net.Sockets.Socket" /> で 1 つのソケットだけに特定のポートのバインドを許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1876"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows only one socket to bind to a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8ef83-1877">既定値は<see langword="true" /> 、windows Server 2003 と windows XP Service Pack 2 <see langword="false" />の場合は、それ以外のすべてのバージョンの場合はです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1877">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1878">が<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> <xref:System.Net.Sockets.Socket.Bind%2A>の場合、複数のソケットがメソッドを使用して特定のポートにバインドできます。ただし、ポートに送信されたネットワークトラフィックに対して操作を実行できるのは、ソケットの1つだけです。 `false`</span><span class="sxs-lookup"><span data-stu-id="8ef83-1878">If <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> is `false`, multiple sockets can use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a specific port; however only one of the sockets can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="8ef83-1879">複数のソケットが特定のポートにバインド<xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29>するためにメソッドを使用しようとすると、そのポートに送信されたネットワークトラフィックが、特定の IP アドレスを持つ1つのソケットによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1879">If more than one socket attempts to use the <xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29> method to bind to a particular port, then the one with the more specific IP address will handle the network traffic sent to that port.</span></span>  
  
 <span data-ttu-id="8ef83-1880">が<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> <xref:System.Net.Sockets.Socket.Bind%2A> <xref:System.Net.Sockets.Socket.Bind%2A>の場合、インターネットプロトコル (IP) アドレスに関係なく、特定のポートへのバインドを試行するためにメソッドが最初に使用されます。その後、メソッドを使用してそのポートにバインドしようとすると、 `true`元のバインドされたソケットが破棄されるまで失敗します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1880">If <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> is `true`, the first use of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to a particular port, regardless of Internet Protocol (IP) address, will succeed; all subsequent uses of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to that port will fail until the original bound socket is destroyed.</span></span>  
  
 <span data-ttu-id="8ef83-1881">を呼び出す前に<xref:System.Net.Sockets.Socket.Bind%2A> 、このプロパティを設定する必要があります。それ以外の場合は、 <xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1881">This property must be set before <xref:System.Net.Sockets.Socket.Bind%2A> is called; otherwise an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1882">次のコード例は、 <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1882">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1883">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1883">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1884"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1884">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1885">この <see cref="T:System.Net.Sockets.Socket" /> に対して <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1885"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> has been called for this <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Socket ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Socket ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="socket.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef83-1886"><see cref="T:System.Net.Sockets.Socket" /> クラスによって使用されていたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1886">Frees resources used by the <see cref="T:System.Net.Sockets.Socket" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1887">クラス<xref:System.Net.Sockets.Socket>ファイナライザーは、 <xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出して、 <xref:System.Net.Sockets.Socket>に関連付けられて<xref:System.Net.Sockets.Socket>いるリソースと解放されたリソースを閉じます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1887">The <xref:System.Net.Sockets.Socket> class finalizer calls the <xref:System.Net.Sockets.Socket.Close%2A> method to close the <xref:System.Net.Sockets.Socket> and free resources associated with the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="socket.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef83-1888"><see cref="T:System.Net.Sockets.Socket" /> インスタンスのハッシュ値を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1888">Returns a hash value for a <see cref="T:System.Net.Sockets.Socket" /> instance.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1889">整数ハッシュ値。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1889">An integer hash value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="8ef83-1890">GetHashCode メソッドは、このインスタンスのハッシュコードを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1890">The GetHashCode method returns a hash code of this instance.</span></span> <span data-ttu-id="8ef83-1891">この値は、ハッシュテーブルのキーとして使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1891">This value can be used as a key in hash tables.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSocketOption">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1892"><see cref="T:System.Net.Sockets.Socket" /> オプションの値を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1892">Returns the value of a <see cref="T:System.Net.Sockets.Socket" /> option.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public object GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName -&gt; obj" Usage="socket.GetSocketOption (optionLevel, optionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="8ef83-1893"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1893">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="8ef83-1894"><see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1894">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-1895">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションの値をオブジェクトとして返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1895">Returns the value of a specified <see cref="T:System.Net.Sockets.Socket" /> option, represented as an object.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1896">オプションの値を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1896">An object that represents the value of the option.</span></span> <span data-ttu-id="8ef83-1897"><paramref name="optionName" /> パラメーターを <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> に設定した場合、戻り値は <see cref="T:System.Net.Sockets.LingerOption" /> クラスのインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1897">When the <paramref name="optionName" /> parameter is set to <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> the return value is an instance of the <see cref="T:System.Net.Sockets.LingerOption" /> class.</span></span> <span data-ttu-id="8ef83-1898"><paramref name="optionName" /> を <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> または <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" /> に設定した場合、戻り値は <see cref="T:System.Net.Sockets.MulticastOption" /> クラスのインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1898">When <paramref name="optionName" /> is set to <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> or <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" />, the return value is an instance of the <see cref="T:System.Net.Sockets.MulticastOption" /> class.</span></span> <span data-ttu-id="8ef83-1899"><paramref name="optionName" /> が他の値の場合、戻り値は整数です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1899">When <paramref name="optionName" /> is any other value, the return value is an integer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1900"><xref:System.Net.Sockets.Socket>オプションは、現在<xref:System.Net.Sockets.Socket>のの動作を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1900"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1901">、 <xref:System.Net.Sockets.SocketOptionName.Linger> 、<xref:System.Net.Sockets.SocketOptionName.AddMembership>およびの各オプション<xref:System.Net.Sockets.Socket>を取得するには、このオーバーロードを使用します。 <xref:System.Net.Sockets.SocketOptionName.DropMembership></span><span class="sxs-lookup"><span data-stu-id="8ef83-1901">Use this overload to get the <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, and <xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket> options.</span></span> <span data-ttu-id="8ef83-1902">オプションには、 `optionLevel`パラメーター <xref:System.Net.Sockets.Socket>にを使用します。 <xref:System.Net.Sockets.SocketOptionName.Linger></span><span class="sxs-lookup"><span data-stu-id="8ef83-1902">For the <xref:System.Net.Sockets.SocketOptionName.Linger> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter.</span></span> <span data-ttu-id="8ef83-1903">とでは、 <xref:System.Net.Sockets.SocketOptionLevel.IP>を使用します。 <xref:System.Net.Sockets.SocketOptionName.DropMembership> <xref:System.Net.Sockets.SocketOptionName.AddMembership></span><span class="sxs-lookup"><span data-stu-id="8ef83-1903">For <xref:System.Net.Sockets.SocketOptionName.AddMembership> and <xref:System.Net.Sockets.SocketOptionName.DropMembership>, use <xref:System.Net.Sockets.SocketOptionLevel.IP>.</span></span> <span data-ttu-id="8ef83-1904">上記のオプションのいずれかの値を設定する場合は、 <xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1904">If you want to set the value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1905">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1905">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1906">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1906">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1907">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1907">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1908">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1908">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1909">次のコード例では<xref:System.Net.Sockets.LingerOption> 、 <xref:System.Net.Sockets.Socket.Send%2A>とのタイムアウト値を取得し、コンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1909">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1910">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1910">An error occurred when attempting to access the socket.</span></span>  
  
<span data-ttu-id="8ef83-1911">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-1911">-or-</span></span> 
 <span data-ttu-id="8ef83-1912"><paramref name="optionName" /> が、サポートされていない値 <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1912"><paramref name="optionName" /> was set to the unsupported value <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1913"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1913">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public void GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, unsigned int8[] optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, cli::array &lt;System::Byte&gt; ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * byte[] -&gt; unit" Usage="socket.GetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionValue" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="8ef83-1914"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1914">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="8ef83-1915"><see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1915">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="8ef83-1916">オプション設定を受信する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1916">An array of type <see cref="T:System.Byte" /> that is to receive the option setting.</span></span></param>
        <summary><span data-ttu-id="8ef83-1917">指定した <see cref="T:System.Net.Sockets.Socket" /> オプション設定をバイト配列として返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1917">Returns the specified <see cref="T:System.Net.Sockets.Socket" /> option setting, represented as a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1918"><xref:System.Net.Sockets.Socket>オプションは、現在<xref:System.Net.Sockets.Socket>のの動作を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1918"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-1919">このメソッドが正常に完了すると、 `optionValue`パラメーターで指定された配列に、指定した<xref:System.Net.Sockets.Socket>オプションの値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1919">Upon successful completion of this method, the array specified by the `optionValue` parameter contains the value of the specified <xref:System.Net.Sockets.Socket> option.</span></span>  
  
 <span data-ttu-id="8ef83-1920">`optionValue`配列の長さが、指定された<xref:System.Net.Sockets.Socket>オプションの値を格納するために必要なバイト数よりも<xref:System.Net.Sockets.Socket.GetSocketOption%2A>小さい場合、 <xref:System.Net.Sockets.SocketException>はをスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1920">When the length of the `optionValue` array is smaller than the number of bytes required to store the value of the specified <xref:System.Net.Sockets.Socket> option, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-1921">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1921">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1922">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1922">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="8ef83-1923">このオーバーロードは、ブール値または整数で表されるソケットに対して使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1923">Use this overload for any sockets that are represented by Boolean values or integers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1924">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1924">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1925">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1925">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1926">次のコード例では<xref:System.Net.Sockets.LingerOption> 、 <xref:System.Net.Sockets.Socket.Send%2A>とのタイムアウト値を取得し、コンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1926">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1927">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1927">An error occurred when attempting to access the socket.</span></span>  
  
<span data-ttu-id="8ef83-1928">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-1928">-or-</span></span> 
<span data-ttu-id="8ef83-1929">.NET Compact Framework アプリケーションでは、Windows CE の既定のバッファー領域は 32768 バイトに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1929">In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes.</span></span> <span data-ttu-id="8ef83-1930">ソケットごとのバッファー領域は、<see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" /> を呼び出して変更できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1930">You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1931"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1931">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public byte[] GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, int32 optionLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionLength As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionLength);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * int -&gt; byte[]" Usage="socket.GetSocketOption (optionLevel, optionName, optionLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionLength" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="8ef83-1932"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1932">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="8ef83-1933"><see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1933">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionLength"><span data-ttu-id="8ef83-1934">予期される戻り値のバイト単位の長さ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1934">The length, in bytes, of the expected return value.</span></span></param>
        <summary><span data-ttu-id="8ef83-1935">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションの値を配列で返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1935">Returns the value of the specified <see cref="T:System.Net.Sockets.Socket" /> option in an array.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1936">ソケット オプションの値を格納している <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1936">An array of type <see cref="T:System.Byte" /> that contains the value of the socket option.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1937">パラメーター `optionLength`は、返されるバイト配列の最大サイズを設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1937">The `optionLength` parameter sets the maximum size of the returned byte array.</span></span> <span data-ttu-id="8ef83-1938">オプションの値が必要なバイト数が少なくなる場合、配列にはその数のバイトだけが格納されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1938">If the option value requires fewer bytes, the array will contain only that many bytes.</span></span> <span data-ttu-id="8ef83-1939">オプションの値により多くのバイト<xref:System.Net.Sockets.Socket.GetSocketOption%2A>が必要な<xref:System.Net.Sockets.SocketException>場合、はをスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1939">If the option value requires more bytes, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-1940">このオーバーロードは、ブール値または整数で表されるソケットに対して使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1940">Use this overload for any sockets that are represented by Boolean values or integers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1941">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1941">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1942">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1942">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1943">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1943">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1944">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1944">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1945">次のコード例では<xref:System.Net.Sockets.LingerOption> 、 <xref:System.Net.Sockets.Socket.Send%2A>とのタイムアウト値を取得し、コンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1945">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1946">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1946">An error occurred when attempting to access the socket.</span></span>  
  
<span data-ttu-id="8ef83-1947">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-1947">-or-</span></span> 
<span data-ttu-id="8ef83-1948">.NET Compact Framework アプリケーションでは、Windows CE の既定のバッファー領域は 32768 バイトに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1948">In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes.</span></span> <span data-ttu-id="8ef83-1949">ソケットごとのバッファー領域は、<see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" /> を呼び出して変更できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1949">You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1950"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1950">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Net.Sockets.Socket.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1951"><see cref="T:System.Net.Sockets.Socket" /> のオペレーティング システム ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1951">Gets the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="8ef83-1952"><see cref="T:System.IntPtr" /> のオペレーティング システム ハンドルを表す <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1952">An <see cref="T:System.IntPtr" /> that represents the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IOControl">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-1953"><see cref="T:System.Net.Sockets.Socket" /> の下位操作モードを設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1953">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IOControl">
      <MemberSignature Language="C#" Value="public int IOControl (int ioControlCode, byte[] optionInValue, byte[] optionOutValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IOControl(int32 ioControlCode, unsigned int8[] optionInValue, unsigned int8[] optionOutValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IOControl (ioControlCode As Integer, optionInValue As Byte(), optionOutValue As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IOControl(int ioControlCode, cli::array &lt;System::Byte&gt; ^ optionInValue, cli::array &lt;System::Byte&gt; ^ optionOutValue);" />
      <MemberSignature Language="F#" Value="member this.IOControl : int * byte[] * byte[] -&gt; int" Usage="socket.IOControl (ioControlCode, optionInValue, optionOutValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioControlCode" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionInValue" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionOutValue" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ioControlCode"><span data-ttu-id="8ef83-1954">実行する操作の制御コードを指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1954">An <see cref="T:System.Int32" /> value that specifies the control code of the operation to perform.</span></span></param>
        <param name="optionInValue"><span data-ttu-id="8ef83-1955">操作に必要な入力データを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1955">A <see cref="T:System.Byte" /> array that contains the input data required by the operation.</span></span></param>
        <param name="optionOutValue"><span data-ttu-id="8ef83-1956">操作によって返された出力データを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1956">A <see cref="T:System.Byte" /> array that contains the output data returned by the operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1957">数値制御コードを使用して、<see cref="T:System.Net.Sockets.Socket" /> の下位操作モードを設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1957">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" /> using numerical control codes.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1958"><paramref name="optionOutValue" /> パラメーターのバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1958">The number of bytes in the <paramref name="optionOutValue" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1959">メソッド<xref:System.Net.Sockets.Socket.IOControl%2A>は、 <xref:System.Net.Sockets.Socket>クラスの現在のインスタンスの基に<xref:System.Net.Sockets.Socket>なるオペレーティングシステムへの低レベルのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1959">The <xref:System.Net.Sockets.Socket.IOControl%2A> method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class.</span></span> <span data-ttu-id="8ef83-1960">詳細については、 [Wsaioctl](/windows/desktop/api/winsock2/nf-winsock2-wsaioctl)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1960">For more information, see the [WSAIoctl](/windows/desktop/api/winsock2/nf-winsock2-wsaioctl) documentation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1961">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1961">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1962">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1962">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1963">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1963">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1964">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1964">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1965">次のコード例では、FIONREAD と使用可能なプロパティの結果を比較します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1965">The following code example compares the results of FIONREAD and the Available property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl/CPP/iocontrolserver.cpp#1)]
 [!code-csharp[NCLSocketIoControl#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl/CS/iocontrolserver.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1966">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1966">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1967"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1967">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1968"><see cref="P:System.Net.Sockets.Socket.Blocking" /> プロパティを使用せずに、ブロッキング モードを変更しようとしました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1968">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking" /> property.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-1969">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1969">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="8ef83-1970">アンマネージコードを実行する場合は。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1970">to execute unmanaged code.</span></span> <span data-ttu-id="8ef83-1971"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-1971">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IOControl">
      <MemberSignature Language="C#" Value="public int IOControl (System.Net.Sockets.IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IOControl(valuetype System.Net.Sockets.IOControlCode ioControlCode, unsigned int8[] optionInValue, unsigned int8[] optionOutValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IOControl(System::Net::Sockets::IOControlCode ioControlCode, cli::array &lt;System::Byte&gt; ^ optionInValue, cli::array &lt;System::Byte&gt; ^ optionOutValue);" />
      <MemberSignature Language="F#" Value="member this.IOControl : System.Net.Sockets.IOControlCode * byte[] * byte[] -&gt; int" Usage="socket.IOControl (ioControlCode, optionInValue, optionOutValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioControlCode" Type="System.Net.Sockets.IOControlCode" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionInValue" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionOutValue" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ioControlCode"><span data-ttu-id="8ef83-1972">実行する操作の制御コードを指定する <see cref="T:System.Net.Sockets.IOControlCode" /> 値。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1972">A <see cref="T:System.Net.Sockets.IOControlCode" /> value that specifies the control code of the operation to perform.</span></span></param>
        <param name="optionInValue"><span data-ttu-id="8ef83-1973">操作に必要な入力データを格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1973">An array of type <see cref="T:System.Byte" /> that contains the input data required by the operation.</span></span></param>
        <param name="optionOutValue"><span data-ttu-id="8ef83-1974">操作によって返された出力データを格納する <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1974">An array of type <see cref="T:System.Byte" /> that contains the output data returned by the operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-1975"><see cref="T:System.Net.Sockets.IOControlCode" /> 列挙型を使用して制御コードを指定し、<see cref="T:System.Net.Sockets.Socket" /> の下位操作モードを設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1975">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" /> using the <see cref="T:System.Net.Sockets.IOControlCode" /> enumeration to specify control codes.</span></span></summary>
        <returns><span data-ttu-id="8ef83-1976"><paramref name="optionOutValue" /> パラメーターのバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1976">The number of bytes in the <paramref name="optionOutValue" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1977">このメソッドは、 <xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket>クラスの現在のインスタンスの基になるオペレーティングシステムへの低レベルのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1977">This method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class.</span></span> <span data-ttu-id="8ef83-1978">詳細については、 [Wsaioctl](/windows/desktop/api/winsock2/nf-winsock2-wsaioctl)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1978">For more, see the [WSAIoctl](/windows/desktop/api/winsock2/nf-winsock2-wsaioctl) documentation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1979">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1979">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-1980">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1980">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-1981">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1981">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-1982">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1982">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1983">次のコード例では、 <xref:System.Net.Sockets.Socket.IOControl%2A> <xref:System.Net.Sockets.IOControlCode.DataToRead>と<xref:System.Net.Sockets.Socket.Available%2A>プロパティを呼び出した結果を比較しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1983">The following code example compares the results of calling <xref:System.Net.Sockets.Socket.IOControl%2A> with <xref:System.Net.Sockets.IOControlCode.DataToRead> and the <xref:System.Net.Sockets.Socket.Available%2A> property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl1/CPP/iocontrolcode.cpp#1)]
 [!code-csharp[NCLSocketIoControl1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl1/CS/iocontrolcode.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-1984">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1984">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-1985"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1985">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-1986"><see cref="P:System.Net.Sockets.Socket.Blocking" /> プロパティを使用せずに、ブロッキング モードを変更しようとしました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1986">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking" /> property.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="8ef83-1987">アンマネージコードを実行する場合は。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1987">to execute unmanaged code.</span></span> <span data-ttu-id="8ef83-1988"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-1988">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsBound">
      <MemberSignature Language="C#" Value="public bool IsBound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBound" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.IsBound" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBound { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBound : bool" Usage="System.Net.Sockets.Socket.IsBound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1989"><see cref="T:System.Net.Sockets.Socket" /> が特定のローカル ポートにバインドされているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1989">Gets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is bound to a specific local port.</span></span></summary>
        <value><span data-ttu-id="8ef83-1990"><see cref="T:System.Net.Sockets.Socket" /> がローカル ポートにバインドされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1990"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> is bound to a local port; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1991">ソケット<xref:System.Net.Sockets.Socket.Bind%2A>は、メソッドを呼び出すことによって明示的にバインドされている場合、または一時ローカルポートを使用する<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>、 <xref:System.Net.Sockets.Socket.SendTo%2A>、またはのような<xref:System.Net.Sockets.Socket.Connect%2A>メンバーを呼び出すことによって暗黙的にバインドされている場合は、ローカルポートにバインドされていると見なされます (無料のポートは、1024。オペレーティングシステムによって選択されます。)サーバーは、 <xref:System.Net.Sockets.Socket.Bind%2A>メソッドを使用して、クライアントが接続できるように、既知のポートにバインドします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1991">A socket is considered bound to a local port if it is explicitly bound by calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, or implicitly bound by calling members like <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, which use an ephemeral local port (a free port greater than 1024, selected by the operating system.) Servers use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a well-known port so that clients may connect to them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-1992">次のコード例は、 <xref:System.Net.Sockets.Socket.IsBound%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1992">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.IsBound%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LingerState : System.Net.Sockets.LingerOption with get, set" Usage="System.Net.Sockets.Socket.LingerState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-1993"><see cref="T:System.Net.Sockets.Socket" /> で、すべての保留中のデータを送信しようとするときにソケットを遅延して閉じるかどうかを指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1993">Gets or sets a value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> will delay closing a socket in an attempt to send all pending data.</span></span></summary>
        <value><span data-ttu-id="8ef83-1994">ソケットを閉じているときの待機方法を指定する <see cref="T:System.Net.Sockets.LingerOption" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1994">A <see cref="T:System.Net.Sockets.LingerOption" /> that specifies how to linger while closing a socket.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-1995">プロパティ<xref:System.Net.Sockets.Socket.LingerState%2A>は、メソッドの<xref:System.Net.Sockets.Socket.Close%2A>動作方法を変更します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1995">The <xref:System.Net.Sockets.Socket.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves.</span></span> <span data-ttu-id="8ef83-1996">このプロパティを設定すると、Winsock によって接続をリセットできる条件が変更されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1996">This property when set modifies the conditions under which the connection can be reset by Winsock.</span></span> <span data-ttu-id="8ef83-1997">接続のリセットは、IP プロトコルの動作によっても発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1997">Connection resets can still occur based on the IP protocol behavior.</span></span>  
  
 <span data-ttu-id="8ef83-1998">このプロパティは、データが送信されたままになっている場合に、接続指向<xref:System.Net.Sockets.Socket.Close%2A>接続が開いたままになる時間を制御します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1998">This property controls the length of time that a connection-oriented connection will remain open after a call to <xref:System.Net.Sockets.Socket.Close%2A> when data remains to be sent.</span></span>  
  
 <span data-ttu-id="8ef83-1999">ピアにデータを送信するためにメソッドを呼び出すと、このデータは送信ネットワークバッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-1999">When you call methods to send data to a peer, this data is placed in the outgoing network buffer.</span></span> <span data-ttu-id="8ef83-2000">このプロパティを使用すると、メソッドが<xref:System.Net.Sockets.TcpClient.Close%2A>接続を切断する前に、このデータが確実にリモートホストに送信されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2000">This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.</span></span>  
  
 <span data-ttu-id="8ef83-2001">残留を有効にするに<xref:System.Net.Sockets.LingerOption>は、目的の値を含むインスタンスを<xref:System.Net.Sockets.Socket.LingerState%2A>作成し、このインスタンスにプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2001">To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.Socket.LingerState%2A> property to this instance.</span></span>  
  
 <span data-ttu-id="8ef83-2002">次の表<xref:System.Net.Sockets.Socket.Close%2A>では、プロパティ<xref:System.Net.Sockets.LingerOption.Enabled%2A>の使用可能な値に対するメソッドの動作と<xref:System.Net.Sockets.LingerOption.LingerTime%2A> 、 <xref:System.Net.Sockets.Socket.LingerState%2A>プロパティに格納されているプロパティについて説明します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2002">The following table describes the behavior of the <xref:System.Net.Sockets.Socket.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.Socket.LingerState%2A> property.</span></span>  
  
|<span data-ttu-id="8ef83-2003">LingerState.Enabled</span><span class="sxs-lookup"><span data-stu-id="8ef83-2003">LingerState.Enabled</span></span>|<span data-ttu-id="8ef83-2004">LingerState.LingerTime</span><span class="sxs-lookup"><span data-stu-id="8ef83-2004">LingerState.LingerTime</span></span>|<span data-ttu-id="8ef83-2005">動作</span><span class="sxs-lookup"><span data-stu-id="8ef83-2005">Behavior</span></span>|  
|-------------------------|----------------------------|--------------|  
|<span data-ttu-id="8ef83-2006">`false`(無効)、既定値</span><span class="sxs-lookup"><span data-stu-id="8ef83-2006">`false` (disabled), the default value</span></span>|<span data-ttu-id="8ef83-2007">タイムアウトは適用されません (既定)。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2007">The time-out is not applicable, (default).</span></span>|<span data-ttu-id="8ef83-2008">既定の IP プロトコルのタイムアウトが経過するまで、保留中のデータの送信を試みます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2008">Attempts to send pending data until the default IP protocol time-out expires.</span></span>|  
|<span data-ttu-id="8ef83-2009">`true`enabled</span><span class="sxs-lookup"><span data-stu-id="8ef83-2009">`true` (enabled)</span></span>|<span data-ttu-id="8ef83-2010">0以外のタイムアウト</span><span class="sxs-lookup"><span data-stu-id="8ef83-2010">A nonzero time-out</span></span>|<span data-ttu-id="8ef83-2011">指定したタイムアウトが経過するまで保留中のデータを送信しようとします。失敗した場合は、Winsock によって接続がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2011">Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.</span></span>|  
|<span data-ttu-id="8ef83-2012">`true`enabled</span><span class="sxs-lookup"><span data-stu-id="8ef83-2012">`true` (enabled)</span></span>|<span data-ttu-id="8ef83-2013">ゼロタイムアウト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2013">A zero timeout.</span></span>|<span data-ttu-id="8ef83-2014">保留中のデータを破棄します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2014">Discards any pending data.</span></span> <span data-ttu-id="8ef83-2015">接続指向のソケット (TCP など) の場合、Winsock によって接続がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2015">For connection-oriented socket (TCP, for example), Winsock resets the connection.</span></span>|  
  
 <span data-ttu-id="8ef83-2016">IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2016">The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.</span></span> <span data-ttu-id="8ef83-2017">ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2017">In most cases, the time-out computed by the stack is more relevant than one defined by an application.</span></span> <span data-ttu-id="8ef83-2018">これは、 <xref:System.Net.Sockets.Socket.LingerState%2A>プロパティが設定されていない場合のソケットの既定の動作です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2018">This is the default behavior for a socket when the <xref:System.Net.Sockets.Socket.LingerState%2A> property is not set.</span></span>  
  
 <span data-ttu-id="8ef83-2019">プロパティに格納されているプロパティが既定のipプロトコルタイムアウトよりも大きい値に設定されている場合でも、既定のipプロトコルタイムアウトが適用され、上書きされます。<xref:System.Net.Sockets.LingerOption.LingerTime%2A> <xref:System.Net.Sockets.Socket.LingerState%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2019">When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.Socket.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2020">次のコード例は、 <xref:System.Net.Sockets.Socket.LingerState%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2020">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.LingerState%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2021">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2021">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2022"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2022">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Listen">
      <MemberSignature Language="C#" Value="public void Listen (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Listen(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Listen (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Listen(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Listen : int -&gt; unit" Usage="socket.Listen backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog"><span data-ttu-id="8ef83-2023">保留中の接続のキューの最大長。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2023">The maximum length of the pending connections queue.</span></span></param>
        <summary><span data-ttu-id="8ef83-2024"><see cref="T:System.Net.Sockets.Socket" /> をリッスン状態にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2024">Places a <see cref="T:System.Net.Sockets.Socket" /> in a listening state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2025"><xref:System.Net.Sockets.Socket.Listen%2A>接続方向<xref:System.Net.Sockets.Socket>の接続の試行をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2025"><xref:System.Net.Sockets.Socket.Listen%2A> causes a connection-oriented <xref:System.Net.Sockets.Socket> to listen for incoming connection attempts.</span></span> <span data-ttu-id="8ef83-2026">パラメーター `backlog`は、受け入れのためにキューに登録できる着信接続の数を指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2026">The `backlog` parameter specifies the number of incoming connections that can be queued for acceptance.</span></span> <span data-ttu-id="8ef83-2027">指定できる接続の最大数を決定するには、 <xref:System.Net.Sockets.SocketOptionName.MaxConnections>値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2027">To determine the maximum number of connections you can specify, retrieve the <xref:System.Net.Sockets.SocketOptionName.MaxConnections> value.</span></span> <span data-ttu-id="8ef83-2028"><xref:System.Net.Sockets.Socket.Listen%2A>はブロックしません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2028"><xref:System.Net.Sockets.Socket.Listen%2A> does not block.</span></span>  
  
 <span data-ttu-id="8ef83-2029">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2029">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2030">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2030">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="8ef83-2031">また<xref:System.Net.Sockets.Socket.Accept%2A> は<xref:System.Net.Sockets.Socket.BeginAccept%2A>を使用して、キューからの接続を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2031">Use <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> to accept a connection from the queue.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2032"><xref:System.Net.Sockets.Socket.Bind%2A>を呼び出す<xref:System.Net.Sockets.Socket.Listen%2A>前にメソッドを呼び出す必要があります<xref:System.Net.Sockets.SocketException>。または<xref:System.Net.Sockets.Socket.Listen%2A> 、をスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2032">You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method before calling <xref:System.Net.Sockets.Socket.Listen%2A>, or <xref:System.Net.Sockets.Socket.Listen%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2033">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2033">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2034">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2034">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2035">バックログパラメーターは、オペレーティングシステムによって異なる値に制限されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2035">The backlog parameter is limited to different values depending on the Operating System.</span></span> <span data-ttu-id="8ef83-2036">より高い値を指定することもできますが、バックログはオペレーティングシステムに基づいて制限されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2036">You may specify a higher value, but the backlog will be limited based on the Operating System.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2037">次のコード例で<xref:System.Net.Sockets.Socket>は、を使用して着信接続をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2037">The following code example uses <xref:System.Net.Sockets.Socket> to listen for incoming connections.</span></span>  
  
 [!code-cpp[Classic Socket.Listen Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Listen Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Listen Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Listen Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Listen Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Listen Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2038">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2038">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2039"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2039">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="LocalEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.LocalEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndPoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndPoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndPoint : System.Net.EndPoint" Usage="System.Net.Sockets.Socket.LocalEndPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2040">ローカル エンドポイントを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2040">Gets the local endpoint.</span></span></summary>
        <value><span data-ttu-id="8ef83-2041"><see cref="T:System.Net.EndPoint" /> が通信に使用している <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2041">The <see cref="T:System.Net.EndPoint" /> that the <see cref="T:System.Net.Sockets.Socket" /> is using for communications.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2042">プロパティ<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>は、 <xref:System.Net.Sockets.Socket>が<xref:System.Net.EndPoint>バインドされているローカル IP アドレスとポート番号を含むを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2042">The <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property gets an <xref:System.Net.EndPoint> that contains the local IP address and port number to which your <xref:System.Net.Sockets.Socket> is bound.</span></span> <span data-ttu-id="8ef83-2043">情報を取得する<xref:System.Net.EndPoint>前に<xref:System.Net.IPEndPoint> 、これをにキャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2043">You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information.</span></span> <span data-ttu-id="8ef83-2044">次に、 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>メソッドを呼び出してローカル<xref:System.Net.IPAddress> <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>のを取得し、メソッドを呼び出してローカルポート番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2044">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to retrieve the local <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to retrieve the local port number.</span></span>  
  
 <span data-ttu-id="8ef83-2045"><xref:System.Net.Sockets.Socket.Bind%2A>通常、 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A>プロパティは、メソッドを呼び出した後に設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2045">The <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property is usually set after you make a call to the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="8ef83-2046">ソケットのローカル IP アドレスとポート番号をシステムに割り当てられるようにすると<xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 、最初の i/o 操作の後にプロパティが設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2046">If you allow the system to assign your socket's local IP address and port number, the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property will be set after the first I/O operation.</span></span> <span data-ttu-id="8ef83-2047">接続指向プロトコルの場合、最初の i/o 操作はメソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドの呼び出しになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2047">For connection-oriented protocols, the first I/O operation would be a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2048">コネクションレスプロトコルの場合、最初の i/o 操作は、送信または受信呼び出しのいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2048">For connectionless protocols, the first I/O operation would be any of the send or receive calls.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2049">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2049">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2050">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2050">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2051">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2051">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2052">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2052">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2053">次のコード例では、ローカルとリモートのエンドポイントを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2053">The following code example retrieves and displays the local and remote endpoints.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#4)]
 [!code-csharp[Socket_Socket_Options#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#4)]
 [!code-vb[Socket_Socket_Options#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2054">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2054">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2055"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2055">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.Socket.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2056">発信マルチキャスト パケットが送信元アプリケーションに配信されるかどうかを指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2056">Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</span></span></summary>
        <value><span data-ttu-id="8ef83-2057"><see cref="T:System.Net.Sockets.Socket" /> が発信マルチキャスト パケットを受け取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2057"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> receives outgoing multicast packets; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2058">マルチキャストは、インターネット上の多対多通信のためのスケーラブルな方法です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2058">Multicast is a scalable method for many-to-many communication on the Internet.</span></span> <span data-ttu-id="8ef83-2059">プロセスは、マルチキャストアドレスをサブスクライブします。次に、サブスクライブされたプロセスによって送信されたすべてのパケットが、マルチキャストアドレスをサブスクライブしている他のすべてのプロセスによって受信されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2059">A process subscribes to a multicast address; then, any packets sent by a subscribed process are received by every other process subscribed to the multicast address.</span></span>  
  
 <span data-ttu-id="8ef83-2060">伝送制御プロトコル (TCP) ソケットでこのプロパティを設定しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2060">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2061">次のコード例は、 <xref:System.Net.Sockets.Socket.MulticastLoopback%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2061">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.MulticastLoopback%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2062">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2062">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2063"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2063">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NoDelay : bool with get, set" Usage="System.Net.Sockets.Socket.NoDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2064">ストリーム <see cref="T:System.Net.Sockets.Socket" /> が Nagle アルゴリズムを使用するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2064">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the stream <see cref="T:System.Net.Sockets.Socket" /> is using the Nagle algorithm.</span></span></summary>
        <value><span data-ttu-id="8ef83-2065"><see cref="T:System.Net.Sockets.Socket" /> が Nagle アルゴリズムを使用する場合は <see langword="false" />。それ以外の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2065"><see langword="false" /> if the <see cref="T:System.Net.Sockets.Socket" /> uses the Nagle algorithm; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="8ef83-2066">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2066">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2067">Nagle アルゴリズムは、ソケットが小さいパケットをバッファーに格納し、特定の状況下でそれらを結合して1つのパケットで送信することで、ネットワークトラフィックを削減するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2067">The Nagle algorithm is designed to reduce network traffic by causing the socket to buffer small packets and then combine and send them in one packet under certain circumstances.</span></span> <span data-ttu-id="8ef83-2068">TCP パケットは、40バイトのヘッダーと送信されるデータで構成されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2068">A TCP packet consists of 40 bytes of header plus the data being sent.</span></span> <span data-ttu-id="8ef83-2069">TCP を使用して少量のデータパケットを送信すると、TCP ヘッダーによって生じるオーバーヘッドがネットワークトラフィックの重要な部分になる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2069">When small packets of data are sent with TCP, the overhead resulting from the TCP header can become a significant part of the network traffic.</span></span> <span data-ttu-id="8ef83-2070">負荷が高いネットワークでは、このオーバーヘッドによって発生する輻輳によって、データグラムが失われ、再送信される可能性があります。また、輻輳による過剰な伝達時間も発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2070">On heavily loaded networks, the congestion resulting from this overhead can result in lost datagrams and retransmissions, as well as excessive propagation time caused by congestion.</span></span> <span data-ttu-id="8ef83-2071">Nagle アルゴリズムでは、接続で以前に転送されたデータがまだ未確認の場合に、新しい送信データがユーザーから到着したときに、新しい TCP セグメントの送信を抑制します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2071">The Nagle algorithm inhibits the sending of new TCP segments when new outgoing data arrives from the user if any previously transmitted data on the connection remains unacknowledged.</span></span>  
  
 <span data-ttu-id="8ef83-2072">ほとんどのネットワークアプリケーションでは、Nagle アルゴリズムを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2072">The majority of network applications should use the Nagle algorithm.</span></span>  
  
 <span data-ttu-id="8ef83-2073">ユーザーデータグラムプロトコル (UDP) ソケットでこのプロパティを設定しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2073">Setting this property on a User Datagram Protocol (UDP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2074">次のコード例は、 <xref:System.Net.Sockets.Socket.NoDelay%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2074">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.NoDelay%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2075"><see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2075">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2076"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2076">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OSSupportsIPv4">
      <MemberSignature Language="C#" Value="public static bool OSSupportsIPv4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OSSupportsIPv4" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.OSSupportsIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSSupportsIPv4 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool OSSupportsIPv4 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.OSSupportsIPv4 : bool" Usage="System.Net.Sockets.Socket.OSSupportsIPv4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2077">基になるオペレーティング システムおよびネットワーク アダプターが、インターネット プロトコル バージョン 4 (IPv4) をサポートするかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2077">Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).</span></span></summary>
        <value><span data-ttu-id="8ef83-2078">オペレーティング システムおよびネットワーク アダプターが IPv4 プロトコルをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2078"><see langword="true" /> if the operating system and network adaptors support the IPv4 protocol; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2079">オペレーティングシステムは、IPv4 プロトコルと IPv6 プロトコルの両方をサポートしている場合があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2079">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
      </Docs>
    </Member>
    <Member MemberName="OSSupportsIPv6">
      <MemberSignature Language="C#" Value="public static bool OSSupportsIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OSSupportsIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSSupportsIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool OSSupportsIPv6 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.OSSupportsIPv6 : bool" Usage="System.Net.Sockets.Socket.OSSupportsIPv6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2080">基になるオペレーティング システムおよびネットワーク アダプターが、インターネット プロトコル バージョン 6 (IPv6) をサポートするかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2080">Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).</span></span></summary>
        <value><span data-ttu-id="8ef83-2081">オペレーティング システムおよびネットワーク アダプターが IPv6 プロトコルをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2081"><see langword="true" /> if the operating system and network adaptors support the IPv6 protocol; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2082">オペレーティングシステムは、IPv4 プロトコルと IPv6 プロトコルの両方をサポートしている場合があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2082">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv4" />
      </Docs>
    </Member>
    <Member MemberName="Poll">
      <MemberSignature Language="C#" Value="public bool Poll (int microSeconds, System.Net.Sockets.SelectMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Poll(int32 microSeconds, valuetype System.Net.Sockets.SelectMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poll (microSeconds As Integer, mode As SelectMode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Poll(int microSeconds, System::Net::Sockets::SelectMode mode);" />
      <MemberSignature Language="F#" Value="member this.Poll : int * System.Net.Sockets.SelectMode -&gt; bool" Usage="socket.Poll (microSeconds, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="microSeconds" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="mode" Type="System.Net.Sockets.SelectMode" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="microSeconds"><span data-ttu-id="8ef83-2083">マイクロ秒単位の待機時間。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2083">The time to wait for a response, in microseconds.</span></span></param>
        <param name="mode"><span data-ttu-id="8ef83-2084"><see cref="T:System.Net.Sockets.SelectMode" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2084">One of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2085"><see cref="T:System.Net.Sockets.Socket" /> の状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2085">Determines the status of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2086"><paramref name="mode" /> パラメーターで渡されるポーリング モードの値に基づいた <see cref="T:System.Net.Sockets.Socket" /> の状態。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2086">The status of the <see cref="T:System.Net.Sockets.Socket" /> based on the polling mode value passed in the <paramref name="mode" /> parameter.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="8ef83-2087">モード</span><span class="sxs-lookup"><span data-stu-id="8ef83-2087">Mode</span></span> 
 </term><description> <span data-ttu-id="8ef83-2088">戻り値</span><span class="sxs-lookup"><span data-stu-id="8ef83-2088">Return Value</span></span> 
 </description></listheader><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectRead" /></term><description><span data-ttu-id="8ef83-2089"><see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> が呼び出されており、接続が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2089"><see langword="true" /> if <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> has been called and a connection is pending;</span></span> 
<span data-ttu-id="8ef83-2090">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2090">-or-</span></span> 
 <span data-ttu-id="8ef83-2091">データを読み取ることができる場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2091"><see langword="true" /> if data is available for reading;</span></span> 
<span data-ttu-id="8ef83-2092">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2092">-or-</span></span> 
 <span data-ttu-id="8ef83-2093">接続が閉じている、リセットされている、または終了している場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2093"><see langword="true" /> if the connection has been closed, reset, or terminated;</span></span> 
<span data-ttu-id="8ef83-2094">それ以外の場合、<see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2094">otherwise, returns <see langword="false" />.</span></span>  
  
 </description></item><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectWrite" /></term><description><span data-ttu-id="8ef83-2095"><see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> を処理し、接続に成功した場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2095"><see langword="true" />, if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />, and the connection has succeeded;</span></span> 
<span data-ttu-id="8ef83-2096">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2096">-or-</span></span> 
 <span data-ttu-id="8ef83-2097">データを送信できる場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2097"><see langword="true" /> if data can be sent;</span></span> 
<span data-ttu-id="8ef83-2098">それ以外の場合、<see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2098">otherwise, returns <see langword="false" />.</span></span>  
  
 </description></item><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectError" /></term><description><span data-ttu-id="8ef83-2099">ブロックしない <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> を処理し、接続に失敗した場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2099"><see langword="true" /> if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> that does not block, and the connection has failed;</span></span> 
<span data-ttu-id="8ef83-2100">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2100">-or-</span></span> 
 <span data-ttu-id="8ef83-2101"><see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> が設定されておらず、帯域外データを使用できる場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2101"><see langword="true" /> if <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> is not set and out-of-band data is available;</span></span> 
<span data-ttu-id="8ef83-2102">それ以外の場合、<see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2102">otherwise, returns <see langword="false" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2103">メソッドは、 <xref:System.Net.Sockets.Socket>の状態を確認します。 <xref:System.Net.Sockets.Socket.Poll%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2103">The <xref:System.Net.Sockets.Socket.Poll%2A> method will check the state of the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-2104">が読み取り可能`selectMode`かどうかを判断するには、 <xref:System.Net.Sockets.SelectMode.SelectRead?displayProperty=nameWithType>パラメーターにを指定します。 <xref:System.Net.Sockets.Socket></span><span class="sxs-lookup"><span data-stu-id="8ef83-2104">Specify <xref:System.Net.Sockets.SelectMode.SelectRead?displayProperty=nameWithType> for the `selectMode` parameter to determine if the <xref:System.Net.Sockets.Socket> is readable.</span></span> <span data-ttu-id="8ef83-2105">が<xref:System.Net.Sockets.SelectMode.SelectWrite?displayProperty=nameWithType>書き込み可能かどう<xref:System.Net.Sockets.Socket>かを判断するには、を指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2105">Specify <xref:System.Net.Sockets.SelectMode.SelectWrite?displayProperty=nameWithType> to determine if the <xref:System.Net.Sockets.Socket> is writable.</span></span> <span data-ttu-id="8ef83-2106">エラー <xref:System.Net.Sockets.SelectMode.SelectError?displayProperty=nameWithType>状態を検出するには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2106">Use <xref:System.Net.Sockets.SelectMode.SelectError?displayProperty=nameWithType> to detect an error condition.</span></span> <span data-ttu-id="8ef83-2107"><xref:System.Net.Sockets.Socket.Poll%2A>は、指定された期間 (で`microseconds`測定) が経過するまで実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2107"><xref:System.Net.Sockets.Socket.Poll%2A> will block execution until the specified time period, measured in `microseconds`, elapses.</span></span> <span data-ttu-id="8ef83-2108">応答を`microSeconds`無期限に待機する場合は、パラメーターを負の整数に設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2108">Set the `microSeconds` parameter to a negative integer if you would like to wait indefinitely for a response.</span></span> <span data-ttu-id="8ef83-2109">複数のソケットの状態を確認する場合は、 <xref:System.Net.Sockets.Socket.Select%2A>メソッドを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2109">If you want to check the status of multiple sockets, you might prefer to use the <xref:System.Net.Sockets.Socket.Select%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2110">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2110">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2111">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2111">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2112">この方法では、ネットワークケーブルの切断など、特定の種類の接続の問題を検出することはできません。また、リモートホストが異常終了をシャットダウンしたことを確認することもできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2112">This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully.</span></span> <span data-ttu-id="8ef83-2113">これらの種類のエラーを検出するには、データの送信または受信を試みる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2113">You must attempt to send or receive data to detect these kinds of errors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2114">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2114">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2115">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2115">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2116">次のコード例では、ソケットを作成し、サーバーに接続<xref:System.Net.Sockets.Socket.Poll%2A>して、を使用してソケットの状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2116">The following code example creates a socket, connects to a server, and uses <xref:System.Net.Sockets.Socket.Poll%2A> to check the status of the socket.</span></span>  
  
 [!code-cpp[SelectModeExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SelectModeExample/CPP/source.cpp#1)]
 [!code-csharp[SelectModeExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SelectModeExample/CS/source.cs#1)]
 [!code-vb[SelectModeExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SelectModeExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-2117"><paramref name="mode" /> パラメーターが、<see cref="T:System.Net.Sockets.SelectMode" /> 値の 1 つではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2117">The <paramref name="mode" /> parameter is not one of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2118">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2118">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-2119">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2119">See remarks below.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2120"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2120">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SelectMode" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <Member MemberName="ProtocolType">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.ProtocolType ProtocolType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.ProtocolType ProtocolType" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ProtocolType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProtocolType As ProtocolType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::ProtocolType ProtocolType { System::Net::Sockets::ProtocolType get(); };" />
      <MemberSignature Language="F#" Value="member this.ProtocolType : System.Net.Sockets.ProtocolType" Usage="System.Net.Sockets.Socket.ProtocolType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.ProtocolType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2121"><see cref="T:System.Net.Sockets.Socket" /> のプロトコルの種類を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2121">Gets the protocol type of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="8ef83-2122"><see cref="T:System.Net.Sockets.ProtocolType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2122">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2123">プロパティは、 <xref:System.Net.Sockets.Socket>が作成されるときに設定され、その<xref:System.Net.Sockets.Socket>によって使用されるプロトコルを指定します。 <xref:System.Net.Sockets.Socket.ProtocolType%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2123">The <xref:System.Net.Sockets.Socket.ProtocolType%2A> property is set when the <xref:System.Net.Sockets.Socket> is created, and specifies the protocol used by that <xref:System.Net.Sockets.Socket>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2124">次のコード例では<xref:System.Net.Sockets.AddressFamily>、 <xref:System.Net.Sockets.SocketType>、、 <xref:System.Net.Sockets.ProtocolType>およびをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2124">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-2125">バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2125">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffer As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] -&gt; int" Usage="socket.Receive buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2126">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2126">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <summary><span data-ttu-id="8ef83-2127">バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信し、受信バッファーに格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2127">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2128">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2128">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2129">メソッド<xref:System.Net.Sockets.Socket.Receive%2A>は、バッファーパラメーターにデータを読み込み、正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2129">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="8ef83-2130">接続指向ソケット<xref:System.Net.Sockets.Socket.Receive%2A>とコネクションレスソケットの両方からを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2130">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="8ef83-2131">このオーバーロードでは、受信バッファーのみを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2131">This overload only requires you to provide a receive buffer.</span></span> <span data-ttu-id="8ef83-2132">バッファーオフセットの既定値は0で、サイズは既定でバッファーパラメーターの長さに設定さ<xref:System.Net.Sockets.SocketFlags>れ、既定<xref:System.Net.Sockets.SocketFlags.None>値はに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2132">The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="8ef83-2133">接続指向プロトコルを使用している場合は、を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>てリモートホスト接続を確立するか<xref:System.Net.Sockets.Socket.Accept%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2133">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-2134">メソッドは、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホストから到着したデータのみを読み取ります。 <xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2134">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2135">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2135">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2136"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>では、任意のホストから到着したデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2136"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="8ef83-2137">読み取り<xref:System.Net.Sockets.Socket.Receive%2A>可能なデータがない場合は、を使用<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>してタイムアウト値が設定されていない限り、データが使用可能になるまで、メソッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2137">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2138">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Receive%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2138">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2139">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2139">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2140">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2140">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2141">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2141">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2142">接続指向<xref:System.Net.Sockets.Socket>のを使用している場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズまで、使用可能な限り多くのデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2142">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="8ef83-2143">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.Receive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2143">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-2144">コネクションレス<xref:System.Net.Sockets.Socket>を使用している<xref:System.Net.Sockets.Socket.Receive%2A>場合、は、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドで指定した送信先アドレスからキューに置かれた最初のデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2144">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-2145">受信したデータグラムが`buffer`パラメーターのサイズよりも大きい場合は、 `buffer`メッセージの最初の部分を入力し、余分な<xref:System.Net.Sockets.SocketException>データが失われてがスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2145">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2146">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2146">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2147">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2147">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2148">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2148">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2149">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2149">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2150">次のコード例では、接続さ<xref:System.Net.Sockets.Socket>れているでデータを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2150">The following code example receives data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Sync_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Sync_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2151"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2151"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2152">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2152">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2153"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2153">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-2154">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2154">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2155">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2155">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2156"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2156">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffers As IList(Of ArraySegment(Of Byte))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; int" Usage="socket.Receive buffers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-2157">受信したデータを格納する <see cref="T:System.Byte" /> 型の複数の <see cref="T:System.ArraySegment`1" /> のリスト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2157">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span></span></param>
        <summary><span data-ttu-id="8ef83-2158">バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して、受信バッファーのリストに格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2158">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2159">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2159">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2160">このメソッドは、buffers パラメーターにデータを読み込み、正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2160">This method reads data into the buffers parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="8ef83-2161">接続指向ソケットとコネクションレスソケットの両方からを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2161">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="8ef83-2162">このオーバーロードでは、1つ以上の受信バッファーを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2162">This overload requires you to provide one or more receive buffers.</span></span>  
  
 <span data-ttu-id="8ef83-2163">接続指向プロトコルを使用している場合は、を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>てリモートホスト接続を確立するか<xref:System.Net.Sockets.Socket.Accept%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2163">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-2164">メソッドは、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホスト接続から受信したデータのみを読み取ります。 <xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2164">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2165">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2165">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2166"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>では、任意のホストから到着したデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2166"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="8ef83-2167">読み取り<xref:System.Net.Sockets.Socket.Receive%2A>可能なデータがない場合は、を使用<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>してタイムアウト値が設定されていない限り、データが使用可能になるまで、メソッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2167">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2168">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Receive%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2168">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2169">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2169">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2170">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2170">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2171">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2171">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2172">接続指向<xref:System.Net.Sockets.Socket>のを使用している場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズまで、使用可能な限り多くのデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2172">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="8ef83-2173">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.Receive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2173">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-2174">コネクションレス<xref:System.Net.Sockets.Socket>型を使用して<xref:System.Net.Sockets.Socket.Receive%2A>いる場合、は、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドで指定した宛先アドレスからエンキューされた最初のデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2174">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-2175">受信したデータグラムが`buffers`パラメーターのサイズよりも大きい場合は、 `buffers`メッセージの最初の部分を入力し、余分な<xref:System.Net.Sockets.SocketException>データが失われてがスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2175">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2176">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2176">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2177">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2177">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="8ef83-2178">**メモ**このメンバーは、アプリケーションでネットワークトレースを有効にしたときにトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2178">**Note** This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2179">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2179">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2180"><paramref name="buffer" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2180">The <paramref name="buffer" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2181">ソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2181">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2182"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2182">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; -&gt; int" Usage="socket.Receive buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2183">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2183">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2184"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2184">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2185">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して受信バッファーに格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2185">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2186">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2186">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2187">メソッド<xref:System.Net.Sockets.Socket.Receive%2A>は、バッファーパラメーターにデータを読み込み、正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2187">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="8ef83-2188">接続指向ソケット<xref:System.Net.Sockets.Socket.Receive%2A>とコネクションレスソケットの両方からを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2188">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="8ef83-2189">このオーバーロードでは、受信バッファーと必要な<xref:System.Net.Sockets.SocketFlags>を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2189">This overload only requires you to provide a receive buffer and the necessary <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="8ef83-2190">バッファーオフセットは既定で0に設定され、サイズは既定でバイトパラメーターの長さに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2190">The buffer offset defaults to 0, and the size defaults to the length of the byte parameter.</span></span>  
  
 <span data-ttu-id="8ef83-2191">接続指向プロトコルを使用している場合は、を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>てリモートホスト接続を確立するか<xref:System.Net.Sockets.Socket.Accept%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2191">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-2192">メソッドは、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホストから到着したデータのみを読み取ります。 <xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2192">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2193">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2193">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2194"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>では、任意のホストから到着したデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2194"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="8ef83-2195">読み取り可能なデータがない場合、メソッド<xref:System.Net.Sockets.Socket.Receive%2A>はデータが使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2195">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available.</span></span> <span data-ttu-id="8ef83-2196">非ブロッキングモードで、プロトコルスタックバッファー <xref:System.Net.Sockets.Socket.Receive%2A>に使用できるデータがない場合、メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2196">If you are in non-blocking mode, and there is no data available in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2197">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2197">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2198">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2198">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2199">接続指向<xref:System.Net.Sockets.Socket>のを使用している場合<xref:System.Net.Sockets.Socket.Receive%2A> 、メソッドは、バッファーのサイズまで使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2199">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available up to the size of the buffer.</span></span> <span data-ttu-id="8ef83-2200">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.Receive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2200">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-2201">コネクションレス<xref:System.Net.Sockets.Socket>型を使用して<xref:System.Net.Sockets.Socket.Receive%2A>いる場合、は、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドで指定した宛先アドレスからエンキューされた最初のデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2201">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-2202">受信したデータグラムが`buffer`パラメーターのサイズよりも大きい場合は、 `buffer`メッセージの最初の部分を入力し、余分な<xref:System.Net.Sockets.SocketException>データが失われてがスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2202">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2203">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2203">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2204">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2204">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2205">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2205">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2206">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2206">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2207">次のコード例では、データバッファー <xref:System.Net.Sockets.SocketFlags>を指定し、接続されている<xref:System.Net.Sockets.Socket>でデータを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2207">The following code example specifies a data buffer, and <xref:System.Net.Sockets.SocketFlags> for receiving data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Sync_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Sync_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2208"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2208"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2209">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2209">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2210"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2210">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-2211">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2211">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2212">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2212">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2213"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2213">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffers, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-2214">受信したデータを格納する <see cref="T:System.Byte" /> 型の複数の <see cref="T:System.ArraySegment`1" /> のリスト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2214">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2215"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2215">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2216">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して受信バッファーのリストに格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2216">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2217">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2217">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2218">このメソッドは、 `buffers`パラメーターにデータを読み込み、正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2218">This method reads data into the `buffers` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="8ef83-2219">接続指向ソケットとコネクションレスソケットの両方からを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2219">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="8ef83-2220">このオーバーロードでは、1つ以上の受信バッファーを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2220">This overload requires you to provide one or more receive buffers.</span></span> <span data-ttu-id="8ef83-2221">既定値は<xref:System.Net.Sockets.SocketFlags> です。<xref:System.Net.Sockets.SocketFlags.None></span><span class="sxs-lookup"><span data-stu-id="8ef83-2221">The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="8ef83-2222">接続指向プロトコルを使用している場合は、を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>てリモートホスト接続を確立するか<xref:System.Net.Sockets.Socket.Accept%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2222">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-2223">メソッドは、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホスト接続から受信したデータのみを読み取ります。 <xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2223">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2224">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2224">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2225"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>では、任意のホストから到着したデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2225"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="8ef83-2226">読み取り<xref:System.Net.Sockets.Socket.Receive%2A>可能なデータがない場合は、を使用<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>してタイムアウト値が設定されていない限り、データが使用可能になるまで、メソッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2226">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2227">タイムアウト値を超えた場合、この呼び出しは<xref:System.Net.Sockets.Socket.Receive%2A>を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2227">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2228">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2228">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2229">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2229">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2230">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2230">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2231">接続指向<xref:System.Net.Sockets.Socket>のを使用している場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズまで、使用可能な限り多くのデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2231">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="8ef83-2232">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.Receive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2232">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-2233">コネクションレス<xref:System.Net.Sockets.Socket>型を使用して<xref:System.Net.Sockets.Socket.Receive%2A>いる場合、は、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドで指定した宛先アドレスからエンキューされた最初のデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2233">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-2234">受信したデータグラムが`buffers`パラメーターのサイズよりも大きい場合は、 `buffers`メッセージの最初の部分を入力し、余分な<xref:System.Net.Sockets.SocketException>データが失われてがスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2234">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2235">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2235">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2236">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2236">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2237">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2237">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2238">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2238">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2239">次のコード例は、接続さ<xref:System.Net.Sockets.Socket>れたでデータを受信する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2239">The following code example demonstrates how to receive data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socketgenerics#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socketgenerics/CPP/sendgeneric.cpp#2)]
 [!code-csharp[System.Net.Sockets.Socketgenerics#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socketgenerics/CS/sendgeneric.cs#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2240"><paramref name="buffers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2240"><paramref name="buffers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-2241">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2241">-or-</span></span> 
 <span data-ttu-id="8ef83-2242"><paramref name="buffers" />.Count が 0 です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2242"><paramref name="buffers" />.Count is zero.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2243">ソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2243">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2244"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2244">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2245">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2245">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2246"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2246">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2247">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2247">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-2248">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2248">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2249"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2249">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2250">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> から指定したバイト数のデータを受信して受信バッファーに格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2250">Receives the specified number of bytes of data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2251">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2251">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2252">メソッド<xref:System.Net.Sockets.Socket.Receive%2A>は、 `buffer`パラメーターにデータを読み込み、正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2252">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the `buffer` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="8ef83-2253">接続指向ソケット<xref:System.Net.Sockets.Socket.Receive%2A>とコネクションレスソケットの両方からを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2253">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="8ef83-2254">このオーバーロードでは、受信バッファー、受信するバイト数、および必要な<xref:System.Net.Sockets.SocketFlags>を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2254">This overload only requires you to provide a receive buffer, the number of bytes you want to receive, and the necessary <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 <span data-ttu-id="8ef83-2255">接続指向プロトコルを使用している場合は、を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>てリモートホスト接続を確立するか<xref:System.Net.Sockets.Socket.Accept%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2255">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-2256">メソッドは、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホストから到着したデータのみを読み取ります。 <xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2256">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2257">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2257">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2258"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>では、任意のホストから到着したデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2258"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="8ef83-2259">読み取り<xref:System.Net.Sockets.Socket.Receive%2A>可能なデータがない場合は、を使用<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>してタイムアウト値が設定されていない限り、データが使用可能になるまで、メソッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2259">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2260">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Receive%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2260">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2261">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2261">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, The <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2262">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2262">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2263">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2263">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2264">接続指向<xref:System.Net.Sockets.Socket> `size`のを使用している場合、メソッドは、パラメーターで指定されたバイト数まで、使用可能な量のデータを読み取ります。<xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2264">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="8ef83-2265">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.Receive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2265">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-2266">コネクションレス<xref:System.Net.Sockets.Socket>を使用している<xref:System.Net.Sockets.Socket.Receive%2A>場合、は、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドで指定した送信先アドレスからキューに置かれた最初のデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2266">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-2267">受信したデータグラムが`buffer`パラメーターのサイズよりも大きい場合は、 `buffer`メッセージの最初の部分を入力し、余分な<xref:System.Net.Sockets.SocketException>データが失われてがスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2267">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2268">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2268">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2269">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2269">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2270">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2270">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2271">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2271">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2272">次のは、に`buffer`あるデータを受け取り、に<xref:System.Net.Sockets.SocketFlags>を指定<xref:System.Net.Sockets.SocketFlags.None>します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2272">The following receives the data found into `buffer`, and specifies <xref:System.Net.Sockets.SocketFlags.None> for <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 [!code-cpp[Socket_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2273"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2273"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2274"><paramref name="size" /> が <paramref name="buffer" /> のサイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2274"><paramref name="size" /> exceeds the size of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2275">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2275">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2276"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2276">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-2277">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2277">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2278">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2278">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2279"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2279">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffers, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-2280">受信したデータを格納する <see cref="T:System.Byte" /> 型の複数の <see cref="T:System.ArraySegment`1" /> のリスト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2280">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2281"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2281">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-2282">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2282">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="8ef83-2283">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して受信バッファーのリストに格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2283">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2284">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2284">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2285">このメソッドは、 `buffers`パラメーターにデータを読み込み、正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2285">This method reads data into the `buffers` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="8ef83-2286">接続指向ソケットとコネクションレスソケットの両方からを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2286">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="8ef83-2287">このオーバーロードでは、1つ以上の受信バッファーを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2287">This overload requires you to provide one or more receive buffers.</span></span> <span data-ttu-id="8ef83-2288">既定値は<xref:System.Net.Sockets.SocketFlags> です。<xref:System.Net.Sockets.SocketFlags.None></span><span class="sxs-lookup"><span data-stu-id="8ef83-2288">The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="8ef83-2289">接続指向プロトコルを使用している場合は、を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>てリモートホスト接続を確立するか<xref:System.Net.Sockets.Socket.Accept%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2289">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-2290">メソッドは、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホスト接続から受信したデータのみを読み取ります。 <xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2290">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2291">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2291">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2292"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>では、任意のホストから到着したデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2292"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="8ef83-2293">読み取り<xref:System.Net.Sockets.Socket.Receive%2A>可能なデータがない場合は、を使用<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>してタイムアウト値が設定されていない限り、データが使用可能になるまで、メソッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2293">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2294">タイムアウト値を超えた場合、この呼び出しは<xref:System.Net.Sockets.Socket.Receive%2A>を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2294">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2295">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2295">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2296">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2296">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2297">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2297">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2298">接続指向<xref:System.Net.Sockets.Socket>のを使用している場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズまで、使用可能な限り多くのデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2298">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="8ef83-2299">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.Receive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2299">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-2300">コネクションレス<xref:System.Net.Sockets.Socket>を使用している<xref:System.Net.Sockets.Socket.Receive%2A>場合、は、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドで指定した送信先アドレスからキューに置かれた最初のデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2300">If you are using a connectionless <xref:System.Net.Sockets.Socket>,<xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-2301">受信したデータグラムが`buffers`パラメーターのサイズよりも大きい場合は、 `buffers`メッセージの最初の部分を入力し、余分な<xref:System.Net.Sockets.SocketException>データが失われてがスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2301">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2302">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2302">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2303">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2303">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2304">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2304">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2305">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2305">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2306"><paramref name="buffers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2306"><paramref name="buffers" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-2307">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2307">-or-</span></span> 
 <span data-ttu-id="8ef83-2308"><paramref name="buffers" />.Count が 0 です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2308"><paramref name="buffers" />.Count is zero.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2309">ソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2309">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2310"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2310">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2311">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2311">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2312"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2312">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffer, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, offset, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2313">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2313">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-2314">受信データを格納する <paramref name="buffer" />内の場所。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2314">The location in <paramref name="buffer" /> to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-2315">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2315">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2316"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2316">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2317">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> から指定したバイト数のデータを受信して、受信バッファー内の指定したオフセット位置に格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2317">Receives the specified number of bytes from a bound <see cref="T:System.Net.Sockets.Socket" /> into the specified offset position of the receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2318">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2318">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2319">メソッド<xref:System.Net.Sockets.Socket.Receive%2A>は、バッファーパラメーターにデータを読み込み、正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2319">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="8ef83-2320">接続指向ソケット<xref:System.Net.Sockets.Socket.Receive%2A>とコネクションレスソケットの両方からを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2320">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="8ef83-2321">接続指向プロトコルを使用している場合は、を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>てリモートホスト接続を確立するか<xref:System.Net.Sockets.Socket.Accept%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2321">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-2322">メソッドは、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホストから到着したデータのみを読み取ります。 <xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2322">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2323">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2323">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2324"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>では、任意のホストから到着したデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2324"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="8ef83-2325">読み取り<xref:System.Net.Sockets.Socket.Receive%2A>可能なデータがない場合は、を使用<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>してタイムアウト値が設定されていない限り、データが使用可能になるまで、メソッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2325">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2326">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Receive%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2326">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2327">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2327">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2328">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2328">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-2329">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2329">See Remarks below.</span></span> <span data-ttu-id="8ef83-2330">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2330">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2331">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2331">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2332">接続指向<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Receive%2A>のを使用している場合、メソッドは、size パラメーターで指定されたバイト数まで、使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2332">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter.</span></span> <span data-ttu-id="8ef83-2333">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.Receive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2333">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-2334">コネクションレス<xref:System.Net.Sockets.Socket>を使用している<xref:System.Net.Sockets.Socket.Receive%2A>場合、は、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドで指定した送信先アドレスからキューに置かれた最初のデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2334">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-2335">受信したデータグラムが`buffer`パラメーターのサイズよりも大きい場合は、 `buffer`メッセージの最初の部分を入力し、余分な<xref:System.Net.Sockets.SocketException>データが失われてがスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2335">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2336">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2336">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2337">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2337">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2338">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2338">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2339">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2339">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2340">次のコード例では、接続されている<xref:System.Net.Sockets.Socket>でデータを受信する前に、データバッファー、オフセット、サイズ、およびソケットフラグを指定しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2340">The following code example specifies a data buffer, an offset, a size, and a socket flag before receiving data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2341"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2341"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2342"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2342"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2343">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2343">-or-</span></span> 
 <span data-ttu-id="8ef83-2344"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2344"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-2345">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2345">-or-</span></span> 
 <span data-ttu-id="8ef83-2346"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2346"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2347">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2347">-or-</span></span> 
 <span data-ttu-id="8ef83-2348"><paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2348"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2349"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2349"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-2350">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2350">-or-</span></span> 
<span data-ttu-id="8ef83-2351"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2351">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span></span>  
  
<span data-ttu-id="8ef83-2352">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2352">-or-</span></span> 
<span data-ttu-id="8ef83-2353"><see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2353">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2354"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2354">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-2355">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2355">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2356">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2356">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2357"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2357">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffer, offset, size, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2358">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2358">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-2359">受信したデータを格納する、<paramref name="buffer" /> パラメーター内の位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2359">The position in the <paramref name="buffer" /> parameter to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-2360">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2360">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2361"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2361">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-2362">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2362">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="8ef83-2363">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して受信バッファーに格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2363">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2364">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2364">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2365">メソッド<xref:System.Net.Sockets.Socket.Receive%2A>は、バッファーパラメーターにデータを読み込み、正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2365">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="8ef83-2366">接続指向ソケット<xref:System.Net.Sockets.Socket.Receive%2A>とコネクションレスソケットの両方からを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2366">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="8ef83-2367">接続指向プロトコルを使用している場合は、を呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>てリモートホスト接続を確立するか<xref:System.Net.Sockets.Socket.Accept%2A> 、を呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>前に受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2367">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="8ef83-2368">メソッドは、メソッド<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホストから到着したデータのみを読み取ります。 <xref:System.Net.Sockets.Socket.Receive%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-2368">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2369">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2369">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2370"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>では、任意のホストから到着したデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2370"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="8ef83-2371">読み取り<xref:System.Net.Sockets.Socket.Receive%2A>可能なデータがない場合は、を使用<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>してタイムアウト値が設定されていない限り、データが使用可能になるまで、メソッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2371">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2372">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Receive%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2372">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2373">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.Receive%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2373">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2374">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2374">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-2375">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2375">See Remarks below.</span></span> <span data-ttu-id="8ef83-2376">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2376">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2377">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2377">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2378">接続指向<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Receive%2A>のを使用している場合、メソッドは、size パラメーターで指定されたバイト数まで、使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2378">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter.</span></span> <span data-ttu-id="8ef83-2379">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.Receive%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2379">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="8ef83-2380">コネクションレス<xref:System.Net.Sockets.Socket>を使用している<xref:System.Net.Sockets.Socket.Receive%2A>場合、は、 <xref:System.Net.Sockets.Socket.Connect%2A>メソッドで指定した送信先アドレスからキューに置かれた最初のデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2380">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="8ef83-2381">受信したデータグラムが`buffer`パラメーターのサイズよりも大きい場合は、 `buffer`メッセージの最初の部分を入力し、余分な<xref:System.Net.Sockets.SocketException>データが失われてがスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2381">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2382">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2382">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2383">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2383">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2384">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2384">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2385">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2385">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2386"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2386"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2387"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2387"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2388">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2388">-or-</span></span> 
 <span data-ttu-id="8ef83-2389"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2389"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-2390">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2390">-or-</span></span> 
 <span data-ttu-id="8ef83-2391"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2391"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2392">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2392">-or-</span></span> 
 <span data-ttu-id="8ef83-2393"><paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2393"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2394"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2394"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-2395">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2395">-or-</span></span> 
<span data-ttu-id="8ef83-2396"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2396">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property is not set.</span></span>  
  
<span data-ttu-id="8ef83-2397">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2397">-or-</span></span> 
<span data-ttu-id="8ef83-2398"><see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2398">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2399"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2399">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-2400">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2400">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2401">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2401">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2402"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2402">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-2403">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2403">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-2404">接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトからデータを受信する非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2404">Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2405">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2405"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-2406">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2406">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-2407">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2407"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-2408">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2408">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2409">メソッド<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>は、接続されたソケットまたはバインドされたコネクションレスソケットで使用され、受信データの読み取りに使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2409">The <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method is used on connected sockets or bound connectionless sockets and is used to read incoming data.</span></span> <span data-ttu-id="8ef83-2410">ソケットのローカルアドレスがわかっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2410">The socket's local address must be known.</span></span>  
  
 <span data-ttu-id="8ef83-2411">バインドされたコネクションレスソケットの場合、この関数は、受信したメッセージが受け入れられるアドレスを制限します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2411">For bound connectionless sockets, this function restricts the addresses from which received messages are accepted.</span></span> <span data-ttu-id="8ef83-2412">関数は、接続で指定されたリモートアドレスからのメッセージのみを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2412">The function only returns messages from the remote address specified in the connection.</span></span> <span data-ttu-id="8ef83-2413">他のアドレスからのメッセージは、暗黙的に破棄されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2413">Messages from other addresses are silently discarded.</span></span>  
  
 <span data-ttu-id="8ef83-2414">`e`パラメーター <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>のプロパティは、windows ソケットサービスプロバイダーに読み取り要求に関する追加情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2414">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request.</span></span> <span data-ttu-id="8ef83-2415">このパラメーターの使用方法の詳細については<xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2415">For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8ef83-2416">このメソッドを正常に呼び出すに<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>は、オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2416">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <span data-ttu-id="8ef83-2417"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> または <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8ef83-2417"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span></span>  
  
-   <span data-ttu-id="8ef83-2418"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>が<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>設定されている場合</span><span class="sxs-lookup"><span data-stu-id="8ef83-2418"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <span data-ttu-id="8ef83-2419"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>が<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>設定されている場合</span><span class="sxs-lookup"><span data-stu-id="8ef83-2419"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-2420">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2420">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-2421">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2421">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-2422">バイトストリームスタイルのソケットの場合、バッファーがいっぱいになるか、接続が閉じられるか、内部バッファーデータが使い果たされるまで、受信データがバッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2422">For byte stream-style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.</span></span>  
  
 <span data-ttu-id="8ef83-2423">メッセージ指向のソケットの場合、受信メッセージは、 `e`パラメーターに関連付けられているバッファーの合計サイズまでバッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2423">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer associated with the `e` parameter.</span></span> <span data-ttu-id="8ef83-2424">メッセージがバッファーより大きい場合、バッファーにはメッセージの最初の部分が格納されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2424">If the message is larger than the buffer, the buffer is filled with the first part of the message.</span></span>  
  
 <span data-ttu-id="8ef83-2425">接続指向のソケットの場合、 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッドは、ソケットがバイトストリームかメッセージ指向かに応じて、2つの方法のいずれかで仮想回線の正常な終了を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2425">For connection-oriented sockets, the <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method can indicate the graceful termination of the virtual circuit in one of two ways that depend on whether the socket is byte stream or message oriented.</span></span> <span data-ttu-id="8ef83-2426">バイトストリームの場合、読み取られたゼロバイトは正常に終了したことを示し、これ以上バイトは読み取られません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2426">For byte streams, zero bytes having been read indicates graceful closure and that no more bytes will ever be read.</span></span> <span data-ttu-id="8ef83-2427">ゼロバイトのメッセージが許容されるメッセージ指向のソケットの場合、ネイティブ<xref:System.Net.Sockets.SocketException> Winsock WSAEDISCON <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>エラーコード (10101) に設定されたを使用して、正常なクロージャを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2427">For message-oriented sockets, where a zero byte message is often allowable, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAEDISCON error code (10101) is used to indicate graceful closure.</span></span> <span data-ttu-id="8ef83-2428">いずれの場合も、 <xref:System.Net.Sockets.SocketException>が<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>ネイティブ Winsock WSAECONNRESET エラーコード (10054) に設定されたを使用すると、強制終了が発生したことを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2428">In any case, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAECONNRESET error code (10054) indicates an abortive close has occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-2429">引数が無効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2429">An argument was invalid.</span></span> <span data-ttu-id="8ef83-2430"><paramref name="e" /> パラメーターの <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティまたは <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティは、有効なバッファーを参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2430">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <paramref name="e" /> parameter must reference valid buffers.</span></span> <span data-ttu-id="8ef83-2431">これらのプロパティは、どちらか 1 つを設定できます。一度に両方のプロパティを設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2431">One or the other of these properties may be set, but not both at the same time.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-2432"><paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2432">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-2433">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2433">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2434"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2434">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2435">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2435">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.Socket.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2436"><see cref="T:System.Net.Sockets.Socket" /> の受信バッファーのサイズを指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2436">Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="8ef83-2437">受信バッファーのサイズ (バイト単位) を格納している <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2437">An <see cref="T:System.Int32" /> that contains the size, in bytes, of the receive buffer.</span></span> <span data-ttu-id="8ef83-2438">既定値は 8192 です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2438">The default is 8192.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2439">バッファーサイズを大きくすると、空の受信確認 (データ部分のない TCP パケット) の数が減少する可能性がありますが、接続の問題の認識が遅れる可能性もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2439">A larger buffer size potentially reduces the number of empty acknowledgements (TCP packets with no data portion), but might also delay the recognition of connection difficulties.</span></span> <span data-ttu-id="8ef83-2440">大きなファイルを転送する場合や、高帯域幅の高待機時間接続 (サテライトブロードバンドプロバイダーなど) を使用している場合は、バッファーサイズを大きくすることを検討してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2440">Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2441">次のコード例は、 <xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2441">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2442">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2442">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2443"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2443">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2444">設定操作として指定された値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2444">The value specified for a set operation is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveFrom">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-2445">データグラムを受信し、ソース エンドポイントを格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2445">Receives a datagram and stores the source endpoint.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveFrom (buffer As Byte(), ByRef remoteEP As EndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] *  -&gt; int" Usage="socket.ReceiveFrom (buffer, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" RefType="ref" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2446">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2446">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-2447">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2447">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <summary><span data-ttu-id="8ef83-2448">データグラムを受信してデータバッファーに格納します。さらに、エンドポイントを格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2448">Receives a datagram into the data buffer and stores the endpoint.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2449">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2449">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2450">メソッド<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>は、 `buffer`パラメーターにデータを読み込み、正常に読み取られたバイト数を返し、データの送信元のリモートホストエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2450">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="8ef83-2451">この方法は、不明なホストまたは複数のホストからコネクションレスのデータグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2451">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="8ef83-2452">このオーバーロードでは、受信`buffer` <xref:System.Net.EndPoint>を指定するだけで、リモートホストを表すを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2452">This overload only requires you to provide a receive `buffer`, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="8ef83-2453">バッファーオフセットの既定値は0です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2453">The buffer offset defaults to 0.</span></span> <span data-ttu-id="8ef83-2454">サイズの既定値は`buffer`パラメーターの長さで、既定値は`socketFlags`に<xref:System.Net.Sockets.SocketFlags.None>設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2454">The size defaults to the length of the `buffer` parameter and the `socketFlags` value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2455">を呼び出す<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>前に、 <xref:System.Net.Sockets.Socket.Bind%2A>メソッドを使用<xref:System.Net.Sockets.Socket>してをローカルエンドポイントに明示的にバインドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2455">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="8ef83-2456">そうしないと、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2456">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-2457">コネクションレスプロトコルを<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用すると、は、ローカルネットワークバッファーに受信した最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2457">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="8ef83-2458">受信したデータグラムがのサイズを超える場合、 `buffer`メソッドは<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>可能な限り`buffer`多くのメッセージを格納し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2458">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2459">信頼性の低いプロトコルを使用している場合は、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2459">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="8ef83-2460">信頼できるプロトコルを使用している場合は、余分なデータがサービスプロバイダーによって保持され、十分な<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>大きさのバッファーを持つメソッドを呼び出すことによって取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2460">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="8ef83-2461">読み取り可能なデータがない場合、メソッド<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はデータが使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2461">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="8ef83-2462">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2462">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2463">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2463">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2464">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2464">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2465"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はコネクションレスプロトコルを対象としていますが、接続指向プロトコルを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2465">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="8ef83-2466">これを選択する場合は、最初にメソッドを<xref:System.Net.Sockets.Socket.Connect%2A>呼び出してリモートホスト接続を確立するか、 <xref:System.Net.Sockets.Socket.Accept%2A>メソッドを呼び出して受信リモートホスト接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2466">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2467"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出す前に接続を確立または受け入れない場合は、 <xref:System.Net.Sockets.SocketException>が取得されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2467">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2468">また、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2468">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2469">どちらの場合<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>も、メソッドは`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストからのデータのみを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2469">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-2470">接続指向のソケットを使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>すると、はのサイズまで使用可能な量の`buffer`データを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2470">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`.</span></span> <span data-ttu-id="8ef83-2471">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2471">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2472">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2472">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2473">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2473">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2474"><xref:System.Net.Sockets.AddressFamily> で<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用されるのは、 <xref:System.Net.EndPoint>で使用さ<xref:System.Net.Sockets.Socket.SendTo%2A>れているのと一致する必要<xref:System.Net.Sockets.AddressFamily>があります。 <xref:System.Net.EndPoint></span><span class="sxs-lookup"><span data-stu-id="8ef83-2474">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2475">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2475">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2476">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2476">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2477">次のコード例では、リモートホストからコネクションレスのデータグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2477">The following code example receives a connectionless datagram from a remote host.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#9)]
 [!code-csharp[Socket_Sync_Send_Receive#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#9)]
 [!code-vb[Socket_Sync_Send_Receive#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2478"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2478"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-2479">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2479">-or-</span></span> 
 <span data-ttu-id="8ef83-2480"><paramref name="remoteEP" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2480"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2481">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2481">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2482"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2482">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-2483">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2483">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2484">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2484">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2485"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2485">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" RefType="ref" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2486">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2486">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2487"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2487">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-2488">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2488">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <summary><span data-ttu-id="8ef83-2489">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、データグラムを受信してデータバッファーに格納します。さらに、エンドポイントを格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2489">Receives a datagram into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2490">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2490">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2491">メソッド<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>は、 `buffer`パラメーターにデータを読み込み、正常に読み取られたバイト数を返し、データの送信元のリモートホストエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2491">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="8ef83-2492">この方法は、不明なホストまたは複数のホストからコネクションレスのデータグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2492">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="8ef83-2493">このオーバーロードでは、受信バッファー、必要な<xref:System.Net.Sockets.SocketFlags>、 <xref:System.Net.EndPoint>およびリモートホストを表すが指定されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2493">This overload only requires you to provide a receive buffer, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="8ef83-2494">オフセットの既定値は0で、サイズは既定でバッファーパラメーターの長さに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2494">The offset defaults to 0 and the size defaults to the length of the buffer parameter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2495">を呼び出す<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>前に、 <xref:System.Net.Sockets.Socket.Bind%2A>メソッドを使用<xref:System.Net.Sockets.Socket>してをローカルエンドポイントに明示的にバインドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2495">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="8ef83-2496">そうしないと、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2496">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-2497">コネクションレスプロトコルを<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用すると、は、ローカルネットワークバッファーに受信した最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2497">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="8ef83-2498">受信したデータグラムがのサイズを超える場合、 `buffer`メソッドは<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>可能な限り`buffer`多くのメッセージを格納し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2498">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2499">信頼性の低いプロトコルを使用している場合は、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2499">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="8ef83-2500">信頼できるプロトコルを使用している場合は、余分なデータがサービスプロバイダーによって保持され、十分な<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>大きさのバッファーを持つメソッドを呼び出すことによって取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2500">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="8ef83-2501">読み取り可能なデータがない場合、メソッド<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はデータが使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2501">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="8ef83-2502">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2502">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2503">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2503">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2504">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2504">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2505"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はコネクションレスプロトコルを対象としていますが、接続指向プロトコルを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2505">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="8ef83-2506">これを選択する場合は、最初にメソッドを<xref:System.Net.Sockets.Socket.Connect%2A>呼び出してリモートホスト接続を確立するか、 <xref:System.Net.Sockets.Socket.Accept%2A>メソッドを呼び出して受信リモートホスト接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2506">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2507"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出す前に接続を確立または受け入れない場合は、 <xref:System.Net.Sockets.SocketException>が取得されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2507">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2508">また、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2508">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2509">どちらの場合<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>も、メソッドは`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストからのデータのみを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2509">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-2510">接続指向のソケットを使用<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>すると、はのサイズまで使用可能な量の`buffer`データを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2510">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`.</span></span> <span data-ttu-id="8ef83-2511">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2511">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2512">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2512">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2513">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2513">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2514"><xref:System.Net.Sockets.AddressFamily> で<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用されるのは、 <xref:System.Net.EndPoint>で使用さ<xref:System.Net.Sockets.Socket.SendTo%2A>れているのと一致する必要<xref:System.Net.Sockets.AddressFamily>があります。 <xref:System.Net.EndPoint></span><span class="sxs-lookup"><span data-stu-id="8ef83-2514">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2515">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2515">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2516">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2516">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2517">次のコード例では、リモートホストからコネクションレスのデータグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2517">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="8ef83-2518"><xref:System.Net.Sockets.SocketFlags>は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2518"><xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#10)]
 [!code-csharp[Socket_Sync_Send_Receive#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#10)]
 [!code-vb[Socket_Sync_Send_Receive#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2519"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2519"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-2520">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2520">-or-</span></span> 
 <span data-ttu-id="8ef83-2521"><paramref name="remoteEP" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2521"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2522">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2522">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2523"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2523">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-2524">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2524">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2525">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2525">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2526"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2526">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" RefType="ref" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2527">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2527">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-2528">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2528">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2529"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2529">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-2530">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2530">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <summary><span data-ttu-id="8ef83-2531">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータを受信してデータ バッファーに格納します。さらに、エンドポイントを格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2531">Receives the specified number of bytes into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2532">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2532">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2533">メソッド<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>は、 `buffer`パラメーターにデータを読み込み、正常に読み取られたバイト数を返し、データの送信元のリモートホストエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2533">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="8ef83-2534">この方法は、不明なホストまたは複数のホストからコネクションレスのデータグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2534">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="8ef83-2535">このオーバーロードで必要なのは、受信バッファー、受信<xref:System.Net.Sockets.SocketFlags>するバイト数、 <xref:System.Net.EndPoint>およびリモートホストを表すを指定することだけです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2535">This overload only requires you to provide a receive buffer, the number of bytes you want to receive, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="8ef83-2536">バッファーオフセットの既定値は0です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2536">The buffer offset defaults to 0.</span></span>  
  
 <span data-ttu-id="8ef83-2537">コネクションレスプロトコルを<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用すると、は、ローカルネットワークバッファーに受信した最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2537">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="8ef83-2538">受信したデータグラムがのサイズを超える場合、 `buffer`メソッドは<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>可能な限り`buffer`多くのメッセージを格納し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2538">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2539">信頼性の低いプロトコルを使用している場合は、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2539">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="8ef83-2540">信頼できるプロトコルを使用している場合は、余分なデータがサービスプロバイダーによって保持され、十分な<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>大きさのバッファーを持つメソッドを呼び出すことによって取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2540">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="8ef83-2541">読み取り可能なデータがない場合、メソッド<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はデータが使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2541">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="8ef83-2542">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2542">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2543">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2543">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2544">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2544">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2545"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はコネクションレスプロトコルを対象としていますが、接続指向プロトコルを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2545">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="8ef83-2546">これを選択する場合は、最初にメソッドを<xref:System.Net.Sockets.Socket.Connect%2A>呼び出してリモートホスト接続を確立するか、 <xref:System.Net.Sockets.Socket.Accept%2A>メソッドを呼び出して受信リモートホスト接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2546">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2547"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出す前に接続を確立または受け入れない場合は、 <xref:System.Net.Sockets.SocketException>が取得されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2547">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2548">また、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2548">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2549">どちらの場合<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>も、メソッドは`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストからのデータのみを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2549">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-2550">接続指向のソケットでは<xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 、は`size`パラメーターで指定されたバイト数まで、使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2550">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="8ef83-2551">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2551">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2552">を呼び出す<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>前に、 <xref:System.Net.Sockets.Socket.Bind%2A>メソッドを使用<xref:System.Net.Sockets.Socket>してをローカルエンドポイントに明示的にバインドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2552">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="8ef83-2553">そうしないと、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2553">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2554">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2554">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2555">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2555">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2556"><xref:System.Net.Sockets.AddressFamily> で<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用されるのは、 <xref:System.Net.EndPoint>で使用さ<xref:System.Net.Sockets.Socket.SendTo%2A>れているのと一致する必要<xref:System.Net.Sockets.AddressFamily>があります。 <xref:System.Net.EndPoint></span><span class="sxs-lookup"><span data-stu-id="8ef83-2556">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2557">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2557">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2558">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2558">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2559">次のコード例では、リモートホストからコネクションレスのデータグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2559">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="8ef83-2560">バッファーサイズと<xref:System.Net.Sockets.SocketFlags>は、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2560">The buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#11)]
 [!code-csharp[Socket_Sync_Send_Receive#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#11)]
 [!code-vb[Socket_Sync_Send_Receive#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2561"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2561"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-2562">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2562">-or-</span></span> 
 <span data-ttu-id="8ef83-2563"><paramref name="remoteEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2563"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2564"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2564"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2565">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2565">-or-</span></span> 
 <span data-ttu-id="8ef83-2566"><paramref name="size" /> が <paramref name="buffer" />の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2566"><paramref name="size" /> is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2567"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2567"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-2568">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2568">-or-</span></span> 
<span data-ttu-id="8ef83-2569"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2569">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span></span>  
  
<span data-ttu-id="8ef83-2570">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2570">-or-</span></span> 
<span data-ttu-id="8ef83-2571"><see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2571">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2572"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2572">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-2573">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2573">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2574">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2574">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2575"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2575">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, offset, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" RefType="ref" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2576">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2576">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-2577">受信したデータを格納する、<paramref name="buffer" /> パラメーター内の位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2577">The position in the <paramref name="buffer" /> parameter to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-2578">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2578">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2579"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2579">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-2580">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2580">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <summary><span data-ttu-id="8ef83-2581">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、指定したバイト数のデータを受信して、データ バッファー内の指定した位置に格納します。またエンドポイントを格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2581">Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2582">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2582">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2583">メソッド<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>は、 `buffer`パラメーターにデータを読み込み、正常に読み取られたバイト数を返し、データの送信元のリモートホストエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2583">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="8ef83-2584">この方法は、不明なホストまたは複数のホストからコネクションレスのデータグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2584">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="8ef83-2585">コネクションレスプロトコルを<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用すると、は、ローカルネットワークバッファーに受信した最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2585">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="8ef83-2586">受信したデータグラムがのサイズを超える場合、 `buffer`メソッドは<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>可能な限り`buffer`多くのメッセージを格納し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2586">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2587">信頼性の低いプロトコルを使用している場合は、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2587">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="8ef83-2588">信頼できるプロトコルを使用している場合は、余分なデータがサービスプロバイダーによって保持され、十分な<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>大きさのバッファーを持つメソッドを呼び出すことによって取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2588">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="8ef83-2589">読み取り可能なデータがない場合、メソッド<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はデータが使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2589">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="8ef83-2590">非ブロッキングモードで、プロトコルスタックバッファーのに使用できるデータがない場合、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは直ちに完了し、を<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2590">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2591">プロパティを使用し<xref:System.Net.Sockets.Socket.Available%2A>て、データを読み取り可能にするかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2591">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="8ef83-2592">が<xref:System.Net.Sockets.Socket.Available%2A> 0 以外の場合は、受信操作を再試行します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2592">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="8ef83-2593"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はコネクションレスプロトコルを対象としていますが、接続指向プロトコルを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2593">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="8ef83-2594">これを選択する場合は、最初にメソッドを<xref:System.Net.Sockets.Socket.Connect%2A>呼び出してリモートホスト接続を確立するか、 <xref:System.Net.Sockets.Socket.Accept%2A>メソッドを呼び出して受信リモートホスト接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2594">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-2595"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出す前に接続を確立または受け入れない場合は、 <xref:System.Net.Sockets.SocketException>が取得されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2595">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2596">また、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2596">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="8ef83-2597">どちらの場合<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>も、メソッドは`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストからのデータのみを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2597">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-2598">接続指向のソケットでは<xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 、は、 `size`パラメーターで指定されたバイト数まで、使用可能な量のデータを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2598">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the amount of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="8ef83-2599">リモートホストが<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドとの接続を切断し、使用可能なすべてのデータを受信した<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>場合、メソッドは直ちに完了し、0バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2599">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2600">を呼び出す<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>前に、 <xref:System.Net.Sockets.Socket.Bind%2A>メソッドを使用<xref:System.Net.Sockets.Socket>してをローカルエンドポイントに明示的にバインドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2600">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="8ef83-2601">そうしないと、 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2601">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2602">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2602">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2603">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2603">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2604"><xref:System.Net.Sockets.AddressFamily> で<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用されるのは、 <xref:System.Net.EndPoint>で使用さ<xref:System.Net.Sockets.Socket.SendTo%2A>れているのと一致する必要<xref:System.Net.Sockets.AddressFamily>があります。 <xref:System.Net.EndPoint></span><span class="sxs-lookup"><span data-stu-id="8ef83-2604">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2605">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2605">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2606">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2606">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2607">次のコード例では、リモートホストからコネクションレスのデータグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2607">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="8ef83-2608">オフセット、バッファーサイズ、および<xref:System.Net.Sockets.SocketFlags>が<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2608">The offset, buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#12](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#12)]
 [!code-csharp[Socket_Sync_Send_Receive#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#12)]
 [!code-vb[Socket_Sync_Send_Receive#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2609"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2609"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-2610">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2610">-or-</span></span> 
 <span data-ttu-id="8ef83-2611"><paramref name="remoteEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2611"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2612"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2612"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2613">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2613">-or-</span></span> 
 <span data-ttu-id="8ef83-2614"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2614"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-2615">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2615">-or-</span></span> 
 <span data-ttu-id="8ef83-2616"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2616"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2617">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2617">-or-</span></span> 
 <span data-ttu-id="8ef83-2618"><paramref name="size" /> が、<paramref name="buffer" /> の長さからオフセット パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2618"><paramref name="size" /> is greater than the length of the <paramref name="buffer" /> minus the value of the offset parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2619"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2619"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-2620">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2620">-or-</span></span> 
<span data-ttu-id="8ef83-2621"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2621">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span></span>  
  
<span data-ttu-id="8ef83-2622">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2622">-or-</span></span> 
<span data-ttu-id="8ef83-2623">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2623">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2624"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2624">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2625">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2625">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2626"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2626">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFromAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveFromAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveFromAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveFromAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFromAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveFromAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-2627">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2627">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-2628">指定したネットワーク デバイスから、データの非同期の受信を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2628">Begins to asynchronously receive data from a specified network device.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2629">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2629"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-2630">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2630">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-2631">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2631"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-2632">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2632">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2633">メソッド<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>は、主にコネクションレスソケットでデータを受信するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2633">The <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> method is used primarily to receive data on a connectionless socket.</span></span> <span data-ttu-id="8ef83-2634">ソケットのローカルアドレスがわかっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2634">The socket's local address must be known.</span></span>  
  
 <span data-ttu-id="8ef83-2635">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティを、データを受信するリモートホスト<xref:System.Net.IPEndPoint>のに設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2635">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.</span></span>  
  
 <span data-ttu-id="8ef83-2636">`e`パラメーター <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>のプロパティは、windows ソケットサービスプロバイダーに読み取り要求に関する追加情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2636">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request.</span></span> <span data-ttu-id="8ef83-2637">このパラメーターの使用方法の詳細については<xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2637">For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="8ef83-2638">このメソッドを正常に呼び出すに<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>は、オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2638">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-2639">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2639">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-2640">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2640">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-2641">メッセージ指向のソケットの場合は、バッファーの合計サイズまで、受信メッセージがバッファーに格納されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2641">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer.</span></span> <span data-ttu-id="8ef83-2642">プロパティ<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> と<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>プロパティは、データが格納されるバッファー内の場所とデータ量を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2642">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 <span data-ttu-id="8ef83-2643">バイトストリームスタイルのソケットの場合、バッファーがいっぱいになるか、接続が閉じられるか、内部バッファーデータが使い果たされるまで、受信データがバッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2643">For byte stream-style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.</span></span> <span data-ttu-id="8ef83-2644">プロパティ<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> と<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>プロパティは、データが格納されるバッファー内の場所とデータ量を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2644">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2645"><see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> に null 値を指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2645">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-2646"><paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2646">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-2647">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2647">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2648"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2648">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2649">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2649">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public int ReceiveMessageFrom (byte[] buffer, int offset, int size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveMessageFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags&amp; socketFlags, class System.Net.EndPoint&amp; remoteEP, [out] valuetype System.Net.Sockets.IPPacketInformation&amp; ipPacketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveMessageFrom (buffer As Byte(), offset As Integer, size As Integer, ByRef socketFlags As SocketFlags, ByRef remoteEP As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveMessageFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags % socketFlags, System::Net::EndPoint ^ % remoteEP, [Runtime::InteropServices::Out] System::Net::Sockets::IPPacketInformation % ipPacketInformation);" />
      <MemberSignature Language="F#" Value="member this.ReceiveMessageFrom : byte[] * int * int *  *  *  -&gt; int" Usage="socket.ReceiveMessageFrom (buffer, offset, size, socketFlags, remoteEP, ipPacketInformation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" RefType="ref" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" RefType="ref" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="ipPacketInformation" Type="System.Net.Sockets.IPPacketInformation" RefType="out" Index="5" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2650">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2650">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-2651">受信したデータを格納する、<paramref name="buffer" /> パラメーター内の位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2651">The position in the <paramref name="buffer" /> parameter to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-2652">受信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2652">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2653"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2653">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-2654">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2654">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <param name="ipPacketInformation"><span data-ttu-id="8ef83-2655">アドレスとインターフェイスの情報を保持する <see cref="T:System.Net.Sockets.IPPacketInformation" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2655">An <see cref="T:System.Net.Sockets.IPPacketInformation" /> holding address and interface information.</span></span></param>
        <summary><span data-ttu-id="8ef83-2656">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、指定したバイト数のデータをデータ バッファー内の指定した位置で受信して、エンドポイントおよびパケット情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2656">Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint and packet information.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2657">受信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2657">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2658">メソッド<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>は、 `buffer`パラメーターにデータを読み込み、正常に読み取られたバイト数を返します。さらに、データの送信元のリモートホストエンドポイントと、受信パケットに関する情報をキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2658">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent, as well as information about the received packet.</span></span>  
  
 <span data-ttu-id="8ef83-2659">メソッド<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>は、主にコネクションレスソケットでメッセージデータを受信するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2659">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method is used primarily to receive message data on a connectionless socket.</span></span> <span data-ttu-id="8ef83-2660">ソケットのローカルアドレスがわかっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2660">The socket's local address must be known.</span></span> <span data-ttu-id="8ef83-2661">このメソッドは、データグラムと raw ソケットでのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2661">This method can only be used with datagram and raw sockets.</span></span> <span data-ttu-id="8ef83-2662">このメソッドを呼び出す前に、ソケットの種類を<xref:System.Net.Sockets.SocketType.Dgram>また<xref:System.Net.Sockets.SocketType.Raw>はに設定して、ソケットを初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2662">The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType.Dgram> or <xref:System.Net.Sockets.SocketType.Raw> before calling this method.</span></span> <span data-ttu-id="8ef83-2663">これは、を使用して<xref:System.Net.Sockets.Socket.%23ctor%2A>ソケットを構築するときに実行できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2663">This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2664">メッセージ指向のソケットの場合、パラメーターに指定された`buffer` `size`合計サイズまで、受信メッセージがパラメーターに配置されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2664">For message-oriented sockets, an incoming message is placed into the `buffer` parameter up to the total size specified in the `size` parameter.</span></span> <span data-ttu-id="8ef83-2665">パラメーター `offset`は、データのどこ`buffer`に配置されるかを決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2665">The `offset` parameter determines where in the `buffer` the data is placed.</span></span> <span data-ttu-id="8ef83-2666">に`buffer`格納される実際のデータ量は、 <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドによって返されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2666">The actual amount of data placed into the `buffer` is returned by the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-2667">メソッド<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>は、指定`true`さ<xref:System.Net.Sockets.SocketOptionName.PacketInformation> れたに対して初めて呼び出されるときに、socketオプションを自動的に<xref:System.Net.Sockets.Socket>設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2667">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method automatically method sets the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-2668">ただし、返さ<xref:System.Net.Sockets.IPPacketInformation>れるオブジェクトは、ソケットオプションが設定された後にローカルコンピューターに到着するパケットに対してのみ有効です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2668">However, the returned <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set.</span></span> <span data-ttu-id="8ef83-2669">ソケットがローカルエンドポイントにバインドされる<xref:System.Net.Sockets.Socket.Bind%2A>とき (メソッドによって明示的に、または、、 <xref:System.Net.Sockets.Socket.SendTo%2A>、または<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッド<xref:System.Net.Sockets.Socket.ConnectAsync%2A>のいずれかによって暗黙的に指定される<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> ) にパケットが送信される場合は。メソッドでは、 <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドを呼び出す<xref:System.Net.Sockets.IPPacketInformation>と、これらのパケットに対して無効なオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2669">If a socket is sent packets between when it is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and its first call to the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method, calls to <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method will return invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.</span></span>  
  
 <span data-ttu-id="8ef83-2670">すべて<xref:System.Net.Sockets.IPPacketInformation>のオブジェクトが有効であることを確認するには<xref:System.Net.Sockets.SocketOptionName.PacketInformation> 、アプリケーションで`true` socket オプションをに設定してから、 <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29>メソッドを使用してローカルエンドポイントにバインドします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2670">To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="8ef83-2671">アプリケーションでは、ユニ`ipPacketInformation`キャストアドレス、マルチキャストアドレス、またはブロードキャストアドレスを使用してデータグラムが送信されたかどうかを確認する必要がある場合に、パラメーターを調べることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2671">An application can examine the `ipPacketInformation` parameter if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2672"><xref:System.Net.Sockets.AddressFamily> で<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>使用されるのは、 <xref:System.Net.EndPoint>で使用さ<xref:System.Net.Sockets.Socket.SendTo%2A>れているのと一致する必要<xref:System.Net.Sockets.AddressFamily>があります。 <xref:System.Net.EndPoint></span><span class="sxs-lookup"><span data-stu-id="8ef83-2672">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2673">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2673">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2674">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2674">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2675"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2675"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-2676">\- または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2676">\- or-</span></span> 
 <span data-ttu-id="8ef83-2677"><paramref name="remoteEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2677"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2678"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2678"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2679">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2679">-or-</span></span> 
 <span data-ttu-id="8ef83-2680"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2680"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-2681">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2681">-or-</span></span> 
 <span data-ttu-id="8ef83-2682"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2682"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-2683">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2683">-or-</span></span> 
 <span data-ttu-id="8ef83-2684"><paramref name="size" /> が、<paramref name="buffer" /> の長さからオフセット パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2684"><paramref name="size" /> is greater than the length of the <paramref name="buffer" /> minus the value of the offset parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2685"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2685"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-2686">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-2686">-or-</span></span> 
<span data-ttu-id="8ef83-2687"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2687">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span></span>  
  
<span data-ttu-id="8ef83-2688">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2688">-or-</span></span> 
<span data-ttu-id="8ef83-2689">.NET Framework が、AMD 64 ビット プロセッサ上で実行されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2689">The .NET Framework is running on an AMD 64-bit processor.</span></span>  
  
<span data-ttu-id="8ef83-2690">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2690">-or-</span></span> 
<span data-ttu-id="8ef83-2691">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2691">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2692"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2692">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-2693">Windows 2000 以前のオペレーティング システムです。このメソッドを使用するには、Windows XP が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2693">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="8ef83-2694">ネットワークからの接続を受け入れるために使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2694">for accepting connections from the network.</span></span> <span data-ttu-id="8ef83-2695"><see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="8ef83-2695">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFromAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveMessageFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveMessageFromAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveMessageFromAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveMessageFromAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveMessageFromAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveMessageFromAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-2696">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2696">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-2697">指定された <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" /> を使用し、指定されたバイト数のデータの非同期受信を開始して、データ バッファー内の指定された場所に格納します。さらに、エンドポイントとパケットの情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2697">Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" />, and stores the endpoint and packet information.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2698">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2698"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-2699">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2699">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-2700">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2700"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-2701">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2701">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2702">メソッド<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>は、主にコネクションレスソケットでメッセージデータを受信するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2702">The <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method is used primarily to receive message data on a connectionless socket.</span></span> <span data-ttu-id="8ef83-2703">ソケットのローカルアドレスがわかっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2703">The socket's local address must be known.</span></span> <span data-ttu-id="8ef83-2704">このメソッドは、データグラムと raw ソケットでのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2704">This method can only be used with datagram and raw sockets.</span></span> <span data-ttu-id="8ef83-2705">このメソッドを呼び出す前に、ソケットの種類を<xref:System.Net.Sockets.SocketType.Dgram>また<xref:System.Net.Sockets.SocketType.Raw>はに設定して、ソケットを初期化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2705">The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType.Dgram> or <xref:System.Net.Sockets.SocketType.Raw> before calling this method.</span></span> <span data-ttu-id="8ef83-2706">これは、を使用して<xref:System.Net.Sockets.Socket.%23ctor%2A>ソケットを構築するときに実行できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2706">This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2707">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティを、データを受信するリモートホスト<xref:System.Net.IPEndPoint>のに設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2707">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.</span></span>  
  
 <span data-ttu-id="8ef83-2708">このメソッドを正常に呼び出すに<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>は、オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2708">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-2709">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2709">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-2710">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2710">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-2711">メッセージ指向のソケットの場合は、バッファーの合計サイズまで、受信メッセージがバッファーに格納されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2711">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer.</span></span> <span data-ttu-id="8ef83-2712">プロパティ<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> と<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>プロパティは、データが格納されるバッファー内の場所とデータ量を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2712">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 <span data-ttu-id="8ef83-2713">メソッド<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>は、指定さ<xref:System.Net.Sockets.SocketOptionName.PacketInformation> `true` れたに対して初めて呼び出されるときに、ソケットオプションを自動的に<xref:System.Net.Sockets.Socket>設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2713">The <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method automatically sets the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-2714">ただし、オブジェクトは、ソケットオプションが設定された後にローカルコンピューターに到着するパケットに対してのみ有効です。 <xref:System.Net.Sockets.IPPacketInformation></span><span class="sxs-lookup"><span data-stu-id="8ef83-2714">However, the <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set.</span></span> <span data-ttu-id="8ef83-2715">ソケットがローカルエンドポイントにバインドされたとき<xref:System.Net.Sockets.Socket.Bind%2A> (メソッドによって明示的に、または、、 <xref:System.Net.Sockets.Socket.SendTo%2A>、または<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッド<xref:System.Net.Sockets.Socket.ConnectAsync%2A>のいずれかによって暗黙的に呼び出さ<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>れたとき)に、ソケットがパケットを送信する場合は、メソッドでは、 <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>メソッドを呼び出すと<xref:System.Net.Sockets.IPPacketInformation> 、これらのパケットに対して無効なオブジェクトが生成されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2715">If a socket is sent packets between when the socket is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and the first call to the <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method, calls to <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method will result in invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.</span></span>  
  
 <span data-ttu-id="8ef83-2716">すべて<xref:System.Net.Sockets.IPPacketInformation>のオブジェクトが有効であることを確認するには<xref:System.Net.Sockets.SocketOptionName.PacketInformation> 、アプリケーションで`true` socket オプションをに設定してから、 <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29>メソッドを使用してローカルエンドポイントにバインドします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2716">To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to`true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="8ef83-2717">アプリケーションは、データグラムがユニ<xref:System.Net.Sockets.IPPacketInformation>キャスト、マルチキャスト、またはブロードキャストアドレスを使用して送信されたかどうかを知る必要がある場合に、結果として得られるオブジェクトを調べることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2717">An application can examine the resulting <xref:System.Net.Sockets.IPPacketInformation> objects if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2718"><see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> に null 値を指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2718">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-2719">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2719">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2720"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2720">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2721">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2721">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveTimeout : int with get, set" Usage="System.Net.Sockets.Socket.ReceiveTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2722">同期の <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 呼び出しがタイムアウトするまでの合計時間を指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2722">Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Receive" /> call will time out.</span></span></summary>
        <value><span data-ttu-id="8ef83-2723">タイムアウト値 (ミリ秒)。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2723">The time-out value, in milliseconds.</span></span> <span data-ttu-id="8ef83-2724">既定値は 0 です。タイムアウトが無期限であることを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2724">The default value is 0, which indicates an infinite time-out period.</span></span> <span data-ttu-id="8ef83-2725">-1 の指定も、タイムアウトが無期限であることを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2725">Specifying -1 also indicates an infinite time-out period.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2726">このオプションは、同期<xref:System.Net.Sockets.Socket.Receive%2A>呼び出しにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2726">This option applies to synchronous <xref:System.Net.Sockets.Socket.Receive%2A> calls only.</span></span> <span data-ttu-id="8ef83-2727">タイムアウト期間を超過<xref:System.Net.Sockets.Socket.Receive%2A>した場合、メソッドはを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2727">If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2728">次のコード例は、 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2728">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2729">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2729">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2730"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2730">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2731">設定操作として指定された値が -1 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2731">The value specified for a set operation is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoteEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint RemoteEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint RemoteEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoteEndPoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ RemoteEndPoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteEndPoint : System.Net.EndPoint" Usage="System.Net.Sockets.Socket.RemoteEndPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2732">リモート エンドポイントを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2732">Gets the remote endpoint.</span></span></summary>
        <value><span data-ttu-id="8ef83-2733"><see cref="T:System.Net.EndPoint" /> の通信先の <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2733">The <see cref="T:System.Net.EndPoint" /> with which the <see cref="T:System.Net.Sockets.Socket" /> is communicating.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2734">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>プロパティは、 <xref:System.Net.Sockets.Socket>が<xref:System.Net.EndPoint>接続されているリモート IP アドレスとポート番号を含むを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2734">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property gets the <xref:System.Net.EndPoint> that contains the remote IP address and port number to which the <xref:System.Net.Sockets.Socket> is connected.</span></span> <span data-ttu-id="8ef83-2735">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>場合、には、 <xref:System.Net.Sockets.Socket>が通信する既定のリモート IP アドレスとポート番号が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2735">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> contains the default remote IP address and port number with which the <xref:System.Net.Sockets.Socket> will communicate.</span></span> <span data-ttu-id="8ef83-2736">情報を取得する<xref:System.Net.EndPoint>前に<xref:System.Net.IPEndPoint> 、これをにキャストする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2736">You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information.</span></span> <span data-ttu-id="8ef83-2737">その後、 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>メソッドを呼び出してリモート<xref:System.Net.IPAddress>を<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>取得し、メソッドを呼び出してリモートポート番号を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2737">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to retrieve the remote <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to retrieve the remote port number.</span></span>  
  
 <span data-ttu-id="8ef83-2738">は<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 、 <xref:System.Net.Sockets.Socket.Accept%2A>または<xref:System.Net.Sockets.Socket.Connect%2A>の呼び出しの後に設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2738">The <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> is set after a call to either <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-2739">以前にこのプロパティにアクセスしようとする<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>と、は<xref:System.Net.Sockets.SocketException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2739">If you try to access this property earlier, <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2740">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2740">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2741">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2741">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2742">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2742">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2743">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2743">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2744">次のコード例では、ローカルとリモートのエンドポイントを取得して表示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2744">The following code example retrieves and displays the local and remote endpoints.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#4)]
 [!code-csharp[Socket_Socket_Options#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#4)]
 [!code-vb[Socket_Socket_Options#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2745">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2745">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2746"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2746">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
      </Docs>
    </Member>
    <Member MemberName="SafeHandle">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SafeSocketHandle SafeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.SafeSocketHandle SafeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SafeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeHandle As SafeSocketHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::SafeSocketHandle ^ SafeHandle { System::Net::Sockets::SafeSocketHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SafeHandle : System.Net.Sockets.SafeSocketHandle" Usage="System.Net.Sockets.Socket.SafeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SafeSocketHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-2747">現在の <see cref="T:System.Net.Sockets.Socket" /> オブジェクトによってカプセル化されているソケット ハンドルを表す <see cref="T:System.Net.Sockets.SafeSocketHandle" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2747">Gets a <see cref="T:System.Net.Sockets.SafeSocketHandle" /> that represents the socket handle that the current <see cref="T:System.Net.Sockets.Socket" /> object encapsulates.</span></span></summary>
        <value><span data-ttu-id="8ef83-2748">現在<see cref="T:System.Net.Sockets.Socket" />のオブジェクトによってカプセル化されるソケットに対して安全な方法で公開されるソケットハンドル。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2748">A socket handle exposed in a safe manner for the socket that the current <see cref="T:System.Net.Sockets.Socket" /> object encapsulates.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

> [!IMPORTANT]
> <span data-ttu-id="8ef83-2749">を使用してソケットを直接操作すると、ドキュメント化されていない状態になる場合があります。<xref:System.Net.Sockets.SafeSocketHandle></span><span class="sxs-lookup"><span data-stu-id="8ef83-2749">Using the <xref:System.Net.Sockets.SafeSocketHandle> to operate on the socket directly may result in an undocumented state.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public static void Select (System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, int microSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Select(class System.Collections.IList checkRead, class System.Collections.IList checkWrite, class System.Collections.IList checkError, int32 microSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Select (checkRead As IList, checkWrite As IList, checkError As IList, microSeconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Select(System::Collections::IList ^ checkRead, System::Collections::IList ^ checkWrite, System::Collections::IList ^ checkError, int microSeconds);" />
      <MemberSignature Language="F#" Value="static member Select : System.Collections.IList * System.Collections.IList * System.Collections.IList * int -&gt; unit" Usage="System.Net.Sockets.Socket.Select (checkRead, checkWrite, checkError, microSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkRead" Type="System.Collections.IList" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="checkWrite" Type="System.Collections.IList" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="checkError" Type="System.Collections.IList" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="microSeconds" Type="System.Int32" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="checkRead"><span data-ttu-id="8ef83-2750">読みやすさを確認する <see cref="T:System.Net.Sockets.Socket" /> インスタンスの <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2750">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for readability.</span></span></param>
        <param name="checkWrite"><span data-ttu-id="8ef83-2751">書き込み機能をチェックする <see cref="T:System.Net.Sockets.Socket" /> インスタンスの <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2751">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for writability.</span></span></param>
        <param name="checkError"><span data-ttu-id="8ef83-2752">エラーをチェックする <see cref="T:System.Net.Sockets.Socket" /> インスタンスの <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2752">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for errors.</span></span></param>
        <param name="microSeconds"><span data-ttu-id="8ef83-2753">タイムアウト値 (マイクロ秒)。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2753">The time-out value, in microseconds.</span></span> <span data-ttu-id="8ef83-2754">値が -1 の場合は、タイムアウトが無限であることを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2754">A -1 value indicates an infinite time-out.</span></span></param>
        <summary><span data-ttu-id="8ef83-2755">1 つまたは複数のソケットのステータスを判断します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2755">Determines the status of one or more sockets.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2756"><xref:System.Net.Sockets.Socket.Select%2A>は、1つ<xref:System.Net.Sockets.Socket>以上のインスタンスの状態を決定する静的メソッドです。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2756"><xref:System.Net.Sockets.Socket.Select%2A> is a static method that determines the status of one or more <xref:System.Net.Sockets.Socket> instances.</span></span> <span data-ttu-id="8ef83-2757">メソッド<xref:System.Net.Sockets.Socket.Select%2A>を使用する前に、 <xref:System.Collections.IList> 1 つまたは複数のソケットをに配置する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2757">You must place one or more sockets into an <xref:System.Collections.IList> before you can use the <xref:System.Net.Sockets.Socket.Select%2A> method.</span></span> <span data-ttu-id="8ef83-2758">パラメーターとして<xref:System.Net.Sockets.Socket.Select%2A> <xref:System.Collections.IList>を指定してを呼び出すことにより、読みやすさを確認します。 `checkRead`</span><span class="sxs-lookup"><span data-stu-id="8ef83-2758">Check for readability by calling <xref:System.Net.Sockets.Socket.Select%2A> with the <xref:System.Collections.IList> as the `checkRead` parameter.</span></span> <span data-ttu-id="8ef83-2759">書き込み機能のソケットを確認するには`checkWrite` 、パラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2759">To check your sockets for writability, use the `checkWrite` parameter.</span></span> <span data-ttu-id="8ef83-2760">エラー状態を検出するに`checkError`は、を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2760">For detecting error conditions, use `checkError`.</span></span> <span data-ttu-id="8ef83-2761">を呼び<xref:System.Net.Sockets.Socket.Select%2A>出すと、条件を満たすソケットだけがに格納されます。<xref:System.Collections.IList></span><span class="sxs-lookup"><span data-stu-id="8ef83-2761">After calling <xref:System.Net.Sockets.Socket.Select%2A>, the <xref:System.Collections.IList> will be filled with only those sockets that satisfy the conditions.</span></span>  
  
 <span data-ttu-id="8ef83-2762">リッスン状態の場合、読みやすさとは、の呼び出しがブロック<xref:System.Net.Sockets.Socket.Accept%2A>されずに成功することを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2762">If you are in a listening state, readability means that a call to <xref:System.Net.Sockets.Socket.Accept%2A> will succeed without blocking.</span></span> <span data-ttu-id="8ef83-2763">既に接続を受け入れている場合、読みやすさとは、データが読み取り可能であることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2763">If you have already accepted the connection, readability means that data is available for reading.</span></span> <span data-ttu-id="8ef83-2764">このような場合、すべての受信操作はブロックされずに成功します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2764">In these cases, all receive operations will succeed without blocking.</span></span> <span data-ttu-id="8ef83-2765">また、読みやすさは、リモート<xref:System.Net.Sockets.Socket>が接続をシャットダウンしたかどうかを示すこと<xref:System.Net.Sockets.Socket.Receive%2A>もできます。この場合、への呼び出しは、ゼロバイトが返された直後に戻ります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2765">Readability can also indicate whether the remote <xref:System.Net.Sockets.Socket> has shut down the connection; in that case a call to <xref:System.Net.Sockets.Socket.Receive%2A> will return immediately, with zero bytes returned.</span></span>  
  
 <span data-ttu-id="8ef83-2766"><xref:System.Net.Sockets.Socket.Select%2A>対象のソケットの少なくとも1つ`checkRead`(、 `checkWrite`、および`checkError`リスト内のソケット) が、指定された条件を満たし`microSeconds`ている場合、またはパラメーターの値を超えた場合、いずれか早い方がを返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2766"><xref:System.Net.Sockets.Socket.Select%2A> returns when at least one of the sockets of interest (the sockets in the `checkRead`, `checkWrite`, and `checkError` lists) meets its specified criteria, or the `microSeconds` parameter is exceeded, whichever comes first.</span></span> <span data-ttu-id="8ef83-2767">を`microSeconds` -1 に設定すると、無制限のタイムアウトが指定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2767">Setting `microSeconds` to -1 specifies an infinite time-out.</span></span>  
  
 <span data-ttu-id="8ef83-2768">に対し<xref:System.Net.Sockets.Socket.Connect%2A>て非ブロッキング呼び出しを行うと、書き込み機能は正常に接続したことを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2768">If you make a nonblocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, writability means that you have connected successfully.</span></span> <span data-ttu-id="8ef83-2769">既に接続が確立されている場合、書き込み機能は、すべての送信操作がブロックせずに成功することを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2769">If you already have a connection established, writability means that all send operations will succeed without blocking.</span></span>  
  
 <span data-ttu-id="8ef83-2770">へ<xref:System.Net.Sockets.Socket.Connect%2A>の非ブロッキング呼び出しを行った場合、パラメーターは`checkerror`正常に接続されていないソケットを識別します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2770">If you have made a non-blocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, the `checkerror` parameter identifies sockets that have not connected successfully.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2771">1つ<xref:System.Net.Sockets.Socket.Poll%2A> <xref:System.Net.Sockets.Socket>のの状態のみを確認する場合は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2771">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method if you only want to determine the status of a single <xref:System.Net.Sockets.Socket>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2772">この方法では、ネットワークケーブルの切断など、特定の種類の接続の問題を検出することはできません。また、リモートホストが異常終了をシャットダウンしたことを確認することもできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2772">This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully.</span></span> <span data-ttu-id="8ef83-2773">これらの種類のエラーを検出するには、データの送信または受信を試みる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2773">You must attempt to send or receive data to detect these kinds of errors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2774">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2774">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2775">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2775">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2776">次のコード例で<xref:System.Net.Sockets.Socket.Select%2A>は、を使用して、接続要求があるリッスンソケットを特定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2776">The following code example uses <xref:System.Net.Sockets.Socket.Select%2A> to determine which listening sockets have a connection request.</span></span>  
  
 [!code-cpp[Socket_Select#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Select/CPP/source.cpp#1)]
 [!code-csharp[Socket_Select#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Select/CS/source.cs#1)]
 [!code-vb[Socket_Select#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Select/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2777"><paramref name="checkRead" /> パラメーターは <see langword="null" /> または空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2777">The <paramref name="checkRead" /> parameter is <see langword="null" /> or empty.</span></span>  
  
<span data-ttu-id="8ef83-2778">および</span><span class="sxs-lookup"><span data-stu-id="8ef83-2778">-and-</span></span> 
<span data-ttu-id="8ef83-2779"><paramref name="checkWrite" /> パラメーターは <see langword="null" /> または空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2779">The <paramref name="checkWrite" /> parameter is <see langword="null" /> or empty</span></span> 
<span data-ttu-id="8ef83-2780">および</span><span class="sxs-lookup"><span data-stu-id="8ef83-2780">-and-</span></span> 
<span data-ttu-id="8ef83-2781"><paramref name="checkError" /> パラメーターは <see langword="null" /> または空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2781">The <paramref name="checkError" /> parameter is <see langword="null" /> or empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2782">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2782">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-2783">接続された <see cref="T:System.Net.Sockets.Socket" /> にデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2783">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffer As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] -&gt; int" Usage="socket.Send buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2784">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2784">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <summary><span data-ttu-id="8ef83-2785">接続された <see cref="T:System.Net.Sockets.Socket" /> にデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2785">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2786"><see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2786">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2787"><xref:System.Net.Sockets.Socket.Send%2A><xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで指定されたリモートホストにデータを同期的に送信し、正常に送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2787"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="8ef83-2788"><xref:System.Net.Sockets.Socket.Send%2A>は、接続指向プロトコルとコネクションレスプロトコルの両方に使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2788"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="8ef83-2789">このオーバーロードには、送信するデータを格納するバッファーが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2789">This overload requires a buffer that contains the data you want to send.</span></span> <span data-ttu-id="8ef83-2790">既定<xref:System.Net.Sockets.SocketFlags>値は0です。バッファーオフセットの既定値は0で、既定で送信されるバイト数はバッファーのサイズに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2790">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</span></span>  
  
 <span data-ttu-id="8ef83-2791">コネクションレスプロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Send%2A> 、このメソッドを呼び出す前にを呼び出す<xref:System.Net.Sockets.SocketException>必要があります。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2791">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2792">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2792">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-2793">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信することを<xref:System.Net.Sockets.Socket.SendTo%2A>計画している場合は、メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2793">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-2794"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを使用しない場合は、の各呼び出し<xref:System.Net.Sockets.Socket.Send%2A>の前<xref:System.Net.Sockets.Socket.Connect%2A>にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2794">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="8ef83-2795"><xref:System.Net.Sockets.Socket.SendTo%2A> を<xref:System.Net.Sockets.Socket.Connect%2A>使用して既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2795">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-2796">を呼び出す前<xref:System.Net.Sockets.Socket.Send%2A>に、を<xref:System.Net.Sockets.Socket.Connect%2A>もう一度呼び出すことによって、既定のリモートホストを変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2796">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2797">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Send%2A>は、を使用<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>してタイムアウトが設定されていない限り、バッファー内のすべてのバイトが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2797">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2798">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Send%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2798">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2799">非ブロッキングモードで<xref:System.Net.Sockets.Socket.Send%2A>は、がバッファー内のバイト数よりも少ない場合でも、が正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2799">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2800">アプリケーションは、送信されたバイト数を追跡し、アプリケーションがバッファー内のバイトを送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2800">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2801">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2801">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-2802">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2802">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-2803"><xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2803">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2804">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2804">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2805">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2805">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2806">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2806">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-2807">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2807">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2808">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2808">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2809">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2809">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2810">次のコード例は、接続さ<xref:System.Net.Sockets.Socket>れたにデータを送信する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2810">The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Sync_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Sync_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2811"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2811"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2812">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2812">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2813"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2813">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffers As IList(Of ArraySegment(Of Byte))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; int" Usage="socket.Send buffers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-2814">送信するデータを格納する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" /> のリスト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2814">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <summary><span data-ttu-id="8ef83-2815">リスト内のバッファーのセットを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2815">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2816"><see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2816">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2817"><xref:System.Net.Sockets.Socket.Send%2A>は、接続指向プロトコルとコネクションレスプロトコルの両方に使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2817"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="8ef83-2818">このオーバーロードには、送信するデータを含むバッファーが少なくとも1つ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2818">This overload requires at least one buffer that contains the data you want to send.</span></span>  
  
 <span data-ttu-id="8ef83-2819">コネクションレスプロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Send%2A> 、このメソッドを呼び出す前にを呼び出す<xref:System.Net.Sockets.SocketException>必要があります。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2819">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2820">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2820">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-2821">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信することを<xref:System.Net.Sockets.Socket.SendTo%2A>計画している場合は、メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2821">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-2822"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを使用しない場合は、の各呼び出し<xref:System.Net.Sockets.Socket.Send%2A>の前<xref:System.Net.Sockets.Socket.Connect%2A>にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2822">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="8ef83-2823"><xref:System.Net.Sockets.Socket.SendTo%2A> を<xref:System.Net.Sockets.Socket.Connect%2A>使用して既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2823">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-2824">を呼び出す前<xref:System.Net.Sockets.Socket.Send%2A>に、を<xref:System.Net.Sockets.Socket.Connect%2A>もう一度呼び出すことによって、既定のリモートホストを変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2824">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2825">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Send%2A>は、を使用<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>してタイムアウトが設定されていない限り、バッファー内のすべてのバイトが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2825">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2826">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Send%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2826">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2827">非ブロッキングモードで<xref:System.Net.Sockets.Socket.Send%2A>は、がバッファー内のバイト数よりも少ない場合でも、が正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2827">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2828">アプリケーションは、送信されたバイト数を追跡し、アプリケーションがバッファー内のバイトを送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2828">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2829">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2829">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-2830">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2830">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-2831"><xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2831">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2832">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2832">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2833">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2833">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2834">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2834">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-2835">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2835">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2836">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2836">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2837">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2837">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2838"><paramref name="buffers" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2838"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-2839"><paramref name="buffers" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2839"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2840">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2840">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-2841">以下の解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2841">See remarks section below.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2842"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2842">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffer As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="socket.Send buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2843">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2843">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2844"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2844">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2845">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、接続された <see cref="T:System.Net.Sockets.Socket" /> にデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2845">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" /> using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2846"><see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2846">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2847"><xref:System.Net.Sockets.Socket.Send%2A><xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホストにデータを同期的に送信し、正常に送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2847"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="8ef83-2848">メソッド<xref:System.Net.Sockets.Socket.Send%2A>は、接続指向プロトコルとコネクションレスプロトコルの両方に使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2848">The <xref:System.Net.Sockets.Socket.Send%2A> method can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="8ef83-2849">このオーバーロードには、送信するデータを格納するバッファーと、のビットごとの<xref:System.Net.Sockets.SocketFlags>組み合わせが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2849">This overload requires a buffer that contains the data you want to send and a bitwise combination of <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="8ef83-2850">バッファーオフセットの既定値は0で、既定で送信されるバイト数はバッファーのサイズに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2850">The buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</span></span> <span data-ttu-id="8ef83-2851">パラメーター`socketflags`値とし<xref:System.Net.Sockets.SocketFlags.DontRoute>てフラグを指定した場合、送信するデータはルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2851">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter value, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-2852">コネクションレスプロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Send%2A> 、このメソッドを呼び出す前にを呼び出す<xref:System.Net.Sockets.SocketException>必要があります。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2852">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2853">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2853">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-2854">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信することを<xref:System.Net.Sockets.Socket.SendTo%2A>計画している場合は、メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2854">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-2855"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを使用しない場合は、を<xref:System.Net.Sockets.Socket.Send%2A>呼び出すたびに<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2855">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="8ef83-2856"><xref:System.Net.Sockets.Socket.SendTo%2A> を<xref:System.Net.Sockets.Socket.Connect%2A>使用して既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2856">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-2857">を呼び出す前<xref:System.Net.Sockets.Socket.Send%2A>に、を<xref:System.Net.Sockets.Socket.Connect%2A>もう一度呼び出すことによって、既定のリモートホストを変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2857">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2858">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Send%2A>は、を使用<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>してタイムアウトが設定されていない限り、バッファー内のすべてのバイトが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2858">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2859">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Send%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2859">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2860">非ブロッキングモードで<xref:System.Net.Sockets.Socket.Send%2A>は、がバッファー内のバイト数よりも少ない場合でも、が正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2860">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2861">アプリケーションは、送信されたバイト数を追跡し、要求されたバイト数をアプリケーションが送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2861">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="8ef83-2862">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2862">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-2863">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2863">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-2864"><xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2864">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2865">バッファーのサイズが、基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2865">You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-2866">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.Send%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2866">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2867">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2867">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2868">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2868">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2869">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2869">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-2870">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2870">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2871">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2871">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2872">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2872">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2873">次のコード例は、接続さ<xref:System.Net.Sockets.Socket>れたにデータを送信する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2873">The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Sync_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Sync_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2874"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2874"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2875">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2875">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2876"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2876">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffers, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-2877">送信するデータを格納する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" /> のリスト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2877">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2878"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2878">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2879">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、リスト内のバッファーのセットを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2879">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2880"><see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2880">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2881">このオーバーロードには、送信するデータを含むバッファーが少なくとも1つ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2881">This overload requires at least one buffer that contains the data you want to send.</span></span> <span data-ttu-id="8ef83-2882">既定<xref:System.Net.Sockets.SocketFlags>値は0です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2882">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span> <span data-ttu-id="8ef83-2883">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketFlags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-2883">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketFlags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-2884">コネクションレスプロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Send%2A> 、このメソッドを呼び出す前にを呼び出す<xref:System.Net.Sockets.SocketException>必要があります。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2884">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2885">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2885">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-2886">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信することを<xref:System.Net.Sockets.Socket.SendTo%2A>計画している場合は、メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2886">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-2887"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを使用しない場合は、の各呼び出し<xref:System.Net.Sockets.Socket.Send%2A>の前<xref:System.Net.Sockets.Socket.Connect%2A>にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2887">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="8ef83-2888"><xref:System.Net.Sockets.Socket.SendTo%2A> を<xref:System.Net.Sockets.Socket.Connect%2A>使用して既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2888">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-2889">を呼び出す前<xref:System.Net.Sockets.Socket.Send%2A>に、を<xref:System.Net.Sockets.Socket.Connect%2A>もう一度呼び出すことによって、既定のリモートホストを変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2889">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2890">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Send%2A>は、を使用<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>してタイムアウトが設定されていない限り、バッファー内のすべてのバイトが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2890">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2891">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Send%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2891">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2892">非ブロッキングモードでは、 <xref:System.Net.Sockets.Socket.Send%2A>がバッファー内のバイト数よりも少ない場合でも、が正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2892">In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2893">アプリケーションは、送信されたバイト数を追跡し、アプリケーションがバッファー内のバイトを送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2893">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2894">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2894">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-2895">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2895">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-2896"><xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2896">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2897">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2897">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2898">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2898">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2899">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2899">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-2900">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2900">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2901">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2901">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2902">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2902">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2903"><paramref name="buffers" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2903"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-2904"><paramref name="buffers" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2904"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2905">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2905">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2906"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2906">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2907">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2907">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-2908">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2908">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2909"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2909">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2910">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータを、接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2910">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2911"><see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2911">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2912"><xref:System.Net.Sockets.Socket.Send%2A><xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで確立されたリモートホストにデータを同期的に送信し、正常に送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2912"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="8ef83-2913"><xref:System.Net.Sockets.Socket.Send%2A>は、接続指向プロトコルとコネクションレスプロトコルの両方に使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2913"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="8ef83-2914">このオーバーロードには、送信するデータを含むバッファー、送信するバイト数、およびのビットごとの<xref:System.Net.Sockets.SocketFlags>組み合わせが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2914">This overload requires a buffer that contains the data you want to send, the number of bytes you want to send, and a bitwise combination of any <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="8ef83-2915">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketflags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-2915">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-2916">コネクションレスプロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Send%2A> 、このメソッドを呼び出す前にを呼び出す<xref:System.Net.Sockets.SocketException>必要があります。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2916">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2917">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2917">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-2918">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信することを<xref:System.Net.Sockets.Socket.SendTo%2A>計画している場合は、メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2918">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-2919">メソッドを使用<xref:System.Net.Sockets.Socket.SendTo%2A>しない場合は、メソッドを<xref:System.Net.Sockets.Socket.Send%2A>呼び出すたびに<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2919">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="8ef83-2920"><xref:System.Net.Sockets.Socket.SendTo%2A> を<xref:System.Net.Sockets.Socket.Connect%2A>使用して既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2920">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-2921">を呼び出す前<xref:System.Net.Sockets.Socket.Send%2A>に、を<xref:System.Net.Sockets.Socket.Connect%2A>もう一度呼び出すことによって、既定のリモートホストを変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2921">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2922">接続指向のプロトコルでは、 <xref:System.Net.Sockets.Socket.Send%2A>を使用<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>してタイムアウトが設定されていない限り、は要求されたバイト数が送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2922">With a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2923">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Send%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2923">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2924">非ブロッキングモードで<xref:System.Net.Sockets.Socket.Send%2A>は、が要求したバイト数よりも少ない場合でも、が正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2924">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="8ef83-2925">アプリケーションは、送信されたバイト数を追跡し、要求されたバイト数をアプリケーションが送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2925">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="8ef83-2926">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2926">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-2927">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2927">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-2928"><xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2928">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2929">サイズが、基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2929">You must ensure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-2930">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.Send%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2930">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2931">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2931">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2932">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2932">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2933">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2933">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-2934">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2934">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2935">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2935">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2936">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2936">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-2937">次のコード例では、buffer で見つかったデータを<xref:System.Net.Sockets.SocketFlags.None>送信<xref:System.Net.Sockets.SocketFlags>し、にを指定しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2937">The following code example sends the data found in buffer, and specifies <xref:System.Net.Sockets.SocketFlags.None> for <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#3)]
 [!code-csharp[Socket_Sync_Send_Receive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#3)]
 [!code-vb[Socket_Sync_Send_Receive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2938"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2938"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-2939"><paramref name="size" /> が 0 未満か、バッファーのサイズを超える値です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2939"><paramref name="size" /> is less than 0 or exceeds the size of the buffer.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2940"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2940"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-2941">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-2941">-or-</span></span> 
<span data-ttu-id="8ef83-2942">ソケットへのアクセス中にオペレーティング システム エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2942">An operating system error occurs while accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2943"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2943">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffers, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="8ef83-2944">送信するデータを格納する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" /> のリスト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2944">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2945"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2945">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-2946">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2946">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="8ef83-2947">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、リスト内のバッファーのセットを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2947">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2948"><see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2948">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2949">このオーバーロードには、送信するデータを含むバッファーが少なくとも1つ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2949">This overload requires at least one buffer that contains the data you want to send.</span></span> <span data-ttu-id="8ef83-2950">既定<xref:System.Net.Sockets.SocketFlags>値は0です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2950">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span> <span data-ttu-id="8ef83-2951">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketFlags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-2951">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketFlags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-2952">コネクションレスプロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Send%2A> 、このメソッドを呼び出す前にを呼び出す<xref:System.Net.Sockets.SocketException>必要があります。これを行わないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2952">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2953">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2953">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-2954">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信することを<xref:System.Net.Sockets.Socket.SendTo%2A>計画している場合は、メソッドを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2954">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-2955"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを使用しない場合は、の各呼び出し<xref:System.Net.Sockets.Socket.Send%2A>の前<xref:System.Net.Sockets.Socket.Connect%2A>にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2955">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="8ef83-2956"><xref:System.Net.Sockets.Socket.SendTo%2A> を<xref:System.Net.Sockets.Socket.Connect%2A>使用して既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2956">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-2957">を呼び出す前<xref:System.Net.Sockets.Socket.Send%2A>に、を<xref:System.Net.Sockets.Socket.Connect%2A>もう一度呼び出すことによって、既定のリモートホストを変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2957">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2958">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Send%2A>は、を使用<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>してタイムアウトが設定されていない限り、バッファー内のすべてのバイトが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2958">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2959">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Send%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2959">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2960">非ブロッキングモードでは、 <xref:System.Net.Sockets.Socket.Send%2A>がバッファー内のバイト数よりも少ない場合でも、が正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2960">In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2961">アプリケーションは、送信されたバイト数を追跡し、アプリケーションがバッファー内のバイトを送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2961">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="8ef83-2962">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2962">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-2963">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2963">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-2964"><xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2964">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2965">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2965">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-2966">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2966">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2967">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2967">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-2968">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2968">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2969">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2969">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-2970">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2970">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-2971"><paramref name="buffers" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2971"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-2972"><paramref name="buffers" /> が空です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2972"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-2973">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2973">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-2974"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2974">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffer, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, offset, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-2975">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2975">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-2976">データの送信を開始する、データ バッファー内の位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2976">The position in the data buffer at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-2977">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2977">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-2978"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2978">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-2979">指定したオフセットから開始し、指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、指定したバイト数のデータを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2979">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-2980"><see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2980">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-2981"><xref:System.Net.Sockets.Socket.Send%2A><xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで指定されたリモートホストにデータを同期的に送信し、正常に送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2981"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="8ef83-2982"><xref:System.Net.Sockets.Socket.Send%2A>は、接続指向プロトコルとコネクションレスプロトコルの両方に使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2982"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="8ef83-2983">このオーバーロードでは、 <xref:System.Net.Sockets.SocketFlags.DontRoute> `socketflags`パラメーターとしてフラグを指定すると、送信するデータはルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2983">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-2984">コネクションレスプロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Send%2A> 、このメソッドを呼び出す前にを呼び<xref:System.Net.Sockets.SocketException>出す必要があります。指定しないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2984">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2985">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2985">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-2986">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信すること<xref:System.Net.Sockets.Socket.SendTo%2A>を計画している場合は、を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2986">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="8ef83-2987">を使用<xref:System.Net.Sockets.Socket.SendTo%2A>しない場合は、の各呼び出し<xref:System.Net.Sockets.Socket.Send%2A>の<xref:System.Net.Sockets.Socket.Connect%2A>前にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2987">If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="8ef83-2988"><xref:System.Net.Sockets.Socket.SendTo%2A> で<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2988">It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-2989">を呼び出す前<xref:System.Net.Sockets.Socket.Send%2A>に、を<xref:System.Net.Sockets.Socket.Connect%2A>もう一度呼び出すことによって、既定のリモートホストを変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2989">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-2990">また、サイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2990">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-2991">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.Send%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2991">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-2992">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Send%2A>は、を使用<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>してタイムアウトが設定されていない限り、要求されたバイト数が送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2992">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-2993">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Send%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2993">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-2994">非ブロッキングモードで<xref:System.Net.Sockets.Socket.Send%2A>は、が要求したバイト数よりも少ない場合でも、が正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2994">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="8ef83-2995">アプリケーションは、送信されたバイト数を追跡し、要求されたバイト数をアプリケーションが送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2995">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="8ef83-2996">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2996">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-2997">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2997">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-2998"><xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2998">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-2999">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-2999">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3000">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3000">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3001">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3001">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-3002">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3002">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3003">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3003">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3004">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3004">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3005">次のコード例では、接続さ<xref:System.Net.Sockets.SocketFlags> <xref:System.Net.Sockets.Socket>れたにデータを送信するために、データバッファー、オフセット、サイズ、およびを指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3005">The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-3006"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3006"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-3007"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3007"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-3008">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3008">-or-</span></span> 
 <span data-ttu-id="8ef83-3009"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3009"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-3010">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3010">-or-</span></span> 
 <span data-ttu-id="8ef83-3011"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3011"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-3012">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3012">-or-</span></span> 
 <span data-ttu-id="8ef83-3013"><paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3013"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3014"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3014"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-3015">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3015">-or-</span></span> 
<span data-ttu-id="8ef83-3016"><see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3016">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3017"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3017">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffer, offset, size, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError" RefType="out" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-3018">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3018">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-3019">データの送信を開始する、データ バッファー内の位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3019">The position in the data buffer at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-3020">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3020">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-3021"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3021">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="8ef83-3022">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3022">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="8ef83-3023">指定したオフセットから開始し、指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、指定したバイト数のデータを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3023">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" /></span></span></summary>
        <returns><span data-ttu-id="8ef83-3024"><see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3024">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3025"><xref:System.Net.Sockets.Socket.Send%2A><xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで指定されたリモートホストにデータを同期的に送信し、正常に送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3025"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="8ef83-3026"><xref:System.Net.Sockets.Socket.Send%2A>は、接続指向プロトコルとコネクションレスプロトコルの両方に使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3026"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="8ef83-3027">このオーバーロードでは、 <xref:System.Net.Sockets.SocketFlags.DontRoute> `socketflags`パラメーターとしてフラグを指定すると、送信するデータはルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3027">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-3028">コネクションレスプロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.Send%2A> 、このメソッドを呼び出す前にを呼び<xref:System.Net.Sockets.SocketException>出す必要があります。指定しないと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3028">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3029">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3029">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-3030">コネクションレスプロトコルを使用していて、複数の異なるホストにデータを送信すること<xref:System.Net.Sockets.Socket.SendTo%2A>を計画している場合は、を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3030">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="8ef83-3031">を使用<xref:System.Net.Sockets.Socket.SendTo%2A>しない場合は、の各呼び出し<xref:System.Net.Sockets.Socket.Send%2A>の<xref:System.Net.Sockets.Socket.Connect%2A>前にを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3031">If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="8ef83-3032"><xref:System.Net.Sockets.Socket.SendTo%2A> で<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモートホストを確立した後でも、を使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3032">It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="8ef83-3033">を呼び出す前<xref:System.Net.Sockets.Socket.Send%2A>に、を<xref:System.Net.Sockets.Socket.Connect%2A>もう一度呼び出すことによって、既定のリモートホストを変更することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3033">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-3034">また、サイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3034">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-3035">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.Send%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3035">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-3036">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Send%2A>は、を使用<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>してタイムアウトが設定されていない限り、要求されたバイト数が送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3036">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-3037">タイムアウト値を超えた場合、 <xref:System.Net.Sockets.Socket.Send%2A>を<xref:System.Net.Sockets.SocketException>呼び出すと、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3037">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3038">非ブロッキングモードで<xref:System.Net.Sockets.Socket.Send%2A>は、が要求したバイト数よりも少ない場合でも、が正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3038">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="8ef83-3039">アプリケーションは、送信されたバイト数を追跡し、要求されたバイト数をアプリケーションが送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3039">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="8ef83-3040">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3040">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-3041">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3041">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-3042"><xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3042">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3043">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3043">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3044">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3044">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3045">送信が正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3045">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="8ef83-3046">転送されるデータを保持するためにトランスポートシステム内で使用できるバッファー領域がない場合、ソケットが非ブロッキングモードに設定されていない限り、send はブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3046">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3047">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3047">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3048">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3048">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3049">次のコード例では、接続さ<xref:System.Net.Sockets.SocketFlags> <xref:System.Net.Sockets.Socket>れたにデータを送信するために、データバッファー、オフセット、サイズ、およびを指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3049">The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-3050"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3050"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-3051"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3051"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-3052">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3052">-or-</span></span> 
 <span data-ttu-id="8ef83-3053"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3053"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-3054">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3054">-or-</span></span> 
 <span data-ttu-id="8ef83-3055"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3055"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-3056">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3056">-or-</span></span> 
 <span data-ttu-id="8ef83-3057"><paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3057"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3058"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3058"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-3059">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3059">-or-</span></span> 
<span data-ttu-id="8ef83-3060"><see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3060">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3061"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3061">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public bool SendAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-3062">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3062">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-3063">接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトに、データを非同期に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3063">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
        <returns><span data-ttu-id="8ef83-3064">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3064"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-3065">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3065">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-3066">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3066"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-3067">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3067">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3068">メソッド<xref:System.Net.Sockets.Socket.SendAsync%2A>は、接続指向のソケット上の1つ以上のバッファーから送信データを書き込むために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3068">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method is used to write outgoing data from one or more buffers on a connection-oriented socket.</span></span> <span data-ttu-id="8ef83-3069">ただし、このメソッドは、接続操作でリモートホストを指定したコネクションレスソケットでも使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3069">This method can also be used, however, on connectionless sockets that have specified a remote host on a connect operation.</span></span>  
  
 <span data-ttu-id="8ef83-3070">メソッド<xref:System.Net.Sockets.Socket.SendAsync%2A>は<xref:System.Net.Sockets.Socket.Accept%2A>、、、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A> 、<xref:System.Net.Sockets.Socket.BeginConnect%2A>、のいずれか<xref:System.Net.Sockets.Socket.ConnectAsync%2A>のメソッドで確立されたリモートホストに対して、非同期の送信操作を開始します。 <xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-3070">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-3071">このメソッドを正常に呼び出すに<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>は、オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3071">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <span data-ttu-id="8ef83-3072"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> または <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="8ef83-3072"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span></span>  
  
-   <span data-ttu-id="8ef83-3073"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>が<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>設定されている場合</span><span class="sxs-lookup"><span data-stu-id="8ef83-3073"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <span data-ttu-id="8ef83-3074"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>が<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>設定されている場合</span><span class="sxs-lookup"><span data-stu-id="8ef83-3074"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-3075">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3075">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-3076">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3076">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-3077">最初<xref:System.Net.Sockets.Socket.SendAsync%2A>に、 <xref:System.Net.Sockets.Socket.Accept%2A> 、<xref:System.Net.Sockets.Socket.AcceptAsync%2A>、、またはを呼び出さない場合、メソッドは例外をスローします。<xref:System.Net.Sockets.Socket.ConnectAsync%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.Connect%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-3077">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A><xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A>.</span></span>  
  
 <span data-ttu-id="8ef83-3078">メソッドを<xref:System.Net.Sockets.Socket.SendAsync%2A>呼び出すと、別の実行スレッド内でデータを送信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3078">Calling the <xref:System.Net.Sockets.Socket.SendAsync%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="8ef83-3079">メッセージ指向のソケットの場合、基になる Windows sockets service プロバイダーの最大メッセージサイズを超えないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3079">For message-oriented sockets, do not exceed the maximum message size of the underlying Windows sockets service provider.</span></span> <span data-ttu-id="8ef83-3080">データが長すぎて、基になるサービスプロバイダーでアトミックに渡すことができない場合、 <xref:System.Net.Sockets.Socket.SendAsync%2A>データは送信<xref:System.Net.Sockets.SocketException>され<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>ず、メソッドはをネイティブ Winsock WSAEMSGSIZE エラーコード (10040) に設定してをスローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3080">If the data is too long to pass atomically through the underlying service provider, no data is transmitted and the <xref:System.Net.Sockets.Socket.SendAsync%2A> method throws a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAEMSGSIZE error code (10040).</span></span>  
  
 <span data-ttu-id="8ef83-3081"><xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドが正常に完了したことは、データが正常に配信されたことを示していないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3081">Note that the successful completion of the <xref:System.Net.Sockets.Socket.SendAsync%2A> method does not indicate that the data was successfully delivered.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-3082"><paramref name="e" /> パラメーターの <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティまたは <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティは、有効なバッファーを参照する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3082">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <paramref name="e" /> parameter must reference valid buffers.</span></span> <span data-ttu-id="8ef83-3083">これらのプロパティは、どちらか 1 つを設定できます。一度に両方のプロパティを設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3083">One or the other of these properties may be set, but not both at the same time.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-3084"><paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3084">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-3085">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3085">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3086"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3086">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3087"><see cref="T:System.Net.Sockets.Socket" /> がまだ接続されていないか、<see cref="M:System.Net.Sockets.Socket.Accept" />、<see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />、または <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" /> の各メソッドによって取得されませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3087">The <see cref="T:System.Net.Sockets.Socket" /> is not yet connected or was not obtained via an <see cref="M:System.Net.Sockets.Socket.Accept" />, <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />,or <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" />, method.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.Socket.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-3088"><see cref="T:System.Net.Sockets.Socket" /> の送信バッファーのサイズを指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3088">Gets or sets a value that specifies the size of the send buffer of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="8ef83-3089">送信バッファーのサイズ (バイト単位) を格納している <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3089">An <see cref="T:System.Int32" /> that contains the size, in bytes, of the send buffer.</span></span> <span data-ttu-id="8ef83-3090">既定値は 8192 です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3090">The default is 8192.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3091">バッファーサイズを大きくすると、接続の問題の認識が遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3091">A larger buffer size might delay the recognition of connection difficulties.</span></span> <span data-ttu-id="8ef83-3092">大きなファイルを転送する場合や、高帯域幅の高待機時間接続 (サテライトブロードバンドプロバイダーなど) を使用している場合は、バッファーサイズを大きくすることを検討してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3092">Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3093">次のコード例は、 <xref:System.Net.Sockets.Socket.SendBufferSize%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3093">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.SendBufferSize%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3094">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3094">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3095"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3095">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-3096">設定操作として指定された値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3096">The value specified for a set operation is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-3097">接続された <see cref="T:System.Net.Sockets.Socket" /> に、ファイルおよびオプション データを同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3097">Sends a file and optional data synchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendFile">
      <MemberSignature Language="C#" Value="public void SendFile (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFile(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendFile (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendFile(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.SendFile : string -&gt; unit" Usage="socket.SendFile fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="8ef83-3098">送信されるファイルのパスと名前を含む <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3098">A <see cref="T:System.String" /> that contains the path and name of the file to be sent.</span></span> <span data-ttu-id="8ef83-3099">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3099">This parameter can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="8ef83-3100"><see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 送信フラグを使用して、接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトにファイル <paramref name="fileName" /> を送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3100">Sends the file <paramref name="fileName" /> to a connected <see cref="T:System.Net.Sockets.Socket" /> object with the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> transmit flag.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3101">このオーバーロードは、接続`fileName`されているソケットにファイルを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3101">This overload sends the file `fileName` to the connected socket.</span></span> <span data-ttu-id="8ef83-3102">パラメーター `flags`の`preBuffer` `postBuffer` `null`既定値は(0)で、パラメーターとパラメーターの既定値はです。<xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread></span><span class="sxs-lookup"><span data-stu-id="8ef83-3102">The `flags` parameter defaults to <xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread> (0), and the `preBuffer` and `postBuffer` parameters default to `null`.</span></span> <span data-ttu-id="8ef83-3103">が`fileName`ローカルディレクトリにある場合は、ファイル名だけで識別されます。それ以外の場合は、ファイルの完全なパスと名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3103">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="8ef83-3104">ワイルドカード ("..\\\\\\\\\myfile.txt ") と UNC 共有名 (" \ shared directory \myfile.txt ") がサポートされています。 \\</span><span class="sxs-lookup"><span data-stu-id="8ef83-3104">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="8ef83-3105">ファイルが見つからない場合は、例外<xref:System.IO.FileNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3105">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="8ef83-3106">このメソッドは、 `TransmitFile` Windows Sockets 2 API で検出された関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3106">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="8ef83-3107">関数とそのフラグの`TransmitFile`詳細については、 [Windows ソケット](/windows/desktop/WinSock/)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3107">For more information about the `TransmitFile` function and its flags, see the [Windows Sockets](/windows/desktop/WinSock/) documentation.</span></span>  
  
 <span data-ttu-id="8ef83-3108"><xref:System.Net.Sockets.Socket.SendFile%2A><xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで指定したリモートホストにファイルを同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3108"><xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-3109"><xref:System.Net.Sockets.Socket.SendFile%2A>接続指向プロトコルとコネクションレスプロトコルの両方に使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3109"><xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.</span></span>  
  
 <span data-ttu-id="8ef83-3110">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendFile%2A>を呼び<xref:System.Net.Sockets.SocketException>出す必要があります。それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3110">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span> <span data-ttu-id="8ef83-3111">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を受け入れる必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3111">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-3112">接続指向プロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.SendFile%2A>はファイルが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3112">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the file is sent.</span></span> <span data-ttu-id="8ef83-3113">非ブロッキングモードで<xref:System.Net.Sockets.Socket.SendFile%2A>は、ファイル全体が送信される前にが正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3113">In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent.</span></span> <span data-ttu-id="8ef83-3114">送信したデータがネットワークに直ちに表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3114">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-3115">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3115">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-3116"><xref:System.Net.Sockets.Socket.SendFile%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3116">A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3117">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3117">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3118">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3118">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3119">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3119">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3120">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3120">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3121">次のコード例では、ソケットを作成して接続し、リモートホストにファイルを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3121">The following code example creates and connects a socket and then sends a file to the remote host.</span></span> <span data-ttu-id="8ef83-3122">ファイル "test.txt" は、ローカルコンピューターのルートディレクトリにあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3122">The file "test.txt" is located in the root directory of the local machine.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#3)]
 [!code-csharp[NCLSocketEnhancements#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-3123">ソケットがリモート ホストに接続されていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3123">The socket is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3124"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3124">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-3125"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトはブロック モードではなく、この同期呼び出しを受け付けることができません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3125">The <see cref="T:System.Net.Sockets.Socket" /> object is not in blocking mode and cannot accept this synchronous call.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="8ef83-3126">ファイル <paramref name="fileName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3126">The file <paramref name="fileName" /> was not found.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3127">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3127">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendFile">
      <MemberSignature Language="C#" Value="public void SendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFile(string fileName, unsigned int8[] preBuffer, unsigned int8[] postBuffer, valuetype System.Net.Sockets.TransmitFileOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendFile (fileName As String, preBuffer As Byte(), postBuffer As Byte(), flags As TransmitFileOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendFile(System::String ^ fileName, cli::array &lt;System::Byte&gt; ^ preBuffer, cli::array &lt;System::Byte&gt; ^ postBuffer, System::Net::Sockets::TransmitFileOptions flags);" />
      <MemberSignature Language="F#" Value="member this.SendFile : string * byte[] * byte[] * System.Net.Sockets.TransmitFileOptions -&gt; unit" Usage="socket.SendFile (fileName, preBuffer, postBuffer, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="preBuffer" Type="System.Byte[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="postBuffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="flags" Type="System.Net.Sockets.TransmitFileOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="8ef83-3128">送信されるファイルのパスと名前を含む <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3128">A <see cref="T:System.String" /> that contains the path and name of the file to be sent.</span></span> <span data-ttu-id="8ef83-3129">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3129">This parameter can be <see langword="null" />.</span></span></param>
        <param name="preBuffer"><span data-ttu-id="8ef83-3130">ファイルが送信される前に送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3130">A <see cref="T:System.Byte" /> array that contains data to be sent before the file is sent.</span></span> <span data-ttu-id="8ef83-3131">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3131">This parameter can be <see langword="null" />.</span></span></param>
        <param name="postBuffer"><span data-ttu-id="8ef83-3132">ファイルが送信された後で送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3132">A <see cref="T:System.Byte" /> array that contains data to be sent after the file is sent.</span></span> <span data-ttu-id="8ef83-3133">このパラメーターは、<see langword="null" /> に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3133">This parameter can be <see langword="null" />.</span></span></param>
        <param name="flags"><span data-ttu-id="8ef83-3134">1 つ以上の <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 値。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3134">One or more of <see cref="T:System.Net.Sockets.TransmitFileOptions" /> values.</span></span></param>
        <summary><span data-ttu-id="8ef83-3135">指定した <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 値を使用して、接続された <see cref="T:System.Net.Sockets.Socket" /> オブジェクトにファイル <paramref name="fileName" /> およびデータのバッファーを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3135">Sends the file <paramref name="fileName" /> and buffers of data to a connected <see cref="T:System.Net.Sockets.Socket" /> object using the specified <see cref="T:System.Net.Sockets.TransmitFileOptions" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3136">このオーバーロードには、送信するファイルの名前と値の<xref:System.Net.Sockets.TransmitFileOptions>ビットごとの組み合わせが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3136">This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values.</span></span> <span data-ttu-id="8ef83-3137">パラメーター `preBuffer`には、ファイルの前に配置するデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3137">The `preBuffer` parameter contains any data you want to precede the file.</span></span> <span data-ttu-id="8ef83-3138">`postBuffer`ファイルに従う必要があるデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3138">`postBuffer` contains data you want to follow the file.</span></span> <span data-ttu-id="8ef83-3139">が`fileName`現在の作業ディレクトリ内にある場合は、ファイル名だけで識別されます。それ以外の場合は、ファイルの完全なパスと名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3139">If `fileName` is in the current working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="8ef83-3140">ワイルドカード ("..\\\\\\\\\myfile.txt ") と UNC 共有名 (" \ shared directory \myfile.txt ") がサポートされています。 \\</span><span class="sxs-lookup"><span data-stu-id="8ef83-3140">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span>  
  
 <span data-ttu-id="8ef83-3141">パラメーター `flags`は、ファイル転送に関する追加情報を Window Sockets service プロバイダーに提供します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3141">The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="8ef83-3142">このパラメーターの使用方法の詳細については<xref:System.Net.Sockets.TransmitFileOptions>、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3142">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="8ef83-3143">このメソッドは、 `TransmitFile` Windows Sockets 2 API で検出された関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3143">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="8ef83-3144">関数とそのフラグの`TransmitFile`詳細については、 [Windows ソケット](/windows/desktop/WinSock/)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3144">For more information about the `TransmitFile` function and its flags, see the [Windows Sockets](/windows/desktop/WinSock/) documentation.</span></span>  
  
 <span data-ttu-id="8ef83-3145"><xref:System.Net.Sockets.Socket.SendFile%2A><xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドで指定したリモートホストにファイルを同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3145"><xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-3146"><xref:System.Net.Sockets.Socket.SendFile%2A>接続指向プロトコルとコネクションレスプロトコルの両方に使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3146"><xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.</span></span>  
  
 <span data-ttu-id="8ef83-3147">コネクションレスプロトコルを使用している場合は、 <xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendFile%2A>を呼び<xref:System.Net.Sockets.SocketException>出す必要があります。それ以外の場合は、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3147">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method; otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3148">接続指向プロトコルを使用している場合は、を使用<xref:System.Net.Sockets.Socket.Connect%2A>してリモートホスト接続を確立するか、を使用<xref:System.Net.Sockets.Socket.Accept%2A>して受信接続を許可する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3148">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="8ef83-3149">接続指向プロトコルを使用している場合は<xref:System.Net.Sockets.Socket.SendFile%2A> 、ファイル全体が送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3149">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the entire file is sent.</span></span> <span data-ttu-id="8ef83-3150">非ブロッキングモードで<xref:System.Net.Sockets.Socket.SendFile%2A>は、ファイル全体が送信される前にが正常に完了することがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3150">In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent.</span></span> <span data-ttu-id="8ef83-3151">送信したデータがネットワークに直ちに表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3151">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-3152">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3152">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-3153"><xref:System.Net.Sockets.Socket.SendFile%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3153">A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3154">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3154">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3155">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3155">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3156">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3156">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3157">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3157">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3158">次のコード例では、ソケットを作成して接続します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3158">The following code example creates and connects a socket.</span></span> <span data-ttu-id="8ef83-3159">ファイル "test.txt" は、ローカルコンピューターのルートディレクトリにあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3159">The file "test.txt" is located in the root directory of the local machine.</span></span> <span data-ttu-id="8ef83-3160">この例では、データの prebuffer と postbuffer を作成し、ファイルを使用してリモートホストに送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3160">In this example, we create a prebuffer and postbuffer of data and send them to the remote host with the file.</span></span> <span data-ttu-id="8ef83-3161">既定値<xref:System.Net.Sockets.TransmitFileOptions>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3161">The default <xref:System.Net.Sockets.TransmitFileOptions> are used.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#4)]
 [!code-csharp[NCLSocketEnhancements#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-3162">オペレーティング システムは Windows NT 以降ではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3162">The operating system is not Windows NT or later.</span></span>  
  
<span data-ttu-id="8ef83-3163">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3163">-or-</span></span>
  
 <span data-ttu-id="8ef83-3164">ソケットがリモート ホストに接続されていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3164">The socket is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3165"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3165">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-3166"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトはブロック モードではなく、この同期呼び出しを受け付けることができません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3166">The <see cref="T:System.Net.Sockets.Socket" /> object is not in blocking mode and cannot accept this synchronous call.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="8ef83-3167">ファイル <paramref name="fileName" /> が見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3167">The file <paramref name="fileName" /> was not found.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3168">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3168">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendPacketsAsync">
      <MemberSignature Language="C#" Value="public bool SendPacketsAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendPacketsAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPacketsAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendPacketsAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendPacketsAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendPacketsAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-3169">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3169">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-3170">接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトに、ファイルのコレクションまたはメモリ内のデータ バッファーを非同期に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3170">Sends a collection of files or in memory data buffers asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
        <returns><span data-ttu-id="8ef83-3171">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3171"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-3172">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3172">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-3173">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3173"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-3174">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3174">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3175">メソッド<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>は、ファイルのコレクションまたはメモリ内のデータバッファーをリモートホストに送信するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3175">The <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is used to send a collection of files or in memory data buffers to remote host.</span></span> <span data-ttu-id="8ef83-3176">は<xref:System.Net.Sockets.Socket> 、リモートホストに既に接続されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3176">The <xref:System.Net.Sockets.Socket> must already be connected to the remote host.</span></span>  
  
 <span data-ttu-id="8ef83-3177">が<xref:System.Net.Sockets.SendPacketsElement?displayProperty=nameWithType>作業ディレクトリ内のファイルを参照している場合は、ファイル名だけで識別できます。それ以外の場合は、ファイルの完全なパスと名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3177">If a <xref:System.Net.Sockets.SendPacketsElement?displayProperty=nameWithType> references a file in the working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="8ef83-3178">ワイルドカードと UNC 共有名がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3178">Wildcards and UNC share names are supported.</span></span> <span data-ttu-id="8ef83-3179">ファイルが見つからない場合は、 <xref:System.IO.FileNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3179">If the file is not found, <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="8ef83-3180">完了が通知されるようにするには、EventHandler\<SocketAsyncEventArgs > delegate を実装するコールバックメソッドを作成し、そのコールバックを<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベントにアタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3180">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="8ef83-3181">`e`パラメーター <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType>のプロパティは、ファイル転送に関する追加情報を Window Sockets service プロバイダーに提供します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3181">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="8ef83-3182">このパラメーターの使用方法の詳細については<xref:System.Net.Sockets.TransmitFileOptions>、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3182">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="8ef83-3183">このメソッドを正常に呼び出すに<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>は、オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3183">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-3184">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3184">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-3185">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3185">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-3186">このメソッドは、Windows Sockets 2 API の送信パケット関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3186">This method uses the TransmitPackets function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="8ef83-3187">送信パケット関数とそのフラグの詳細については、 [Windows ソケット](/windows/desktop/WinSock/)のドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3187">For more information about the TransmitPackets function and its flags, see the [Windows Sockets](/windows/desktop/WinSock/) documentation.</span></span>  
  
 <span data-ttu-id="8ef83-3188">接続指向プロトコルを想定しています<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>が、メソッドは<xref:System.Net.Sockets.Socket.BeginConnect%2A>、最初に、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドを呼び出して既定のリモートホストを確立した場合に、コネクションレスプロトコルに対しても機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3188">Although intended for connection-oriented protocols, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method to establish a default remote host.</span></span> <span data-ttu-id="8ef83-3189">コネクションレスプロトコルを使用する場合は、ファイルのサイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3189">With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-3190">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>されず、 <xref:System.Net.Sockets.SocketException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3190">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
 <span data-ttu-id="8ef83-3191"><xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>メソッドは、使用されているオペレーティングシステムに従って最適化されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3191">The <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized according to the operating system on which it is used.</span></span> <span data-ttu-id="8ef83-3192">Windows server のエディションでは<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 、この方法は高パフォーマンスのために最適化されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3192">On Windows server editions, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized for high performance.</span></span>  
  
 <span data-ttu-id="8ef83-3193">Windows クライアントのエディションでは<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 、メモリとリソースの使用率が最小になるようにメソッドが最適化されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3193">On Windows client editions, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized for minimum memory and resource utilization.</span></span>  
  
 <span data-ttu-id="8ef83-3194">パラメーターの<xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType>プロパティでフラグを使用すると、パフォーマンスを大幅に向上させることができます。<xref:System.Net.Sockets.TransmitFileOptions.UseKernelApc?displayProperty=nameWithType> `e`</span><span class="sxs-lookup"><span data-stu-id="8ef83-3194">Use of the <xref:System.Net.Sockets.TransmitFileOptions.UseKernelApc?displayProperty=nameWithType> flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> property on the `e` parameter can deliver significant performance benefits.</span></span> <span data-ttu-id="8ef83-3195"><xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>メソッド呼び出しを開始するスレッドが大量の計算に使用されている場合、その apc が起動できなくなる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3195">If the thread initiating the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method call is being used for heavy computations, it is possible, though unlikely, that APCs could be prevented from launching.</span></span> <span data-ttu-id="8ef83-3196">カーネルとユーザーモードの Apc には違いがあることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3196">Note that there is a difference between kernel and user-mode APCs.</span></span> <span data-ttu-id="8ef83-3197">スレッドが待機状態になると、カーネル Apc が起動します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3197">Kernel APCs launch when a thread is in a wait state.</span></span> <span data-ttu-id="8ef83-3198">スレッドが警告可能な待機状態になったときにユーザーモードの Apc が起動する</span><span class="sxs-lookup"><span data-stu-id="8ef83-3198">User-mode APCs launch when a thread is in an alertable wait state</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="8ef83-3199"><see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> プロパティで指定されたファイルが見つかりませんでした。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3199">The file specified in the <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> property was not found.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-3200"><paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3200">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-3201">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3201">Windows XP or later is required for this method.</span></span> <span data-ttu-id="8ef83-3202">この例外は、<see cref="T:System.Net.Sockets.Socket" /> がリモート ホストに接続されていない場合にも発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3202">This exception also occurs if the <see cref="T:System.Net.Sockets.Socket" /> is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3203"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3203">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3204">コネクションレスの <see cref="T:System.Net.Sockets.Socket" /> が使用されており、送信するファイルが基になるトランスポートの最大パケット サイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3204">A connectionless <see cref="T:System.Net.Sockets.Socket" /> is being used and the file being sent exceeds the maximum packet size of the underlying transport.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendTimeout : int with get, set" Usage="System.Net.Sockets.Socket.SendTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-3205">同期の <see cref="Overload:System.Net.Sockets.Socket.Send" /> 呼び出しがタイムアウトするまでの合計時間を指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3205">Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Send" /> call will time out.</span></span></summary>
        <value><span data-ttu-id="8ef83-3206">タイムアウト値 (ミリ秒)。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3206">The time-out value, in milliseconds.</span></span> <span data-ttu-id="8ef83-3207">プロパティに 1 から 499 までの値を設定しても、その値は 500 に変更されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3207">If you set the property with a value between 1 and 499, the value will be changed to 500.</span></span> <span data-ttu-id="8ef83-3208">既定値は 0 です。タイムアウトが無期限であることを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3208">The default value is 0, which indicates an infinite time-out period.</span></span> <span data-ttu-id="8ef83-3209">-1 の指定も、タイムアウトが無期限であることを示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3209">Specifying -1 also indicates an infinite time-out period.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3210">このオプションは、同期<xref:System.Net.Sockets.Socket.Send%2A>呼び出しにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3210">This option applies to synchronous <xref:System.Net.Sockets.Socket.Send%2A> calls only.</span></span> <span data-ttu-id="8ef83-3211">タイムアウト期間を超過<xref:System.Net.Sockets.Socket.Send%2A>した場合、メソッドはを<xref:System.Net.Sockets.SocketException>スローします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3211">If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3212">次のコード例は、 <xref:System.Net.Sockets.Socket.SendTimeout%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3212">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.SendTimeout%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3213">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3213">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3214"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3214">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-3215">設定操作として指定された値が -1 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3215">The value specified for a set operation is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendTo">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-3216">データを特定のエンドポイントに送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3216">Sends data to a specific endpoint.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendTo (buffer As Byte(), remoteEP As EndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-3217">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3217">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-3218">データの送信先を表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3218">The <see cref="T:System.Net.EndPoint" /> that represents the destination for the data.</span></span></param>
        <summary><span data-ttu-id="8ef83-3219">指定したエンドポイントにデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3219">Sends data to the specified endpoint.</span></span></summary>
        <returns><span data-ttu-id="8ef83-3220">送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3220">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3221">このオーバーロードでは、バッファーオフセットは既定で0に設定され、既定で送信されるバイト数`buffer`はパラメーターのサイズ<xref:System.Net.Sockets.SocketFlags>に設定され、既定値は0に設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3221">In this overload, the buffer offset defaults to 0, the number of bytes to send defaults to the size of the `buffer` parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span>  
  
 <span data-ttu-id="8ef83-3222">コネクションレスプロトコルを使用している場合は、を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前に、メソッドを使用して既定のリモートホストを確立する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3222">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="8ef83-3223">この操作は、 <xref:System.Net.Sockets.Socket.Send%2A>メソッドを呼び出す場合にのみ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3223">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="8ef83-3224">を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前にメソッドを呼び出すと、 `remoteEP`その送信操作に対してのみ、指定した既定のリモートホストがパラメーターによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3224">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="8ef83-3225">基になるサービスプロバイダーによって<xref:System.Net.Sockets.Socket.Bind%2A>最も適切なローカルネットワークアドレスとポート番号が割り当てられるため、メソッドを呼び出す必要もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3225">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="8ef83-3226">割り当てられたローカルネットワークアドレスとポート番号を識別する必要がある場合は<xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に完了した後でプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3226">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="8ef83-3227">コネクションレスプロトコルを対象と<xref:System.Net.Sockets.Socket.SendTo%2A>していますが、接続指向プロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3227">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="8ef83-3228">接続指向プロトコルを使用している場合は、最初に<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出すか、 <xref:System.Net.Sockets.Socket.Accept%2A>メソッドを使用して受信接続要求を受け入れることによって、リモートホスト接続を確立する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3228">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-3229">リモートホスト接続を確立していない場合、 <xref:System.Net.Sockets.Socket.SendTo%2A>または受け入れない場合は、によってが<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3229">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3230">また、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3230">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-3231">どちらの場合も、 <xref:System.Net.Sockets.Socket.SendTo%2A>は`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストにのみデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3231">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-3232">ブロックソケットは、バッファー内のすべてのバイトが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3232">Blocking sockets will block until the all of the bytes in the buffer are sent.</span></span> <span data-ttu-id="8ef83-3233">非ブロッキング<xref:System.Net.Sockets.Socket>はすぐには完了しないため、 `buffer`内のすべてのバイトが送信されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3233">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`.</span></span> <span data-ttu-id="8ef83-3234">送信されるバイト数を追跡し、アプリケーションが内`buffer`のすべてのバイトを送信するまで操作を再試行するのは、アプリケーションの役割です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3234">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`.</span></span> <span data-ttu-id="8ef83-3235">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3235">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-3236">ネットワークの効率を向上させるために、基になるシステムは、大量の送信データが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3236">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="8ef83-3237"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3237">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="8ef83-3238">ブロックモードでコネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.SendTo%2A>場合、はデータグラムが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3238">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="8ef83-3239">ブロードキャストアドレスにデータを送信する場合は、最初に<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3239">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-3240">また、送信されたバイト数が、基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3240">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-3241">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.SendTo%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3241">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3242">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3242">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3243">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3243">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3244">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3244">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3245">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3245">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3246">次のコード例では、指定したリモートホストにコネクションレスのデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3246">The following code example sends a connectionless datagram to the specified remote host.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Sync_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Sync_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-3247"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3247"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-3248">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3248">-or-</span></span> 
 <span data-ttu-id="8ef83-3249"><paramref name="remoteEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3249"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3250">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3250">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3251"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3251">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-3252">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3252">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-3253"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3253">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-3254">データの送信先の位置を表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3254">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span></span></param>
        <summary><span data-ttu-id="8ef83-3255">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、特定のエンドポイントにデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3255">Sends data to a specific endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-3256">送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3256">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3257">このオーバーロードでは、バッファーオフセットは既定で0に設定され、送信するバイト数は既定での`buffer`サイズに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3257">In this overload, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the `buffer`.</span></span> <span data-ttu-id="8ef83-3258">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketflags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-3258">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-3259">コネクションレスプロトコルを使用している場合は、を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前に、メソッドを使用して既定のリモートホストを確立する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3259">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="8ef83-3260">この操作は、 <xref:System.Net.Sockets.Socket.Send%2A>メソッドを呼び出す場合にのみ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3260">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="8ef83-3261">を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前にメソッドを呼び出すと、 `remoteEP`その送信操作に対してのみ、指定した既定のリモートホストがパラメーターによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3261">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="8ef83-3262">基になるサービスプロバイダーによって<xref:System.Net.Sockets.Socket.Bind%2A>最も適切なローカルネットワークアドレスとポート番号が割り当てられるため、メソッドを呼び出す必要もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3262">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="8ef83-3263">割り当てられたローカルネットワークアドレスとポート番号を識別する必要がある場合は<xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に完了した後でプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3263">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="8ef83-3264">コネクションレスプロトコルを対象と<xref:System.Net.Sockets.Socket.SendTo%2A>していますが、接続指向プロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3264">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="8ef83-3265">接続指向プロトコルを使用している場合は、最初に<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出すか、 <xref:System.Net.Sockets.Socket.Accept%2A>メソッドを使用して受信接続要求を受け入れることによって、リモートホスト接続を確立する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3265">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-3266">リモートホスト接続を確立していない場合、 <xref:System.Net.Sockets.Socket.SendTo%2A>または受け入れない場合は、によってが<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3266">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3267">また、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3267">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-3268">どちらの場合も、 <xref:System.Net.Sockets.Socket.SendTo%2A>は`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストにのみデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3268">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-3269">ブロックされたソケットは、で`buffer`要求されたすべてのバイトが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3269">Blocking sockets will block until the requested all of the bytes in the `buffer` are sent.</span></span> <span data-ttu-id="8ef83-3270">非ブロッキング<xref:System.Net.Sockets.Socket>はすぐには完了しないため、 `buffer`内のすべてのバイトが送信されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3270">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`.</span></span> <span data-ttu-id="8ef83-3271">送信されるバイト数を追跡し、アプリケーションが内`buffer`のすべてのバイトを送信するまで操作を再試行するのは、アプリケーションの役割です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3271">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`.</span></span> <span data-ttu-id="8ef83-3272">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3272">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-3273">ネットワークの効率を高めるため、基になるシステムは、大量のデータが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3273">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="8ef83-3274"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3274">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="8ef83-3275">ブロックモードでコネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.SendTo%2A>場合、はデータグラムが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3275">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="8ef83-3276">ブロードキャストアドレスにデータを送信する場合は、最初に<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3276">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-3277">また、送信されたバイト数が、基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3277">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-3278">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.SendTo%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3278">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3279">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3279">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3280">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3280">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3281">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3281">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3282">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3282">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3283">次のコード例では、指定したリモートホストにコネクションレスのデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3283">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="8ef83-3284"><xref:System.Net.Sockets.SocketFlags>は、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3284"><xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#6)]
 [!code-csharp[Socket_Sync_Send_Receive#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#6)]
 [!code-vb[Socket_Sync_Send_Receive#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-3285"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3285"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-3286">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3286">-or-</span></span> 
 <span data-ttu-id="8ef83-3287"><paramref name="remoteEP" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3287"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3288">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3288">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3289"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3289">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-3290">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3290">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-3291">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3291">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-3292"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3292">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-3293">データの送信先の位置を表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3293">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span></span></param>
        <summary><span data-ttu-id="8ef83-3294">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータを、指定したエンドポイントに送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3294">Sends the specified number of bytes of data to the specified endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-3295">送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3295">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3296">このオーバーロードでは、バッファーオフセットは既定で0に設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3296">In this overload, the buffer offset defaults to 0.</span></span> <span data-ttu-id="8ef83-3297">パラメーターとして<xref:System.Net.Sockets.SocketFlags.DontRoute>フラグを指定した場合、送信するデータはルーティングされません。 `socketflags`</span><span class="sxs-lookup"><span data-stu-id="8ef83-3297">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-3298">コネクションレスプロトコルを使用している場合は、を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前に、メソッドを使用して既定のリモートホストを確立する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3298">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="8ef83-3299">この操作は、 <xref:System.Net.Sockets.Socket.Send%2A>メソッドを呼び出す場合にのみ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3299">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="8ef83-3300">を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前にメソッドを呼び出すと、 `remoteEP`その送信操作に対してのみ、指定した既定のリモートホストがパラメーターによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3300">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="8ef83-3301">基になるサービスプロバイダーによって<xref:System.Net.Sockets.Socket.Bind%2A>最も適切なローカルネットワークアドレスとポート番号が割り当てられるため、メソッドを呼び出す必要もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3301">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="8ef83-3302">割り当てられたローカルネットワークアドレスとポート番号を識別する必要がある場合は<xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に完了した後でプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3302">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="8ef83-3303">コネクションレスプロトコルを対象と<xref:System.Net.Sockets.Socket.SendTo%2A>していますが、接続指向プロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3303">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="8ef83-3304">接続指向プロトコルを使用している場合は、最初に<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出すか、 <xref:System.Net.Sockets.Socket.Accept%2A>メソッドを使用して受信接続要求を受け入れることによって、リモートホスト接続を確立する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3304">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-3305">リモートホスト接続を確立していない場合、 <xref:System.Net.Sockets.Socket.SendTo%2A>または受け入れない場合は、によってが<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3305">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3306">また、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3306">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-3307">どちらの場合も、 <xref:System.Net.Sockets.Socket.SendTo%2A>は`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストにのみデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3307">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-3308">ブロックされたソケットは、要求されたバイト数が送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3308">Blocking sockets will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="8ef83-3309">非ブロッキング<xref:System.Net.Sockets.Socket>はすぐには完了しないため、1回の操作で要求されたバイト数がすべて送信されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3309">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation.</span></span> <span data-ttu-id="8ef83-3310">アプリケーションは、送信されたバイト数を追跡し、要求されたバイト数をアプリケーションが送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3310">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="8ef83-3311">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3311">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-3312">ネットワークの効率を高めるため、基になるシステムは、大量のデータが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3312">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="8ef83-3313"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3313">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="8ef83-3314">ブロックモードでコネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.SendTo%2A>場合、はデータグラムが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3314">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="8ef83-3315">ブロードキャストアドレスにデータを送信する場合は、最初に<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3315">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-3316">また、送信されたバイト数が、基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3316">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-3317">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.SendTo%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3317">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3318">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3318">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3319">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3319">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3320">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3320">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3321">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3321">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3322">次のコード例では、指定したリモートホストにコネクションレスのデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3322">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="8ef83-3323">サイズと<xref:System.Net.Sockets.SocketFlags>は、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3323">The size and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Sync_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Sync_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-3324"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3324"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-3325">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3325">-or-</span></span> 
 <span data-ttu-id="8ef83-3326"><paramref name="remoteEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3326"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-3327">指定した <paramref name="size" /> が <paramref name="buffer" /> のサイズを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3327">The specified <paramref name="size" /> exceeds the size of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3328">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3328">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3329"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3329">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * int * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, offset, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="size" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8ef83-3330">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3330">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="offset"><span data-ttu-id="8ef83-3331">データの送信を開始する、データ バッファー内の位置。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3331">The position in the data buffer at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="8ef83-3332">送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3332">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="8ef83-3333"><see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3333">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="8ef83-3334">データの送信先の位置を表す <see cref="T:System.Net.EndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3334">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span></span></param>
        <summary><span data-ttu-id="8ef83-3335">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータを、指定したエンドポイントに送信します。送信はバッファー内の指定した位置から開始されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3335">Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="8ef83-3336">送信されたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3336">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3337">このオーバーロードでは、 <xref:System.Net.Sockets.SocketFlags.DontRoute> `socketflags`パラメーターとしてフラグを指定すると、送信するデータはルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3337">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-3338">コネクションレスプロトコルを使用している場合は、を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前に、メソッドを使用して既定のリモートホストを確立する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3338">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="8ef83-3339">この操作は、 <xref:System.Net.Sockets.Socket.Send%2A>メソッドを呼び出す場合にのみ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3339">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="8ef83-3340">を呼び出す<xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.SendTo%2A>前にメソッドを呼び出すと、 `remoteEP`その送信操作に対してのみ、指定した既定のリモートホストがパラメーターによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3340">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="8ef83-3341">基になるサービスプロバイダーによって<xref:System.Net.Sockets.Socket.Bind%2A>最も適切なローカルネットワークアドレスとポート番号が割り当てられるため、メソッドを呼び出す必要もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3341">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="8ef83-3342">割り当てられたローカルネットワークアドレスとポート番号を識別する必要がある場合は<xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に完了した後でプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3342">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="8ef83-3343">コネクションレスプロトコルを対象と<xref:System.Net.Sockets.Socket.SendTo%2A>していますが、接続指向プロトコルでも機能します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3343">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="8ef83-3344">接続指向プロトコルを使用している場合は、最初に<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出すか、 <xref:System.Net.Sockets.Socket.Accept%2A>メソッドを使用して受信接続要求を受け入れることによって、リモートホスト接続を確立する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3344">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="8ef83-3345">リモートホスト接続を確立していない場合、 <xref:System.Net.Sockets.Socket.SendTo%2A>または受け入れない場合は、によってが<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3345">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3346">また、 <xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す前に、コネクションレスプロトコルの既定のリモートホストを確立することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3346">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="8ef83-3347">どちらの場合も、 <xref:System.Net.Sockets.Socket.SendTo%2A>は`remoteEP`パラメーターを無視し、接続されたまたは既定のリモートホストにのみデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3347">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="8ef83-3348">ブロックされたソケットは、要求されたバイト数が送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3348">Blocking sockets will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="8ef83-3349">非ブロッキング<xref:System.Net.Sockets.Socket>はすぐに完了するため、1回の操作で要求されたバイト数がすべて送信されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3349">Since a non-blocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation.</span></span> <span data-ttu-id="8ef83-3350">アプリケーションは、送信されたバイト数を追跡し、要求されたバイト数をアプリケーションが送信するまで操作を再試行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3350">It is your applications responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="8ef83-3351">また、送信したデータがネットワークに直ちに表示される保証もありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3351">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="8ef83-3352">ネットワークの効率を高めるため、基になるシステムは、大量のデータが収集されるまで転送を遅らせます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3352">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="8ef83-3353"><xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に終了するということは、基になるシステムにネットワーク送信用のデータをバッファーするための余裕があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3353">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="8ef83-3354">ブロックモードでコネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.SendTo%2A>場合、はデータグラムが送信されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3354">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="8ef83-3355">ブロードキャストアドレスにデータを送信する場合は、最初に<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを呼び出し、ソケットオプションをに<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3355">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="8ef83-3356">また、サイズが基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3356">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-3357">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.SendTo%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3357">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3358">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3358">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3359">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3359">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3360">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3360">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3361">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3361">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3362">次のコード例では、指定したリモートホストにコネクションレスのデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3362">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="8ef83-3363">オフセット、サイズ、および<xref:System.Net.Sockets.SocketFlags>が<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3363">The offset, size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Sync_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Sync_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-3364"><paramref name="buffer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3364"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8ef83-3365">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3365">-or-</span></span> 
 <span data-ttu-id="8ef83-3366"><paramref name="remoteEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3366"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-3367"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3367"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-3368">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3368">-or-</span></span> 
 <span data-ttu-id="8ef83-3369"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3369"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="8ef83-3370">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3370">-or-</span></span> 
 <span data-ttu-id="8ef83-3371"><paramref name="size" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3371"><paramref name="size" /> is less than 0.</span></span>  
  
<span data-ttu-id="8ef83-3372">または</span><span class="sxs-lookup"><span data-stu-id="8ef83-3372">-or-</span></span> 
 <span data-ttu-id="8ef83-3373"><paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3373"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3374"><paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3374"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
<span data-ttu-id="8ef83-3375">- または -</span><span class="sxs-lookup"><span data-stu-id="8ef83-3375">-or-</span></span> 
<span data-ttu-id="8ef83-3376"><see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3376">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3377"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3377">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="8ef83-3378">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3378">A caller in the call stack does not have the required permissions.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendToAsync">
      <MemberSignature Language="C#" Value="public bool SendToAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendToAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendToAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendToAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendToAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendToAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="8ef83-3379">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3379">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="8ef83-3380">特定のリモート ホストにデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3380">Sends data asynchronously to a specific remote host.</span></span></summary>
        <returns><span data-ttu-id="8ef83-3381">I/O 操作が保留中の場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3381"><see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="8ef83-3382">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3382">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="8ef83-3383">I/O 操作が同期的に完了した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3383"><see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="8ef83-3384">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3384">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3385">メソッド<xref:System.Net.Sockets.Socket.SendToAsync%2A>は、 `e`パラメーターの<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティで指定されたリモートホストに対して非同期の送信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3385">The <xref:System.Net.Sockets.Socket.SendToAsync%2A> method starts an asynchronous send operation to the remote host specified in the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property of the `e` parameter.</span></span> <span data-ttu-id="8ef83-3386">メソッドを<xref:System.Net.Sockets.Socket.SendToAsync%2A>呼び出すと、別の実行スレッド内でデータを送信できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3386">Calling the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method gives you the ability to send data within a separate execution thread.</span></span> <span data-ttu-id="8ef83-3387">この方法は、コネクションレスプロトコルを対象<xref:System.Net.Sockets.Socket.SendToAsync%2A>としていますが、コネクションレスプロトコルと接続指向プロトコルの両方で動作します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3387">Although this method is intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendToAsync%2A> works with both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="8ef83-3388">完了が通知されるようにするには、EventHandler\<SocketAsyncEventArgs > delegate を実装するコールバックメソッドを作成し、そのコールバックを<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベントにアタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3388">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="8ef83-3389">このメソッドを正常に呼び出すに<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>は、オブジェクトの次のプロパティとイベントが必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3389">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="8ef83-3390">呼び出し元は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッドを呼び出す前に、プロパティを任意のユーザー状態オブジェクトに設定できます。これにより、コールバックメソッドで情報を取得できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3390">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="8ef83-3391">コールバックが1つのオブジェクトよりも多くの情報を必要とする場合は、他の必要な状態情報をメンバーとして保持するために、小さなクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3391">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="8ef83-3392">接続指向プロトコルを使用している場合は<xref:System.Net.Sockets.Socket.Accept%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A>、まず、 <xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.AcceptAsync%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>、、、、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3392">If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span> <span data-ttu-id="8ef83-3393">それ<xref:System.Net.Sockets.Socket.SendToAsync%2A>以外の場合<xref:System.Net.Sockets.SocketException>は、がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3393">Otherwise <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3394">接続<xref:System.Net.Sockets.Socket.SendToAsync%2A>指向プロトコルを使用する場合、メソッドは<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティを無視<xref:System.Net.EndPoint?displayProperty=nameWithType>し、 <xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A> <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>、、、 <xref:System.Net.Sockets.Socket.Connect%2A>の各で確立されたにデータを送信します。、、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>またはメソッド。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3394">When using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method will ignore the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property and send data to the <xref:System.Net.EndPoint?displayProperty=nameWithType> established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-3395">コネクションレスプロトコルを使用している<xref:System.Net.Sockets.Socket.BeginConnect%2A>場合は、を呼び出す<xref:System.Net.Sockets.Socket.SendToAsync%2A>前に、 <xref:System.Net.Sockets.Socket.Connect%2A>、、またはのいずれか<xref:System.Net.Sockets.Socket.ConnectAsync%2A>のメソッドを使用して、既定のリモートホストを確立する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3395">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendToAsync%2A>.</span></span> <span data-ttu-id="8ef83-3396">この操作は、 <xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドまたは<xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドを呼び出す場合にのみ必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3396">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.SendAsync%2A> methods.</span></span> <span data-ttu-id="8ef83-3397"><xref:System.Net.Sockets.Socket.BeginConnect%2A>を呼び出す<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> <xref:System.Net.Sockets.Socket.Connect%2A> <xref:System.Net.Sockets.Socket.ConnectAsync%2A>前に、、またはメソッドを呼び出した場合、プロパティは、その送信操作に対してのみ、指定された既定のリモートホストをオーバーライドします。 <xref:System.Net.Sockets.Socket.SendToAsync%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-3397">If you do call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendToAsync%2A>, the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="8ef83-3398">また、 <xref:System.Net.Sockets.Socket.Bind%2A>メソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3398">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="8ef83-3399">この場合、基になるサービスプロバイダーによって、最も適切なローカルネットワーク IP アドレスとポート番号が割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3399">In this case, the underlying service provider will assign the most appropriate local network IP address and port number.</span></span> <span data-ttu-id="8ef83-3400">基になるサービスプロバイダーで空きポートを選択する場合は、ポート番号を0にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3400">Use a port number of zero if you want the underlying service provider to select a free port.</span></span> <span data-ttu-id="8ef83-3401">割り当てられているローカルネットワークの IP アドレスとポート番号を識別する必要がある<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>場合は、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベントが通知され、関連付けられているデリゲートが呼び出された後に、プロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3401">If you need to identify the assigned local network IP address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event is signaled and the associated delegates are called.</span></span>  
  
 <span data-ttu-id="8ef83-3402">ブロードキャストアドレスにデータを送信する場合は、最初に<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを呼び出し、の<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> socket オプションを true に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3402">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option for <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> to true.</span></span> <span data-ttu-id="8ef83-3403">また、バッファーのサイズが、基になるサービスプロバイダーの最大パケットサイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3403">You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="8ef83-3404">この場合、データグラムは送信<xref:System.Net.Sockets.Socket.SendToAsync%2A>されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3404">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="8ef83-3405"><xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>プロパティで DontRoute フラグを指定した場合、送信するデータはルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3405">If you specify the DontRoute flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="8ef83-3406">メッセージ指向のソケットの場合は、基になるトランスポートの最大メッセージサイズを超えないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3406">For message-oriented sockets, care must be taken not to exceed the maximum message size of the underlying transport.</span></span> <span data-ttu-id="8ef83-3407">バッファーのサイズが基になるサービスプロバイダーの最大パケットサイズを超えると<xref:System.Net.Sockets.Socket.SendToAsync%2A> 、データグラムは送信されず、が<xref:System.Net.Sockets.SocketException>スローされます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3407">If the size of the buffer exceeds the maximum packet size of the underlying service provider, the datagram is not sent and <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="8ef83-3408"><xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッドが正常に完了しても、データが正常に配信されたことは示されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3408">The successful completion of a <xref:System.Net.Sockets.Socket.SendToAsync%2A> method does not indicate that the data was successfully delivered.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-3409"><see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> に null 値を指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3409">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-3410"><paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3410">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-3411">このメソッドには Windows XP 以降が必要です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3411">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3412"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3412">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3413">指定されたプロトコルは接続指向ですが、<see cref="T:System.Net.Sockets.Socket" /> がまだ接続されていません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3413">The protocol specified is connection-oriented, but the <see cref="T:System.Net.Sockets.Socket" /> is not yet connected.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SetIPProtectionLevel">
      <MemberSignature Language="C#" Value="public void SetIPProtectionLevel (System.Net.Sockets.IPProtectionLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetIPProtectionLevel(valuetype System.Net.Sockets.IPProtectionLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetIPProtectionLevel (level As IPProtectionLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetIPProtectionLevel(System::Net::Sockets::IPProtectionLevel level);" />
      <MemberSignature Language="F#" Value="member this.SetIPProtectionLevel : System.Net.Sockets.IPProtectionLevel -&gt; unit" Usage="socket.SetIPProtectionLevel level" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Net.Sockets.IPProtectionLevel" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="level"><span data-ttu-id="8ef83-3414">このソケットに設定する IP 保護レベル。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3414">The IP protection level to set on this socket.</span></span></param>
        <summary><span data-ttu-id="8ef83-3415">ソケットの IP 保護レベルを設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3415">Set the IP protection level on a socket.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3416"><xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A>メソッドを使用すると、同じリンクローカルまたはサイトローカルプレフィックスを持つアドレスなど、指定されたスコープでリッスンするように IPv6 または IP ソケットを制限できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3416">The <xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> method enables restricting an a IPv6 or IP socket to listen on a specified scope, such as addresses with the same link local or site local prefix.</span></span> <span data-ttu-id="8ef83-3417">このソケットオプションを使用すると、アプリケーションは IPv6 または IP ソケットにアクセス制限を設けることができます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3417">This socket option enables applications to place access restrictions on IPv6 or IP sockets.</span></span> <span data-ttu-id="8ef83-3418">この制限により、プライベート LAN で実行されるアプリケーションを外部からの攻撃に対して簡単かつ堅牢に強化できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3418">Such restrictions enable an application running on a private LAN to simply and robustly harden itself against external attacks.</span></span> <span data-ttu-id="8ef83-3419">パラメーターがに<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>設定されている場合は、このソケット`level`オプションを使用してアクセス制限を削除することもできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3419">This socket option can also be used to remove access restrictions if the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="8ef83-3420">このソケット オプションで待機中のソケットのスコープを変更して、適切な場合はパブリック ユーザーおよびプライベート ユーザーからの無制限のアクセスを許可したり、必要に応じて同じサイトへのアクセスのみに制限したりできます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3420">This socket option widens or narrows the scope of a listening socket, enabling unrestricted access from public and private users when appropriate, or restricting access only to the same site, as required.</span></span>  
  
 <span data-ttu-id="8ef83-3421">このソケット オプションには、<xref:System.Net.Sockets.IPProtectionLevel> 列挙型で指定されている定義済みの保護レベルが設定されています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3421">This socket option has defined protection levels specified in the <xref:System.Net.Sockets.IPProtectionLevel> enumeration.</span></span>  
  
 <span data-ttu-id="8ef83-3422">メソッド<xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A>は、 <xref:System.Net.Sockets.Socket>インスタンスのネットワークアドレストラバーサル (NAT) を有効または無効にするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3422">The <xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> method is used to enable or disable Network Address Traversal (NAT) for a <xref:System.Net.Sockets.Socket> instance.</span></span> <span data-ttu-id="8ef83-3423">NAT トラバーサルは、Teredo、6to4、または ISATAP トンネルを使用して提供される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3423">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="8ef83-3424">パラメーターが`level` 、またはに<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>設定さ<xref:System.Net.Sockets.IPProtectionLevel.Restricted>れている場合、 <xref:System.Net.Sockets.Socket>インスタンスの NAT トラバーサルは明示的に無効になります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3424">When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, or <xref:System.Net.Sockets.IPProtectionLevel.Restricted>, this explicitly disables NAT traversal for a <xref:System.Net.Sockets.Socket> instance.</span></span>  
  
 <span data-ttu-id="8ef83-3425">パラメーターをに<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>設定すると、システムに配置されている<xref:System.Net.Sockets.Socket>ファイアウォールルールに応じて、に対して NAT トラバーサルが許可されることがあります。 `level`</span><span class="sxs-lookup"><span data-stu-id="8ef83-3425">When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, this may allow NAT traversal for a <xref:System.Net.Sockets.Socket> depending on firewall rules in place on the system.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8ef83-3426"><paramref name="level" /> パラメーターとして <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" /> を使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3426">The <paramref name="level" /> parameter cannot be <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" />.</span></span> <span data-ttu-id="8ef83-3427">IP 保護レベルを未指定に設定することはできません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3427">The IP protection level cannot be set to unspecified.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-3428">ソケットの <see cref="T:System.Net.Sockets.AddressFamily" /> は、<see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3428">The <see cref="T:System.Net.Sockets.AddressFamily" /> of the socket must be either <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />.</span></span></exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSocketOption">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8ef83-3429"><see cref="T:System.Net.Sockets.Socket" /> オプションを設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3429">Sets a <see cref="T:System.Net.Sockets.Socket" /> option.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, bool optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, bool optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, bool optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * bool -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionValue" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="8ef83-3430"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3430">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="8ef83-3431"><see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3431">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="8ef83-3432"><see cref="T:System.Boolean" /> として表されるオプションの値。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3432">The value of the option, represented as a <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="8ef83-3433">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションを、指定した <see cref="T:System.Boolean" /> 値に設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3433">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified <see cref="T:System.Boolean" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3434"><xref:System.Net.Sockets.Socket>オプションは、現在<xref:System.Net.Sockets.Socket>のの動作を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3434"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-3435">オプションを有効にする場合はに設定`false`し、オプションを無効にする場合はに設定`optionValue`します。 `true`</span><span class="sxs-lookup"><span data-stu-id="8ef83-3435">Set `optionValue` to `true` to enable the option, or to `false` to disable the option.</span></span>  
  
 <span data-ttu-id="8ef83-3436"><xref:System.Net.Sockets.Socket>オプションは、プロトコルサポートのレベルによってグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3436"><xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.</span></span>  
  
 <span data-ttu-id="8ef83-3437">このオーバーロードを使用し<xref:System.Net.Sockets.Socket>て設定できるさまざまなオプションを以下に示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3437">Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload.</span></span> <span data-ttu-id="8ef83-3438">これらのオプションは、適切な<xref:System.Net.Sockets.SocketOptionLevel>値によってグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3438">These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value.</span></span> <span data-ttu-id="8ef83-3439">これらのオプションのいずれかを設定する場合は、 <xref:System.Net.Sockets.SocketOptionLevel> `optionLevel`パラメーターに適切な値を使用してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3439">If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value for the `optionLevel` parameter.</span></span> <span data-ttu-id="8ef83-3440">設定するオプションは、 `optionName`パラメーターに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3440">The option you choose to set must be specified in the `optionName` parameter.</span></span> <span data-ttu-id="8ef83-3441">一覧表示されているいずれかのオプションの現在の値を取得する<xref:System.Net.Sockets.Socket.GetSocketOption%2A>場合は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3441">If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-3442"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3442"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.AcceptConnection>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Broadcast>  
  
-   <xref:System.Net.Sockets.SocketOptionName.DontLinger>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Debug>  
  
-   <xref:System.Net.Sockets.SocketOptionName.KeepAlive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.OutOfBandInline>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReuseAddress>  
  
 <span data-ttu-id="8ef83-3443"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3443"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HeaderIncluded>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastLoopback>  
  
-   <xref:System.Net.Sockets.SocketOptionName.UseLoopback>  
  
 <span data-ttu-id="8ef83-3444"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3444"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.BsdUrgent>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Expedited>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoDelay>  
  
 <span data-ttu-id="8ef83-3445"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3445"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoChecksum>  
  
 <span data-ttu-id="8ef83-3446">これらのオプションの詳細については、 <xref:System.Net.Sockets.SocketOptionName>列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3446">For more information on these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3447">例外が発生した場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。 <xref:System.Net.Sockets.SocketException></span><span class="sxs-lookup"><span data-stu-id="8ef83-3447">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3448">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3448">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3449">次のコード例では、ソケットを開き`DontLinger` 、 `OutOfBandInline`およびソケットオプションを有効にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3449">The following code example opens a socket and enables the `DontLinger` and the `OutOfBandInline` socket options.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#5)]
 [!code-csharp[NCLSocketEnhancements#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3450"><see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3450">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3451">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3451">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, unsigned int8[] optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, cli::array &lt;System::Byte&gt; ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * byte[] -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionValue" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="8ef83-3452"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3452">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="8ef83-3453"><see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3453">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="8ef83-3454">オプションの値を表す <see cref="T:System.Byte" /> 型の配列。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3454">An array of type <see cref="T:System.Byte" /> that represents the value of the option.</span></span></param>
        <summary><span data-ttu-id="8ef83-3455">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションを、指定した値に設定します。この値はバイト配列で表されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3455">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified value, represented as a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3456"><xref:System.Net.Sockets.Socket>オプションは、現在<xref:System.Net.Sockets.Socket>のの動作を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3456"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-3457">このオーバーロードを使用して<xref:System.Net.Sockets.Socket> 、バイト配列を必要とするオプションをオプション値として設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3457">Use this overload to set those <xref:System.Net.Sockets.Socket> options that require a byte array as an option value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3458">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3458">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3459">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3459">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3460">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3460">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3461">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3461">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3462">次のコード例では<xref:System.Net.Sockets.LingerOption> 、 <xref:System.Net.Sockets.Socket.Send%2A>とのタイムアウト値を設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3462">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3463">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3463">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3464"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3464">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, int32 optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * int -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionValue" Type="System.Int32" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="8ef83-3465"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3465">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="8ef83-3466"><see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3466">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="8ef83-3467">オプションの値。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3467">A value of the option.</span></span></param>
        <summary><span data-ttu-id="8ef83-3468">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションを、指定した整数値に設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3468">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3469"><xref:System.Net.Sockets.Socket>オプションは、現在<xref:System.Net.Sockets.Socket>のの動作を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3469"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-3470"><xref:System.Boolean>データ型のオプションの場合は、0以外の値を指定してオプションを有効にし、ゼロの値を指定してオプションを無効にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3470">For an option with a <xref:System.Boolean> data type, specify a nonzero value to enable the option, and a zero value to disable the option.</span></span> <span data-ttu-id="8ef83-3471">整数データ型のオプションの場合は、適切な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3471">For an option with an integer data type, specify the appropriate value.</span></span> <span data-ttu-id="8ef83-3472"><xref:System.Net.Sockets.Socket>オプションは、プロトコルサポートのレベルによってグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3472"><xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.</span></span>  
  
 <span data-ttu-id="8ef83-3473">このオーバーロードを使用し<xref:System.Net.Sockets.Socket>て設定できるさまざまなオプションを以下に示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3473">Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload.</span></span> <span data-ttu-id="8ef83-3474">これらのオプションは、適切な<xref:System.Net.Sockets.SocketOptionLevel>でグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3474">These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel>.</span></span> <span data-ttu-id="8ef83-3475">これらのオプションのいずれかを設定する場合は、 <xref:System.Net.Sockets.SocketOptionLevel> `optionLevel`パラメーターに適切なを使用してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3475">If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> for the `optionLevel` parameter.</span></span> <span data-ttu-id="8ef83-3476">設定するオプションは、 `optionName`パラメーターに指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3476">The option you choose to set must be specified in the `optionName` parameter.</span></span> <span data-ttu-id="8ef83-3477">一覧表示されているいずれかのオプションの現在の値を取得する<xref:System.Net.Sockets.Socket.GetSocketOption%2A>場合は、メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3477">If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
 <span data-ttu-id="8ef83-3478"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3478"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Broadcast>  
  
-   <xref:System.Net.Sockets.SocketOptionName.DontLinger>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Debug>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Error>  
  
-   <xref:System.Net.Sockets.SocketOptionName.KeepAlive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.OutOfBandInline>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReceiveBuffer>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReceiveTimeout>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReuseAddress>  
  
-   <xref:System.Net.Sockets.SocketOptionName.SendBuffer>  
  
-   <xref:System.Net.Sockets.SocketOptionName.SendTimeout>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Type>  
  
 <span data-ttu-id="8ef83-3479"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3479"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HeaderIncluded>  
  
-   <xref:System.Net.Sockets.SocketOptionName.IPOptions>  
  
-   <xref:System.Net.Sockets.SocketOptionName.IpTimeToLive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastInterface>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastLoopback>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastTimeToLive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.TypeOfService>  
  
-   <xref:System.Net.Sockets.SocketOptionName.UseLoopback>  
  
 <span data-ttu-id="8ef83-3480"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3480"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.BsdUrgent>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Expedited>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoDelay>  
  
 <span data-ttu-id="8ef83-3481"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3481"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ChecksumCoverage>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoChecksum>  
  
 <span data-ttu-id="8ef83-3482"><xref:System.Net.Sockets.SocketOptionLevel.IPv6?displayProperty=nameWithType>このオーバーロードを使用して設定できるオプション。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3482"><xref:System.Net.Sockets.SocketOptionLevel.IPv6?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HopLimit>  
  
 <span data-ttu-id="8ef83-3483">これらのオプションの詳細については、 <xref:System.Net.Sockets.SocketOptionName>列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3483">For more information about these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3484">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3484">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3485">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3485">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3486">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3486">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3487">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3487">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3488">次のコード例では<xref:System.Net.Sockets.LingerOption> 、 <xref:System.Net.Sockets.Socket.Send%2A>とのタイムアウト値を設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3488">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3489">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3489">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3490"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3490">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, object optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, object optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, System::Object ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * obj -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="optionValue" Type="System.Object" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="8ef83-3491"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3491">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="8ef83-3492"><see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3492">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="8ef83-3493">オプションの値を格納する <see cref="T:System.Net.Sockets.LingerOption" /> または <see cref="T:System.Net.Sockets.MulticastOption" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3493">A <see cref="T:System.Net.Sockets.LingerOption" /> or <see cref="T:System.Net.Sockets.MulticastOption" /> that contains the value of the option.</span></span></param>
        <summary><span data-ttu-id="8ef83-3494">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションを、指定した値に設定します。この値はオブジェクトで表されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3494">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified value, represented as an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3495"><xref:System.Net.Sockets.Socket>オプションは、現在<xref:System.Net.Sockets.Socket>のの動作を決定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3495"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-3496">、 <xref:System.Net.Sockets.SocketOptionName.Linger> 、<xref:System.Net.Sockets.SocketOptionName.AddMembership>およびの各オプション<xref:System.Net.Sockets.Socket>を設定するには、このオーバーロードを使用します。 <xref:System.Net.Sockets.SocketOptionName.DropMembership></span><span class="sxs-lookup"><span data-stu-id="8ef83-3496">Use this overload to set the <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, and <xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket> options.</span></span> <span data-ttu-id="8ef83-3497">オプションには、 `optionLevel`パラメーター <xref:System.Net.Sockets.Socket>にを使用します。 <xref:System.Net.Sockets.SocketOptionName.Linger></span><span class="sxs-lookup"><span data-stu-id="8ef83-3497">For the <xref:System.Net.Sockets.SocketOptionName.Linger> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter.</span></span> <span data-ttu-id="8ef83-3498">とでは、 <xref:System.Net.Sockets.SocketOptionLevel.IP>を使用します。 <xref:System.Net.Sockets.SocketOptionName.DropMembership> <xref:System.Net.Sockets.SocketOptionName.AddMembership></span><span class="sxs-lookup"><span data-stu-id="8ef83-3498">For <xref:System.Net.Sockets.SocketOptionName.AddMembership> and <xref:System.Net.Sockets.SocketOptionName.DropMembership>, use <xref:System.Net.Sockets.SocketOptionLevel.IP>.</span></span> <span data-ttu-id="8ef83-3499">上記のいずれかのオプションの現在の値を取得する場合は、 <xref:System.Net.Sockets.Socket.GetSocketOption%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3499">If you want to get the current value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3500">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3500">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3501">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3501">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3502">次のコード例では<xref:System.Net.Sockets.LingerOption> 、 <xref:System.Net.Sockets.Socket.Send%2A>とのタイムアウト値を設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3502">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8ef83-3503"><paramref name="optionValue" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3503"><paramref name="optionValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3504">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3504">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3505"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3505">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown (System.Net.Sockets.SocketShutdown how);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown(valuetype System.Net.Sockets.SocketShutdown how) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown (how As SocketShutdown)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown(System::Net::Sockets::SocketShutdown how);" />
      <MemberSignature Language="F#" Value="member this.Shutdown : System.Net.Sockets.SocketShutdown -&gt; unit" Usage="socket.Shutdown how" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="how" Type="System.Net.Sockets.SocketShutdown" />
      </Parameters>
      <Docs>
        <param name="how"><span data-ttu-id="8ef83-3506">許可されなくなる操作を指定する <see cref="T:System.Net.Sockets.SocketShutdown" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3506">One of the <see cref="T:System.Net.Sockets.SocketShutdown" /> values that specifies the operation that will no longer be allowed.</span></span></param>
        <summary><span data-ttu-id="8ef83-3507"><see cref="T:System.Net.Sockets.Socket" /> での送受信を無効にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3507">Disables sends and receives on a <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3508">接続指向<xref:System.Net.Sockets.Socket>のを使用する場合は、を<xref:System.Net.Sockets.Socket.Shutdown%2A>閉じる<xref:System.Net.Sockets.Socket>前に常にメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3508">When using a connection-oriented <xref:System.Net.Sockets.Socket>, always call the <xref:System.Net.Sockets.Socket.Shutdown%2A> method before closing the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-3509">これにより、接続されたソケットが閉じられる前に、すべてのデータが送信され、受信されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3509">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="8ef83-3510">メソッドを呼び出して、に関連付けられているすべて<xref:System.Net.Sockets.Socket>のマネージリソースとアンマネージリソースを解放します。 <xref:System.Net.Sockets.Socket.Close%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-3510">Call the <xref:System.Net.Sockets.Socket.Close%2A> method to free all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-3511">終了<xref:System.Net.Sockets.Socket>後にを再利用しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3511">Do not attempt to reuse the <xref:System.Net.Sockets.Socket> after closing.</span></span>  
  
 <span data-ttu-id="8ef83-3512">次の表は、 <xref:System.Net.Sockets.SocketShutdown> `how`パラメーターに対して有効な列挙値を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3512">The following table shows the <xref:System.Net.Sockets.SocketShutdown> enumeration values that are valid for the `how` parameter.</span></span>  
  
|<span data-ttu-id="8ef83-3513">[値]</span><span class="sxs-lookup"><span data-stu-id="8ef83-3513">Value</span></span>|<span data-ttu-id="8ef83-3514">説明</span><span class="sxs-lookup"><span data-stu-id="8ef83-3514">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="8ef83-3515">送信</span><span class="sxs-lookup"><span data-stu-id="8ef83-3515">Send</span></span>|<span data-ttu-id="8ef83-3516">この<xref:System.Net.Sockets.Socket>での送信を無効にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3516">Disable sending on this <xref:System.Net.Sockets.Socket>.</span></span>|  
|<span data-ttu-id="8ef83-3517">Receive</span><span class="sxs-lookup"><span data-stu-id="8ef83-3517">Receive</span></span>|<span data-ttu-id="8ef83-3518">この<xref:System.Net.Sockets.Socket>での受信を無効にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3518">Disable receiving on this <xref:System.Net.Sockets.Socket>.</span></span>|  
|<span data-ttu-id="8ef83-3519">両方</span><span class="sxs-lookup"><span data-stu-id="8ef83-3519">Both</span></span>|<span data-ttu-id="8ef83-3520">この<xref:System.Net.Sockets.Socket>で送信と受信の両方を無効にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3520">Disable both sending and receiving on this <xref:System.Net.Sockets.Socket>.</span></span>|  
  
 <span data-ttu-id="8ef83-3521">を`how`に<xref:System.Net.Sockets.SocketShutdown.Send>設定すると、後続<xref:System.Net.Sockets.Socket.Send%2A>のへの呼び出しは許可されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3521">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Send> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Send%2A> are not allowed.</span></span> <span data-ttu-id="8ef83-3522">コネクションレス<xref:System.Net.Sockets.Socket>型を使用している<xref:System.Net.Sockets.SocketShutdown.Send>場合、を指定しても効果はありません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3522">If you are using a connectionless <xref:System.Net.Sockets.Socket>, specifying <xref:System.Net.Sockets.SocketShutdown.Send> will have no effect.</span></span>  
  
 <span data-ttu-id="8ef83-3523">を`how`に<xref:System.Net.Sockets.SocketShutdown.Receive>設定すると、後続<xref:System.Net.Sockets.Socket.Receive%2A>のへの呼び出しは許可されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3523">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Receive> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Receive%2A> are not allowed.</span></span> <span data-ttu-id="8ef83-3524">これは、下位のプロトコルレイヤーには影響しません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3524">This has no effect on lower protocol layers.</span></span> <span data-ttu-id="8ef83-3525">接続指向プロトコルを使用している場合は、の呼び出しの後に<xref:System.Net.Sockets.Socket.Shutdown%2A>次のいずれかの条件が満たされると、接続が終了します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3525">If you are using a connection-oriented protocol, the connection is terminated if either of the following conditions exist after a call to <xref:System.Net.Sockets.Socket.Shutdown%2A> :</span></span>  
  
-   <span data-ttu-id="8ef83-3526">受信を待機している受信ネットワークバッファーにデータがあります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3526">Data is in the incoming network buffer waiting to be received.</span></span>  
  
-   <span data-ttu-id="8ef83-3527">さらに多くのデータが到着しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3527">More data has arrived.</span></span>  
  
 <span data-ttu-id="8ef83-3528">コネクションレスプロトコルを使用している場合は、データグラムが受け入れられ、キューに登録されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3528">If you are using a connectionless protocol, datagrams are accepted and queued.</span></span> <span data-ttu-id="8ef83-3529">ただし、追加の受信データグラムに使用できるバッファー領域がない場合は、破棄され、送信側にエラーは返されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3529">However, if no buffer space is available for additional incoming datagrams, they will be discarded and no error will be returned to the sender.</span></span> <span data-ttu-id="8ef83-3530">コネクション<xref:System.Net.Sockets.Socket.Shutdown%2A> レス<xref:System.Net.Sockets.Socket>でを使用することは推奨されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3530">Using <xref:System.Net.Sockets.Socket.Shutdown%2A> on a connectionless <xref:System.Net.Sockets.Socket> is not recommended.</span></span>  
  
 <span data-ttu-id="8ef83-3531">を`how`に<xref:System.Net.Sockets.SocketShutdown.Both>設定すると、前述のように、送信と受信の両方が無効になります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3531">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Both> disables both sends and receives as described above.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3532">メソッドの<xref:System.Net.Sockets.SocketException> <xref:System.Net.Sockets.Socket.Shutdown%2A>呼び出し時にを受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3532">If you receive a <xref:System.Net.Sockets.SocketException> when calling the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3533">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3533">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8ef83-3534">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3534">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="8ef83-3535">詳細については、「 [.NET Framework のネットワークトレース](~/docs/framework/network-programming/network-tracing.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3535">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3536">次のコード例で<xref:System.Net.Sockets.Socket.Shutdown%2A>は、を<xref:System.Net.Sockets.Socket>使用してを無効にします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3536">The following code example uses <xref:System.Net.Sockets.Socket.Shutdown%2A> to disable the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3537">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3537">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3538"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3538">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketShutdown" />
      </Docs>
    </Member>
    <Member MemberName="SocketType">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketType SocketType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.SocketType SocketType" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SocketType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SocketType As SocketType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::SocketType SocketType { System::Net::Sockets::SocketType get(); };" />
      <MemberSignature Language="F#" Value="member this.SocketType : System.Net.Sockets.SocketType" Usage="System.Net.Sockets.Socket.SocketType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-3539"><see cref="T:System.Net.Sockets.Socket" /> の型を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3539">Gets the type of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="8ef83-3540"><see cref="T:System.Net.Sockets.SocketType" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3540">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3541"><xref:System.Net.Sockets.Socket.SocketType%2A>は読み取り専用で、 <xref:System.Net.Sockets.Socket>が作成されるときに設定されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3541"><xref:System.Net.Sockets.Socket.SocketType%2A> is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3542">次のコード例では<xref:System.Net.Sockets.AddressFamily>、 <xref:System.Net.Sockets.SocketType>、、 <xref:System.Net.Sockets.ProtocolType>およびをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3542">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.SocketType" />
      </Docs>
    </Member>
    <Member MemberName="SupportsIPv4">
      <MemberSignature Language="C#" Value="public static bool SupportsIPv4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SupportsIPv4" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SupportsIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SupportsIPv4 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SupportsIPv4 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsIPv4 : bool" Usage="System.Net.Sockets.Socket.SupportsIPv4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use OSSupportsIPv4 instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("SupportsIPv4 is obsoleted for this type, please use OSSupportsIPv4 instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("SupportsIPv4 is obsoleted for this type, please use OSSupportsIPv4 instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-3543">現在のホストで IPv4 サポートが使用可能で有効になっているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3543">Gets a value indicating whether IPv4 support is available and enabled on the current host.</span></span></summary>
        <value><span data-ttu-id="8ef83-3544">現在のホストが IPv4 プロトコルをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3544"><see langword="true" /> if the current host supports the IPv4 protocol; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3545">オペレーティングシステムは、IPv4 プロトコルと IPv6 プロトコルの両方をサポートしている場合があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3545">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.SupportsIPv6" />
      </Docs>
    </Member>
    <Member MemberName="SupportsIPv6">
      <MemberSignature Language="C#" Value="public static bool SupportsIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SupportsIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SupportsIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SupportsIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SupportsIPv6 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsIPv6 : bool" Usage="System.Net.Sockets.Socket.SupportsIPv6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use OSSupportsIPv6 instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("SupportsIPv6 is obsoleted for this type, please use OSSupportsIPv6 instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("SupportsIPv6 is obsoleted for this type, please use OSSupportsIPv6 instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-3546">互換性のために残されている特定の <see cref="T:System.Net.Dns" /> メンバー向けに、フレームワークが IPv6 をサポートしているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3546">Gets a value that indicates whether the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns" /> members.</span></span></summary>
        <value><span data-ttu-id="8ef83-3547">互換性のために残されている特定の <see cref="T:System.Net.Dns" /> メソッド向けに、フレームワークが IPv6 をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3547"><see langword="true" /> if the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns" /> methods; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3548">オペレーティングシステムは、IPv4 プロトコルと IPv6 プロトコルの両方をサポートしている場合があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3548">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
        <altmember cref="P:System.Net.Sockets.Socket.SupportsIPv4" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8ef83-3549"><see cref="T:System.Net.Sockets.Socket" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3549">Releases all resources used by the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="8ef83-3550">の使用が終了したら、 <xref:System.Net.Sockets.Socket>IDisposable. Dispose を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3550">Call IDisposable.Dispose when you are finished using the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-3551">IDisposable メソッドは、を<xref:System.Net.Sockets.Socket>使用できない状態のままにします。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3551">The IDisposable.Dispose method leaves the <xref:System.Net.Sockets.Socket> in an unusable state.</span></span> <span data-ttu-id="8ef83-3552">IDisposable を呼び出した後、に対する<xref:System.Net.Sockets.Socket>すべての参照を解放して、が占有し<xref:System.Net.Sockets.Socket>ていたメモリをガベージコレクターが再利用できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3552">After calling IDisposable.Dispose, you must release all references to the <xref:System.Net.Sockets.Socket> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.Socket> was occupying.</span></span> <span data-ttu-id="8ef83-3553">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3553">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE] 
> <span data-ttu-id="8ef83-3554">への最後の参照を解放する前に、 <xref:System.Net.Sockets.Socket>常に IDisposable. Dispose を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3554">Always call IDisposable.Dispose before you release your last reference to the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="8ef83-3555">そうしないと、ガベージ コレクターが <xref:System.Net.Sockets.Socket> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3555">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.Socket> object's `Finalize` method.</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.Socket.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-3556"><see cref="T:System.Net.Sockets.Socket" /> によって送信されたインターネット プロトコル (IP) パケットの有効期間 (TTL) の値を指定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3556">Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="8ef83-3557">TTL の値。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3557">The TTL value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3558">TTL 値は、ルーターがパケットを破棄する前にパケットが通過できるルーターの最大数を示します。 ICMP (インターネット制御メッセージプロトコル) エラーメッセージが送信側に返されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3558">The TTL value indicates the maximum number of routers the packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) "TTL exceeded" error message is returned to the sender.</span></span>  
  
 <span data-ttu-id="8ef83-3559">TTL 値は 0 ~ 255 の値に設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3559">The TTL value may be set to a value from 0 to 255.</span></span> <span data-ttu-id="8ef83-3560">このプロパティが設定されていない場合、ソケットの既定の TTL 値は32です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3560">When this property is not set, the default TTL value for a socket is 32.</span></span>  
  
 <span data-ttu-id="8ef83-3561">ソケットを使用して接続が正常に確立されている場合、TCP/IP スタックでは、伝送制御プロトコル (TCP) ソケットでこのプロパティを設定することは無視されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3561">Setting this property on a Transmission Control Protocol (TCP) socket is ignored by the TCP/IP stack if a successful connection has been established using the socket.</span></span>  
  
 <span data-ttu-id="8ef83-3562">を<xref:System.Net.Sockets.SocketException>受け取った場合は、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを使用して、特定のエラーコードを取得します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3562">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="8ef83-3563">このコードを取得したら、 [Windows Sockets version 2 API エラーコード](/windows/desktop/winsock/windows-sockets-error-codes-2)のドキュメントを参照して、エラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3563">After you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8ef83-3564">次のコード例は、 <xref:System.Net.Sockets.Socket.Ttl%2A>プロパティの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3564">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.Ttl%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8ef83-3565">TTL 値には、負の数を設定できません。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3565">The TTL value can't be set to a negative number.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="8ef83-3566">このプロパティは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ファミリまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットに対してだけ設定できます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3566">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="8ef83-3567">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3567">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="8ef83-3568">このエラーは、TTL に 255 より大きい値を設定しようとしたときにも返されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3568">This error is also returned when an attempt was made to set TTL to a value higher than 255.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8ef83-3569"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3569">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UseOnlyOverlappedIO">
      <MemberSignature Language="C#" Value="public bool UseOnlyOverlappedIO { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseOnlyOverlappedIO" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.UseOnlyOverlappedIO" />
      <MemberSignature Language="VB.NET" Value="Public Property UseOnlyOverlappedIO As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseOnlyOverlappedIO { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseOnlyOverlappedIO : bool with get, set" Usage="System.Net.Sockets.Socket.UseOnlyOverlappedIO" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("This doesn't do anything on Mono yet")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8ef83-3570">ソケットが重複 I/O モードだけを使用する必要があるかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3570">Specifies whether the socket should only use Overlapped I/O mode.</span></span></summary>
        <value><span data-ttu-id="8ef83-3571"><see cref="T:System.Net.Sockets.Socket" /> が重複 I/O モードだけを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3571"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> uses only overlapped I/O; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8ef83-3572">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3572">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8ef83-3573">を呼び出す`true` <xref:System.Net.Sockets.Socket>には、このプロパティをに設定します。<xref:System.Net.Sockets.Socket.DuplicateAndClose%2A></span><span class="sxs-lookup"><span data-stu-id="8ef83-3573">Set this property to `true` for a <xref:System.Net.Sockets.Socket> you intend to call <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.</span></span> <span data-ttu-id="8ef83-3574">それ以外の場合、フレームワークは、ソケットに完了ポートを割り当てることができます。 <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>これにより、の使用が禁止されます。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3574">Otherwise, the Framework may assign a completion port to the socket, which would prohibit the use of <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8ef83-3575">ソケットが完了ポートにバインドされています。</span><span class="sxs-lookup"><span data-stu-id="8ef83-3575">The socket has been bound to a completion port.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
