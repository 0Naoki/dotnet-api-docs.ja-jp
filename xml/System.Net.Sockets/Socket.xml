<Type Name="Socket" FullName="System.Net.Sockets.Socket">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="51795f05b21ad02430b19a88cef2e202a8914a5b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36552916" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Socket : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Socket extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.Socket" />
  <TypeSignature Language="VB.NET" Value="Public Class Socket&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Socket : IDisposable" />
  <TypeSignature Language="F#" Value="type Socket = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="12190-101">Berkeley ソケット インターフェイスを実装します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="12190-101">Implements the Berkeley sockets interface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-102"><xref:System.Net.Sockets.Socket>クラスは、ネットワーク通信について豊富な一連のメソッドとプロパティを提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-102">The <xref:System.Net.Sockets.Socket> class provides a rich set of methods and properties for network communications.</span></span> <span data-ttu-id="12190-103"><xref:System.Net.Sockets.Socket>クラスはどちらも実行を同期できに示されている通信プロトコルのいずれかを使用して非同期のデータ転送、<xref:System.Net.Sockets.ProtocolType>列挙します。</span><span class="sxs-lookup"><span data-stu-id="12190-103">The <xref:System.Net.Sockets.Socket> class allows you to perform both synchronous and asynchronous data transfer using any of the communication protocols listed in the <xref:System.Net.Sockets.ProtocolType> enumeration.</span></span>  
  
 <span data-ttu-id="12190-104"><xref:System.Net.Sockets.Socket>クラスが非同期メソッド用の .NET Framework 名前付けパターンに従います。</span><span class="sxs-lookup"><span data-stu-id="12190-104">The <xref:System.Net.Sockets.Socket> class follows the .NET Framework naming pattern for asynchronous methods.</span></span> <span data-ttu-id="12190-105">たとえば、同期<xref:System.Net.Sockets.Socket.Receive%2A>メソッドは非同期に対応<xref:System.Net.Sockets.Socket.BeginReceive%2A>と<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-105">For example, the synchronous <xref:System.Net.Sockets.Socket.Receive%2A> method corresponds to the asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods.</span></span>  
  
 <span data-ttu-id="12190-106">アプリケーションには、実行中に 1 つのスレッドのみ必要とする場合は、次のメソッドは、同期動作モード用に設計されてを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-106">If your application only requires one thread during execution, use the following methods, which are designed for synchronous operation mode.</span></span>  
  
-   <span data-ttu-id="12190-107">使用した接続に、サーバーがリッスンできる TCP などの接続指向プロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Listen%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-107">If you are using a connection-oriented protocol such as TCP, your server can listen for connections using the <xref:System.Net.Sockets.Socket.Listen%2A> method.</span></span> <span data-ttu-id="12190-108"><xref:System.Net.Sockets.Socket.Accept%2A>メソッド プロセスすべての着信接続を要求しを返します、<xref:System.Net.Sockets.Socket>ことは、データをリモート ホストに通信するために使用することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-108">The <xref:System.Net.Sockets.Socket.Accept%2A> method processes any incoming connection requests and returns a <xref:System.Net.Sockets.Socket> that you can use to communicate data with the remote host.</span></span> <span data-ttu-id="12190-109">この返さ<xref:System.Net.Sockets.Socket>を呼び出して、<xref:System.Net.Sockets.Socket.Send%2A>または<xref:System.Net.Sockets.Socket.Receive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-109">Use this returned <xref:System.Net.Sockets.Socket> to call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span> <span data-ttu-id="12190-110">呼び出す、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドを呼び出す前に、<xref:System.Net.Sockets.Socket.Listen%2A>メソッドのローカル IP アドレスとポート番号を指定する場合。</span><span class="sxs-lookup"><span data-stu-id="12190-110">Call the <xref:System.Net.Sockets.Socket.Bind%2A> method prior to calling the <xref:System.Net.Sockets.Socket.Listen%2A> method if you want to specify the local IP address and port number.</span></span> <span data-ttu-id="12190-111">基になるサービス プロバイダーのポートを割り当てる空きをする場合は、ゼロのポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-111">Use a port number of zero if you want the underlying service provider to assign a free port for you.</span></span> <span data-ttu-id="12190-112">リッスンしているホストに接続する場合は、呼び出し、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-112">If you want to connect to a listening host, call the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-113">データを通信するために呼び出す、<xref:System.Net.Sockets.Socket.Send%2A>または<xref:System.Net.Sockets.Socket.Receive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-113">To communicate data, call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
-   <span data-ttu-id="12190-114">UDP などのコネクションレスのプロトコルを使用している場合は、すべての接続をリッスンする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-114">If you are using a connectionless protocol such as UDP, you do not need to listen for connections at all.</span></span> <span data-ttu-id="12190-115">呼び出す、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドを受信データグラムを受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-115">Call the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method to accept any incoming datagrams.</span></span> <span data-ttu-id="12190-116">使用して、<xref:System.Net.Sockets.Socket.SendTo%2A>データグラムをリモート ホストに送信するメソッド。</span><span class="sxs-lookup"><span data-stu-id="12190-116">Use the <xref:System.Net.Sockets.Socket.SendTo%2A> method to send datagrams to a remote host.</span></span>  
  
 <span data-ttu-id="12190-117">実行中に個別のスレッドを使用して通信を処理するには、次のメソッドは、非同期の操作モード用に設計されてを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-117">To process communications using separate threads during execution, use the following methods, which are designed for asynchronous operation mode.</span></span>  
  
-   <span data-ttu-id="12190-118">TCP などの接続指向プロトコルを使用している場合を使用して、 <xref:System.Net.Sockets.Socket>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、および<xref:System.Net.Sockets.Socket.EndConnect%2A>リッスン中のホストに接続する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-118">If you are using a connection-oriented protocol such as TCP, use the <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, and <xref:System.Net.Sockets.Socket.EndConnect%2A> methods to connect with a listening host.</span></span> <span data-ttu-id="12190-119">使用して、<xref:System.Net.Sockets.Socket.BeginSend%2A>と<xref:System.Net.Sockets.Socket.EndSend%2A>または<xref:System.Net.Sockets.Socket.BeginReceive%2A>と<xref:System.Net.Sockets.Socket.EndReceive%2A>データを非同期的に通信するメソッド。</span><span class="sxs-lookup"><span data-stu-id="12190-119">Use the <xref:System.Net.Sockets.Socket.BeginSend%2A> and <xref:System.Net.Sockets.Socket.EndSend%2A> or <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods to communicate data asynchronously.</span></span> <span data-ttu-id="12190-120">使用して接続要求を処理できる<xref:System.Net.Sockets.Socket.BeginAccept%2A>と<xref:System.Net.Sockets.Socket.EndAccept%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-120">Incoming connection requests can be processed using <xref:System.Net.Sockets.Socket.BeginAccept%2A> and <xref:System.Net.Sockets.Socket.EndAccept%2A>.</span></span>  
  
-   <span data-ttu-id="12190-121">UDP などのコネクションレスのプロトコルを使用している場合を使用できます<xref:System.Net.Sockets.Socket.BeginSendTo%2A>と<xref:System.Net.Sockets.Socket.EndSendTo%2A>、データグラムを送信して<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>と<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>データグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-121">If you are using a connectionless protocol such as UDP, you can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.EndSendTo%2A> to send datagrams, and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> and <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> to receive datagrams.</span></span>  
  
 <span data-ttu-id="12190-122">ソケットに対して複数の非同期操作を実行する場合、必ずしもで完了しなかった開始される順序。</span><span class="sxs-lookup"><span data-stu-id="12190-122">If you perform multiple asynchronous operations on a socket, they do not necessarily complete in the order in which they are started.</span></span>  
  
 <span data-ttu-id="12190-123">完成した送信とデータを受信したらを使用して、<xref:System.Net.Sockets.Socket.Shutdown%2A>無効にする方法、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-123">When you are finished sending and receiving data, use the <xref:System.Net.Sockets.Socket.Shutdown%2A> method to disable the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-124">呼び出した後<xref:System.Net.Sockets.Socket.Shutdown%2A>を呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>に関連付けられているすべてのリソースを解放するメソッド、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-124">After calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method to release all resources associated with the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 <span data-ttu-id="12190-125"><xref:System.Net.Sockets.Socket>クラスでは、構成することができます、<xref:System.Net.Sockets.Socket>を使用して、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-125">The <xref:System.Net.Sockets.Socket> class allows you to configure your <xref:System.Net.Sockets.Socket> using the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span> <span data-ttu-id="12190-126">使用してこれらの設定を取得、<xref:System.Net.Sockets.Socket.GetSocketOption%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-126">Retrieve these settings using the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-127">比較的単純なアプリケーションを作成して、最大のパフォーマンスは必要ない場合、は、使用を検討して<xref:System.Net.Sockets.TcpClient>、 <xref:System.Net.Sockets.TcpListener>、および<xref:System.Net.Sockets.UdpClient>です。</span><span class="sxs-lookup"><span data-stu-id="12190-127">If you are writing a relatively simple application and do not require maximum performance, consider using <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.TcpListener>, and <xref:System.Net.Sockets.UdpClient>.</span></span> <span data-ttu-id="12190-128">これらのクラスに簡素化され、ユーザーにわかりやすいインターフェイスを提供する<xref:System.Net.Sockets.Socket>通信します。</span><span class="sxs-lookup"><span data-stu-id="12190-128">These classes provide a simpler and more user-friendly interface to <xref:System.Net.Sockets.Socket> communications.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-129">次のコード例に示す方法、<xref:System.Net.Sockets.Socket>クラスは、HTTP サーバーにデータを送信し、応答を受信するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-129">The following code example shows how the <xref:System.Net.Sockets.Socket> class can be used to send data to an HTTP server and receive the response.</span></span> <span data-ttu-id="12190-130">この例は、ページ全体を受信するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-130">This example blocks until the entire page is received.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket/CPP/socket.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket/CS/socket.cs#1)]
 [!code-vb[System.Net.Sockets.Socket#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Socket/VB/socket.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">
      <span data-ttu-id="12190-131">発信接続を確立するか、受信要求を受け入れます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="12190-131">To establish an outgoing connection or accept an incoming request.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="12190-132">このクラスのインスタンスでは、スレッド セーフです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="12190-132">Instances of this class are thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="N:System.Net" />
    <altmember cref="N:System.Net.Cache" />
    <altmember cref="N:System.Net.Security" />
    <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-133">
            <see cref="T:System.Net.Sockets.Socket" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-133">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.SocketInformation socketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.SocketInformation socketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::SocketInformation socketInformation);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.SocketInformation -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket socketInformation" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socketInformation" Type="System.Net.Sockets.SocketInformation" />
      </Parameters>
      <Docs>
        <param name="socketInformation">
          <span data-ttu-id="12190-134">
            <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> によって返されるソケット情報。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-134">The socket information returned by <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-135">
            <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> から返された値を指定して、<see cref="T:System.Net.Sockets.Socket" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-135">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified value returned from <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-136">呼び出す場合は、<xref:System.Net.Sockets.Socket.%23ctor%2A>複数回の各呼び出しの引数と同じバイト配列を持つコンス トラクターは、複数の管理を作成する、<xref:System.Net.Sockets.Socket>同一の基になるソケットで秒です。</span><span class="sxs-lookup"><span data-stu-id="12190-136">If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket>s with the same underlying socket.</span></span> <span data-ttu-id="12190-137">この方法はお勧めします。</span><span class="sxs-lookup"><span data-stu-id="12190-137">This practice is strongly discouraged.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket (socketType, protocolType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
      </Parameters>
      <Docs>
        <param name="socketType">
          <span data-ttu-id="12190-138">
            <see cref="T:System.Net.Sockets.SocketType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-138">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span>
          </span>
        </param>
        <param name="protocolType">
          <span data-ttu-id="12190-139">
            <see cref="T:System.Net.Sockets.ProtocolType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-139">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-140">指定したソケットの種類とプロトコルを使用して、<see cref="T:System.Net.Sockets.Socket" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-140">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified socket type and protocol.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-141">`socketType`パラメーターの型を指定、<xref:System.Net.Sockets.Socket>クラスおよび`protocolType`パラメーターで使用されるプロトコルを指定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-141">The `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-142">2 つのパラメーターが独立してではありません。</span><span class="sxs-lookup"><span data-stu-id="12190-142">The two parameters are not independent.</span></span> <span data-ttu-id="12190-143">多くの場合、<xref:System.Net.Sockets.Socket>型は、プロトコルで暗黙の型。</span><span class="sxs-lookup"><span data-stu-id="12190-143">Often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol.</span></span> <span data-ttu-id="12190-144">場合の組み合わせ<xref:System.Net.Sockets.Socket>種類とプロトコル型の結果、無効な<xref:System.Net.Sockets.Socket>、このコンス トラクターをスロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-144">If the combination of <xref:System.Net.Sockets.Socket> type and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-145">このコンス トラクターをスローした場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-145">If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-146">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-146">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-147">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-147">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-148">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-148">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-149">
            <paramref name="socketType" /> と <paramref name="protocolType" /> を組み合わせると、無効なソケットになります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-149">The combination of  <paramref name="socketType" /> and <paramref name="protocolType" /> results in an invalid socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily addressFamily, valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::AddressFamily addressFamily, System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.Socket : System.Net.Sockets.AddressFamily * System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType -&gt; System.Net.Sockets.Socket" Usage="new System.Net.Sockets.Socket (addressFamily, socketType, protocolType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addressFamily" Type="System.Net.Sockets.AddressFamily" />
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
      </Parameters>
      <Docs>
        <param name="addressFamily">
          <span data-ttu-id="12190-150">
            <see cref="T:System.Net.Sockets.AddressFamily" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-150">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</span>
          </span>
        </param>
        <param name="socketType">
          <span data-ttu-id="12190-151">
            <see cref="T:System.Net.Sockets.SocketType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-151">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span>
          </span>
        </param>
        <param name="protocolType">
          <span data-ttu-id="12190-152">
            <see cref="T:System.Net.Sockets.ProtocolType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-152">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-153">指定したアドレス ファミリ、ソケットの種類、およびプロトコルを使用して、<see cref="T:System.Net.Sockets.Socket" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-153">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified address family, socket type and protocol.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-154">`addressFamily`パラメーターを指定するアドレス指定スキーム、<xref:System.Net.Sockets.Socket>クラスの使用方法、`socketType`パラメーターの型を指定、<xref:System.Net.Sockets.Socket>クラス、および`protocolType`パラメーターで使用されるプロトコルを指定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-154">The `addressFamily` parameter specifies the addressing scheme that the <xref:System.Net.Sockets.Socket> class uses, the `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class, and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-155">次の 3 つのパラメーターが独立してではありません。</span><span class="sxs-lookup"><span data-stu-id="12190-155">The three parameters are not independent.</span></span> <span data-ttu-id="12190-156">一部のアドレス ファミリを制限、および多くの場合、どのプロトコルを使用することができます、<xref:System.Net.Sockets.Socket>型は、プロトコルで暗黙の型。</span><span class="sxs-lookup"><span data-stu-id="12190-156">Some address families restrict which protocols can be used with them, and often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol.</span></span> <span data-ttu-id="12190-157">場合、アドレス ファミリの組み合わせ<xref:System.Net.Sockets.Socket>型、およびプロトコルの種類は、無効な<xref:System.Net.Sockets.Socket>、このコンス トラクターをスロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-157">If the combination of address family, <xref:System.Net.Sockets.Socket> type, and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-158">このコンス トラクターをスローした場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-158">If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-159">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-159">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-160">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-160">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-161">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-161">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-162">次のコード例は、のインスタンスを作成する方法を示します、<xref:System.Net.Sockets.Socket>クラスです。</span><span class="sxs-lookup"><span data-stu-id="12190-162">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
 [!code-cpp[Socket_Send_Recieve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Send_Recieve/CPP/source.cpp#1)]
 [!code-csharp[Socket_Send_Recieve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Send_Recieve/CS/source.cs#1)]
 [!code-vb[Socket_Send_Recieve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Send_Recieve/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-163">
            <paramref name="addressFamily" />、<paramref name="socketType" />、および <paramref name="protocolType" /> を組み合わせると、無効なソケットになります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-163">The combination of <paramref name="addressFamily" />, <paramref name="socketType" />, and <paramref name="protocolType" /> results in an invalid socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketException" />
        <altmember cref="T:System.Net.Sockets.AddressFamily" />
        <altmember cref="T:System.Net.Sockets.ProtocolType" />
        <altmember cref="T:System.Net.Sockets.SocketType" />
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Accept ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket Accept() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Accept" />
      <MemberSignature Language="VB.NET" Value="Public Function Accept () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ Accept();" />
      <MemberSignature Language="F#" Value="member this.Accept : unit -&gt; System.Net.Sockets.Socket" Usage="socket.Accept " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12190-164">新しく作成された接続に対して新しい <see cref="T:System.Net.Sockets.Socket" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-164">Creates a new <see cref="T:System.Net.Sockets.Socket" /> for a newly created connection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-165">新しく作成された接続に対する <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-165">A <see cref="T:System.Net.Sockets.Socket" /> for a newly created connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-166"><xref:System.Net.Sockets.Socket.Accept%2A> 同期的に待機中のソケットの接続要求のキューから最初の保留中の接続要求を抽出を作成し、新しい<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-166"><xref:System.Net.Sockets.Socket.Accept%2A> synchronously extracts the first pending connection request from the connection request queue of the listening socket, and then creates and returns a new <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-167">返されるこれを使用することはできません<xref:System.Net.Sockets.Socket>接続キューからその他の接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-167">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="12190-168">ただし、呼び出すことができます、<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>メソッドの返された<xref:System.Net.Sockets.Socket>をリモート ホストのネットワーク アドレスとポート番号を識別します。</span><span class="sxs-lookup"><span data-stu-id="12190-168">However, you can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> method of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
 <span data-ttu-id="12190-169">ブロッキング モード<xref:System.Net.Sockets.Socket.Accept%2A>受信接続の試行がキューに登録するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-169">In blocking mode, <xref:System.Net.Sockets.Socket.Accept%2A> blocks until an incoming connection attempt is queued.</span></span> <span data-ttu-id="12190-170">接続を受け入れる元<xref:System.Net.Sockets.Socket>キューの着信接続を要求するまで閉じることが続行されます。</span><span class="sxs-lookup"><span data-stu-id="12190-170">Once a connection is accepted, the original <xref:System.Net.Sockets.Socket> continues queuing incoming connection requests until you close it.</span></span>  
  
 <span data-ttu-id="12190-171">非ブロッキングを使用してこのメソッドを呼び出すかどうか<xref:System.Net.Sockets.Socket>、および接続要求がキューに入れ、<xref:System.Net.Sockets.Socket.Accept%2A>をスロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-171">If you call this method using a non-blocking <xref:System.Net.Sockets.Socket>, and no connection requests are queued, <xref:System.Net.Sockets.Socket.Accept%2A> throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-172">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-172">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-173">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-173">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-174">呼び出しの前に、<xref:System.Net.Sockets.Socket.Accept%2A>メソッド、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.Listen%2A>をリッスンし、接続要求をキューにメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-174">Before calling the <xref:System.Net.Sockets.Socket.Accept%2A> method, you must first call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-175">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-175">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-176">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-176">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-177">次のコード例は、単純なを受け入れる<xref:System.Net.Sockets.Socket>接続します。</span><span class="sxs-lookup"><span data-stu-id="12190-177">The following code example accepts a simple <xref:System.Net.Sockets.Socket> connection.</span></span>  
  
 [!code-cpp[Classic Socket.Accept Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Accept Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Accept Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Accept Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Accept Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Accept Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-178">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-178">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-179">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-179">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-180">受け入れ元のソケットが、接続をリッスンしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-180">The accepting socket is not listening for connections.</span>
          </span>
          <span data-ttu-id="12190-181">
            <see cref="M:System.Net.Sockets.Socket.Accept" /> の前に <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> および <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出す必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-181">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.Accept" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AcceptAsync">
      <MemberSignature Language="C#" Value="public bool AcceptAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AcceptAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AcceptAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.AcceptAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.AcceptAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-182">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-182">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-183">受信接続の試行を受け入れる非同期操作を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-183">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-184">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-184">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-185">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-185">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-186">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-186">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-187">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-187">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-188">接続指向プロトコルを使用できる、<xref:System.Net.Sockets.Socket.AcceptAsync%2A>着信接続を非同期的に処理するメソッドと試みます。</span><span class="sxs-lookup"><span data-stu-id="12190-188">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="12190-189">非同期的に接続を受け入れると、個別の実行スレッド内でデータを送受信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-189">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="12190-190">呼び出しの前に、<xref:System.Net.Sockets.Socket.AcceptAsync%2A>メソッドを呼び出す必要があります、<xref:System.Net.Sockets.Socket.Listen%2A>をリッスンし、接続要求をキューにメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-190">Before calling the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="12190-191">完了の通知、イベント ハンドラーを実装するコールバック メソッドを作成する必要があります\<SocketAsyncEventArgs > を委任し、それを<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="12190-191">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and hook it to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="12190-192">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが必要。</span><span class="sxs-lookup"><span data-stu-id="12190-192">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-193">呼び出し元は、既存のオプションで指定できます<xref:System.Net.Sockets.Socket>を指定して、着信接続に使用する、<xref:System.Net.Sockets.Socket>で使用する、<xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-193">The caller can optionally specify an existing <xref:System.Net.Sockets.Socket> to use for the incoming connection by specifying the <xref:System.Net.Sockets.Socket> to use with the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="12190-194">場合、<xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType>プロパティが null、新しい<xref:System.Net.Sockets.Socket>が同じで構築されて<xref:System.Net.Sockets.Socket.AddressFamily%2A>、 <xref:System.Net.Sockets.Socket.SocketType%2A>、および<xref:System.Net.Sockets.Socket.ProtocolType%2A>現在<xref:System.Net.Sockets.Socket>として設定し、<xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-194">If the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property is null, a new <xref:System.Net.Sockets.Socket> is constructed with the same <xref:System.Net.Sockets.Socket.AddressFamily%2A>, <xref:System.Net.Sockets.Socket.SocketType%2A>, and <xref:System.Net.Sockets.Socket.ProtocolType%2A> as the current <xref:System.Net.Sockets.Socket> and set as the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="12190-195">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.AcceptAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-195">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-196">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-196">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-197">必要に応じて、後にソケット上のデータの最初のブロックを受信するためのバッファーを指定する場合があります、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドが成功します。</span><span class="sxs-lookup"><span data-stu-id="12190-197">Optionally, a buffer may be provided in which to receive the initial block of data on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="12190-198">ここで、<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>プロパティを受信するデータを格納しているバッファーに設定する必要があります、<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>プロパティをバッファーに受信するデータのバイトの最大数に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-198">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to receive and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the maximum number of bytes of data to receive in the buffer.</span></span> <span data-ttu-id="12190-199">使用してこれらのプロパティを設定することができます、<xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-199">These properties can be set using the <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="12190-200">渡されたバッファーの一部で使用される内部的に使用する基になる Winsock AcceptEx 呼び出しです。</span><span class="sxs-lookup"><span data-stu-id="12190-200">Part of the buffer passed in will be consumed internally for use by the underlying Winsock AcceptEx call.</span></span> <span data-ttu-id="12190-201">つまり、返されるデータの量が常の値より小さい、<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>プロパティを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>指定されたインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="12190-201">This means that the amount of data returned will always be less than the value of the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> instance provided.</span></span> <span data-ttu-id="12190-202">内部的に使用されるバッファーの容量は、ソケット アドレス ファミリに変わります。</span><span class="sxs-lookup"><span data-stu-id="12190-202">The amount of the buffer used internally varies based on the address family of the socket.</span></span> <span data-ttu-id="12190-203">必要な最小バッファー サイズは、288 バイトです。</span><span class="sxs-lookup"><span data-stu-id="12190-203">The minimum buffer size required is 288 bytes.</span></span> <span data-ttu-id="12190-204">大きなバッファー サイズが指定されている場合、 <xref:System.Net.Sockets.Socket> Winsock AcceptEx 呼び出しで受け取ったアドレス データ以外のいくつかの余分なデータを必要として、この余分なデータが受信されるまで待機します。</span><span class="sxs-lookup"><span data-stu-id="12190-204">If a larger buffer size is specified, then the <xref:System.Net.Sockets.Socket> will expect some extra data other than the address data received by the Winsock AcceptEx call and will wait until this extra data is received.</span></span> <span data-ttu-id="12190-205">タイムアウトが発生した場合、接続がリセットされます。</span><span class="sxs-lookup"><span data-stu-id="12190-205">If a timeout occurs, the connection is reset.</span></span> <span data-ttu-id="12190-206">それで余分なデータが特定の容量の予測される場合、最小バッファー サイズとこの金額に、バッファーのサイズを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-206">So if extra data is expected of  a specific amount, then the buffer size should be set to the minimum buffer size plus this amount.</span></span>  
  
 <span data-ttu-id="12190-207">完了コールバック メソッドを調べる必要があります、<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>プロパティかどうかを<xref:System.Net.Sockets.Socket.AcceptAsync%2A>操作は成功しました。</span><span class="sxs-lookup"><span data-stu-id="12190-207">The completion callback method should examine the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> property to determine if the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> operation was successful.</span></span>  
  
 <span data-ttu-id="12190-208"><xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベントの接続が許可されていない場合に発生して発生することができます、<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>設定するプロパティを<xref:System.Net.Sockets.SocketError.ConnectionReset>です。</span><span class="sxs-lookup"><span data-stu-id="12190-208">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event can occur in some cases when no connection has been accepted and cause the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> property to be set to <xref:System.Net.Sockets.SocketError.ConnectionReset>.</span></span> <span data-ttu-id="12190-209">これは、ポートを半開 SYN 型スキャンを使用してスキャンの結果として発生することができます (SYN SYN ACK]-> [RST シーケンス ->)。</span><span class="sxs-lookup"><span data-stu-id="12190-209">This can occur as a result of port scanning using a half-open SYN type scan (a SYN -> SYN-ACK -> RST sequence).</span></span> <span data-ttu-id="12190-210">アプリケーションを使用して、<xref:System.Net.Sockets.Socket.AcceptAsync%2A>この条件を処理するメソッドを準備する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-210">Applications using the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method should be prepared to handle this condition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-211">引数が有効ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-211">An argument is not valid.</span>
          </span>
          <span data-ttu-id="12190-212">この例外は、提供されたバッファーのサイズが不足している場合に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-212">This exception occurs if the buffer provided is not large enough.</span>
          </span>
          <span data-ttu-id="12190-213">バッファーは、2 \* (sizeof(SOCKADDR_STORAGE + 16) バイト以上であることが必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-213">The buffer must be at least 2 \* (sizeof(SOCKADDR_STORAGE + 16) bytes.</span>
          </span>
          <span data-ttu-id="12190-214">この例外は、複数のバッファーが指定されているときに、<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティが null 値ではない場合にも発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-214">This exception also occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-215">引数が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-215">An argument is out of range.</span>
          </span>
          <span data-ttu-id="12190-216">この例外は、<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> が 0 未満の場合に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-216">The exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-217">無効な操作が要求されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-217">An invalid operation was requested.</span>
          </span>
          <span data-ttu-id="12190-218">この例外は、受け入れ側の <see cref="T:System.Net.Sockets.Socket" /> が接続をリッスンしていない場合、または受け入れられたソケットがバインドされている場合に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-218">This exception occurs if the accepting <see cref="T:System.Net.Sockets.Socket" /> is not listening for connections or the accepted socket is bound.</span>
          </span>
          <span data-ttu-id="12190-219">
            <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> メソッドを呼び出す前に、<see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> メソッドと <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> メソッドを呼び出す必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-219">You must call the <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> method before calling the <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> method.</span>
          </span>
          <span data-ttu-id="12190-220">この例外は、ソケットが既に接続されている、またはソケット操作が指定された <paramref name="e" /> パラメーターを使用して既に進行中の場合にも発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-220">This exception also occurs if the socket is already connected or a socket operation was already in progress using the specified <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-221">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-221">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-222">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-222">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-223">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-223">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="AddressFamily">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.AddressFamily AddressFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.AddressFamily AddressFamily" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.AddressFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressFamily As AddressFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::AddressFamily AddressFamily { System::Net::Sockets::AddressFamily get(); };" />
      <MemberSignature Language="F#" Value="member this.AddressFamily : System.Net.Sockets.AddressFamily" Usage="System.Net.Sockets.Socket.AddressFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.AddressFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-224">
            <see cref="T:System.Net.Sockets.Socket" /> のアドレス ファミリを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-224">Gets the address family of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-225">
            <see cref="T:System.Net.Sockets.AddressFamily" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-225">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-226"><xref:System.Net.Sockets.AddressFamily>をアドレス指定スキームを指定のインスタンス、<xref:System.Net.Sockets.Socket>クラスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-226">The <xref:System.Net.Sockets.AddressFamily> specifies the addressing scheme that an instance of the <xref:System.Net.Sockets.Socket> class can use.</span></span> <span data-ttu-id="12190-227">このプロパティは読み取り専用と設定されているときに、<xref:System.Net.Sockets.Socket>を作成します。</span><span class="sxs-lookup"><span data-stu-id="12190-227">This property is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-228">次のコード例では表示、 <xref:System.Net.Sockets.AddressFamily>、 <xref:System.Net.Sockets.SocketType>、および<xref:System.Net.Sockets.ProtocolType>コンソールにします。</span><span class="sxs-lookup"><span data-stu-id="12190-228">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.AddressFamily" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.Socket.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-229">ネットワークから受信した、読み取り可能なデータ量を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-229">Gets the amount of data that has been received from the network and is available to be read.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-230">ネットワークから受信した、読み取り可能なデータのバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-230">The number of bytes of data received from the network and available to be read.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-231">非ブロッキングを使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Available%2A>を呼び出す前に、読み取り用のデータがキューに置かれたかどうかを決定することをお勧めは<xref:System.Net.Sockets.Socket.Receive%2A>します。</span><span class="sxs-lookup"><span data-stu-id="12190-231">If you are using a non-blocking <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Available%2A> is a good way to determine whether data is queued for reading, before calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-232">使用可能なデータは、読み取り用のネットワーク バッファーにキューに置かれたデータの合計サイズです。</span><span class="sxs-lookup"><span data-stu-id="12190-232">The available data is the total amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="12190-233">ネットワーク バッファーにデータがキューにない場合<xref:System.Net.Sockets.Socket.Available%2A>0 を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-233">If no data is queued in the network buffer, <xref:System.Net.Sockets.Socket.Available%2A> returns 0.</span></span>  
  
 <span data-ttu-id="12190-234">リモート ホストがシャット ダウン、または、接続を閉じる場合<xref:System.Net.Sockets.Socket.Available%2A>スローすることができます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-234">If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.Socket.Available%2A> can throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-235">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-235">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-236">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-236">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-237">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-237">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-238">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-238">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-239">次のコード例では、呼び出し元の IOControl FIONREAD と使用可能なプロパティを使用した結果を比較します。</span><span class="sxs-lookup"><span data-stu-id="12190-239">The following code example compares the results of calling IOControl with FIONREAD and the Available property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl/CPP/iocontrolserver.cpp#1)]
 [!code-csharp[NCLSocketIoControl#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl/CS/iocontrolserver.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-240">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-240">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-241">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-241">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="F:System.Net.Sockets.SocketType.Dgram" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAccept">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-242">受信接続の試行を受け入れる非同期操作を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-242">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="12190-243">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-243">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-244">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-244">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-245">受信接続の試行を受け入れる非同期操作を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-245">Begins an asynchronous operation to accept an incoming connection attempt.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-246">非同期の <see cref="T:System.Net.Sockets.Socket" /> 作成を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-246">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-247">接続指向プロトコルを使用できる、<xref:System.Net.Sockets.Socket.BeginAccept%2A>着信接続を非同期的に処理するメソッドと試みます。</span><span class="sxs-lookup"><span data-stu-id="12190-247">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="12190-248">非同期的に接続を受け入れると、個別の実行スレッド内でデータを送受信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-248">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="12190-249">呼び出しの前に、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出す必要があります、<xref:System.Net.Sockets.Socket.Listen%2A>をリッスンし、接続要求をキューにメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-249">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="12190-250">実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-250">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-251">そのためには、少なくとも、リッスンを渡す必要があります<xref:System.Net.Sockets.Socket>オブジェクトを<xref:System.Net.Sockets.Socket.BeginAccept%2A>を通じて、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-251">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="12190-252">コールバックは、詳細を必要とする場合は、保持するために小さなクラスを作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-252">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-253">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-253">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-254">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-254">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="12190-255">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginAccept%2A>、通常、システムは別のスレッドを使用して、指定されたコールバック メソッドを実行してでブロック<xref:System.Net.Sockets.Socket.EndAccept%2A>保留中の接続が取得されるまでです。</span><span class="sxs-lookup"><span data-stu-id="12190-255">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span> <span data-ttu-id="12190-256"><xref:System.Net.Sockets.Socket.EndAccept%2A> 新しい戻ります<xref:System.Net.Sockets.Socket>オブジェクトをリモート ホストとのデータの送受信に使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-256"><xref:System.Net.Sockets.Socket.EndAccept%2A> will return a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="12190-257">返されるこれを使用することはできません<xref:System.Net.Sockets.Socket>接続キューからその他の接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-257">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="12190-258">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを使用して<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-258">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-259">Set メソッドを呼び出す、<xref:System.Threading.ManualResetEvent>元のスレッドに実行を継続する場合は、コールバック メソッドにします。</span><span class="sxs-lookup"><span data-stu-id="12190-259">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="12190-260">システムは、呼び出し元のスレッドを使用して、コールバック メソッドを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-260">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="12190-261">ここで、<xref:System.IAsyncResult.CompletedSynchronously%2A>プロパティで返された<xref:System.IAsyncResult>ことを示すために設定されます、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドは同期的に完了しました。</span><span class="sxs-lookup"><span data-stu-id="12190-261">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="12190-262">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-262">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-263">保留中の呼び出しをキャンセルする、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッド、閉じる、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-263">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-264">ときに、<xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出すための非同期操作が進行中に渡されたコールバック、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-264">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="12190-265">後続の呼び出し、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドがスローされます、<xref:System.ObjectDisposedException>操作が取り消されましたことを示すためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-265">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-266">使用することができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 、返されたプロパティ<xref:System.Net.Sockets.Socket>をリモート ホストのネットワーク アドレスとポート番号を識別します。</span><span class="sxs-lookup"><span data-stu-id="12190-266">You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-267">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-267">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-268">このコードを取得した後 Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-268">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-269">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-269">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-270">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-270">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-271">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-271">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-272">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-272">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-273">次のコード例は、非同期的に受信接続を受信しようとします。</span><span class="sxs-lookup"><span data-stu-id="12190-273">The following code example attempts to receive an incoming connection asynchronously.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Async_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Async_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-274">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-274">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-275">このメソッドには Windows NT が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-275">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-276">受け入れ元のソケットが、接続をリッスンしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-276">The accepting socket is not listening for connections.</span>
          </span>
          <span data-ttu-id="12190-277">
            <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> の前に <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> および <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出す必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-277">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
          <span data-ttu-id="12190-278">または、受け入れられたソケットがバインドされています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-278">-or-  The accepted socket is bound.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-279">
            <paramref name="receiveSize" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-279">
              <paramref name="receiveSize" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-280">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-280">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (int receiveSize, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(int32 receiveSize, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (receiveSize As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(int receiveSize, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (receiveSize, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiveSize" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="receiveSize">
          <span data-ttu-id="12190-281">送信元から受け入れるバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-281">The number of bytes to accept from the sender.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-282">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-282">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-283">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-283">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-284">受信接続の試行を受け入れる非同期操作を開始し、クライアント アプリケーションによって送信されるデータの最初のブロックを受信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-284">Begins an asynchronous operation to accept an incoming connection attempt and receives the first block of data sent by the client application.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-285">非同期の <see cref="T:System.Net.Sockets.Socket" /> 作成を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-285">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-286">接続指向プロトコルを使用できる、<xref:System.Net.Sockets.Socket.BeginAccept%2A>着信接続を非同期的に処理するメソッドと試みます。</span><span class="sxs-lookup"><span data-stu-id="12190-286">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="12190-287">非同期接続の受け入れを使用すると、個別の実行スレッド内でデータを送受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-287">Accepting connections asynchronously enables you to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="12190-288">このオーバー ロードでは、初期の転送に同意するバイト数を指定することができます、`receiveSize`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-288">This overload allows you to specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.</span></span>  
  
 <span data-ttu-id="12190-289">呼び出しの前に、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出す必要があります、<xref:System.Net.Sockets.Socket.Listen%2A>をリッスンし、接続要求をキューにメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-289">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="12190-290">実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-290">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-291">そのためには、少なくとも、リッスンを渡す必要があります<xref:System.Net.Sockets.Socket>オブジェクトを<xref:System.Net.Sockets.Socket.BeginAccept%2A>を通じて、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-291">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="12190-292">コールバックは、詳細を必要とする場合は、保持するために小さなクラスを作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-292">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-293">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-293">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-294">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-294">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="12190-295">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginAccept%2A>、通常、システムは別のスレッドを使用して、指定されたコールバック メソッドを実行してでブロック<xref:System.Net.Sockets.Socket.EndAccept%2A>保留中の接続が取得されるまでです。</span><span class="sxs-lookup"><span data-stu-id="12190-295">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span>  
  
 <span data-ttu-id="12190-296"><xref:System.Net.Sockets.Socket.EndAccept%2A> 新しいを返します<xref:System.Net.Sockets.Socket>リモート ホストとのデータの送受信を行えます。</span><span class="sxs-lookup"><span data-stu-id="12190-296"><xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="12190-297">返されるこれを使用することはできません<xref:System.Net.Sockets.Socket>接続キューからその他の接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-297">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="12190-298">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを使用して<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-298">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-299">Set メソッドを呼び出す、<xref:System.Threading.ManualResetEvent>元のスレッドに実行を継続する場合は、コールバック メソッドにします。</span><span class="sxs-lookup"><span data-stu-id="12190-299">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="12190-300">システムは、呼び出し元のスレッドを使用して、コールバック メソッドを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-300">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="12190-301">ここで、<xref:System.IAsyncResult.CompletedSynchronously%2A>プロパティで返された<xref:System.IAsyncResult>ことを示すために設定されます、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドは同期的に完了しました。</span><span class="sxs-lookup"><span data-stu-id="12190-301">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="12190-302">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-302">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-303">保留中の呼び出しをキャンセルする、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッド、閉じる、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-303">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span>  <span data-ttu-id="12190-304">ときに、<xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出すための非同期操作が進行中に渡されたコールバック、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-304">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="12190-305">後続の呼び出し、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドがスローされます、<xref:System.ObjectDisposedException>操作が取り消されましたことを示すためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-305">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-306">使用してを呼び出すことができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 、返されたプロパティ<xref:System.Net.Sockets.Socket>をリモート ホストのネットワーク アドレスとポート番号を識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="12190-306">You can call use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-307">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-307">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-308">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-308">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-309">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-309">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-310">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-310">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-311">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-311">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-312">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-312">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-313">次のコード例は、ソケットを開き、非同期接続を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="12190-313">The following code example opens a socket and accepts an asynchronous connection.</span></span> <span data-ttu-id="12190-314">この例では、ソケットは、最初の 10 バイトのデータを受け取っています。</span><span class="sxs-lookup"><span data-stu-id="12190-314">In this example, the socket accepts the initial 10 bytes of data.</span></span> <span data-ttu-id="12190-315">受信したバイト数と、データは、コールバック デリゲートをコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="12190-315">The number of bytes received and the data are displayed on the console by the callback delegate.</span></span> <span data-ttu-id="12190-316">参照してください<xref:System.Net.Sockets.Socket.BeginReceive%2A>残りのデータを受信する方法の詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="12190-316">See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-317">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-317">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-318">このメソッドには Windows NT が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-318">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-319">受け入れ元のソケットが、接続をリッスンしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-319">The accepting socket is not listening for connections.</span>
          </span>
          <span data-ttu-id="12190-320">
            <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> の前に <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> および <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出す必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-320">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
          <span data-ttu-id="12190-321">または、受け入れられたソケットがバインドされています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-321">-or-  The accepted socket is bound.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-322">
            <paramref name="receiveSize" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-322">
              <paramref name="receiveSize" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-323">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-323">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (System.Net.Sockets.Socket acceptSocket, int receiveSize, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(class System.Net.Sockets.Socket acceptSocket, int32 receiveSize, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (acceptSocket As Socket, receiveSize As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(System::Net::Sockets::Socket ^ acceptSocket, int receiveSize, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAccept : System.Net.Sockets.Socket * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginAccept (acceptSocket, receiveSize, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptSocket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="receiveSize" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="acceptSocket">
          <span data-ttu-id="12190-324">受け入れた <see cref="T:System.Net.Sockets.Socket" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-324">The accepted <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
          <span data-ttu-id="12190-325">この値は <see langword="null" /> の場合もあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-325">This value may be <see langword="null" />.</span>
          </span>
        </param>
        <param name="receiveSize">
          <span data-ttu-id="12190-326">受信する最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-326">The maximum number of bytes to receive.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-327">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-327">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-328">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-328">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-329">指定したソケットから受信接続の試行を受け入れる非同期操作を開始し、クライアント アプリケーションによって送信されるデータの最初のブロックを受信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-329">Begins an asynchronous operation to accept an incoming connection attempt from a specified socket and receives the first block of data sent by the client application.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-330">非同期の <see cref="T:System.Net.Sockets.Socket" /> オブジェクトの作成を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-330">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> object creation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-331">接続指向プロトコルを使用できる、<xref:System.Net.Sockets.Socket.BeginAccept%2A>着信接続を非同期的に処理するメソッドと試みます。</span><span class="sxs-lookup"><span data-stu-id="12190-331">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="12190-332">非同期的に接続を受け入れると、個別の実行スレッド内でデータを送受信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-332">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="12190-333">このオーバー ロードで受け入れられたソケットを指定することができます、`acceptSocket`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-333">This overload allows you to specify the accepted socket in the `acceptSocket` parameter.</span></span> <span data-ttu-id="12190-334">このパラメーターは場合`null`、受け入れられたソケットがによって作成された、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-334">If this parameter is `null`, the accepted socket is created by the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-335">初期転送に同意するバイト数を指定することができます、`receiveSize`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-335">You can specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.</span></span>  
  
 <span data-ttu-id="12190-336">呼び出しの前に、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを呼び出す必要があります、<xref:System.Net.Sockets.Socket.Listen%2A>をリッスンし、接続要求をキューにメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-336">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="12190-337">実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-337">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-338">そのためには、少なくとも、リッスンを渡す必要があります<xref:System.Net.Sockets.Socket>オブジェクトを<xref:System.Net.Sockets.Socket.BeginAccept%2A>を通じて、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-338">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="12190-339">コールバックは、詳細を必要とする場合は、保持するために小さなクラスを作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-339">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-340">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-340">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-341">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-341">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="12190-342">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginAccept%2A>、通常、システムは別のスレッドを使用して、指定されたコールバック メソッドを実行してでブロック<xref:System.Net.Sockets.Socket.EndAccept%2A>保留中の接続が取得されるまでです。</span><span class="sxs-lookup"><span data-stu-id="12190-342">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span>  
  
 <span data-ttu-id="12190-343"><xref:System.Net.Sockets.Socket.EndAccept%2A> 新しいを返します<xref:System.Net.Sockets.Socket>オブジェクトをリモート ホストとのデータの送受信に使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-343"><xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="12190-344">返されるこれを使用することはできません<xref:System.Net.Sockets.Socket>接続キューからその他の接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-344">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="12190-345">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを使用して<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-345">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-346">Set メソッドを呼び出す、<xref:System.Threading.ManualResetEvent>元のスレッドに実行を継続する場合は、コールバック メソッドにします。</span><span class="sxs-lookup"><span data-stu-id="12190-346">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="12190-347">システムは、呼び出し元のスレッドを使用して、コールバック メソッドを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-347">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="12190-348">ここで、<xref:System.IAsyncResult.CompletedSynchronously%2A>プロパティで返された<xref:System.IAsyncResult>ことを示すために設定されます、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドは同期的に完了しました。</span><span class="sxs-lookup"><span data-stu-id="12190-348">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="12190-349">コールバック メソッドの作成方法の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-349">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-350">保留中の呼び出しをキャンセルする、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッド、閉じる、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-350">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-351">ときに、<xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出すための非同期操作が進行中に渡されたコールバック、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-351">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="12190-352">後続の呼び出し、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドがスローされます、<xref:System.ObjectDisposedException>操作が取り消されましたことを示すためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-352">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-353">使用することができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 、返されたプロパティ<xref:System.Net.Sockets.Socket>をリモート ホストのネットワーク アドレスとポート番号を識別するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="12190-353">You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-354">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-354">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-355">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-355">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-356">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-356">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-357">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-357">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-358">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-358">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-359">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-359">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-360">次のコード例は、ソケットを開き、非同期接続を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="12190-360">The following code example opens a socket and accepts an asynchronous connection.</span></span> <span data-ttu-id="12190-361">この例では、ソケットは最初の 10 バイトのデータを受け入れます。 と`acceptSocket`パラメーターは`null`、強制的に実行する、<xref:System.Net.Sockets.Socket.BeginAccept%2A>受け入れられたソケットを作成する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-361">In this example, the socket accepts the initial 10 bytes of data and the `acceptSocket` parameter is `null`, which forces the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to create the accepted socket.</span></span> <span data-ttu-id="12190-362">受信したバイト数と、データは、コールバック デリゲートをコンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="12190-362">The number of bytes received and the data are displayed on the console by the callback delegate.</span></span> <span data-ttu-id="12190-363">参照してください<xref:System.Net.Sockets.Socket.BeginReceive%2A>残りのデータを受信する方法の詳細についてはします。</span><span class="sxs-lookup"><span data-stu-id="12190-363">See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#7)]
 [!code-csharp[NCLSocketEnhancements#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-364">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-364">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-365">このメソッドには Windows NT が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-365">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-366">受け入れ元のソケットが、接続をリッスンしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-366">The accepting socket is not listening for connections.</span>
          </span>
          <span data-ttu-id="12190-367">
            <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> の前に <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> および <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出す必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-367">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
          <span data-ttu-id="12190-368">または、受け入れられたソケットがバインドされています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-368">-or-  The accepted socket is bound.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-369">
            <paramref name="receiveSize" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-369">
              <paramref name="receiveSize" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-370">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-370">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-371">リモート ホスト接続への非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-371">Begins an asynchronous request for a remote host connection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.EndPoint remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (remoteEP As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::EndPoint ^ remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.EndPoint end_point, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.EndPoint end_point, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (end_point As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::EndPoint ^ end_point, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.EndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (end_point, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="end_point" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="1" />
        <Parameter Name="state" Type="System.Object" Index="2" />
      </Parameters>
      <Docs>
        <param name="remoteEP">To be added.</param>
        <param name="end_point">To be added.</param>
        <param name="callback">
          <span data-ttu-id="12190-372">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-372">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-373">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-373">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-374">リモート ホスト接続への非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-374">Begins an asynchronous request for a remote host connection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-375">非同期接続を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-375">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-376">接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドへの接続への非同期要求の開始、`remoteEP`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-376">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method starts an asynchronous request for a connection to the `remoteEP` parameter.</span></span> <span data-ttu-id="12190-377">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.BeginConnect%2A>既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="12190-377">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.BeginConnect%2A> establishes a default remote host.</span></span> <span data-ttu-id="12190-378">接続するか、既定のリモート ホストの設定を非同期的に個別の実行スレッド内でデータを送受信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-378">Connecting or setting the default remote host asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-379">実装するコールバック メソッドを作成することができます、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-379">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.</span></span> <span data-ttu-id="12190-380">少なくとも、渡す必要があります、<xref:System.Net.Sockets.Socket>に<xref:System.Net.Sockets.Socket.BeginConnect%2A>を通じて、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-380">At the very minimum, you must pass the <xref:System.Net.Sockets.Socket> to <xref:System.Net.Sockets.Socket.BeginConnect%2A> through the `state` parameter.</span></span> <span data-ttu-id="12190-381">コールバックは、詳細を必要とする場合は、保持するために小さなクラスを作成することができます、 <xref:System.Net.Sockets.Socket>、およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-381">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information.</span></span> <span data-ttu-id="12190-382">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-382">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-383">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-383">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="12190-384">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginConnect%2A>、システムは、指定されたコールバック メソッドを実行する別のスレッドを使用しでブロックされます<xref:System.Net.Sockets.Socket.EndConnect%2A>まで、<xref:System.Net.Sockets.Socket>が正常に接続するか、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-384">When your application calls <xref:System.Net.Sockets.Socket.BeginConnect%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndConnect%2A> until the <xref:System.Net.Sockets.Socket> connects successfully or throws an exception.</span></span> <span data-ttu-id="12190-385">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを使用して<xref:System.Threading.WaitHandle.WaitOne%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-385">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="12190-386">Set メソッドを呼び出す、<xref:System.Threading.ManualResetEvent>元のスレッドに実行を継続する場合は、コールバック メソッドにします。</span><span class="sxs-lookup"><span data-stu-id="12190-386">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="12190-387">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-387">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-388">UDP などのコネクションレスのプロトコルを使用している場合を呼び出す必要はありません<xref:System.Net.Sockets.Socket.BeginConnect%2A>データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-388">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.BeginConnect%2A> before sending and receiving data.</span></span> <span data-ttu-id="12190-389">使用することができます<xref:System.Net.Sockets.Socket.BeginSendTo%2A>と<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>のリモート ホストと通信します。</span><span class="sxs-lookup"><span data-stu-id="12190-389">You can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> to communicate with a remote host.</span></span> <span data-ttu-id="12190-390">呼び出す場合<xref:System.Net.Sockets.Socket.BeginConnect%2A>、指定した既定以外のアドレスから受信する任意のデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="12190-390">If you do call <xref:System.Net.Sockets.Socket.BeginConnect%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="12190-391">既定のリモート ホストが、ブロードキャスト アドレスを設定する場合は、最初に呼び出す必要があります<xref:System.Net.Sockets.Socket.SetSocketOption%2A>にブロードキャストを設定および`true`です。</span><span class="sxs-lookup"><span data-stu-id="12190-391">If you wish to set your default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="12190-392">できない場合は、<xref:System.Net.Sockets.Socket.BeginConnect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-392">If you cannot, <xref:System.Net.Sockets.Socket.BeginConnect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-393">接続指向のプロトコルを使用しているし、呼び出さないかどうか<xref:System.Net.Sockets.Socket.Bind%2A>呼び出す前に<xref:System.Net.Sockets.Socket.BeginConnect%2A>、基になるサービス プロバイダーが最も適切なローカル ネットワーク アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-393">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="12190-394">コネクションレスのプロトコルを使用している場合、サービス プロバイダーを割り当てませんローカル ネットワーク アドレスとポート番号を呼び出すまで、<xref:System.Net.Sockets.Socket.BeginSend%2A>または<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-394">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-395">既定のリモート ホストを変更する場合は、呼び出し、<xref:System.Net.Sockets.Socket.BeginConnect%2A>目的のエンドポイントを使用してメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-395">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="12190-396">保留中の呼び出しをキャンセルする、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッド、閉じる、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-396">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-397">ときに、<xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出すための非同期操作が進行中に渡されたコールバック、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-397">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="12190-398">後続の呼び出し、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドがスローされます、<xref:System.ObjectDisposedException>操作が取り消されましたことを示すためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-398">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-399">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-399">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-400">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-400">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-401">このソケットが解除されていたし場合<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作が完了するまで終了しないスレッドで呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-401">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="12190-402">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="12190-402">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-403">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-403">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-404">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-404">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-405">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-405">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-406">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-406">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-407">次のコード例では、非同期接続の試行を開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-407">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Async_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Async_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-408">
            <paramref name="remoteEP" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-408">
              <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-409">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-409">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-410">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-410">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-411">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-411">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-412">
            <see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっているか、非同期操作は既に実行されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-412">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span>
          </span>
        </exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (address, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="12190-413">リモート ホストの <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-413">The <see cref="T:System.Net.IPAddress" /> of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="12190-414">リモート ホストのポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-414">The port number of the remote host.</span>
          </span>
        </param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">
          <span data-ttu-id="12190-415">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-415">A user-defined object that contains information about the connect operation.</span>
          </span>
          <span data-ttu-id="12190-416">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-416">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-417">リモート ホスト接続への非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-417">Begins an asynchronous request for a remote host connection.</span>
          </span>
          <span data-ttu-id="12190-418">ホストは <see cref="T:System.Net.IPAddress" /> とポート番号で指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-418">The host is specified by an <see cref="T:System.Net.IPAddress" /> and a port number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-419">非同期接続を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-419">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-420">非同期の<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-420">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="12190-421">通常、このメソッドはによって、`requestCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-421">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="12190-422">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-422">This method does not block until the operation is complete.</span></span> <span data-ttu-id="12190-423">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドのオーバー ロードまたは<xref:System.Net.Sockets.Socket.EndConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-423">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads, or <xref:System.Net.Sockets.Socket.EndConnect%2A>.</span></span>  
  
 <span data-ttu-id="12190-424">保留中の呼び出しをキャンセルする、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッド、閉じる、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-424">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-425">ときに、<xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出すための非同期操作が進行中に渡されたコールバック、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-425">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="12190-426">後続の呼び出し、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドがスローされます、<xref:System.ObjectDisposedException>操作が取り消されましたことを示すためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-426">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="12190-427">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="12190-427">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-428">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-428">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-429">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-429">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-430">このソケットが解除されていたし場合<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作が完了するまで終了しないスレッドで呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-430">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="12190-431">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="12190-431">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="12190-432">また、<xref:System.Net.EndPoint>は別にする必要がありますを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-432">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-433">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-433">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-434">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-434">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-435">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-435">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-436">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-436">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-437">次のコード例では、非同期接続の試行を開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-437">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#7)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-438">
            <paramref name="address" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-438">
              <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-439">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-439">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-440">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-440">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-441">
            <see cref="T:System.Net.Sockets.Socket" /> はソケット ファミリに含まれません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-441">The <see cref="T:System.Net.Sockets.Socket" /> is not in the socket family.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-442">ポート番号が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-442">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-443">
            <paramref name="address" /> の長さが 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-443">The length of <paramref name="address" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-444">
            <see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっているか、非同期操作は既に実行されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-444">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span>
          </span>
        </exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (addresses, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="addresses">
          <span data-ttu-id="12190-445">リモート ホストを指定する、少なくとも 1 つの <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-445">At least one <see cref="T:System.Net.IPAddress" />, designating the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="12190-446">リモート ホストのポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-446">The port number of the remote host.</span>
          </span>
        </param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">
          <span data-ttu-id="12190-447">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-447">A user-defined object that contains information about the connect operation.</span>
          </span>
          <span data-ttu-id="12190-448">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-448">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-449">リモート ホスト接続への非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-449">Begins an asynchronous request for a remote host connection.</span>
          </span>
          <span data-ttu-id="12190-450">ホストは、<see cref="T:System.Net.IPAddress" /> 配列とポート番号で指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-450">The host is specified by an <see cref="T:System.Net.IPAddress" /> array and a port number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-451">非同期接続を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-451">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connections.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-452">非同期の<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-452">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="12190-453">通常、このメソッドはによって、`requestCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-453">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="12190-454">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-454">This method does not block until the operation is complete.</span></span> <span data-ttu-id="12190-455">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="12190-455">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="12190-456">保留中の呼び出しをキャンセルする、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッド、閉じる、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-456">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-457">ときに、<xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出すための非同期操作が進行中に渡されたコールバック、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-457">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="12190-458">後続の呼び出し、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドがスローされます、<xref:System.ObjectDisposedException>操作が取り消されましたことを示すためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-458">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="12190-459">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-459">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-460">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-460">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-461">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-461">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-462">このソケットが解除されていたし場合<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作が完了するまで終了しないスレッドで呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-462">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="12190-463">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="12190-463">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="12190-464">また、<xref:System.Net.EndPoint>は別にする必要がありますを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-464">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-465">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-465">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-466">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-466">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-467">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-467">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-468">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-468">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-469">次のコード例では、非同期接続の試行を開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-469">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#2)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-470">
            <paramref name="addresses" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-470">
              <paramref name="addresses" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-471">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-471">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-472">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-472">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-473">このメソッドは <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> を使用するソケットで有効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-473">This method is valid for sockets that use <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-474">ポート番号が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-474">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-475">
            <paramref name="address" /> の長さが 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-475">The length of <paramref name="address" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-476">
            <see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっているか、非同期操作は既に実行されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-476">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span>
          </span>
        </exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginConnect (host, port, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="host">
          <span data-ttu-id="12190-477">リモート ホストの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-477">The name of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="12190-478">リモート ホストのポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-478">The port number of the remote host.</span>
          </span>
        </param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">
          <span data-ttu-id="12190-479">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-479">A user-defined object that contains information about the connect operation.</span>
          </span>
          <span data-ttu-id="12190-480">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-480">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-481">リモート ホスト接続への非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-481">Begins an asynchronous request for a remote host connection.</span>
          </span>
          <span data-ttu-id="12190-482">ホストはホスト名とポート番号で指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-482">The host is specified by a host name and a port number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-483">非同期接続を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-483">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-484">非同期の<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-484">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="12190-485">通常、このメソッドはによって、`requestCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-485">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="12190-486">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-486">This method does not block until the operation is complete.</span></span> <span data-ttu-id="12190-487">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="12190-487">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="12190-488">保留中の呼び出しをキャンセルする、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッド、閉じる、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-488">To cancel a pending call to the  <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-489">ときに、<xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出すための非同期操作が進行中に渡されたコールバック、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-489">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="12190-490">後続の呼び出し、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドがスローされます、<xref:System.ObjectDisposedException>操作が取り消されましたことを示すためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-490">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="12190-491">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="12190-491">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-492">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-492">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-493">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-493">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-494">このソケットが解除されていたし場合<xref:System.Net.Sockets.Socket.BeginConnect%2A>操作が完了するまで終了しないスレッドで呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-494">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="12190-495">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="12190-495">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="12190-496">また、<xref:System.Net.EndPoint>は別にする必要がありますを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-496">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-497">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-497">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-498">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-498">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-499">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-499">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-500">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-500">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-501">次のコード例では、非同期接続の試行を開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-501">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#3)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-502">
            <paramref name="host" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-502">
              <paramref name="host" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-503">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-503">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-504">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットで有効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-504">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-505">ポート番号が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-505">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-506">
            <see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっているか、非同期操作は既に実行されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-506">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span>
          </span>
        </exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginDisconnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginDisconnect (bool reuseSocket, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginDisconnect(bool reuseSocket, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginDisconnect (reuseSocket As Boolean, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginDisconnect(bool reuseSocket, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginDisconnect : bool * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginDisconnect (reuseSocket, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseSocket" Type="System.Boolean" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reuseSocket">
          <span data-ttu-id="12190-507">接続の終了後、このソケットが再利用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-507">
              <see langword="true" /> if this socket can be reused after the connection is closed; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-508">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-508">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-509">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-509">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-510">リモート エンドポイントからの切断の非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-510">Begins an asynchronous request to disconnect from a remote endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-511">非同期操作を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-511">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-512">接続指向のプロトコルを使用している場合は、呼び出す、<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>リモート エンドポイントからの切断要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-512">If you are using a connection-oriented protocol, you can call the <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> method to request a disconnect from a remote endpoint.</span></span> <span data-ttu-id="12190-513">場合`reuseSocket`は`true`ソケットを再利用することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-513">If `reuseSocket` is `true`, you can reuse the socket.</span></span>  
  
 <span data-ttu-id="12190-514"><xref:System.Net.Sockets.Socket.BeginDisconnect%2A>メソッドは、指定されたコールバック メソッドを呼び出す別のスレッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-514">The <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> method uses a separate thread to invoke the specified callback method.</span></span> <span data-ttu-id="12190-515"><xref:System.Net.Sockets.Socket.EndDisconnect%2A>メソッドは、保留中の切断までブロックが完了しました。</span><span class="sxs-lookup"><span data-stu-id="12190-515">The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the pending disconnect is complete.</span></span> <span data-ttu-id="12190-516">コールバック メソッドの作成方法の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-516">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-517">表示された場合、<xref:System.Net.Sockets.SocketException>例外を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-517">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-518">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-518">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-519">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-519">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-520">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-520">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-521">次のコード例では、非同期通信のソケットを作成し、リモート ホストにデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-521">The following code example creates a socket for asynchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="12190-522">データが送信されると、<xref:System.Net.Sockets.Socket.Shutdown%2A>送信を停止し、受信アクティビティのために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-522">When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity.</span></span> <span data-ttu-id="12190-523"><xref:System.Net.Sockets.Socket.BeginDisconnect%2A>切断要求を開始すると呼びます。</span><span class="sxs-lookup"><span data-stu-id="12190-523">Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request.</span></span> <span data-ttu-id="12190-524">要求が完了したら、<xref:System.Net.Sockets.Socket.Connected%2A>プロパティは、ソケットが切断されているかどうかをテストするクエリを実行します。</span><span class="sxs-lookup"><span data-stu-id="12190-524">When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#11)]
 [!code-csharp[Nclsocketenhancements#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-525">Windows 2000 以前のオペレーティング システムです。このメソッドを使用するには、Windows XP が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-525">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-526">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-526">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-527">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-527">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-528">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-528">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffers, socketFlags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-529">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-529">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-530">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-530">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-531">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-531">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-532">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-532">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="12190-533">このオブジェクトは、操作の完了時に <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-533">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-534">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-534">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-535">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-535">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-536">非同期の<xref:System.Net.Sockets.Socket.BeginReceive%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-536">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="12190-537">通常、このメソッドはによって、`callback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-537">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="12190-538">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-538">This method does not block until the operation is complete.</span></span> <span data-ttu-id="12190-539">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="12190-539">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="12190-540">[キャンセル] を保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>を呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-540">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="12190-541">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-541">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-542">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-542">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-543">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-543">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-544">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-544">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-545">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-545">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-546">`state` ユーザー定義のクラスのインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="12190-546">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-547">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-547">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-548">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-548">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-549">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-549">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-550">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-550">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-551">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-551">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-552">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-552">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-553">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-553">
              <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffers, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-554">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-554">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-555">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-555">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-556">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-556">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-557">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-557">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-558">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-558">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="12190-559">このオブジェクトは、操作の完了時に <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-559">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-560">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-560">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-561">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-561">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-562">非同期の<xref:System.Net.Sockets.Socket.BeginReceive%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-562">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="12190-563">通常、このメソッドはによって、`callback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-563">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="12190-564">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-564">This method does not block until the operation is complete.</span></span> <span data-ttu-id="12190-565">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="12190-565">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="12190-566">[キャンセル] を保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>を呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-566">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="12190-567">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-567">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-568">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-568">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-569">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-569">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-570">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-570">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-571">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-571">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-572">`state` ユーザー定義のクラスのインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="12190-572">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-573">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-573">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-574">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-574">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-575">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-575">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-576">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-576">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-577">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-577">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-578">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-578">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-579">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-579">
              <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : byte[] * int * int * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffer, offset, size, socket_flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" />
        <Parameter Name="state" Type="System.Object" Index="5" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-580">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-580">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-581">受信データを格納する、<c>buffer</c> パラメーター内の、インデックス番号が 0 から始まる位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-581">The zero-based position in the <c>buffer</c> parameter at which to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-582">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-582">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="callback">
          <span data-ttu-id="12190-583">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-583">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-584">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-584">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="12190-585">このオブジェクトは、操作の完了時に <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-585">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-586">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-586">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-587">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-587">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-588">非同期の<xref:System.Net.Sockets.Socket.BeginReceive%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-588">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="12190-589">通常、このメソッドはによって、`callback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-589">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="12190-590">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-590">This method does not block until the operation is complete.</span></span> <span data-ttu-id="12190-591">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="12190-591">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="12190-592">[キャンセル] を保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>を呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-592">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="12190-593">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-593">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-594">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-594">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-595">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-595">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-596">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-596">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-597">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-597">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-598">`state` ユーザー定義のクラスのインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="12190-598">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-599">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-599">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-600">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-600">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-601">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-601">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-602">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-602">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-603">次のコード例は、接続からデータを非同期的に受信を開始<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-603">The following code example begins to asynchronously receive data from a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#11)]
 [!code-csharp[Socket_Async_Send_Receive#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#11)]
 [!code-vb[Socket_Async_Send_Receive#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#11)]  
  
 [!code-cpp[Socket_Async_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Async_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Async_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#7)]  
  
 [!code-cpp[Socket_Async_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Async_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Async_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-604">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-604">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-605">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-605">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-606">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-606">
              <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-607">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-607">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-608">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-608">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-609">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-609">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-610">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-610">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags flags, out System.Net.Sockets.SocketError error, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags flags, [out] valuetype System.Net.Sockets.SocketError&amp; error, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (buffer As Byte(), offset As Integer, size As Integer, flags As SocketFlags, ByRef error As SocketError, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags flags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % error, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceive (buffer, offset, size, flags, error, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="error" Type="System.Net.Sockets.SocketError&amp;" RefType="out" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-611">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-611">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-612">受信データを格納する <c>buffer</c> 内の場所。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-612">The location in <c>buffer</c> to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-613">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-613">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="flags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <param name="error">To be added.</param>
        <param name="callback">
          <span data-ttu-id="12190-614">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-614">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-615">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-615">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="12190-616">このオブジェクトは、操作の完了時に <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-616">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-617">接続されている <see cref="T:System.Net.Sockets.Socket" /> からの非同期のデータ受信を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-617">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-618">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-618">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-619">非同期の<xref:System.Net.Sockets.Socket.BeginReceive%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-619">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="12190-620">通常、このメソッドはによって、`callback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-620">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="12190-621">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-621">This method does not block until the operation is complete.</span></span> <span data-ttu-id="12190-622">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="12190-622">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="12190-623">[キャンセル] を保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>を呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-623">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="12190-624">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-624">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-625">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-625">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-626">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-626">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-627">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-627">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-628">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-628">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-629">`state` ユーザー定義のクラスのインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="12190-629">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-630">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-630">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-631">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-631">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-632">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-632">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-633">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-633">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-634">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-634">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-635">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-635">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-636">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-636">
              <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-637">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-637">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-638">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-638">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-639">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-639">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-640">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-640">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFrom">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, ref System.Net.EndPoint remote_end, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.Net.EndPoint&amp; remote_end, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFrom (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, ByRef remote_end As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, System::Net::EndPoint ^ % remote_end, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceiveFrom (buffer, offset, size, socket_flags, remote_end, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="remote_end" Type="System.Net.EndPoint&amp;" RefType="ref" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-641">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-641">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-642">データを格納する、<c>buffer</c> パラメーター内の、インデックス番号が 0 から始まる位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-642">The zero-based position in the <c>buffer</c> parameter at which to store the data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-643">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-643">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="remoteEP">To be added.</param>
        <param name="remote_end">To be added.</param>
        <param name="callback">
          <span data-ttu-id="12190-644">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-644">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-645">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-645">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-646">指定したネットワーク デバイスから、データの非同期の受信を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-646">Begins to asynchronously receive data from a specified network device.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-647">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-647">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-648"><xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドが、リモート ホストからコネクションレス データグラムを非同期的に読み取りを開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-648">The <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method starts asynchronously reading connectionless datagrams from a remote host.</span></span> <span data-ttu-id="12190-649">呼び出す、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドは、個別の実行スレッド内でデータを受信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-649">Calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method gives you the ability to receive data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-650">実装するコールバック メソッドを作成することができます、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-650">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-651">これを行う、非常に最小値で、`state`パラメーターが、接続されているを含む必要がありますまたは既定の<xref:System.Net.Sockets.Socket>の通信に使用されています。</span><span class="sxs-lookup"><span data-stu-id="12190-651">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="12190-652">コールバックは、詳細を必要とする場合は、保持するために小さなクラスを作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-652">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-653">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-653">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-654">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-654">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-655">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>、システムが、指定されたコールバック メソッドを実行する別のスレッドを使用、およびを<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>まで、<xref:System.Net.Sockets.Socket>データを読み取るか例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-655">When your application calls <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, the system will use a separate thread to execute the specified callback method, and it will block on <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> until the <xref:System.Net.Sockets.Socket> reads data or throws an exception.</span></span> <span data-ttu-id="12190-656">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドを使用して<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-656">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-657">元のスレッドに実行を継続する場合は、コールバック メソッドにはセット メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="12190-657">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="12190-658">コールバック メソッドの作成方法の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-658">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-659">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>、明示的にバインドする必要があります、<xref:System.Net.Sockets.Socket>を使用して、ローカル エンドポイントを<xref:System.Net.Sockets.Socket.Bind%2A>メソッド、または<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-659">Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method, or <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-660">このメソッドにデータを読み込みます、`buffer`パラメーター、およびデータの送信元となるエンドポイントをホストするリモート キャプチャします。</span><span class="sxs-lookup"><span data-stu-id="12190-660">This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent.</span></span> <span data-ttu-id="12190-661">このエンドポイントを取得する方法についてを参照してください<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-661">For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>.</span></span> <span data-ttu-id="12190-662">このメソッドは非同期的に不明なホストまたは複数のホストからコネクションレス データグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="12190-662">This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.</span></span> <span data-ttu-id="12190-663">このような場合は、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>はローカル ネットワーク バッファーに書き込まれる最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="12190-663">In these cases, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="12190-664">受信したデータグラムがのサイズよりも大きいかどうか`buffer`、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドは入力`buffer`メッセージは、可能であれば、throw の多くで、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-664">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-665">信頼性の低いプロトコルを使用している場合、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="12190-665">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="12190-666">信頼性の高いプロトコルを使用している場合、超過データは、サービス プロバイダーによって保持するを呼び出して取得することができます、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>のに十分な大きさのバッファーを持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-666">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="12190-667">リモート ホストのエンドポイントが常に返される、アプリケーションでは明示的にバインドする必要がありますのことを保証するために、<xref:System.Net.Sockets.Socket>を使用して、ローカル エンドポイントを<xref:System.Net.Sockets.Socket.Bind%2A>メソッドと、呼び出し、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドを`optionLevel`にパラメーターが設定<xref:System.Net.Sockets.SocketOptionLevel.IP>または<xref:System.Net.Sockets.SocketOptionLevel.IPv6>、必要に応じて、`optionName`パラメーターに設定<xref:System.Net.Sockets.SocketOptionName.PacketInformation>、および`optionValue`を呼び出す前にこのオプションを有効にするパラメーター、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-667">To guarantee that the remote host endpoint is always returned, an application should explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method and then call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method with the `optionLevel` parameter set to <xref:System.Net.Sockets.SocketOptionLevel.IP> or <xref:System.Net.Sockets.SocketOptionLevel.IPv6> as appropriate, the `optionName` parameter set to <xref:System.Net.Sockets.SocketOptionName.PacketInformation>, and the `optionValue` parameter to enable this option before calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-668">それ以外の場合、可能であれば、受信側が呼び出される前に、送信者のデータグラムの数が送信する場合は、返されていないリモート ホストのエンドポイントの<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-668">Otherwise, it is possible for the remote host endpoint to not be returned when the sender has sent a number of datagrams before the receiver has called the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span>  
  
 <span data-ttu-id="12190-669"><xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>向けコネクションレスのプロトコルを接続指向プロトコルも使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-669">Although <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="12190-670">これを行う場合は、する必要がありますまずか、リモート ホスト接続を確立するを呼び出して、 <xref:System.Net.Sockets.Socket.Connect%2A>  /  <xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出して、受信接続要求を受け入れるか、<xref:System.Net.Sockets.Socket.Accept%2A>または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-670">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> / <xref:System.Net.Sockets.Socket.BeginConnect%2A> method or accept an incoming connection request by calling the <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-671">呼び出す場合は、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>確立するか、接続を受け入れる前にメソッドが表示されます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-671">If you call the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method before establishing or accepting a connection, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-672">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-672">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-673">このような場合は、のいずれかで、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドは無視されます、`remoteEP`パラメーターとのみデータが、接続されているまたは既定のリモート ホストを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-673">In either of these cases, the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-674">接続指向のソケットと<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>がで指定したバイトの数まで使用できる多くのデータを読み取り、`size`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-674">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter.</span></span>  
  
 <span data-ttu-id="12190-675">[キャンセル] を保留中<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>を呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-675">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-676">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-676">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-677">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-677">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-678">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-678">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-679">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-679">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-680">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-680">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-681">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-681">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-682">次のコード例は、リモート ホストから非同期的にコネクションレス データグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-682">The following code example asynchronously receives connectionless datagrams from a remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#41](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#41)]
 [!code-csharp[Socket_Async_Send_Receive#41](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#41)]
 [!code-vb[Socket_Async_Send_Receive#41](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-683">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-683">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-684">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-684">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-685">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-685">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-686">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-686">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-687">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-687">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-688">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-688">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-689">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-689">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-690">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-690">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-691">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-691">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveMessageFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveMessageFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveMessageFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceiveMessageFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginReceiveMessageFrom (buffer, offset, size, socketFlags, remoteEP, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-692">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-692">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-693">データを格納する、<c>buffer</c> パラメーター内の、インデックス番号が 0 から始まる位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-693">The zero-based position in the <c>buffer</c> parameter at which to store the data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-694">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-694">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-695">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-695">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-696">データのソースを表す <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-696">An <see cref="T:System.Net.EndPoint" /> that represents the source of the data.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-697">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-697">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-698">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-698">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-699">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータの非同期受信を開始して、データ バッファー内の指定した位置に格納します。さらに、エンドポイントとパケット情報を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-699">Begins to asynchronously receive the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint and packet information..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-700">非同期の読み取りを参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-700">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-701">非同期の受信操作呼び出しで完了する必要があります、<xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-701">The asynchronous receive operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A> method.</span></span> <span data-ttu-id="12190-702">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-702">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="12190-703">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-703">This method does not block until the operation completes.</span></span> <span data-ttu-id="12190-704">操作が完了するまでをブロックするを使用して、<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-704">To block until the operation completes, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="12190-705">[キャンセル] を保留中<xref:System.Net.Sockets.Socket.BeginReceiveMessageFrom%2A>を呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-705">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceiveMessageFrom%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="12190-706">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="12190-706">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="12190-707">このメソッドにデータを読み込みます、`buffer`パラメーター、およびデータの送信元となるエンドポイントをホストするリモート キャプチャだけでなく、受信したパケットに関する情報。</span><span class="sxs-lookup"><span data-stu-id="12190-707">This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent, as well as information about the received packet.</span></span> <span data-ttu-id="12190-708">このエンドポイントを取得する方法についてを参照してください<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-708">For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>.</span></span> <span data-ttu-id="12190-709">このメソッドは非同期的に不明なホストまたは複数のホストからコネクションレス データグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="12190-709">This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-710">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-710">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-711">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-711">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-712">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-712">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-713">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-713">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-714">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-714">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-715">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-715">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-716">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-716">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-717">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-717">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-718">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-718">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-719">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-719">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-720">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-720">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-721">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-721">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-722">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-722">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-723">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-723">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-724">Windows 2000 以前のオペレーティング システムです。このメソッドを使用するには、Windows XP が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-724">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-725">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-725">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffers, socketFlags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-726">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-726">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-727">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-727">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-728">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-728">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-729">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-729">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-730">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-730">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-731">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-731">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-732"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドで確立されているリモート ホストへの非同期送信操作を開始、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-732">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-733"><xref:System.Net.Sockets.Socket.BeginSend%2A> 最初に呼び出す必要はない場合、例外がスローされます<xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-733"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-734">呼び出す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-734">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-735">実装するコールバック メソッドを作成することができます、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-735">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="12190-736">これを行う、非常に最小値で、`state`パラメーターが、接続されているを含む必要がありますまたは既定の<xref:System.Net.Sockets.Socket>の通信に使用されています。</span><span class="sxs-lookup"><span data-stu-id="12190-736">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="12190-737">コールバックは、詳細を必要とする場合は、小さなクラスまたは構造体を作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-737">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-738">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-738">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-739">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-739">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="12190-740">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginSend%2A>、システムは、指定されたコールバック メソッドを実行する別のスレッドを使用しでブロックされます<xref:System.Net.Sockets.Socket.EndSend%2A>まで、<xref:System.Net.Sockets.Socket>を要求したバイト数を送信または例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-740">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="12190-741">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを使用して、<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-741">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="12190-742">元のスレッドに実行を継続する場合は、コールバック メソッドにはセット メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="12190-742">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="12190-743">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-743">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-744">接続指向プロトコルでは、意図したものが<xref:System.Net.Sockets.Socket.BeginSend%2A>最初を呼び出すことのコネクションレスのプロトコルでも、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>既定のリモート ホストを構築する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-744">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="12190-745">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合<xref:System.Net.Sockets.Socket.BeginSendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-745">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="12190-746">使用することが<xref:System.Net.Sockets.Socket.BeginSendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-746">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-747">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.BeginSend%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-747">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-748">コネクションレスのプロトコルを使用している場合は、バッファーのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="12190-748">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-749">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.BeginSend%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-749">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-750">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-750">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-751">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-751">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-752">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-752">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-753">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-753">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-754">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-754">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-755">`state` ユーザー定義のクラスのインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="12190-755">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-756">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-756">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-757">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-757">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-758">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-758">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-759">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-759">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-760">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-760">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-761">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-761">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-762">
            <paramref name="buffers" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-762">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-763">
            <paramref name="buffers" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-763">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-764">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-764">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-765">以下の解説を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-765">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-766">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-766">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffers, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-767">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-767">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-768">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-768">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-769">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-769">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-770">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-770">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-771">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-771">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-772">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-772">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-773">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-773">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-774"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドで確立されているリモート ホストへの非同期送信操作を開始、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-774">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-775"><xref:System.Net.Sockets.Socket.BeginSend%2A> 最初に呼び出す必要はない場合、例外がスローされます<xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-775"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-776">呼び出す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-776">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-777">実装するコールバック メソッドを作成することができます、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-777">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="12190-778">これを行う、非常に最小値で、`state`パラメーターが、接続されているを含む必要がありますまたは既定の<xref:System.Net.Sockets.Socket>の通信に使用されています。</span><span class="sxs-lookup"><span data-stu-id="12190-778">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="12190-779">コールバックは、詳細を必要とする場合は、小さなクラスまたは構造体を作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-779">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-780">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-780">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-781">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-781">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="12190-782">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginSend%2A>、システムは、指定されたコールバック メソッドを実行する別のスレッドを使用しでブロックされます<xref:System.Net.Sockets.Socket.EndSend%2A>まで、<xref:System.Net.Sockets.Socket>を要求したバイト数を送信または例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-782">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="12190-783">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを使用して、<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-783">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="12190-784">Set メソッドを呼び出す、<xref:System.Threading.ManualResetEvent>元のスレッドに実行を継続する場合は、コールバック メソッドにします。</span><span class="sxs-lookup"><span data-stu-id="12190-784">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="12190-785">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-785">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-786">接続指向プロトコルでは、意図したものが<xref:System.Net.Sockets.Socket.BeginSend%2A>最初を呼び出すことのコネクションレスのプロトコルでも、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>既定のリモート ホストを構築する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-786">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="12190-787">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合<xref:System.Net.Sockets.Socket.BeginSendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-787">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="12190-788">使用することが<xref:System.Net.Sockets.Socket.BeginSendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-788">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-789">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.BeginSend%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-789">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-790">コネクションレスのプロトコルを使用している場合は、バッファーのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="12190-790">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-791">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.BeginSend%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-791">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-792">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-792">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-793">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-793">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-794">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-794">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-795">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-795">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-796">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-796">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-797">`state` ユーザー定義のクラスのインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="12190-797">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-798">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-798">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-799">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-799">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-800">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-800">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-801">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-801">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-802">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-802">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-803">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-803">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-804">
            <paramref name="buffers" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-804">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-805">
            <paramref name="buffers" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-805">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-806">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-806">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-807">以下の解説を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-807">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-808">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-808">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * int * System.Net.Sockets.SocketFlags *  * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffer, offset, size, socketFlags, errorCode, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-809">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-809">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-810">データの送信を開始する、<c>buffer</c> パラメーター内の、インデックス番号が 0 から始まる位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-810">The zero-based position in the <c>buffer</c> parameter at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-811">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-811">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-812">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-812">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-813">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-813">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-814">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-814">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-815">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-815">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-816">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-816">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-817">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-817">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-818"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドで確立されているリモート ホストへの非同期送信操作を開始、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-818">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-819"><xref:System.Net.Sockets.Socket.BeginSend%2A> 最初に呼び出す必要はない場合、例外がスローされます<xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-819"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-820">呼び出す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-820">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-821">実装するコールバック メソッドを作成することができます、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-821">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="12190-822">これを行う、非常に最小値で、`state`パラメーターが、接続されているを含む必要がありますまたは既定の<xref:System.Net.Sockets.Socket>の通信に使用されています。</span><span class="sxs-lookup"><span data-stu-id="12190-822">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="12190-823">コールバックは、詳細を必要とする場合は、小さなクラスまたは構造体を作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-823">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-824">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-824">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-825">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-825">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="12190-826">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginSend%2A>、システムは、指定されたコールバック メソッドを実行する別のスレッドを使用しでブロックされます<xref:System.Net.Sockets.Socket.EndSend%2A>まで、<xref:System.Net.Sockets.Socket>を要求したバイト数を送信または例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-826">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="12190-827">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを使用して、<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-827">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="12190-828">元のスレッドに実行を継続する場合は、コールバック メソッドにはセット メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="12190-828">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="12190-829">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-829">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-830">接続指向プロトコルでは、意図したものが<xref:System.Net.Sockets.Socket.BeginSend%2A>最初を呼び出すことのコネクションレスのプロトコルでも、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>既定のリモート ホストを構築する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-830">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="12190-831">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合<xref:System.Net.Sockets.Socket.BeginSendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-831">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="12190-832">使用することが<xref:System.Net.Sockets.Socket.BeginSendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-832">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-833">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.BeginSend%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-833">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-834">コネクションレスのプロトコルを使用している場合は、バッファーのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="12190-834">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-835">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.BeginSend%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-835">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-836">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-836">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-837">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-837">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-838">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-838">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-839">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-839">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-840">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-840">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-841">`state` ユーザー定義のクラスのインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="12190-841">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-842">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-842">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-843">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-843">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-844">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-844">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-845">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-845">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-846">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-846">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-847">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-847">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-848">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-848">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-849">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-849">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-850">以下の解説を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-850">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-851">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-851">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-852">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さより小さい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-852">-or-  <paramref name="offset" /> is less than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-853">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-853">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-854">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-854">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-855">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-855">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * int * System.Net.Sockets.SocketFlags * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSend (buffer, offset, size, socket_flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" />
        <Parameter Name="state" Type="System.Object" Index="5" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-856">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-856">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-857">データの送信を開始する、<c>buffer</c> パラメーター内の、インデックス番号が 0 から始まる位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-857">The zero-based position in the <c>buffer</c> parameter at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-858">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-858">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="callback">
          <span data-ttu-id="12190-859">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-859">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-860">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-860">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-861">接続されている <see cref="T:System.Net.Sockets.Socket" /> にデータを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-861">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-862">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-862">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-863"><xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドで確立されているリモート ホストへの非同期送信操作を開始、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-863">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="12190-864"><xref:System.Net.Sockets.Socket.BeginSend%2A> 最初に呼び出す必要はない場合、例外がスローされます<xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-864"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-865">呼び出す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-865">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-866">実装するコールバック メソッドを作成することができます、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-866">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="12190-867">これを行う、非常に最小値で、`state`パラメーターが、接続されているを含む必要がありますまたは既定の<xref:System.Net.Sockets.Socket>の通信に使用されています。</span><span class="sxs-lookup"><span data-stu-id="12190-867">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="12190-868">コールバックは、詳細を必要とする場合は、小さなクラスまたは構造体を作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-868">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-869">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-869">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-870">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-870">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="12190-871">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginSend%2A>、システムは、指定されたコールバック メソッドを実行する別のスレッドを使用しでブロックされます<xref:System.Net.Sockets.Socket.EndSend%2A>まで、<xref:System.Net.Sockets.Socket>を要求したバイト数を送信または例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-871">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="12190-872">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを使用して、<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-872">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="12190-873">元のスレッドに実行を継続する場合は、コールバック メソッドにはセット メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="12190-873">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="12190-874">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-874">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-875">接続指向プロトコルでは、意図したものが<xref:System.Net.Sockets.Socket.BeginSend%2A>最初を呼び出すことのコネクションレスのプロトコルでも、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>既定のリモート ホストを構築する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-875">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="12190-876">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合<xref:System.Net.Sockets.Socket.BeginSendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-876">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="12190-877">使用することが<xref:System.Net.Sockets.Socket.BeginSendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-877">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-878">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.BeginSend%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-878">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-879">コネクションレスのプロトコルを使用している場合は、バッファーのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="12190-879">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-880">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.BeginSend%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-880">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-881">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-881">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-882">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-882">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-883">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-883">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-884">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-884">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-885">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-885">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-886">`state` ユーザー定義のクラスのインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="12190-886">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-887">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-887">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-888">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-888">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-889">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-889">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-890">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-890">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-891">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-891">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-892">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-892">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-893">次のコード例では、リモート ホストへのデータを非同期的に送信を開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-893">The following code example begins asynchronously sending data to a remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Async_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Async_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-894">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-894">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-895">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-895">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-896">以下の解説を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-896">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-897">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-897">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-898">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さより小さい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-898">-or-  <paramref name="offset" /> is less than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-899">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-899">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-900">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-900">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-901">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-901">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSendFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-902">接続された <see cref="T:System.Net.Sockets.Socket" /> オブジェクトに、ファイルを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-902">Sends a file asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSendFile">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendFile (string fileName, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendFile(string fileName, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendFile (fileName As String, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendFile(System::String ^ fileName, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendFile : string * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendFile (fileName, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="12190-903">送信するファイルのパスと名前を格納する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-903">A string that contains the path and name of the file to send.</span>
          </span>
          <span data-ttu-id="12190-904">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-904">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-905">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-905">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-906">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-906">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-907">
            <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> フラグを使用して、接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトにファイル <paramref name="fileName" /> を送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-907">Sends the file <paramref name="fileName" /> to a connected <see cref="T:System.Net.Sockets.Socket" /> object using the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> flag.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-908">非同期送信を表す <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-908">An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-909">このオーバー ロードは、そのファイルを送信`fileName`接続されたソケットにします。</span><span class="sxs-lookup"><span data-stu-id="12190-909">This overload sends the file `fileName` to the connected socket.</span></span> <span data-ttu-id="12190-910">場合`fileName`されますが、ローカルのディレクトリでファイルの名前だけで識別可能性があります。 それ以外の場合、完全なパスとファイルの名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-910">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="12190-911">ワイルドカード ("..\\\myfile.txt") と UNC 共有名 ("\\\\\\\shared ディレクトリ\\\myfile.txt") はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="12190-911">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="12190-912">ファイルが見つからない場合、例外<xref:System.IO.FileNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-912">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="12190-913">このメソッドを使用して、 `TransmitFile` Windows Sockets 2 API である関数。</span><span class="sxs-lookup"><span data-stu-id="12190-913">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="12190-914">詳細については、`TransmitFile`関数およびそのフラグは、MSDN ライブラリの Windows Sockets ドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-914">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="12190-915"><xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドで確立されているリモート ホストへの非同期送信操作を開始、 <xref:System.Net.Sockets.Socket.Connect%2A>、<xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-915">The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>,<xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods.</span></span> <span data-ttu-id="12190-916"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> 最初に呼び出す必要はありませんは例外をスロー <xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-916"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-917">呼び出す、<xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドでは、個別の実行スレッド内のファイルを送信することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-917">Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method enables you to send a file within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-918">操作を完了するには、によって呼び出されるコールバック メソッドを作成することができます、<xref:System.AsyncCallback>パラメーターを委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-918">To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter.</span></span> <span data-ttu-id="12190-919">これを行う、非常に最小値で、`state`パラメーターを含める必要があります、<xref:System.Net.Sockets.Socket>の通信に使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="12190-919">To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication.</span></span> <span data-ttu-id="12190-920">コールバックは、詳細を必要とする場合は、クラスまたは構造体を作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-920">If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-921">このカスタム オブジェクトのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-921">Pass an instance of this custom object to the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-922">コールバック メソッドを呼び出す必要があります、<xref:System.Net.Sockets.Socket.EndSendFile%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-922">Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method.</span></span> <span data-ttu-id="12190-923">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginSendFile%2A>、システムを別のスレッドを使用して、指定されたコールバック メソッドを実行してでブロック<xref:System.Net.Sockets.Socket.EndSendFile%2A>まで、<xref:System.Net.Sockets.Socket>ファイル全体を送信または例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-923">When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception.</span></span> <span data-ttu-id="12190-924">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-924">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-925">接続指向プロトコルでは、意図したものが<xref:System.Net.Sockets.Socket.BeginSendFile%2A>最初を呼び出すことのコネクションレスのプロトコルでも、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>既定のリモート ホストを構築する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-925">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="12190-926">コネクションレスのプロトコルを使用してファイルのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-926">With connectionless protocols, you must be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-927">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.BeginSendFile%2A>スロー、<xref:System.Net.Sockets.SocketException>例外。</span><span class="sxs-lookup"><span data-stu-id="12190-927">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-928">表示された場合、<xref:System.Net.Sockets.SocketException>例外を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-928">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-929">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-929">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-930">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-930">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-931">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-931">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-932">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-932">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-933">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-933">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-934">次のコード例では、作成し、非同期通信のソケットを接続します。</span><span class="sxs-lookup"><span data-stu-id="12190-934">The following code example creates and connects a socket for asynchronous communication.</span></span> <span data-ttu-id="12190-935">最初に、ファイル"text.txt"は、リモート ホストに非同期的に送信されます。</span><span class="sxs-lookup"><span data-stu-id="12190-935">First, the file "text.txt" is sent asynchronously to the remote host.</span></span> <span data-ttu-id="12190-936">コールバック デリゲート呼び出し<xref:System.Net.Sockets.Socket.EndSendFile%2A>転送を完了します。</span><span class="sxs-lookup"><span data-stu-id="12190-936">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#9)]
 [!code-csharp[NCLSocketEnhancements#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-937">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-937">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-938">ソケットがリモート ホストに接続されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-938">The socket is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="12190-939">ファイル <paramref name="fileName" /> が見つかりませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-939">The file <paramref name="fileName" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-940">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-940">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-941">以下の解説を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-941">See remarks section below.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendFile">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendFile(string fileName, unsigned int8[] preBuffer, unsigned int8[] postBuffer, valuetype System.Net.Sockets.TransmitFileOptions flags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendFile (fileName As String, preBuffer As Byte(), postBuffer As Byte(), flags As TransmitFileOptions, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendFile(System::String ^ fileName, cli::array &lt;System::Byte&gt; ^ preBuffer, cli::array &lt;System::Byte&gt; ^ postBuffer, System::Net::Sockets::TransmitFileOptions flags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSendFile : string * byte[] * byte[] * System.Net.Sockets.TransmitFileOptions * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendFile (fileName, preBuffer, postBuffer, flags, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="preBuffer" Type="System.Byte[]" />
        <Parameter Name="postBuffer" Type="System.Byte[]" />
        <Parameter Name="flags" Type="System.Net.Sockets.TransmitFileOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="12190-942">送信されるファイルのパスと名前を格納する文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-942">A string that contains the path and name of the file to be sent.</span>
          </span>
          <span data-ttu-id="12190-943">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-943">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="preBuffer">
          <span data-ttu-id="12190-944">ファイルが送信される前に送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-944">A <see cref="T:System.Byte" /> array that contains data to be sent before the file is sent.</span>
          </span>
          <span data-ttu-id="12190-945">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-945">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="postBuffer">
          <span data-ttu-id="12190-946">ファイルが送信された後で送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-946">A <see cref="T:System.Byte" /> array that contains data to be sent after the file is sent.</span>
          </span>
          <span data-ttu-id="12190-947">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-947">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="12190-948">
            <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-948">A bitwise combination of <see cref="T:System.Net.Sockets.TransmitFileOptions" /> values.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="12190-949">このオプションの完了時に呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-949">An <see cref="T:System.AsyncCallback" /> delegate to be invoked when this operation completes.</span>
          </span>
          <span data-ttu-id="12190-950">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-950">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-951">この要求の状態情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-951">A user-defined object that contains state information for this request.</span>
          </span>
          <span data-ttu-id="12190-952">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-952">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-953">接続された <see cref="T:System.Net.Sockets.Socket" /> オブジェクトに、ファイルとデータのバッファーを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-953">Sends a file and buffers of data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-954">非同期操作を表す <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-954">An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-955">このオーバー ロードには、送信するファイルとビットごとの組み合わせの名が必要です。<xref:System.Net.Sockets.TransmitFileOptions>値。</span><span class="sxs-lookup"><span data-stu-id="12190-955">This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values.</span></span> <span data-ttu-id="12190-956">`preBuffer`パラメーターには、ファイルの前にすべてのデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="12190-956">The `preBuffer` parameter contains any data you want to precede the file.</span></span> <span data-ttu-id="12190-957">`postBuffer` ファイルを使用するデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="12190-957">`postBuffer` contains data you want to follow the file.</span></span> <span data-ttu-id="12190-958">場合`fileName`されますが、ローカルのディレクトリでファイルの名前だけで識別可能性があります。 それ以外の場合、完全なパスとファイルの名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-958">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="12190-959">ワイルドカード ("..\\\myfile.txt") と UNC 共有名 ("\\\\\\\shared ディレクトリ\\\myfile.txt") はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="12190-959">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="12190-960">ファイルが見つからない場合、例外<xref:System.IO.FileNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-960">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="12190-961">`flags`パラメーターは、ファイルの転送に関する追加情報がウィンドウのソケット サービス プロバイダーを提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-961">The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="12190-962">このパラメーターを使用する方法の詳細については、次を参照してください。<xref:System.Net.Sockets.TransmitFileOptions>です。</span><span class="sxs-lookup"><span data-stu-id="12190-962">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="12190-963">このメソッドを使用して、 `TransmitFile` Windows Sockets 2 API である関数。</span><span class="sxs-lookup"><span data-stu-id="12190-963">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="12190-964">詳細については、`TransmitFile`関数およびそのフラグは、MSDN ライブラリの Windows Sockets ドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-964">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="12190-965"><xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドで確立されているリモート ホストへの非同期送信操作を開始、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-965">The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods.</span></span> <span data-ttu-id="12190-966"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> 最初に呼び出す必要はありませんは例外をスロー <xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.BeginConnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-966"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="12190-967">呼び出す、<xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドは、個別の実行スレッド内のファイルを送信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-967">Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method gives you the ability to send a file within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-968">操作を完了するには、によって呼び出されるコールバック メソッドを作成することができます、<xref:System.AsyncCallback>パラメーターを委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-968">To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter.</span></span> <span data-ttu-id="12190-969">これを行う、非常に最小値で、`state`パラメーターを含める必要があります、<xref:System.Net.Sockets.Socket>の通信に使用されているオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="12190-969">To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication.</span></span> <span data-ttu-id="12190-970">コールバックは、詳細を必要とする場合は、クラスまたは構造体を作成することができます、<xref:System.Net.Sockets.Socket>およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-970">If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="12190-971">このカスタム オブジェクトのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-971">Pass an instance of this custom object to the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-972">コールバック メソッドを呼び出す必要があります、<xref:System.Net.Sockets.Socket.EndSendFile%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-972">Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method.</span></span> <span data-ttu-id="12190-973">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginSendFile%2A>、システムを別のスレッドを使用して、指定されたコールバック メソッドを実行してでブロック<xref:System.Net.Sockets.Socket.EndSendFile%2A>まで、<xref:System.Net.Sockets.Socket>ファイル全体を送信または例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-973">When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception.</span></span> <span data-ttu-id="12190-974">コールバック メソッドの記述の詳細については、次を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-974">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-975">接続指向プロトコルでは、意図したものが<xref:System.Net.Sockets.Socket.BeginSendFile%2A>最初を呼び出すことのコネクションレスのプロトコルでも、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>既定のリモート ホストを構築する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-975">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="12190-976">コネクションレスのプロトコルを使用している場合は、ファイルのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="12190-976">With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-977">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.BeginSendFile%2A>スロー、<xref:System.Net.Sockets.SocketException>例外。</span><span class="sxs-lookup"><span data-stu-id="12190-977">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-978">表示された場合、<xref:System.Net.Sockets.SocketException>例外を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-978">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-979">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-979">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-980">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-980">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-981">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-981">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-982">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-982">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-983">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-983">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-984">次のコード例を作成し、非同期通信のソケットを接続し、リモート ホストにファイルの"text.txt"を非同期的に送信を開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-984">The following code example creates and connects a socket for asynchronous communication and begins sending the file "text.txt" asynchronously to the remote host.</span></span> <span data-ttu-id="12190-985">この例では、`preBuffer`と`postBuffer`データのファイルとその既定値を送信するために作成が<xref:System.Net.Sockets.TransmitFileOptions>値を使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-985">In this example, a `preBuffer` and a `postBuffer` of data is created to send with the file and the default <xref:System.Net.Sockets.TransmitFileOptions> value is used.</span></span> <span data-ttu-id="12190-986">コールバック デリゲート呼び出し<xref:System.Net.Sockets.Socket.EndSendFile%2A>転送を完了します。</span><span class="sxs-lookup"><span data-stu-id="12190-986">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#10)]
 [!code-csharp[NCLSocketEnhancements#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-987">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-987">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-988">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-988">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-989">以下の解説を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-989">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-990">オペレーティング システムは Windows NT 以降ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-990">The operating system is not Windows NT or later.</span>
          </span>
          <span data-ttu-id="12190-991">\- または -  ソケットがリモート ホストに接続されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-991">\- or -  The socket is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="12190-992">ファイル <paramref name="fileName" /> が見つかりませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-992">The file <paramref name="fileName" /> was not found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendTo">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, System.Net.EndPoint remote_end, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.Net.EndPoint remote_end, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendTo (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, remote_end As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, System::Net::EndPoint ^ remote_end, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.BeginSendTo : byte[] * int * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="socket.BeginSendTo (buffer, offset, size, socket_flags, remote_end, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="remote_end" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-993">送信するデータを格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-993">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-994">データ送信を開始する、<c>buffer</c> 内の、インデックス番号が 0 から始まる位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-994">The zero-based position in <c>buffer</c> at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-995">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-995">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="remoteEP">To be added.</param>
        <param name="remote_end">To be added.</param>
        <param name="callback">
          <span data-ttu-id="12190-996">
            <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-996">The <see cref="T:System.AsyncCallback" /> delegate.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="12190-997">この要求の状態情報を格納するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-997">An object that contains state information for this request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-998">特定のリモート ホストにデータを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-998">Sends data asynchronously to a specific remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-999">非同期の送信を参照する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-999">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1000"><xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドで指定されたリモート ホストへの非同期送信操作を開始、`remoteEP`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-1000">The <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method starts an asynchronous send operation to the remote host specified in the `remoteEP` parameter.</span></span> <span data-ttu-id="12190-1001">呼び出す、<xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-1001">Calling the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method gives you the ability to send data within a separate execution thread.</span></span> <span data-ttu-id="12190-1002">コネクションレス プロトコルは、意図したものが<xref:System.Net.Sockets.Socket.BeginSendTo%2A>コネクションレス型との接続指向プロトコルの両方で動作します。</span><span class="sxs-lookup"><span data-stu-id="12190-1002">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.BeginSendTo%2A> works with both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="12190-1003">実装するコールバック メソッドを作成することができます、<xref:System.AsyncCallback>を委任し、その名前を渡す、<xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1003">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method.</span></span> <span data-ttu-id="12190-1004">これを行う、非常に最小値で、`state`パラメーターが、接続されているを含む必要がありますまたは既定の<xref:System.Net.Sockets.Socket>の通信に使用されています。</span><span class="sxs-lookup"><span data-stu-id="12190-1004">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="12190-1005">コールバックは、詳細を必要とする場合は、保持するために小さなクラスを作成することができます、 <xref:System.Net.Sockets.Socket>、およびその他の必要な情報です。</span><span class="sxs-lookup"><span data-stu-id="12190-1005">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information.</span></span> <span data-ttu-id="12190-1006">このクラスのインスタンスを渡す、<xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドによって、`state`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-1006">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="12190-1007">コールバック メソッドを呼び出す必要がある、<xref:System.Net.Sockets.Socket.EndSendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1007">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method.</span></span> <span data-ttu-id="12190-1008">アプリケーションを呼び出すと<xref:System.Net.Sockets.Socket.BeginSendTo%2A>、システムは、指定されたコールバック メソッドを実行する別のスレッドを使用しでブロックされます<xref:System.Net.Sockets.Socket.EndSendTo%2A>まで、<xref:System.Net.Sockets.Socket>を要求したバイト数を送信または例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="12190-1008">When your application calls <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSendTo%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="12190-1009">場合は、元のスレッドをブロックを呼び出した後、<xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドを使用して、<xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1009">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="12190-1010">元のスレッドに実行を継続する場合は、コールバック メソッドにはセット メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="12190-1010">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="12190-1011">コールバック メソッドの記述に関する追加情報を参照してください。[コールバック メソッドとしてのデリゲートをマーシャ リング](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1011">For additional information about writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="12190-1012">最初に呼び出す必要がある接続指向のプロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッド、または<xref:System.Net.Sockets.Socket.BeginSendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1012">If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, or <xref:System.Net.Sockets.Socket.BeginSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1013"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> 無視されます、`remoteEP`パラメーターと送信のデータを<xref:System.Net.EndPoint>で確立されている、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Accept%2A>、または<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1013"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> will ignore the `remoteEP` parameter and send data to the <xref:System.Net.EndPoint> established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1014">コネクションレスのプロトコルを使用している場合は既定のリモート ホストとの確立する必要はありません、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1014">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="12190-1015">この呼び出しをする場合にだけ、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1015">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="12190-1016">呼び出す場合、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>、`remoteEP`パラメーターは、操作のみを送信するため、指定された既定のリモート ホストに上書きされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1016">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="12190-1017">必要はありませんを呼び出して、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1017">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="12190-1018">この場合、基になるサービス プロバイダーは、最も適切なローカル ネットワーク アドレスとポート番号を割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="12190-1018">In this case, the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="12190-1019">基になるサービス プロバイダーは、空いているポートを選択する場合は、ゼロのポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-1019">Use a port number of zero if you want the underlying service provider to select a free port.</span></span> <span data-ttu-id="12190-1020">使用することができます、割り当てられているローカル ネットワーク アドレスとポート番号を識別する必要がある場合、<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>後プロパティ、<xref:System.Net.Sockets.Socket.EndSendTo%2A>メソッドが正常に完了するとします。</span><span class="sxs-lookup"><span data-stu-id="12190-1020">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="12190-1021">ブロードキャスト アドレスにデータを送信する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1021">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-1022">のバッファーのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認必要もあります。</span><span class="sxs-lookup"><span data-stu-id="12190-1022">-You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-1023">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.EndSendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1023">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.EndSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-1024">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-1024">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1025">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1025">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1026">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1026">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1027">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1027">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1028">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1028">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1029">非同期の実行コンテキスト (セキュリティ コンテキスト、権限を借用したユーザー、および呼び出し元のコンテキスト) がキャッシュされる<xref:System.Net.Sockets.Socket>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1029">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="12190-1030">特定のコンテキストの初回使用後に (特定の非同期<xref:System.Net.Sockets.Socket>メソッドは、特定の<xref:System.Net.Sockets.Socket>インスタンス、および、特定のコールバック)、そのコンテキストの後の使用はパフォーマンスの向上を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-1030">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1031">次のコード例は、指定したリモート ホストにデータを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-1031">The following code example asynchronously sends data to the specified remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#3)]
 [!code-csharp[Socket_Async_Send_Receive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#3)]
 [!code-vb[Socket_Async_Send_Receive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1032">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1032">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-1033">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1033">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1034">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1034">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-1035">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1035">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-1036">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1036">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-1037">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1037">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-1038">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1038">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1039">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1039">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-1040">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1040">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public void Bind (System.Net.EndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Bind(class System.Net.EndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Bind (localEP As EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Bind(System::Net::EndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="member this.Bind : System.Net.EndPoint -&gt; unit" Usage="socket.Bind localEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <span data-ttu-id="12190-1041">
            <see cref="T:System.Net.Sockets.Socket" /> に関連付けるローカル <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1041">The local <see cref="T:System.Net.EndPoint" /> to associate with the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1042">
            <see cref="T:System.Net.Sockets.Socket" /> をローカル エンドポイントと関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1042">Associates a <see cref="T:System.Net.Sockets.Socket" /> with a local endpoint.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1043">使用して、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドを特定のローカル エンドポイントを使用する必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="12190-1043">Use the <xref:System.Net.Sockets.Socket.Bind%2A> method if you need to use a specific local endpoint.</span></span> <span data-ttu-id="12190-1044">呼び出す必要があります<xref:System.Net.Sockets.Socket.Bind%2A>を呼び出す前に、<xref:System.Net.Sockets.Socket.Listen%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1044">You must call <xref:System.Net.Sockets.Socket.Bind%2A> before you can call the <xref:System.Net.Sockets.Socket.Listen%2A> method.</span></span> <span data-ttu-id="12190-1045">呼び出す必要はありません<xref:System.Net.Sockets.Socket.Bind%2A>使用する前に、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド、ローカルの特定のエンドポイントを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1045">You do not need to call <xref:System.Net.Sockets.Socket.Bind%2A> before using the <xref:System.Net.Sockets.Socket.Connect%2A> method unless you need to use a specific local endpoint.</span></span> <span data-ttu-id="12190-1046">使用することができます、<xref:System.Net.Sockets.Socket.Bind%2A>コネクションレス型との接続指向プロトコルの両方のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1046">You can use the <xref:System.Net.Sockets.Socket.Bind%2A> method on both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="12190-1047">呼び出す前に<xref:System.Net.Sockets.Socket.Bind%2A>、ローカルを作成する必要がありますまず<xref:System.Net.IPEndPoint>データをやり取りするからです。</span><span class="sxs-lookup"><span data-stu-id="12190-1047">Before calling <xref:System.Net.Sockets.Socket.Bind%2A>, you must first create the local <xref:System.Net.IPEndPoint> from which you intend to communicate data.</span></span> <span data-ttu-id="12190-1048">ローカル アドレスの割り当てを限定しない場合は、作成、<xref:System.Net.IPEndPoint>を使用して<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>アドレス パラメーターと、基になるサービス プロバイダーは、最も適切なネットワーク アドレスを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-1048">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="12190-1049">これにより、複数のネットワーク インターフェイスがある場合に、アプリケーションを簡略化のに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="12190-1049">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="12190-1050">使用されているローカル ポートを限定しない場合は、作成、<xref:System.Net.IPEndPoint>ポート番号として 0 を使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-1050">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="12190-1051">この場合、サービス プロバイダーは 1024 ~ 5000 で、使用可能なポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-1051">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span>  
  
 <span data-ttu-id="12190-1052">上記の方法を使用する場合は、呼び出すことによってどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出することができます、<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1052">If you use the above approach, you can discover what local network address and port number has been assigned by calling the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A>.</span></span> <span data-ttu-id="12190-1053">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>への呼び出しを行った後まで、ローカルで割り当てられているネットワーク アドレスは返されません、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1053">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> will not return the locally assigned network address until after you have made a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="12190-1054">コネクションレスのプロトコルを使用している場合はありませんこの情報にアクセスする送信を完了したかが表示されるまでです。</span><span class="sxs-lookup"><span data-stu-id="12190-1054">If you are using a connectionless protocol, you will not have access to this information until you have completed a send or receive.</span></span>  
  
 <span data-ttu-id="12190-1055">UDP ソケットがインターフェイスについては、受信したパケットを受信する場合は、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>と共にソケット オプションに設定して、メソッドを明示的に呼び出されなければなりません<xref:System.Net.Sockets.SocketOptionName.PacketInformation>呼び出し直後後、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1055">If a UDP socket wants to receive interface information on received packets,  the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method should be explicitly called with the socket option set to <xref:System.Net.Sockets.SocketOptionName.PacketInformation> immediately after calling the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1056">マルチキャスト データグラムを受信する場合は、呼び出す必要があります、<xref:System.Net.Sockets.Socket.Bind%2A>マルチキャストのポート番号を持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1056">If you intend to receive multicast datagrams, you must call the <xref:System.Net.Sockets.Socket.Bind%2A> method with a multicast port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1057">呼び出す必要があります、<xref:System.Net.Sockets.Socket.Bind%2A>メソッド コネクションレス データグラムを使用して受信する場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1057">You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method if you intend to receive connectionless datagrams using the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1058">表示された場合、<xref:System.Net.Sockets.SocketException>を呼び出すときに、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドを使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1058">If you receive a <xref:System.Net.Sockets.SocketException> when calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1059">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1059">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1060">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1060">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1061">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1061">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1062">次のコード例のバインド、<xref:System.Net.Sockets.Socket>指定したローカル エンドポイントを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-1062">The following code example binds a <xref:System.Net.Sockets.Socket> using the specified local endpoint.</span></span>  
  
 [!code-cpp[Classic Socket.Bind Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Bind Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Bind Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Bind Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Bind Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Bind Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1063">
            <paramref name="localEP" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1063">
              <paramref name="localEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1064">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1064">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1065">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1065">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-1066">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1066">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-1067">によって定義されたホストからの接続を受け入れるため<paramref name="localEP" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1067">for accepting connections from the host defined by <paramref name="localEP" />.</span>
          </span>
          <span data-ttu-id="12190-1068">関連する列挙。 <see cref="F:System.Net.NetworkAccess.Accept" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1068">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Blocking">
      <MemberSignature Language="C#" Value="public bool Blocking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Blocking" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Blocking" />
      <MemberSignature Language="VB.NET" Value="Public Property Blocking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Blocking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Blocking : bool with get, set" Usage="System.Net.Sockets.Socket.Blocking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1069">
            <see cref="T:System.Net.Sockets.Socket" /> がブロッキング モードかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1069">Gets or sets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is in blocking mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1070">
            <see cref="T:System.Net.Sockets.Socket" /> がブロックする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1070">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> will block; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="12190-1071">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1071">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1072"><xref:System.Net.Sockets.Socket.Blocking%2A>プロパティを示すかどうか、<xref:System.Net.Sockets.Socket>ブロッキング モードでは、します。</span><span class="sxs-lookup"><span data-stu-id="12190-1072">The <xref:System.Net.Sockets.Socket.Blocking%2A> property indicates whether a <xref:System.Net.Sockets.Socket> is in blocking mode.</span></span>  
  
 <span data-ttu-id="12190-1073">ブロッキング モードでは、すると、メソッドがすぐに完了しない場合、アプリケーションは、要求された操作が完了するまで実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1073">If you are in blocking mode, and you make a method call which does not complete immediately, your application will block execution until the requested operation completes.</span></span> <span data-ttu-id="12190-1074">要求された操作の完了がいない場合でも続行、変更を実行する場合、<xref:System.Net.Sockets.Socket.Blocking%2A>プロパティを`false`です。</span><span class="sxs-lookup"><span data-stu-id="12190-1074">If you want execution to continue even though the requested operation is not complete, change the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false`.</span></span> <span data-ttu-id="12190-1075"><xref:System.Net.Sockets.Socket.Blocking%2A>プロパティが非同期メソッドに対して影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="12190-1075">The <xref:System.Net.Sockets.Socket.Blocking%2A> property has no effect on asynchronous methods.</span></span> <span data-ttu-id="12190-1076">使用している場合を送信し、データの非同期受信の実行をブロックする、<xref:System.Threading.ManualResetEvent>クラスです。</span><span class="sxs-lookup"><span data-stu-id="12190-1076">If you are sending and receiving data asynchronously and want to block execution, use the <xref:System.Threading.ManualResetEvent> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1077">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1077">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1078">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1078">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1079">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1079">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1080">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1080">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1081">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1081">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1082">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1082">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelConnectAsync">
      <MemberSignature Language="C#" Value="public static void CancelConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelConnectAsync (e As SocketAsyncEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelConnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member CancelConnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; unit" Usage="System.Net.Sockets.Socket.CancelConnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-1083">
            <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> メソッドの 1 つを呼び出してリモート ホストへの接続を要求するために使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1083">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object used to request the connection to the remote host by calling one of the <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> methods.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1084">リモート ホスト接続への非同期要求を取り消します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1084">Cancels an asynchronous request for a remote host connection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1085"><xref:System.Net.Sockets.Socket.CancelConnectAsync%2A>メソッドは、リモート ホスト接続への非同期要求をキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="12190-1085">The <xref:System.Net.Sockets.Socket.CancelConnectAsync%2A> method cancels an asynchronous request for a remote host connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1086">
            <paramref name="e" /> パラメーターおよび <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> を null 値にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1086">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1087">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1087">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1088">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1088">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-1089">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1089">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Close">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1090">
            <see cref="T:System.Net.Sockets.Socket" /> 接続を閉じ、関連付けられたすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1090">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="socket.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12190-1091">
            <see cref="T:System.Net.Sockets.Socket" /> 接続を閉じ、関連付けられたすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1091">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1092"><xref:System.Net.Sockets.Socket.Close%2A>メソッドは、リモート ホスト接続を閉じると、リリースのすべてのマネージおよびアンマネージ リソースに関連付けられている、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1092">The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1093">決算時に、<xref:System.Net.Sockets.Socket.Connected%2A>プロパティに設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="12190-1093">Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="12190-1094">接続指向プロトコルは勧めを呼び出すこと<xref:System.Net.Sockets.Socket.Shutdown%2A>呼び出す前に、<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1094">For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="12190-1095">これにより、すべてのデータが送信されが閉じる前に、接続されたソケットで受信したことです。</span><span class="sxs-lookup"><span data-stu-id="12190-1095">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="12190-1096">呼び出す必要がある場合<xref:System.Net.Sockets.Socket.Close%2A>最初呼び出さず<xref:System.Net.Sockets.Socket.Shutdown%2A>、データ キューを設定して送信される出力方向の送信にあることを確認することができます、 <xref:System.Net.Sockets.SocketOptionName.DontLinger> <xref:System.Net.Sockets.Socket>オプションを`false`と 0 以外のタイムアウト間隔を指定します。</span><span class="sxs-lookup"><span data-stu-id="12190-1096">If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket> option to `false` and specifying a non-zero time-out interval.</span></span> <span data-ttu-id="12190-1097"><xref:System.Net.Sockets.Socket.Close%2A> このデータが送信されるまで、または指定したタイムアウトの期限が切れるまで、ブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1097"><xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="12190-1098">設定した場合<xref:System.Net.Sockets.SocketOptionName.DontLinger>に`false`0 のタイムアウト間隔を指定して<xref:System.Net.Sockets.Socket.Close%2A>の接続を解放し、送信キューに置かれたデータを自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="12190-1098">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1099">設定する、<xref:System.Net.Sockets.SocketOptionName.DontLinger>ソケット オプションに`false`、作成、 <xref:System.Net.Sockets.LingerOption>、enabled プロパティを設定`true`、設定と、<xref:System.Net.Sockets.LingerOption.LingerTime%2A>プロパティ、目的のタイムアウト期間をします。</span><span class="sxs-lookup"><span data-stu-id="12190-1099">To set the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time out period.</span></span> <span data-ttu-id="12190-1100">これを使用して<xref:System.Net.Sockets.LingerOption>と共に、<xref:System.Net.Sockets.SocketOptionName.DontLinger>ソケット オプションを呼び出して、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1100">Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1101">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1101">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1102">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1102">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1103">次のコード例が閉じ、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1103">The following code example closes a <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.DontLinger" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberSignature Language="F#" Value="member this.Close : int -&gt; unit" Usage="socket.Close timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="12190-1104">最大 <c>timeout</c> 秒まで待ってから残りのデータを送信し、ソケットを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1104">Wait up to <c>timeout</c> seconds to send any remaining data, then close the socket.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1105">
            <see cref="T:System.Net.Sockets.Socket" /> 接続を閉じ、すべての関連付けられているリソースを指定したタイムアウトで解放して、キューに置かれたデータの送信を許可します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1105">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources with a specified timeout to allow queued data to be sent.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1106"><xref:System.Net.Sockets.Socket.Close%2A>メソッドは、リモート ホスト接続を閉じると、リリースのすべてのマネージおよびアンマネージ リソースに関連付けられている、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1106">The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1107">決算時に、<xref:System.Net.Sockets.Socket.Connected%2A>プロパティに設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="12190-1107">Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="12190-1108">接続指向プロトコルは勧めを呼び出すこと<xref:System.Net.Sockets.Socket.Shutdown%2A>呼び出す前に<xref:System.Net.Sockets.Socket.Close%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1108">For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling <xref:System.Net.Sockets.Socket.Close%2A>.</span></span> <span data-ttu-id="12190-1109">これにより、すべてのデータが送信されが閉じる前に、接続されたソケットで受信したことです。</span><span class="sxs-lookup"><span data-stu-id="12190-1109">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="12190-1110">呼び出す必要がある場合<xref:System.Net.Sockets.Socket.Close%2A>最初呼び出さず<xref:System.Net.Sockets.Socket.Shutdown%2A>、データ キューを設定して送信される出力方向の送信にあることを確認することができます、<xref:System.Net.Sockets.SocketOptionName.DontLinger>オプションを`false`と 0 以外のタイムアウト間隔を指定します。</span><span class="sxs-lookup"><span data-stu-id="12190-1110">If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName.DontLinger> option to `false` and specifying a non-zero time-out interval.</span></span> <span data-ttu-id="12190-1111"><xref:System.Net.Sockets.Socket.Close%2A> このデータが送信されるまで、または指定したタイムアウトの期限が切れるまで、ブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1111"><xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="12190-1112">設定した場合<xref:System.Net.Sockets.SocketOptionName.DontLinger>に`false`0 のタイムアウト間隔を指定して<xref:System.Net.Sockets.Socket.Close%2A>の接続を解放し、送信キューに置かれたデータを自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="12190-1112">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1113">設定する、<xref:System.Net.Sockets.SocketOptionName.DontLinger>ソケット オプションに`false`、作成、<xref:System.Net.Sockets.LingerOption>に有効なプロパティを設定`true`、設定と、<xref:System.Net.Sockets.LingerOption.LingerTime%2A>プロパティを目的のタイムアウト期間。</span><span class="sxs-lookup"><span data-stu-id="12190-1113">To set the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time-out period.</span></span> <span data-ttu-id="12190-1114">これを使用して<xref:System.Net.Sockets.LingerOption>と共に、<xref:System.Net.Sockets.SocketOptionName.DontLinger>ソケット オプションを呼び出して、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1114">Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1115">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1115">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1116">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1116">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1117">次のコード例を終了する方法を示しています、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1117">The following code example demonstrates how to close a <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.DontLinger" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1118">リモート ホストへの接続を確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1118">Establishes a connection to a remote host.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.EndPoint -&gt; unit" Usage="socket.Connect remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="remoteEP">
          <span data-ttu-id="12190-1119">リモート デバイスを表す <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1119">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1120">リモート ホストへの接続を確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1120">Establishes a connection to a remote host.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1121">TCP などの接続指向プロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは同期的に間のネットワーク接続を確立<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>と指定したリモート エンドポイント。</span><span class="sxs-lookup"><span data-stu-id="12190-1121">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="12190-1122">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="12190-1122">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="12190-1123">呼び出した後<xref:System.Net.Sockets.Socket.Connect%2A>のリモート デバイスにデータを送信することができます、<xref:System.Net.Sockets.Socket.Send%2A>メソッド、またはリモート デバイスからデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1123">After you call <xref:System.Net.Sockets.Socket.Connect%2A>, you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1124">UDP などのコネクションレスのプロトコルを使用している場合を呼び出す必要はありません<xref:System.Net.Sockets.Socket.Connect%2A>データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1124">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="12190-1125">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>と<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>リモート ホストを同期的に通信するためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1125">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="12190-1126">呼び出す場合<xref:System.Net.Sockets.Socket.Connect%2A>、指定した既定以外のアドレスから受信する任意のデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1126">If you do call <xref:System.Net.Sockets.Socket.Connect%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="12190-1127">既定のリモート ホストが、ブロードキャスト アドレスを設定する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>、または<xref:System.Net.Sockets.Socket.Connect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1127">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1128">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1128">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1129">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1129">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="12190-1130"><xref:System.Net.Sockets.Socket.Connect%2A>メソッド ブロックを明示的に設定する場合を除き、<xref:System.Net.Sockets.Socket.Blocking%2A>プロパティを`false`呼び出しの前に<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1130">The <xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-1131">TCP とする無効化をブロックするように、接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>時接続を確立する必要があるためです。</span><span class="sxs-lookup"><span data-stu-id="12190-1131">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="12190-1132">既定のリモート ホストを確立するだけであるために、コネクションレスのプロトコルは例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="12190-1132">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="12190-1133">使用することができます<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="12190-1133">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="12190-1134">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1134">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="12190-1135">接続指向で、リモート ホスト接続が開始されて、エラーに WSAEWOULDBLOCK が返される場合は<xref:System.Net.Sockets.Socket>、まだ完了していませんが正常にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1135">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="12190-1136">使用して、<xref:System.Net.Sockets.Socket.Poll%2A>タイミングを決定するメソッド、<xref:System.Net.Sockets.Socket>が終了した接続です。</span><span class="sxs-lookup"><span data-stu-id="12190-1136">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1137">接続指向のプロトコルを使用しているしを呼び出さなかったかどうか<xref:System.Net.Sockets.Socket.Bind%2A>呼び出す前に<xref:System.Net.Sockets.Socket.Connect%2A>、基になるサービス プロバイダーは、ローカル ネットワーク アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-1137">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="12190-1138">コネクションレスのプロトコルを使用している場合、サービス プロバイダーを割り当てませんローカル ネットワーク アドレスとポート番号の送信を完了するか、操作が表示されるまでです。</span><span class="sxs-lookup"><span data-stu-id="12190-1138">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="12190-1139">既定のリモート ホストを変更する場合は、呼び出す<xref:System.Net.Sockets.Socket.Connect%2A>目的のエンドポイントを指定しています。</span><span class="sxs-lookup"><span data-stu-id="12190-1139">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1140">ソケットが以前切断された場合は、接続を復元する、このメソッドを使用できません。</span><span class="sxs-lookup"><span data-stu-id="12190-1140">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="12190-1141">非同期のいずれかを使用して<xref:System.Net.Sockets.Socket.BeginConnect%2A>を再接続する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-1141">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="12190-1142">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="12190-1142">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1143">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1143">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1144">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1144">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1145">次のコード例では、リモート エンドポイントに接続し、接続を検証します。</span><span class="sxs-lookup"><span data-stu-id="12190-1145">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[Classic Socket.Connect Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Connect Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Connect Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Connect Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Connect Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Connect Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1146">
            <paramref name="remoteEP" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1146">
              <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1147">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1147">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1148">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1148">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-1149">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1149">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1150">
            <see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1150">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-1151">リモート ホストに接続します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1151">for connecting to the remote host.</span>
          </span>
          <span data-ttu-id="12190-1152">関連する列挙。 <see cref="F:System.Net.NetworkAccess.Connect" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1152">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Connect" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.Blocking" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="socket.Connect (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="12190-1153">リモート ホストの IP アドレス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1153">The IP address of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="12190-1154">リモート ホストのポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1154">The port number of the remote host.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1155">リモート ホストへの接続を確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1155">Establishes a connection to a remote host.</span>
          </span>
          <span data-ttu-id="12190-1156">ホストは、IP アドレスとポート番号で指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1156">The host is specified by an IP address and a port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1157">TCP などの接続指向プロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは同期的に間のネットワーク接続を確立<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>と指定したリモート エンドポイント。</span><span class="sxs-lookup"><span data-stu-id="12190-1157">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="12190-1158">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="12190-1158">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="12190-1159">呼び出した後<xref:System.Net.Sockets.Socket.Connect%2A>のリモート デバイスにデータを送信することができます、<xref:System.Net.Sockets.Socket.Send%2A>メソッド、またはリモート デバイスからデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1159">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1160">UDP などのコネクションレスのプロトコルを使用している場合を呼び出す必要はありません<xref:System.Net.Sockets.Socket.Connect%2A>データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1160">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="12190-1161">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>と<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>リモート ホストを同期的に通信するためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1161">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="12190-1162">呼び出す場合<xref:System.Net.Sockets.Socket.Connect%2A>指定された既定以外のアドレスから受信する任意のデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1162">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="12190-1163">既定のリモート ホストが、ブロードキャスト アドレスを設定する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>、または<xref:System.Net.Sockets.Socket.Connect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1163">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1164">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1164">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1165">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1165">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="12190-1166"><xref:System.Net.Sockets.Socket.Connect%2A> 具体的に設定していない場合、メソッドはブロック、<xref:System.Net.Sockets.Socket.Blocking%2A>プロパティを`false`呼び出しの前に<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1166"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-1167">TCP とする無効化をブロックするように、接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>時接続を確立する必要があるためです。</span><span class="sxs-lookup"><span data-stu-id="12190-1167">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="12190-1168">既定のリモート ホストを確立するだけであるために、コネクションレスのプロトコルは例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="12190-1168">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="12190-1169">使用することができます<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="12190-1169">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="12190-1170">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1170">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="12190-1171">接続指向で、リモート ホスト接続が開始されて、エラーに WSAEWOULDBLOCK が返される場合は<xref:System.Net.Sockets.Socket>、まだ完了していませんが正常にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1171">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="12190-1172">使用して、<xref:System.Net.Sockets.Socket.Poll%2A>タイミングを決定するメソッド、<xref:System.Net.Sockets.Socket>が終了した接続です。</span><span class="sxs-lookup"><span data-stu-id="12190-1172">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1173">接続指向のプロトコルを使用しているしを呼び出さなかったかどうか<xref:System.Net.Sockets.Socket.Bind%2A>呼び出す前に<xref:System.Net.Sockets.Socket.Connect%2A>、基になるサービス プロバイダーは、ローカル ネットワーク アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-1173">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="12190-1174">コネクションレスのプロトコルを使用している場合、サービス プロバイダーを割り当てませんローカル ネットワーク アドレスとポート番号の送信を完了するか、操作が表示されるまでです。</span><span class="sxs-lookup"><span data-stu-id="12190-1174">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="12190-1175">既定のリモート ホストを変更する場合は、呼び出す<xref:System.Net.Sockets.Socket.Connect%2A>目的のエンドポイントを指定しています。</span><span class="sxs-lookup"><span data-stu-id="12190-1175">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1176">ソケットが以前切断された場合は、接続を復元する、このメソッドを使用できません。</span><span class="sxs-lookup"><span data-stu-id="12190-1176">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="12190-1177">非同期のいずれかを使用して<xref:System.Net.Sockets.Socket.BeginConnect%2A>を再接続する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-1177">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="12190-1178">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="12190-1178">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1179">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1179">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1180">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1180">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1181">次のコード例では、リモート エンドポイントに接続し、接続を検証します。</span><span class="sxs-lookup"><span data-stu-id="12190-1181">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#4)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1182">
            <paramref name="address" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1182">
              <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-1183">ポート番号が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1183">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1184">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1184">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1185">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1185">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1186">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットで有効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1186">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1187">
            <paramref name="address" /> の長さが 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1187">The length of <paramref name="address" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1188">
            <see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1188">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress[] * int -&gt; unit" Usage="socket.Connect (addresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="addresses">
          <span data-ttu-id="12190-1189">リモート ホストの IP アドレス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1189">The IP addresses of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="12190-1190">リモート ホストのポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1190">The port number of the remote host.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1191">リモート ホストへの接続を確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1191">Establishes a connection to a remote host.</span>
          </span>
          <span data-ttu-id="12190-1192">ホストは、IP アドレスの配列とポート番号で指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1192">The host is specified by an array of IP addresses and a port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1193">このメソッドはすぐに呼び出しの後に通常使用<xref:System.Net.Dns.GetHostAddresses%2A>、1 つのホストの複数の IP アドレスを返すことができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1193">This method is typically used immediately after a call to <xref:System.Net.Dns.GetHostAddresses%2A>, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="12190-1194">TCP などの接続指向プロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは同期的に間のネットワーク接続を確立<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>と指定したリモート エンドポイント。</span><span class="sxs-lookup"><span data-stu-id="12190-1194">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="12190-1195">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="12190-1195">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="12190-1196">呼び出した後<xref:System.Net.Sockets.Socket.Connect%2A>のリモート デバイスにデータを送信することができます、<xref:System.Net.Sockets.Socket.Send%2A>メソッド、またはリモート デバイスからデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1196">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1197">UDP などのコネクションレスのプロトコルを使用している場合を呼び出す必要はありません<xref:System.Net.Sockets.Socket.Connect%2A>データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1197">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="12190-1198">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>と<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>リモート ホストを同期的に通信するためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1198">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="12190-1199">呼び出す場合<xref:System.Net.Sockets.Socket.Connect%2A>指定された既定以外のアドレスから受信する任意のデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1199">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="12190-1200">既定のリモート ホストが、ブロードキャスト アドレスを設定する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>、または<xref:System.Net.Sockets.Socket.Connect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1200">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1201">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1201">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1202">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1202">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="12190-1203"><xref:System.Net.Sockets.Socket.Connect%2A> 具体的に設定していない場合、メソッドはブロック、<xref:System.Net.Sockets.Socket.Blocking%2A>プロパティを`false`呼び出しの前に<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1203"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-1204">TCP とする無効化をブロックするように、接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>時接続を確立する必要があるためです。</span><span class="sxs-lookup"><span data-stu-id="12190-1204">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="12190-1205">既定のリモート ホストを確立するだけであるために、コネクションレスのプロトコルは例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="12190-1205">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="12190-1206">使用することができます<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="12190-1206">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="12190-1207">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1207">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="12190-1208">接続指向で、リモート ホスト接続が開始されて、エラーに WSAEWOULDBLOCK が返される場合は<xref:System.Net.Sockets.Socket>、まだ完了していませんが正常にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1208">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="12190-1209">使用して、<xref:System.Net.Sockets.Socket.Poll%2A>タイミングを決定するメソッド、<xref:System.Net.Sockets.Socket>が終了した接続です。</span><span class="sxs-lookup"><span data-stu-id="12190-1209">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1210">接続指向のプロトコルを使用しているしを呼び出さなかったかどうか<xref:System.Net.Sockets.Socket.Bind%2A>呼び出す前に<xref:System.Net.Sockets.Socket.Connect%2A>、基になるサービス プロバイダーは、ローカル ネットワーク アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-1210">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="12190-1211">コネクションレスのプロトコルを使用している場合、サービス プロバイダーを割り当てませんローカル ネットワーク アドレスとポート番号の送信を完了するか、操作が表示されるまでです。</span><span class="sxs-lookup"><span data-stu-id="12190-1211">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="12190-1212">既定のリモート ホストを変更する場合は、呼び出す<xref:System.Net.Sockets.Socket.Connect%2A>目的のエンドポイントを指定しています。</span><span class="sxs-lookup"><span data-stu-id="12190-1212">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1213">ソケットが以前切断された場合は、接続を復元する、このメソッドを使用できません。</span><span class="sxs-lookup"><span data-stu-id="12190-1213">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="12190-1214">非同期のいずれかを使用して<xref:System.Net.Sockets.Socket.BeginConnect%2A>を再接続する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-1214">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="12190-1215">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="12190-1215">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1216">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1216">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1217">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1217">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1218">次のコード例では、リモート エンドポイントに接続し、接続を検証します。</span><span class="sxs-lookup"><span data-stu-id="12190-1218">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#5)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1219">
            <paramref name="addresses" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1219">
              <paramref name="addresses" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-1220">ポート番号が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1220">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1221">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1221">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1222">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1222">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1223">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットで有効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1223">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1224">
            <paramref name="address" /> の長さが 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1224">The length of <paramref name="address" /> is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1225">
            <see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1225">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (host As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ host, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="socket.Connect (host, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">
          <span data-ttu-id="12190-1226">リモート ホストの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1226">The name of the remote host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="12190-1227">リモート ホストのポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1227">The port number of the remote host.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1228">リモート ホストへの接続を確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1228">Establishes a connection to a remote host.</span>
          </span>
          <span data-ttu-id="12190-1229">ホストはホスト名とポート番号で指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1229">The host is specified by a host name and a port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1230">TCP などの接続指向プロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは同期的に間のネットワーク接続を確立<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>と指定したリモート ホストします。</span><span class="sxs-lookup"><span data-stu-id="12190-1230">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote host.</span></span> <span data-ttu-id="12190-1231">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="12190-1231">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="12190-1232">呼び出した後<xref:System.Net.Sockets.Socket.Connect%2A>のリモート デバイスにデータを送信することができます、<xref:System.Net.Sockets.Socket.Send%2A>メソッド、またはリモート デバイスからデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1232">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1233">UDP などのコネクションレスのプロトコルを使用している場合を呼び出す必要はありません<xref:System.Net.Sockets.Socket.Connect%2A>データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1233">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="12190-1234">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>と<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>リモート ホストを同期的に通信するためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1234">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="12190-1235">呼び出す場合<xref:System.Net.Sockets.Socket.Connect%2A>指定された既定以外のアドレスから受信する任意のデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1235">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="12190-1236">既定のリモート ホストが、ブロードキャスト アドレスを設定する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>、または<xref:System.Net.Sockets.Socket.Connect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1236">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1237">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1237">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1238">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1238">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="12190-1239"><xref:System.Net.Sockets.Socket.Connect%2A> 具体的に設定していない場合、メソッドはブロック、<xref:System.Net.Sockets.Socket.Blocking%2A>プロパティを`false`呼び出しの前に<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1239"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-1240">TCP とする無効化をブロックするように、接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>がスローされます、<xref:System.Net.Sockets.SocketException>時接続を確立する必要があるためです。</span><span class="sxs-lookup"><span data-stu-id="12190-1240">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="12190-1241">既定のリモート ホストを確立するだけであるために、コネクションレスのプロトコルは例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="12190-1241">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="12190-1242">使用することができます<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="12190-1242">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="12190-1243">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1243">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="12190-1244">接続指向で、リモート ホスト接続が開始されて、エラーに WSAEWOULDBLOCK が返される場合は<xref:System.Net.Sockets.Socket>、まだ完了していませんが正常にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1244">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="12190-1245">使用して、<xref:System.Net.Sockets.Socket.Poll%2A>タイミングを決定するメソッド、<xref:System.Net.Sockets.Socket>が終了した接続です。</span><span class="sxs-lookup"><span data-stu-id="12190-1245">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
 <span data-ttu-id="12190-1246">IPv6 が有効になっている場合、<xref:System.Net.Sockets.Socket.Connect%28System.String%2CSystem.Int32%29>メソッドは両方とも IPv6 に解決されるホストに接続して IPv4 アドレス、IPv4 アドレスの前に最初に、IPv6 アドレスに接続試行します。</span><span class="sxs-lookup"><span data-stu-id="12190-1246">If IPv6 is enabled and the <xref:System.Net.Sockets.Socket.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="12190-1247">これには、ホストが、IPv6 アドレスでリッスンしていない場合、接続の確立に時間が遅延の影響があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1247">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1248">接続指向のプロトコルを使用しているしを呼び出さなかったかどうか<xref:System.Net.Sockets.Socket.Bind%2A>呼び出す前に<xref:System.Net.Sockets.Socket.Connect%2A>、基になるサービス プロバイダーは、ローカル ネットワーク アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-1248">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="12190-1249">コネクションレスのプロトコルを使用している場合、サービス プロバイダーを割り当てませんローカル ネットワーク アドレスとポート番号の送信を完了するか、操作が表示されるまでです。</span><span class="sxs-lookup"><span data-stu-id="12190-1249">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="12190-1250">既定のリモート ホストを変更する場合は、呼び出す<xref:System.Net.Sockets.Socket.Connect%2A>目的のエンドポイントを指定しています。</span><span class="sxs-lookup"><span data-stu-id="12190-1250">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1251">ソケットが以前切断された場合は、接続を復元する、このメソッドを使用できません。</span><span class="sxs-lookup"><span data-stu-id="12190-1251">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="12190-1252">非同期のいずれかを使用して<xref:System.Net.Sockets.Socket.BeginConnect%2A>を再接続する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-1252">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="12190-1253">これは、基になるプロバイダーの制限です。</span><span class="sxs-lookup"><span data-stu-id="12190-1253">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1254">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1254">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1255">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1255">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1256">次のコード例では、リモート エンドポイントに接続し、接続を検証します。</span><span class="sxs-lookup"><span data-stu-id="12190-1256">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#6)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1257">
            <paramref name="host" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1257">
              <paramref name="host" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-1258">ポート番号が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1258">The port number is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1259">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1259">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1260">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1260">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1261">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットで有効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1261">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1262">
            <see cref="T:System.Net.Sockets.Socket" /> は <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> を呼び出すことでリッスン状態になっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1262">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1263">リモート ホストに接続する非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1263">Begins an asynchronous request for a connection to a remote host.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public bool ConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ConnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ConnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-1264">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1264">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1265">リモート ホストに接続する非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1265">Begins an asynchronous request for a connection to a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1266">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1266">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-1267">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1267">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-1268">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1268">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-1269">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1269">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1270">接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドは、リモート ホストに接続するための非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-1270">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method starts an asynchronous request for a connection to the remote host.</span></span> <span data-ttu-id="12190-1271">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.ConnectAsync%2A>既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="12190-1271">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.ConnectAsync%2A> establishes a default remote host.</span></span>  
  
 <span data-ttu-id="12190-1272">完了の通知、イベント ハンドラーを実装するコールバック メソッドを作成する必要があります\<SocketAsyncEventArgs > を委任し、アタッチするためのコールバック、<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="12190-1272">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="12190-1273">呼び出し元を設定する必要があります、<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティを<xref:System.Net.IPEndPoint>リモート ホストに接続するのです。</span><span class="sxs-lookup"><span data-stu-id="12190-1273">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.</span></span>  
  
 <span data-ttu-id="12190-1274">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1274">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-1275">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-1275">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-1276">UDP などのコネクションレスのプロトコルを使用している場合を呼び出す必要はありません<xref:System.Net.Sockets.Socket.ConnectAsync%2A>データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1276">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.ConnectAsync%2A> before sending and receiving data.</span></span> <span data-ttu-id="12190-1277">使用することができます<xref:System.Net.Sockets.Socket.SendToAsync%2A>と<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>のリモート ホストと通信します。</span><span class="sxs-lookup"><span data-stu-id="12190-1277">You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host.</span></span> <span data-ttu-id="12190-1278">呼び出す場合<xref:System.Net.Sockets.Socket.ConnectAsync%2A>、指定した既定以外のアドレスから受信する任意のデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1278">If you do call <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="12190-1279">既定のリモート ホストを変更する場合は、呼び出し、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>目的のエンドポイントを使用してメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1279">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="12190-1280">ブロードキャスト アドレスに既定のリモート ホストを設定する場合は、最初に呼び出す必要があります<xref:System.Net.Sockets.Socket.SetSocketOption%2A>にブロードキャストを設定および`true`です。</span><span class="sxs-lookup"><span data-stu-id="12190-1280">If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="12190-1281">これが行われていない場合、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1281">If this is not done, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-1282">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが必要。</span><span class="sxs-lookup"><span data-stu-id="12190-1282">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-1283">必要に応じて、バッファー提供することが後に、ソケットにアトミックに送信されます、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドが成功します。</span><span class="sxs-lookup"><span data-stu-id="12190-1283">Optionally, a buffer may be provided which will atomically be sent on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="12190-1284">ここで、<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>プロパティが送信するデータを格納しているバッファーに設定する必要があります、<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>プロパティをバッファーから送信するデータのバイト数に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1284">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the number of bytes of data to send from the buffer.</span></span> <span data-ttu-id="12190-1285">接続が確立されると、このバッファーのデータが送信されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1285">Once a connection is established, this buffer of data is sent.</span></span>  
  
 <span data-ttu-id="12190-1286">接続指向のプロトコルを使用しているし、呼び出さないかどうか<xref:System.Net.Sockets.Socket.Bind%2A>呼び出す前に<xref:System.Net.Sockets.Socket.ConnectAsync%2A>、基になるサービス プロバイダーが最も適切なローカル ネットワーク アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-1286">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span>  
  
 <span data-ttu-id="12190-1287">コネクションレスのプロトコルを使用している場合、サービス プロバイダーを割り当てませんローカル ネットワークの IP アドレスとポート番号を呼び出すまで、<xref:System.Net.Sockets.Socket.SendAsync%2A>または<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1287">If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="12190-1288"><xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドでのスロー<xref:System.NotSupportedException>場合のアドレス ファミリ、<xref:System.Net.Sockets.Socket>と<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>同じアドレス ファミリではありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1288">The <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> are not the same address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1289">表示された場合、<xref:System.Net.Sockets.SocketException>このメソッドを呼び出したときに使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1289">If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1290">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1290">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1291">引数が有効ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1291">An argument is not valid.</span>
          </span>
          <span data-ttu-id="12190-1292">この例外は、複数のバッファーが指定されているときに、<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティが null 値ではない場合に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1292">This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1293">
            <paramref name="e" /> パラメーターおよび <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> を null 値にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1293">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1294">
            <see cref="T:System.Net.Sockets.Socket" /> がリッスンしているか、<paramref name="e" /> パラメーターで指定されている <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1294">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1295">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1295">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1296">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1296">Windows XP or later is required for this method.</span>
          </span>
          <span data-ttu-id="12190-1297">この例外は、ローカル エンドポイントと <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> が同じアドレス ファミリではない場合にも発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1297">This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1298">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1298">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-1299">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1299">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public static bool ConnectAsync (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType, System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ConnectAsync(valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType, class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ConnectAsync(System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType, System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member ConnectAsync : System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType * System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="System.Net.Sockets.Socket.ConnectAsync (socketType, protocolType, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="socketType">
          <span data-ttu-id="12190-1300">
            <see cref="T:System.Net.Sockets.SocketType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1300">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span>
          </span>
        </param>
        <param name="protocolType">
          <span data-ttu-id="12190-1301">
            <see cref="T:System.Net.Sockets.ProtocolType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1301">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="12190-1302">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1302">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1303">リモート ホストに接続する非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1303">Begins an asynchronous request for a connection to a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1304">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1304">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-1305">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1305">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-1306">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1306">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-1307">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1307">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1308">M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs) メソッドはへの非同期要求を開始、接続指向プロトコルを使用している場合、リモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="12190-1308">If you are using a connection-oriented protocol, the M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs) method starts an asynchronous request for a connection to the remote host.</span></span> <span data-ttu-id="12190-1309">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.ConnectAsync%2A>で指定された既定のリモート ホストを確立、`socketType`と`protocolType`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-1309">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.ConnectAsync%2A> establishes a default remote host specified by the `socketType` and `protocolType` parameters.</span></span>  
  
 <span data-ttu-id="12190-1310">完了の通知、イベント ハンドラーを実装するコールバック メソッドを作成する必要があります\<SocketAsyncEventArgs > を委任し、アタッチするためのコールバック、<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="12190-1310">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="12190-1311">呼び出し元を設定する必要があります、<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティを<xref:System.Net.IPEndPoint>リモート ホストに接続するのです。</span><span class="sxs-lookup"><span data-stu-id="12190-1311">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.</span></span>  
  
 <span data-ttu-id="12190-1312">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1312">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-1313">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-1313">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-1314">UDP などのコネクションレスのプロトコルを使用している場合を呼び出す必要はありません<xref:System.Net.Sockets.Socket.ConnectAsync%2A>データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1314">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.ConnectAsync%2A> before sending and receiving data.</span></span> <span data-ttu-id="12190-1315">使用することができます<xref:System.Net.Sockets.Socket.SendToAsync%2A>と<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>のリモート ホストと通信します。</span><span class="sxs-lookup"><span data-stu-id="12190-1315">You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host.</span></span> <span data-ttu-id="12190-1316">呼び出す場合<xref:System.Net.Sockets.Socket.ConnectAsync%2A>、指定した既定以外のアドレスから受信する任意のデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1316">If you do call <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="12190-1317">既定のリモート ホストを変更する場合は、呼び出し、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>目的のエンドポイントを使用してメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1317">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="12190-1318">ブロードキャスト アドレスに既定のリモート ホストを設定する場合は、最初に呼び出す必要があります<xref:System.Net.Sockets.Socket.SetSocketOption%2A>にブロードキャストを設定および`true`です。</span><span class="sxs-lookup"><span data-stu-id="12190-1318">If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="12190-1319">これが行われていない場合、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1319">If this is not done, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-1320">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが必要。</span><span class="sxs-lookup"><span data-stu-id="12190-1320">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-1321">必要に応じて、バッファー提供することが後に、ソケットにアトミックに送信されます、<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドが成功します。</span><span class="sxs-lookup"><span data-stu-id="12190-1321">Optionally, a buffer may be provided which will atomically be sent on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="12190-1322">ここで、<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>プロパティが送信するデータを格納しているバッファーに設定する必要があります、<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>プロパティをバッファーから送信するデータのバイト数に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1322">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the number of bytes of data to send from the buffer.</span></span> <span data-ttu-id="12190-1323">接続が確立されると、このバッファーのデータが送信されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1323">Once a connection is established, this buffer of data is sent.</span></span>  
  
 <span data-ttu-id="12190-1324">接続指向のプロトコルを使用しているし、呼び出さないかどうか<xref:System.Net.Sockets.Socket.Bind%2A>呼び出す前に<xref:System.Net.Sockets.Socket.ConnectAsync%2A>、基になるサービス プロバイダーが最も適切なローカル ネットワーク アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-1324">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span>  
  
 <span data-ttu-id="12190-1325">コネクションレスのプロトコルを使用している場合、サービス プロバイダーを割り当てませんローカル ネットワークの IP アドレスとポート番号を呼び出すまで、<xref:System.Net.Sockets.Socket.SendAsync%2A>または<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1325">If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="12190-1326"><xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドでのスロー<xref:System.NotSupportedException>場合のアドレス ファミリ、<xref:System.Net.Sockets.Socket>と<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>同じアドレス ファミリではありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1326">The <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> are not the same address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1327">表示された場合、<xref:System.Net.Sockets.SocketException>このメソッドを呼び出したときに使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1327">If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1328">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1328">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1329">引数が有効ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1329">An argument is not valid.</span>
          </span>
          <span data-ttu-id="12190-1330">この例外は、複数のバッファーが指定されているときに、<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティが null 値ではない場合に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1330">This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1331">
            <paramref name="e" /> パラメーターおよび <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> を null 値にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1331">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1332">
            <see cref="T:System.Net.Sockets.Socket" /> がリッスンしているか、<paramref name="e" /> パラメーターで指定されている <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1332">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1333">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1333">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1334">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1334">Windows XP or later is required for this method.</span>
          </span>
          <span data-ttu-id="12190-1335">この例外は、ローカル エンドポイントと <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> が同じアドレス ファミリではない場合にも発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1335">This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1336">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1336">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-1337">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1337">A caller higher in the call stack does not have permission for the requested operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Connected : bool" Usage="System.Net.Sockets.Socket.Connected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1338">最後に実行された <see cref="Overload:System.Net.Sockets.Socket.Send" /> 操作または <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 操作の時点で、<see cref="T:System.Net.Sockets.Socket" /> がリモート ホストに接続されていたかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1338">Gets a value that indicates whether a <see cref="T:System.Net.Sockets.Socket" /> is connected to a remote host as of the last <see cref="Overload:System.Net.Sockets.Socket.Send" /> or <see cref="Overload:System.Net.Sockets.Socket.Receive" /> operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1339">最後に実行された操作の時点で、<see cref="T:System.Net.Sockets.Socket" /> がリモート リソースに接続されていた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1339">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> was connected to a remote resource as of the most recent operation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1340">`Connected`プロパティ、接続の状態を取得、<xref:System.Net.Sockets.Socket>最後の I/O 操作の時点でします。</span><span class="sxs-lookup"><span data-stu-id="12190-1340">The `Connected` property gets the connection state of the <xref:System.Net.Sockets.Socket> as of the last I/O operation.</span></span> <span data-ttu-id="12190-1341">返す場合`false`、<xref:System.Net.Sockets.Socket>されたか、接続されていない、または接続されていません。</span><span class="sxs-lookup"><span data-stu-id="12190-1341">When it returns `false`, the <xref:System.Net.Sockets.Socket> was either never connected, or is no longer connected.</span></span>  
  
 <span data-ttu-id="12190-1342">値、<xref:System.Net.Sockets.Socket.Connected%2A>プロパティには、最新の操作の時点で接続の状態が反映されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1342">The value of the <xref:System.Net.Sockets.Socket.Connected%2A> property reflects the state of the connection as of the most recent operation.</span></span> <span data-ttu-id="12190-1343">接続の現在の状態を確認する必要がある場合は、非ブロッキングを持つ 0 バイトの Send 呼び出しをください。</span><span class="sxs-lookup"><span data-stu-id="12190-1343">If you need to determine the current state of the connection, make a nonblocking, zero-byte Send call.</span></span> <span data-ttu-id="12190-1344">呼び出しの成功または WAEWOULDBLOCK エラー コード (10035) がスローされる場合、は、ソケットがまだ接続しているです。それ以外の場合、ソケットが接続していません。</span><span class="sxs-lookup"><span data-stu-id="12190-1344">If the call returns successfully or throws a WAEWOULDBLOCK error code (10035), then the socket is still connected; otherwise, the socket is no longer connected.</span></span>  
  
 <span data-ttu-id="12190-1345">呼び出す場合<xref:System.Net.Sockets.Socket.Connect%2A>ユーザー データグラム プロトコル (UDP) ソケット上、<xref:System.Net.Sockets.Socket.Connected%2A>プロパティは常に返します`true`。 ただし、この操作では、UDP のコネクションレス型固有であるは変更されません。</span><span class="sxs-lookup"><span data-stu-id="12190-1345">If you call <xref:System.Net.Sockets.Socket.Connect%2A> on a User Datagram Protocol (UDP) socket, the <xref:System.Net.Sockets.Socket.Connected%2A> property always returns `true`; however, this action does not change the inherent connectionless nature of UDP.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1346">次のコード例は、チェックをリモート エンドポイントに接続する、<xref:System.Net.Sockets.Socket.Connected%2A>プロパティ、接続の現在の状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="12190-1346">The following code example connects to a remote endpoint, checks the <xref:System.Net.Sockets.Socket.Connected%2A> property, and checks the current state of the connection.</span></span>  
  
 [!code-cpp[Classic Socket.Connect Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Connect Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Connect Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Connect Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Connect Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Connect Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public void Disconnect (bool reuseSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Disconnect(bool reuseSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Disconnect(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disconnect (reuseSocket As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Disconnect(bool reuseSocket);" />
      <MemberSignature Language="F#" Value="member this.Disconnect : bool -&gt; unit" Usage="socket.Disconnect reuseSocket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reuseSocket">
          <span data-ttu-id="12190-1347">現在の接続の終了後、このソケットが再利用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1347">
              <see langword="true" /> if this socket can be reused after the current connection is closed; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1348">ソケット接続を閉じ、ソケットを再利用できるようにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1348">Closes the socket connection and allows reuse of the socket.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1349">接続指向のプロトコルを使用している場合は、ソケットを閉じるにこのメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-1349">If you are using a connection-oriented protocol, you can use this method to close the socket.</span></span> <span data-ttu-id="12190-1350">このメソッドが設定されている接続およびセットには、終了、<xref:System.Net.Sockets.Socket.Connected%2A>プロパティを`false`です。</span><span class="sxs-lookup"><span data-stu-id="12190-1350">This method ends the connection and sets the <xref:System.Net.Sockets.Socket.Connected%2A> property to `false`.</span></span> <span data-ttu-id="12190-1351">ただし場合、`reuseSocket`は`true`ソケットを再利用することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1351">However, if `reuseSocket` is `true`, you can reuse the socket.</span></span>  
  
 <span data-ttu-id="12190-1352">すべてのデータで送信および受信ソケットが閉じられる前にするを呼び出す必要があります<xref:System.Net.Sockets.Socket.Shutdown%2A>呼び出す前に、<xref:System.Net.Sockets.Socket.Disconnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1352">To ensure that all data is sent and received before the socket is closed, you should call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the <xref:System.Net.Sockets.Socket.Disconnect%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1353">呼び出す必要がある場合<xref:System.Net.Sockets.Socket.Disconnect%2A>最初呼び出さず<xref:System.Net.Sockets.Socket.Shutdown%2A>、設定することができます、 <xref:System.Net.Sockets.SocketOptionName.DontLinger> <xref:System.Net.Sockets.Socket>オプションを`false`データ キューは送信方向の送信にあることを確認する 0 以外のタイムアウト間隔を指定します。</span><span class="sxs-lookup"><span data-stu-id="12190-1353">If you need to call <xref:System.Net.Sockets.Socket.Disconnect%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can set the <xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket> option to `false` and specify a nonzero time-out interval to ensure that data queued for outgoing transmission is sent.</span></span> <span data-ttu-id="12190-1354"><xref:System.Net.Sockets.Socket.Disconnect%2A> データが送信されるまで、または指定したタイムアウトが経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1354"><xref:System.Net.Sockets.Socket.Disconnect%2A> then blocks until the data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="12190-1355">設定した場合<xref:System.Net.Sockets.SocketOptionName.DontLinger>に`false`0 のタイムアウト間隔を指定して<xref:System.Net.Sockets.Socket.Close%2A>の接続を解放し、送信キューに置かれたデータを自動的に破棄します。</span><span class="sxs-lookup"><span data-stu-id="12190-1355">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1356">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1356">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1357">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1357">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1358">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1358">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1359">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1359">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1360">次のコード例では、同期通信のソケットを作成し、リモート ホストにいくつかのデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-1360">The following code example creates a socket for synchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="12190-1361">呼び出して<xref:System.Net.Sockets.Socket.Shutdown%2A>を送信を停止し、受信アクティビティ、および<xref:System.Net.Sockets.Socket.Disconnect%2A>、ソケット接続を閉じます。</span><span class="sxs-lookup"><span data-stu-id="12190-1361">It then calls <xref:System.Net.Sockets.Socket.Shutdown%2A>, to stop the send and receive activity, and <xref:System.Net.Sockets.Socket.Disconnect%2A>, to close the socket connection.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#12)]
 [!code-csharp[Nclsocketenhancements#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="12190-1362">このメソッドは、Windows 2000 以前でのみサポートされます。それ以外の場合は、例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1362">This method requires Windows 2000 or earlier, or the exception will be thrown.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1363">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1363">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1364">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1364">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DisconnectAsync">
      <MemberSignature Language="C#" Value="public bool DisconnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DisconnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisconnectAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DisconnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.DisconnectAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.DisconnectAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-1365">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1365">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1366">リモート エンドポイントからの切断の非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1366">Begins an asynchronous request to disconnect from a remote endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1367">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1367">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-1368">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1368">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-1369">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1369">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-1370">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1370">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1371">接続指向のプロトコルを使用する場合の呼び出し、<xref:System.Net.Sockets.Socket.DisconnectAsync%2A>メソッドがリモート エンドポイントからの接続が切断を要求します。</span><span class="sxs-lookup"><span data-stu-id="12190-1371">When using a connection-oriented protocol, calling the <xref:System.Net.Sockets.Socket.DisconnectAsync%2A> method requests a disconnect from a remote endpoint.</span></span> <span data-ttu-id="12190-1372">設定した場合<xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=nameWithType>に`true`で、`e`パラメーター、ソケットを再利用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-1372">If you set <xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=nameWithType> to `true` in the `e` parameter, the socket can be reused.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1373">
            <paramref name="e" /> パラメーターを null 値にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1373">The <paramref name="e" /> parameter cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1374">
            <paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1374">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1375">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1375">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1376">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1376">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1377">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1377">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1378">
            <see cref="T:System.Net.Sockets.Socket" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1378">Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="socket.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12190-1379">
            <see cref="T:System.Net.Sockets.Socket" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1379">Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1380">`Dispose` を使い終わったら <xref:System.Net.Sockets.Socket> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="12190-1380">Call `Dispose` when you are finished using the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1381">`Dispose` メソッドによって、<xref:System.Net.Sockets.Socket> は使用不可の状態になります。</span><span class="sxs-lookup"><span data-stu-id="12190-1381">The `Dispose` method leaves the <xref:System.Net.Sockets.Socket> in an unusable state.</span></span> <span data-ttu-id="12190-1382">呼び出した後`Dispose`へのすべての参照を解放する必要があります、<xref:System.Net.Sockets.Socket>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Net.Sockets.Socket>占有されていた。</span><span class="sxs-lookup"><span data-stu-id="12190-1382">After calling `Dispose`, you must release all references to the <xref:System.Net.Sockets.Socket> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.Socket> was occupying.</span></span>  
  
 <span data-ttu-id="12190-1383">詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1383">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1384">`Dispose` への最後の参照を解放する前に、必ず <xref:System.Net.Sockets.Socket> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="12190-1384">Always call `Dispose` before you release your last reference to the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1385">そうしないと、ガベージ コレクターが <xref:System.Net.Sockets.Socket> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="12190-1385">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.Socket> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="socket.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="12190-1386">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1386">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1387">ph x="1" /&amp;gt; が使用しているアンマネージド リソースを解放します。オプションでマネージド リソースも破棄します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1387">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally disposes of the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1388">このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1388">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="12190-1389">`Dispose()` プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="12190-1389">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="12190-1390"><xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`'éý'`false`です。</span><span class="sxs-lookup"><span data-stu-id="12190-1390"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="12190-1391">ph x="1" /&gt; パラメーターが `true` の場合、このメソッドは、この <xref:System.Net.Sockets.Socket> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="12190-1391">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.Socket> references.</span></span> <span data-ttu-id="12190-1392">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="12190-1392">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1393">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1393">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1394">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1394">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="12190-1395">
            <para>
              <see langword="Dispose" /> 複数回呼び出す他のオブジェクトから。<see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。実装する方法の詳細についての<see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />、[Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) を実装を参照してください。 します。詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください [アンマネージ Resources](~/docs/standard/garbage-collection/unmanaged.md) をクリーンアップし、[Finalize メソッドをオーバーライドする] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1395">
              <para>
                <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.Socket.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1396">
            <see cref="T:System.Net.Sockets.Socket" /> でインターネット プロトコル (IP) データグラムの断片化を許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を、取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1396">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows Internet Protocol (IP) datagrams to be fragmented.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1397">
            <see cref="T:System.Net.Sockets.Socket" /> でデータグラムの断片化を許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1397">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows datagram fragmentation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="12190-1398">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1398">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1399">データグラムでは、そのサイズが、最大転送単位 (MTU) の伝送媒体を超えたときに断片化が必要です。</span><span class="sxs-lookup"><span data-stu-id="12190-1399">Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.</span></span> <span data-ttu-id="12190-1400">データグラムは、送信ホスト (すべてのインターネット プロトコル バージョン) または中間ルーター (インターネット プロトコル バージョン 4 のみ) で断片化している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1400">Datagrams may be fragmented by the sending host (all Internet Protocol versions) or an intermediate router (Internet Protocol Version 4 only).</span></span> <span data-ttu-id="12190-1401">場合は、データグラムを断片化している必要があります、および<xref:System.Net.Sockets.Socket.DontFragment%2A>オプションが設定されている、データグラム破棄され、インターネット制御メッセージ プロトコル (ICMP) エラー メッセージが、データグラムの送信者に返されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1401">If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</span></span>  
  
 <span data-ttu-id="12190-1402">伝送制御プロトコル (TCP) ソケットにこのプロパティを設定する効果はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1402">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1403">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.DontFragment%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1403">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1404">このプロパティは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ファミリまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットに対してだけ設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1404">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1405">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1405">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1406">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1406">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DualMode">
      <MemberSignature Language="C#" Value="public bool DualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DualMode" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.DualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DualMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DualMode : bool with get, set" Usage="System.Net.Sockets.Socket.DualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1407">
            <see cref="T:System.Net.Sockets.Socket" /> が IPv4 と IPv6 の両方に使用されるデュアル モード ソケットであるかどうか指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1407">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> is a dual-mode socket used for both IPv4 and IPv6.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1408">
            <see cref="T:System.Net.Sockets.Socket" /> がデュアルモードのソケットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1408">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> is a  dual-mode socket; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="12190-1409">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1409">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DuplicateAndClose">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketInformation DuplicateAndClose (int targetProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Net.Sockets.SocketInformation DuplicateAndClose(int32 targetProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DuplicateAndClose (targetProcessId As Integer) As SocketInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::SocketInformation DuplicateAndClose(int targetProcessId);" />
      <MemberSignature Language="F#" Value="member this.DuplicateAndClose : int -&gt; System.Net.Sockets.SocketInformation" Usage="socket.DuplicateAndClose targetProcessId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoLimitation("We do not support passing sockets across processes, we merely allow this API to pass the socket across AppDomains")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetProcessId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="targetProcessId">
          <span data-ttu-id="12190-1410">ソケット参照の複製が作成されるターゲット プロセスの ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1410">The ID of the target process where a duplicate of the socket reference is created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1411">ターゲット プロセスのソケット参照を複製してこのプロセスのソケットを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1411">Duplicates the socket reference for the target process, and closes the socket for this process.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1412">ターゲット プロセスに渡されるソケット参照。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1412">The socket reference to be passed to the target process.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1413">ターゲット プロセスを使用する必要があります<xref:System.Net.Sockets.Socket.%23ctor%2A>重複するソケットのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="12190-1413">The target process should use <xref:System.Net.Sockets.Socket.%23ctor%2A> to create the duplicate socket instance.</span></span>  
  
 <span data-ttu-id="12190-1414">呼び出す場合は、<xref:System.Net.Sockets.Socket.%23ctor%2A>複数回の各呼び出しの引数と同じバイト配列を持つコンス トラクターは、複数の管理を作成する、<xref:System.Net.Sockets.Socket>と基になるソケットの同じインスタンスです。</span><span class="sxs-lookup"><span data-stu-id="12190-1414">If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket> instances with the same underlying socket.</span></span> <span data-ttu-id="12190-1415">この方法はお勧めします。</span><span class="sxs-lookup"><span data-stu-id="12190-1415">This practice is strongly discouraged.</span></span>  
  
 <span data-ttu-id="12190-1416">ソケットを作成するプロセスは、非同期メソッドを使用している場合 (<xref:System.Net.Sockets.Socket.BeginReceive%2A>または<xref:System.Net.Sockets.Socket.BeginSend%2A>)、プロセスを設定する必要があります最初、<xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A>プロパティをソケットは、を引き起こす可能性があります、作成したプロセスの完了ポートにバインドがtrueをそれ以外の場合<xref:System.ArgumentNullException>ターゲット プロセスでスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1416">If the process creating the socket uses asynchronous methods (<xref:System.Net.Sockets.Socket.BeginReceive%2A> or <xref:System.Net.Sockets.Socket.BeginSend%2A>), the process must first set the <xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A> property to true; otherwise, the socket is bound to the completion port of the creating process, which may cause an <xref:System.ArgumentNullException> to be thrown on the target process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1417">
            <paramref name="targetProcessID" /> が有効なプロセス ID ではありません。または、ソケット参照の複製に失敗しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1417">
              <paramref name="targetProcessID" /> is not a valid process id.  -or-  Duplication of the socket reference failed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.Socket.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1418">
            <see cref="T:System.Net.Sockets.Socket" /> でブロードキャスト パケットの送受信を許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1418">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> can send or receive broadcast packets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1419">
            <see cref="T:System.Net.Sockets.Socket" /> でブロードキャスト パケットを許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1419">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows broadcast packets; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="12190-1420">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1420">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1421">ブロードキャストが、特定のサブネットに制限されており、ユーザー データグラム プロトコル (UDP) を使用する必要があります。255.255.255.255 以外にパケットを送信することによってインターネット プロトコル バージョン 4 では、ローカル サブネットにブロードキャストことができます。または、ホストの部分を設定するすべてのビットをインターネット プロトコル (IP) アドレスの一部でネットワーク向けのブロードキャスト アドレスを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1421">Broadcasting is limited to a specific subnet, and must use User Datagram Protocol (UDP.) For Internet Protocol version 4, you can broadcast to your local subnet by sending a packet to 255.255.255.255; or you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.</span></span> <span data-ttu-id="12190-1422">たとえば、お客様の IP アドレスは 192.168.1.40 (255.255.255.0--ネットマスク付きのクラス C アドレスは、ネットワーク部分は、最初の 3 つのオクテットでは、およびホスト部分は、最後のオクテット、)、ブロードキャスト アドレスは 192.168.1.255 します。</span><span class="sxs-lookup"><span data-stu-id="12190-1422">For example, if your IP address is 192.168.1.40 (a Class C address, with a netmask of 255.255.255.0 -- the network portion is the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</span></span>  
  
 <span data-ttu-id="12190-1423">伝送制御プロトコル (TCP) ソケットにこのプロパティを設定する効果はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1423">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1424">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.EnableBroadcast%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1424">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.EnableBroadcast%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1425">このオプションは、データグラム ソケットに対してだけ有効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1425">This option is valid for a datagram socket only.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1426">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1426">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndAccept">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1427">受信接続の試行を非同期的に受け入れます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1427">Asynchronously accepts an incoming connection attempt.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (out byte[] buffer, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept([out] unsigned int8[]&amp; buffer, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (ByRef buffer As Byte(), asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer, IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAccept :  * IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept (buffer, asyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]&amp;" RefType="out" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-1428">転送されたバイト数を格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1428">An array of type <see cref="T:System.Byte" /> that contains the bytes transferred.</span>
          </span>
        </param>
        <param name="asyncResult">
          <span data-ttu-id="12190-1429">この非同期操作のステータス情報だけではなく、任意のユーザー定義のデータも格納する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1429">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation as well as any user defined data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1430">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.Socket" /> オブジェクトを作成してリモート ホスト通信を処理します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1430">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> object to handle remote host communication.</span>
          </span>
          <span data-ttu-id="12190-1431">このメソッドは、転送される初期データを格納するバッファーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1431">This method returns a buffer that contains the initial data transferred.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1432">リモート ホストとの通信を処理する <see cref="T:System.Net.Sockets.Socket" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1432">A <see cref="T:System.Net.Sockets.Socket" /> object to handle communication with the remote host.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1433"><xref:System.Net.Sockets.Socket.EndAccept%2A> 呼び出しを完了<xref:System.Net.Sockets.Socket.BeginAccept%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1433"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="12190-1434">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginAccept%2A>、によって呼び出されるコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1434">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1435">このコールバック メソッドは、個別のスレッドで実行され、後にシステムによって呼び出される、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1435">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span>  
  
 <span data-ttu-id="12190-1436">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、`asyncResult`を取得するパラメーター、<xref:System.Net.Sockets.Socket>になる接続の試行が行われています。</span><span class="sxs-lookup"><span data-stu-id="12190-1436">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="12190-1437">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドが、接続試行を正常に完了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1437">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span> <span data-ttu-id="12190-1438">`buffer`このオーバー ロードのパラメーターへの呼び出しで受け取ったデータを格納して<xref:System.Net.Sockets.Socket.BeginAccept%2A>と`bytesTransferred`パラメーターには呼び出しで転送されたバイト数が含まれています。</span><span class="sxs-lookup"><span data-stu-id="12190-1438">The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.</span></span>  
  
 <span data-ttu-id="12190-1439"><xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドは、接続が保留状態になるまで、ブロック、着信接続のキューにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1439">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="12190-1440"><xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドは、受信接続を許可し、新しい返します<xref:System.Net.Sockets.Socket>を使用して、データを送信し、リモート ホストからデータを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1440">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1441">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1441">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1442">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1442">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1443">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1443">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1444">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1444">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1445">次のコード例では<xref:System.Net.Sockets.Socket.BeginAccept%2A>作成、ソケットを接続して、最初の 10 バイトのデータをそのまま使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-1445">The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data.</span></span> <span data-ttu-id="12190-1446">コールバック デリゲート呼び出し<xref:System.Net.Sockets.Socket.EndAccept%2A>非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1446">The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request.</span></span> <span data-ttu-id="12190-1447">送信バイト数と、データが返されます、`buffer`と`bytesTransferred`このメソッドのパラメーター、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1447">The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1448">このメソッドには Windows NT が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1448">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1449">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1449">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1450">
            <paramref name="asyncResult" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1450">
              <paramref name="asyncResult" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1451">
            <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1451">
              <paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1452">
            <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> メソッドは既に呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1452">
              <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1453">
            <see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1453">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (asyncResult As IAsyncResult) As Socket" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (result As IAsyncResult) As Socket" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndAccept : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="12190-1454">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.Socket" /> を作成してリモート ホスト通信を処理します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1454">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1455">リモート ホストとの通信を処理する <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1455">A <see cref="T:System.Net.Sockets.Socket" /> to handle communication with the remote host.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1456"><xref:System.Net.Sockets.Socket.EndAccept%2A> 呼び出しを完了<xref:System.Net.Sockets.Socket.BeginAccept%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1456"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="12190-1457">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginAccept%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1457">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1458">このコールバック メソッドは、個別のスレッドで実行され、後にシステムによって呼び出される、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1458">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span> <span data-ttu-id="12190-1459">これに同意する必要があります、`asyncResult`パラメーターから返される、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1459">It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1460">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、`asyncResult`を取得するパラメーター、<xref:System.Net.Sockets.Socket>になる接続の試行が行われています。</span><span class="sxs-lookup"><span data-stu-id="12190-1460">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="12190-1461">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドが、接続試行を正常に完了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1461">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span>  
  
 <span data-ttu-id="12190-1462"><xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドは、接続が保留状態になるまで、ブロック、着信接続のキューにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1462">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="12190-1463"><xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドは、受信接続を許可し、新しい返します<xref:System.Net.Sockets.Socket>を使用して、データを送信し、リモート ホストからデータを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1463">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1464">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1464">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1465">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1465">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1466">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1466">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1467">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1467">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1468">次のコード例は、非同期要求を終了し、新たに作成<xref:System.Net.Sockets.Socket>受信接続要求を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1468">The following code example ends an asynchronous request and creates a new <xref:System.Net.Sockets.Socket> to accept an incoming connection request.</span></span> <span data-ttu-id="12190-1469">完全な例には、ソケットと非同期通信には、次を参照してください。[ソケットのコード例](~/docs/framework/network-programming/socket-code-examples.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1469">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Async_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Async_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1470">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1470">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1471">
            <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1471">
              <paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1472">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1472">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-1473">詳細については、次の「解説」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1473">See the Remarks section for more information.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1474">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1474">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1475">
            <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> メソッドは既に呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1475">
              <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1476">このメソッドには Windows NT が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1476">Windows NT is required for this method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept([out] unsigned int8[]&amp; buffer, [out] int32&amp; bytesTransferred, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (ByRef buffer As Byte(), ByRef bytesTransferred As Integer, asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer, [Runtime::InteropServices::Out] int % bytesTransferred, IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAccept :  *  * IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="socket.EndAccept (buffer, bytesTransferred, asyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]&amp;" RefType="out" />
        <Parameter Name="bytesTransferred" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-1477">転送されたバイト数を格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1477">An array of type <see cref="T:System.Byte" /> that contains the bytes transferred.</span>
          </span>
        </param>
        <param name="bytesTransferred">
          <span data-ttu-id="12190-1478">転送されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1478">The number of bytes transferred.</span>
          </span>
        </param>
        <param name="asyncResult">
          <span data-ttu-id="12190-1479">この非同期操作のステータス情報だけではなく、任意のユーザー定義のデータも格納する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1479">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation as well as any user defined data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1480">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.Socket" /> オブジェクトを作成してリモート ホスト通信を処理します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1480">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> object to handle remote host communication.</span>
          </span>
          <span data-ttu-id="12190-1481">このメソッドは、初期データと、転送されたバイト数を格納するバッファーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1481">This method returns a buffer that contains the initial data and the number of bytes transferred.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1482">リモート ホストとの通信を処理する <see cref="T:System.Net.Sockets.Socket" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1482">A <see cref="T:System.Net.Sockets.Socket" /> object to handle communication with the remote host.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1483"><xref:System.Net.Sockets.Socket.EndAccept%2A> 呼び出しを完了<xref:System.Net.Sockets.Socket.BeginAccept%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1483"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="12190-1484">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginAccept%2A>、によって呼び出されるコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1484">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1485">このコールバック メソッドは、個別のスレッドで実行され、後にシステムによって呼び出される、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1485">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span> <span data-ttu-id="12190-1486">これに同意する必要があります、`asyncResult`パラメーターから返される、<xref:System.Net.Sockets.Socket.BeginAccept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1486">It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1487">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、`asyncResult`を取得するパラメーター、<xref:System.Net.Sockets.Socket>になる接続の試行が行われています。</span><span class="sxs-lookup"><span data-stu-id="12190-1487">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="12190-1488">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドが、接続試行を正常に完了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1488">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span> <span data-ttu-id="12190-1489">`buffer`このオーバー ロードのパラメーターへの呼び出しで受け取ったデータを格納して<xref:System.Net.Sockets.Socket.BeginAccept%2A>と`bytesTransferred`パラメーターには呼び出しで転送されたバイト数が含まれています。</span><span class="sxs-lookup"><span data-stu-id="12190-1489">The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.</span></span>  
  
 <span data-ttu-id="12190-1490"><xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドは、接続が保留状態になるまで、ブロック、着信接続のキューにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1490">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="12190-1491"><xref:System.Net.Sockets.Socket.EndAccept%2A>メソッドは、受信接続を許可し、新しい返します<xref:System.Net.Sockets.Socket>を使用して、データを送信し、リモート ホストからデータを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1491">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1492">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1492">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1493">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1493">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1494">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1494">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1495">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1495">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1496">次のコード例では<xref:System.Net.Sockets.Socket.BeginAccept%2A>作成、ソケットを接続して、最初の 10 バイトのデータをそのまま使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-1496">The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data.</span></span> <span data-ttu-id="12190-1497">コールバック デリゲート呼び出し<xref:System.Net.Sockets.Socket.EndAccept%2A>非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1497">The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request.</span></span> <span data-ttu-id="12190-1498">送信バイト数と、データが返されます、`buffer`と`bytesTransferred`このメソッドのパラメーター、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1498">The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1499">このメソッドには Windows NT が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1499">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1500">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1500">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1501">
            <paramref name="asyncResult" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1501">
              <paramref name="asyncResult" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1502">
            <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1502">
              <paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1503">
            <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> メソッドは既に呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1503">
              <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1504">
            <see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1504">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (result As IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndConnect : IAsyncResult -&gt; unit" Usage="socket.EndConnect result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="12190-1505">保留中の非同期接続要求を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1505">Ends a pending asynchronous connection request.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1506"><xref:System.Net.Sockets.Socket.EndConnect%2A> 非同期リモート ホスト接続要求を完了したブロッキング メソッド内で起動、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1506"><xref:System.Net.Sockets.Socket.EndConnect%2A> is a blocking method that completes the asynchronous remote host connection request started in the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1507">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginConnect%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1507">Before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1508">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<xref:System.Net.Sockets.Socket.BeginConnect%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1508">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginConnect%2A> returns.</span></span> <span data-ttu-id="12190-1509">コールバック メソッドに同意する必要があります、<xref:System.IAsyncResult>によって返される、<xref:System.Net.Sockets.Socket.BeginConnect%2A>メソッドのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="12190-1509">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="12190-1510">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>を取得するパラメーター、<xref:System.Net.Sockets.Socket>になる接続の試行が行われています。</span><span class="sxs-lookup"><span data-stu-id="12190-1510">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="12190-1511">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndConnect%2A>メソッドが、接続試行を正常に完了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1511">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndConnect%2A> method to successfully complete the connection attempt.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1512">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1512">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1513">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1513">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1514">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1514">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1515">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1515">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1516">次のコード例では、非同期接続の試行を終了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1516">The following code example ends the asynchronous connection attempt.</span></span> <span data-ttu-id="12190-1517">完全な例には、ソケットと非同期通信には、次を参照してください。[ソケットのコード例](~/docs/framework/network-programming/socket-code-examples.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1517">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Async_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Async_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1518">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1518">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1519">
            <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1519">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1520">
            <see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" /> は、非同期接続のために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1520">
              <see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" /> was previously called for the asynchronous connection.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1521">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1521">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1522">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1522">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="EndDisconnect">
      <MemberSignature Language="C#" Value="public void EndDisconnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndDisconnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndDisconnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndDisconnect(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndDisconnect : IAsyncResult -&gt; unit" Usage="socket.EndDisconnect asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="12190-1523">この非同期操作のステータス情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1523">An <see cref="T:System.IAsyncResult" /> object that stores state information and any user-defined data for this asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1524">保留中の非同期切断要求を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1524">Ends a pending asynchronous disconnect request.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1525"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> 呼び出しを完了<xref:System.Net.Sockets.Socket.BeginDisconnect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1525"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginDisconnect%2A>.</span></span> <span data-ttu-id="12190-1526"><xref:System.Net.Sockets.Socket.EndDisconnect%2A>メソッドは、切断が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1526">The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the disconnect completes.</span></span> <span data-ttu-id="12190-1527">非同期操作については、MSDN ライブラリの非同期プログラミングの概要のトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-1527">For information about asynchronous operations, see the Asynchronous Programming Overview topic in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1528">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1528">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1529">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1529">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1530">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1530">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1531">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1531">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1532">次のコード例では、非同期通信のソケットを作成し、リモート ホストにデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-1532">The following code example creates a socket for asynchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="12190-1533">データが送信されると、<xref:System.Net.Sockets.Socket.Shutdown%2A>送信を停止し、受信アクティビティのために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1533">When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity.</span></span> <span data-ttu-id="12190-1534"><xref:System.Net.Sockets.Socket.BeginDisconnect%2A>切断要求を開始すると呼びます。</span><span class="sxs-lookup"><span data-stu-id="12190-1534">Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request.</span></span> <span data-ttu-id="12190-1535">コールバック デリゲート呼び出し<xref:System.Net.Sockets.Socket.EndDisconnect%2A>非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1535">The callback delegate calls <xref:System.Net.Sockets.Socket.EndDisconnect%2A> to end the asynchronous request.</span></span> <span data-ttu-id="12190-1536">要求が完了したら、<xref:System.Net.Sockets.Socket.Connected%2A>プロパティは、ソケットが切断されているかどうかをテストするクエリを実行します。</span><span class="sxs-lookup"><span data-stu-id="12190-1536">When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#11)]
 [!code-csharp[Nclsocketenhancements#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1537">Windows 2000 以前のオペレーティング システムです。このメソッドを使用するには、Windows XP が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1537">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1538">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1538">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1539">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1539">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1540">
            <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1540">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1541">
            <see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" /> は、非同期接続のために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1541">
              <see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" /> was previously called for the asynchronous connection.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1542">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1542">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.WebException">
          <span data-ttu-id="12190-1543">切断要求がタイムアウトしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1543">The disconnect request has timed out.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndReceive">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1544">保留中の非同期読み取りを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1544">Ends a pending asynchronous read.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult -&gt; int" Usage="socket.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="12190-1545">保留中の非同期読み取りを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1545">Ends a pending asynchronous read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1546">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1546">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1547"><xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドで開始された非同期の読み取り操作が完了すると、<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1547">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1548">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginReceive%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1548">Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1549">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<xref:System.Net.Sockets.Socket.BeginReceive%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1549">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="12190-1550">コールバック メソッドに同意する必要があります、<xref:System.IAsyncResult>によって返される、<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="12190-1550">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="12190-1551">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>に渡される状態オブジェクトを取得する、<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1551">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="12190-1552">受信側の抽出<xref:System.Net.Sockets.Socket>この状態オブジェクトから。</span><span class="sxs-lookup"><span data-stu-id="12190-1552">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="12190-1553">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドを正常に読み取り操作を完了して、読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1553">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="12190-1554"><xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドはデータが読み取られるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1554">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available.</span></span> <span data-ttu-id="12190-1555">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndReceive%2A>はネットワークの着信バッファーで使用できる最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="12190-1555">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="12190-1556">接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドは現状有姿で指定したバイトの数まで使用可能な多くのデータを読み取る、`size`のパラメーター、<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1556">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="12190-1557">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1557">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-1558">受信したデータを取得する呼び出し、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、 <xref:System.IAsyncResult>、し、結果の状態オブジェクトに含まれているバッファーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="12190-1558">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.</span></span>  
  
 <span data-ttu-id="12190-1559">[キャンセル] を保留中<xref:System.Net.Sockets.Socket.BeginReceive%2A>を呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1559">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1560">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1560">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1561">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1561">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1562">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-1562">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-1563">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1563">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1564">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1564">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1565">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1565">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1566">次のコード例では、保留中の非同期読み取りを終了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1566">The following code example ends a pending asynchronous read.</span></span> <span data-ttu-id="12190-1567">完全な例には、ソケットと非同期通信には、次を参照してください。[ソケットのコード例](~/docs/framework/network-programming/socket-code-examples.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1567">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Async_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Async_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1568">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1568">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1569">
            <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1569">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1570">
            <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> が、非同期の読み取りのために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1570">
              <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1571">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1571">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1572">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1572">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult asyncResult, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef errorCode As SocketError) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult *  -&gt; int" Usage="socket.EndReceive (asyncResult, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="12190-1573">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1573">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-1574">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1574">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1575">保留中の非同期読み取りを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1575">Ends a pending asynchronous read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1576">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1576">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1577"><xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドで開始された非同期の読み取り操作が完了すると、<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1577">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1578">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginReceive%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1578">Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1579">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<xref:System.Net.Sockets.Socket.BeginReceive%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1579">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="12190-1580">コールバック メソッドに同意する必要があります、<xref:System.IAsyncResult>によって返される、<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="12190-1580">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="12190-1581">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>に渡される状態オブジェクトを取得する、<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1581">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="12190-1582">受信側の抽出<xref:System.Net.Sockets.Socket>この状態オブジェクトから。</span><span class="sxs-lookup"><span data-stu-id="12190-1582">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="12190-1583">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドを正常に読み取り操作を完了して、読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1583">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="12190-1584"><xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドはデータが読み取られるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1584">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available.</span></span> <span data-ttu-id="12190-1585">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndReceive%2A>はネットワークの着信バッファーで使用できる最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="12190-1585">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="12190-1586">接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドは現状有姿で指定したバイトの数まで使用可能な多くのデータを読み取る、`size`のパラメーター、<xref:System.Net.Sockets.Socket.BeginReceive%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1586">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="12190-1587">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.EndReceive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1587">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-1588">受信したデータを取得する呼び出し、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、 <xref:System.IAsyncResult>、し、結果の状態オブジェクトに含まれているバッファーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="12190-1588">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1589">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1589">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1590">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1590">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1591">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-1591">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-1592">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1592">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1593">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1593">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1594">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1594">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1595">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1595">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1596">
            <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1596">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1597">
            <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> が、非同期の読み取りのために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1597">
              <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1598">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1598">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1599">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1599">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFrom">
      <MemberSignature Language="C#" Value="public int EndReceiveFrom (IAsyncResult asyncResult, ref System.Net.EndPoint endPoint);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFrom(class System.IAsyncResult asyncResult, class System.Net.EndPoint&amp; endPoint) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFrom (asyncResult As IAsyncResult, ByRef endPoint As EndPoint) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFrom(IAsyncResult ^ asyncResult, System::Net::EndPoint ^ % endPoint);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public int EndReceiveFrom (IAsyncResult result, ref System.Net.EndPoint end_point);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFrom(class System.IAsyncResult result, class System.Net.EndPoint&amp; end_point) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFrom (result As IAsyncResult, ByRef end_point As EndPoint) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFrom(IAsyncResult ^ result, System::Net::EndPoint ^ % end_point);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndReceiveFrom : IAsyncResult *  -&gt; int" Usage="socket.EndReceiveFrom (result, end_point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint&amp;" RefType="ref" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="end_point" Type="System.Net.EndPoint&amp;" RefType="ref" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <param name="endPoint">To be added.</param>
        <param name="end_point">To be added.</param>
        <summary>
          <span data-ttu-id="12190-1600">特定のエンドポイントからの、保留中の非同期読み込みを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1600">Ends a pending asynchronous read from a specific endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1601">正常に完了した場合は、受信したバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1601">If successful, the number of bytes received.</span>
          </span>
          <span data-ttu-id="12190-1602">失敗した場合は、0 を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1602">If unsuccessful, returns 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1603"><xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>メソッドで開始された非同期の読み取り操作が完了すると、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1603">The <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1604">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1604">Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1605">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1605">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> returns.</span></span> <span data-ttu-id="12190-1606">コールバック メソッドに同意する必要があります、<xref:System.IAsyncResult>によって返される、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="12190-1606">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="12190-1607">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>に渡される状態オブジェクトを取得する、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1607">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-1608">受信側の抽出<xref:System.Net.Sockets.Socket>この状態オブジェクトから。</span><span class="sxs-lookup"><span data-stu-id="12190-1608">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="12190-1609">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>メソッドを正常に読み取り操作を完了して、読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1609">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="12190-1610"><xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>メソッドはデータが読み取られるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1610">The <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="12190-1611">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>はネットワークの着信バッファーで使用できる最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="12190-1611">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="12190-1612">接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>メソッドは現状有姿で指定したバイトの数まで使用可能な多くのデータを読み取る、`size`のパラメーター、<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1612">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-1613">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1613">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span> <span data-ttu-id="12190-1614">受信したデータを取得する呼び出し、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>オブジェクト、および結果の状態オブジェクトに含まれているバッファーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="12190-1614">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> object, and extract the buffer contained in the resulting state object.</span></span> <span data-ttu-id="12190-1615">元のホストを識別するための抽出、<xref:System.Net.EndPoint>にキャストし、<xref:System.Net.IPEndPoint>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1615">To identify the originating host, extract the <xref:System.Net.EndPoint> and cast it to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="12190-1616">使用して、 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> IP アドレスを取得するメソッドと<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>ポート番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="12190-1616">Use the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to obtain the IP address and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to obtain the port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1617">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1617">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1618">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1618">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1619">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1619">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1620">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1620">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1621">次のコード例は、特定の保留中の非同期読み込みを終了<xref:System.Net.EndPoint>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1621">The following code example ends a pending asynchronous read from a specific <xref:System.Net.EndPoint>.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#10)]
 [!code-csharp[Socket_Async_Send_Receive#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#10)]
 [!code-vb[Socket_Async_Send_Receive#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1622">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1622">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1623">
            <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1623">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1624">
            <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> が、非同期の読み取りのために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1624">
              <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1625">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1625">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1626">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1626">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public int EndReceiveMessageFrom (IAsyncResult asyncResult, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint endPoint, out System.Net.Sockets.IPPacketInformation ipPacketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveMessageFrom(class System.IAsyncResult asyncResult, valuetype System.Net.Sockets.SocketFlags&amp; socketFlags, class System.Net.EndPoint&amp; endPoint, [out] valuetype System.Net.Sockets.IPPacketInformation&amp; ipPacketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveMessageFrom (asyncResult As IAsyncResult, ByRef socketFlags As SocketFlags, ByRef endPoint As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveMessageFrom(IAsyncResult ^ asyncResult, System::Net::Sockets::SocketFlags % socketFlags, System::Net::EndPoint ^ % endPoint, [Runtime::InteropServices::Out] System::Net::Sockets::IPPacketInformation % ipPacketInformation);" />
      <MemberSignature Language="F#" Value="member this.EndReceiveMessageFrom : IAsyncResult *  *  *  -&gt; int" Usage="socket.EndReceiveMessageFrom (asyncResult, socketFlags, endPoint, ipPacketInformation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags&amp;" RefType="ref" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="ipPacketInformation" Type="System.Net.Sockets.IPPacketInformation&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="12190-1627">この非同期操作の状態情報およびユーザー定義データを格納する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1627">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-1628">受信パケットの <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1628">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values for the received packet.</span>
          </span>
        </param>
        <param name="endPoint">
          <span data-ttu-id="12190-1629">コピー元 <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1629">The source <see cref="T:System.Net.EndPoint" />.</span>
          </span>
        </param>
        <param name="ipPacketInformation">
          <span data-ttu-id="12190-1630">受信パケットの <see cref="T:System.Net.IPAddress" /> とインターフェイス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1630">The <see cref="T:System.Net.IPAddress" /> and interface of the received packet.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1631">特定のエンドポイントからの、保留中の非同期読み込みを終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1631">Ends a pending asynchronous read from a specific endpoint.</span>
          </span>
          <span data-ttu-id="12190-1632">また、このメソッドは、<see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> よりもパケットに関するより多くの情報を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1632">This method also reveals more information about the packet than <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1633">正常に完了した場合は、受信したバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1633">If successful, the number of bytes received.</span>
          </span>
          <span data-ttu-id="12190-1634">失敗した場合は、0 を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1634">If unsuccessful, returns 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1635">操作が完了していない場合、このメソッドはそれまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1635">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="12190-1636">この操作を同期的に実行するを使用して、<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1636">To perform this operation synchronously, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="12190-1637">調べる`ipPacketInformation`かどうか、ユニキャスト、マルチキャスト、またはブロードキャスト アドレスを使用してデータグラムが送信されたかを知る必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1637">Examine `ipPacketInformation` if you need to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1638">
            <paramref name="asyncResult" /> が <see langword="null" /> です。または、<paramref name="endPoint" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1638">
              <paramref name="asyncResult" /> is <see langword="null" />  -or-  <paramref name="endPoint" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1639">
            <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1639">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1640">
            <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> が、非同期の読み取りのために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1640">
              <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1641">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1641">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1642">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1642">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1643">保留中の非同期送信を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1643">Ends a pending asynchronous send.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="socket.EndSend result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="12190-1644">保留中の非同期送信を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1644">Ends a pending asynchronous send.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1645">正常に終了した場合は <see cref="T:System.Net.Sockets.Socket" /> に送信したバイト数。それ以外の場合は無効な <see cref="T:System.Net.Sockets.Socket" /> エラー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1645">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1646"><xref:System.Net.Sockets.Socket.EndSend%2A> 開始された非同期送信操作が完了した<xref:System.Net.Sockets.Socket.BeginSend%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1646"><xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.</span></span>  
  
 <span data-ttu-id="12190-1647">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginSend%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1647">Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1648">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<xref:System.Net.Sockets.Socket.BeginSend%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1648">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns.</span></span> <span data-ttu-id="12190-1649">コールバック メソッドに同意する必要があります、<xref:System.IAsyncResult>によって返される、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="12190-1649">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="12190-1650">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>送信を取得するパラメーター<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1650">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1651">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndSend%2A>を正常に送信操作を完了し、送信されたバイト数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="12190-1651">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="12190-1652">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndSend%2A>データグラムが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1652">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="12190-1653">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndSend%2A>バッファーの一部が送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1653">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent.</span></span> <span data-ttu-id="12190-1654">戻り値の場合<xref:System.Net.Sockets.Socket.EndSend%2A>バッファーができなかったことを示します呼び出す完全に送信される、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを再度、未送信のデータを保持するバッファーを変更します。</span><span class="sxs-lookup"><span data-stu-id="12190-1654">If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.</span></span>  
  
 <span data-ttu-id="12190-1655">送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1655">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-1656">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1656">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-1657">正常に完了する、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-1657">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1658">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1658">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1659">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1659">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1660">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-1660">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-1661">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1661">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1662">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-1662">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-1663">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1663">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1664">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1664">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1665">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1665">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1666">次のコード例では、保留中の非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1666">The following code example ends a pending asynchronous send.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#6)]
 [!code-csharp[Socket_Async_Send_Receive#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#6)]
 [!code-vb[Socket_Async_Send_Receive#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1667">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1667">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1668">
            <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1668">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1669">
            <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> が、非同期送信のために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1669">
              <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous send.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1670">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1670">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1671">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1671">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.NoDelay" />
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult, ByRef errorCode As SocketError) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult *  -&gt; int" Usage="socket.EndSend (asyncResult, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="12190-1672">この非同期操作の状態情報を格納する <see cref="T:System.IAsyncResult" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1672">An <see cref="T:System.IAsyncResult" /> that stores state information for this asynchronous operation.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-1673">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1673">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1674">保留中の非同期送信を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1674">Ends a pending asynchronous send.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1675">正常に終了した場合は <see cref="T:System.Net.Sockets.Socket" /> に送信したバイト数。それ以外の場合は無効な <see cref="T:System.Net.Sockets.Socket" /> エラー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1675">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1676"><xref:System.Net.Sockets.Socket.EndSend%2A> 開始された非同期送信操作が完了した<xref:System.Net.Sockets.Socket.BeginSend%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1676"><xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.</span></span>  
  
 <span data-ttu-id="12190-1677">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginSend%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1677">Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1678">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<xref:System.Net.Sockets.Socket.BeginSend%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1678">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns.</span></span> <span data-ttu-id="12190-1679">コールバック メソッドに同意する必要があります、<xref:System.IAsyncResult>によって返される、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="12190-1679">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="12190-1680">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>送信を取得するパラメーター<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1680">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1681">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndSend%2A>を正常に送信操作を完了し、送信されたバイト数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="12190-1681">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="12190-1682">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndSend%2A>データグラムが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1682">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="12190-1683">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndSend%2A>バッファーの一部が送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1683">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent.</span></span> <span data-ttu-id="12190-1684">戻り値の場合<xref:System.Net.Sockets.Socket.EndSend%2A>バッファーができなかったことを示します呼び出す完全に送信される、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドを再度、未送信のデータを保持するバッファーを変更します。</span><span class="sxs-lookup"><span data-stu-id="12190-1684">If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.</span></span>  
  
 <span data-ttu-id="12190-1685">送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1685">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-1686">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1686">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-1687">正常に完了する、<xref:System.Net.Sockets.Socket.BeginSend%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-1687">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1688">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1688">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1689">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1689">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1690">そのスレッドが終了する場合は、特定のスレッドによって開始されたすべての I/O が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="12190-1690">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="12190-1691">操作が完了する前に、スレッドが終了した場合、保留中の非同期操作が失敗することができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1691">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1692">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-1692">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-1693">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1693">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1694">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1694">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1695">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1695">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1696">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1696">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1697">
            <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1697">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1698">
            <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> が、非同期送信のために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1698">
              <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous send.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1699">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1699">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1700">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1700">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.NoDelay" />
      </Docs>
    </Member>
    <Member MemberName="EndSendFile">
      <MemberSignature Language="C#" Value="public void EndSendFile (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendFile(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendFile (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendFile(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSendFile : IAsyncResult -&gt; unit" Usage="socket.EndSendFile asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="12190-1701">この非同期操作の状態情報を格納する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1701">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1702">ファイルの保留中の非同期送信を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1702">Ends a pending asynchronous send of a file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1703"><xref:System.Net.Sockets.Socket.EndSendFile%2A> 開始された非同期送信操作が完了した<xref:System.Net.Sockets.Socket.BeginSendFile%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1703"><xref:System.Net.Sockets.Socket.EndSendFile%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendFile%2A>.</span></span>  
  
 <span data-ttu-id="12190-1704">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginSendFile%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1704">Before calling <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, you must create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1705">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<xref:System.Net.Sockets.Socket.BeginSendFile%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1705">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSendFile%2A> returns.</span></span> <span data-ttu-id="12190-1706">コールバック メソッドに同意する必要があります、<xref:System.IAsyncResult>によって返されるオブジェクト、<xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="12190-1706">The callback method must accept the <xref:System.IAsyncResult> object returned by the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="12190-1707">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>送信を取得するパラメーター<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1707">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1708">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndSendFile%2A>メソッドが正常に送信操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1708">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method to successfully complete the send operation.</span></span>  
  
 <span data-ttu-id="12190-1709">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndSendFile%2A>データグラムを送信するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1709">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSendFile%2A> blocks until the datagram is sent.</span></span> <span data-ttu-id="12190-1710">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndSendFile%2A>ファイル全体を送信するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-1710">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSendFile%2A> blocks until the entire file is sent.</span></span> <span data-ttu-id="12190-1711">送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1711">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-1712">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1712">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-1713">正常に完了する、<xref:System.Net.Sockets.Socket.BeginSendFile%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-1713">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1714">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1714">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1715">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1715">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1716">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1716">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1717">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1717">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1718">次のコード例を作成し、非同期通信のソケットを接続し、リモート ホストにファイルの"text.txt"を非同期的に送信を開始します。</span><span class="sxs-lookup"><span data-stu-id="12190-1718">The following code example creates and connects a socket for asynchronous communication and begins sending the file "text.txt" asynchronously to the remote host.</span></span> <span data-ttu-id="12190-1719">コールバック デリゲート呼び出し<xref:System.Net.Sockets.Socket.EndSendFile%2A>転送を完了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1719">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#9)]
 [!code-csharp[NCLSocketEnhancements#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1720">このメソッドには Windows NT が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1720">Windows NT is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1721">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1721">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1722">
            <paramref name="asyncResult" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1722">
              <paramref name="asyncResult" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1723">
            <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1723">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1724">
            <see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> が、非同期の <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> のために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1724">
              <see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> was previously called for the asynchronous <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1725">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1725">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-1726">以下の解説を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1726">See remarks section below.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendTo">
      <MemberSignature Language="C#" Value="public int EndSendTo (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSendTo(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netcore-2.0;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendTo (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSendTo(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public int EndSendTo (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSendTo(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" FrameworkAlternate="netframework-4.7;netcore-2.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7.1;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendTo (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSendTo(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.EndSendTo : IAsyncResult -&gt; int" Usage="socket.EndSendTo result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netcore-2.1;netframework-4.7.2" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <summary>
          <span data-ttu-id="12190-1727">特定の場所への、保留中の非同期送信を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1727">Ends a pending asynchronous send to a specific location.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1728">正常に完了した場合は送信したバイト数。それ以外の場合は無効な <see cref="T:System.Net.Sockets.Socket" /> エラー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1728">If successful, the number of bytes sent; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1729"><xref:System.Net.Sockets.Socket.EndSendTo%2A> 開始された非同期送信操作が完了した<xref:System.Net.Sockets.Socket.BeginSendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1729"><xref:System.Net.Sockets.Socket.EndSendTo%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span>  
  
 <span data-ttu-id="12190-1730">呼び出しの前に<xref:System.Net.Sockets.Socket.BeginSendTo%2A>を実装するコールバック メソッドを作成する必要があります、<xref:System.AsyncCallback>を委任します。</span><span class="sxs-lookup"><span data-stu-id="12190-1730">Before calling <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="12190-1731">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<xref:System.Net.Sockets.Socket.BeginReceive%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1731">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="12190-1732">コールバック メソッドに同意する必要があります、<xref:System.IAsyncResult>によって返される、<xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドのパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="12190-1732">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="12190-1733">コールバック メソッド内で、<xref:System.IAsyncResult.AsyncState%2A>のメソッド、<xref:System.IAsyncResult>送信を取得するパラメーター<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1733">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1734">取得した後に、 <xref:System.Net.Sockets.Socket>、呼び出すことができます、<xref:System.Net.Sockets.Socket.EndSendTo%2A>を正常に送信操作を完了し、送信されたバイト数を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="12190-1734">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="12190-1735">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndSendTo%2A>データグラムが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1735">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="12190-1736">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.EndSendTo%2A>要求されたバイト数を送信するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1736">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSendTo%2A> will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="12190-1737">送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1737">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-1738">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1738">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-1739">正常に完了する、<xref:System.Net.Sockets.Socket.BeginSendTo%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-1739">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1740">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1740">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1741">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1741">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1742">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1742">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1743">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1743">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1744">次のコード例では、特定の場所への非同期送信を終了します。</span><span class="sxs-lookup"><span data-stu-id="12190-1744">The following code example ends an asynchronous send to a specific location.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#9)]
 [!code-csharp[Socket_Async_Send_Receive#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#9)]
 [!code-vb[Socket_Async_Send_Receive#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-1745">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1745">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-1746">
            <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1746">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1747">
            <see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" /> が、非同期送信のために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1747">
              <see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" /> was previously called for the asynchronous send.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1748">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1748">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1749">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1749">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.Socket.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1750">
            <see cref="T:System.Net.Sockets.Socket" /> で 1 つのプロセスだけにポートのバインドを許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1750">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows only one process to bind to a port.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1751">
            <see cref="T:System.Net.Sockets.Socket" /> で 1 つのソケットだけに特定のポートのバインドを許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1751">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows only one socket to bind to a specific port; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="12190-1752">既定値は<see langword="true" />Windows Server 2003 および Windows XP Service Pack 2、および<see langword="false" />他のすべてのバージョン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1752">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2, and <see langword="false" /> for all other versions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1753">場合<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>は`false`、複数のソケットを使用することができます、<xref:System.Net.Sockets.Socket.Bind%2A>特定のポートにバインドするメソッド以外の場合は、ソケットの 1 つのみただしがポートに送信されるネットワーク トラフィックの操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="12190-1753">If <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> is `false`, multiple sockets can use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a specific port; however only one of the sockets can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="12190-1754">複数のソケットが使用を試みると、<xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29>より特定の IP アドレスを持つ 1 つはそのポートに送信されるネットワーク トラフィックを処理し、特定のポートにバインドするメソッド。</span><span class="sxs-lookup"><span data-stu-id="12190-1754">If more than one socket attempts to use the <xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29> method to bind to a particular port, then the one with the more specific IP address will handle the network traffic sent to that port.</span></span>  
  
 <span data-ttu-id="12190-1755">場合<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>は`true`、最初に使用する、<xref:System.Net.Sockets.Socket.Bind%2A>インターネット プロトコル (IP) アドレスに関係なく、特定のポートにバインドしようとするメソッドは成功しますの後続のすべての使用、<xref:System.Net.Sockets.Socket.Bind%2A>そのポートにバインドしようとするメソッドが。元のバインドされたソケットが破棄されるまで失敗します。</span><span class="sxs-lookup"><span data-stu-id="12190-1755">If <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> is `true`, the first use of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to a particular port, regardless of Internet Protocol (IP) address, will succeed; all subsequent uses of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to that port will fail until the original bound socket is destroyed.</span></span>  
  
 <span data-ttu-id="12190-1756">このプロパティは、前に設定する必要があります<xref:System.Net.Sockets.Socket.Bind%2A>が呼び出された場合、<xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1756">This property must be set before <xref:System.Net.Sockets.Socket.Bind%2A> is called; otherwise an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1757">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1757">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1758">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1758">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1759">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1759">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1760">この <see cref="T:System.Net.Sockets.Socket" /> に対して <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> が呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1760">
              <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> has been called for this <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Socket ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Socket ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="socket.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12190-1761">
            <see cref="T:System.Net.Sockets.Socket" /> クラスによって使用されていたリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1761">Frees resources used by the <see cref="T:System.Net.Sockets.Socket" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1762"><xref:System.Net.Sockets.Socket>クラスのファイナライザーの呼び出し、<xref:System.Net.Sockets.Socket.Close%2A>を終了するメソッド、<xref:System.Net.Sockets.Socket>に関連付けられているリソースを解放し、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1762">The <xref:System.Net.Sockets.Socket> class finalizer calls the <xref:System.Net.Sockets.Socket.Close%2A> method to close the <xref:System.Net.Sockets.Socket> and free resources associated with the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSocketOption">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1763">
            <see cref="T:System.Net.Sockets.Socket" /> オプションの値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1763">Returns the value of a <see cref="T:System.Net.Sockets.Socket" /> option.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public object GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName -&gt; obj" Usage="socket.GetSocketOption (optionLevel, optionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="12190-1764">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1764">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="12190-1765">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1765">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1766">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションの値をオブジェクトとして返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1766">Returns the value of a specified <see cref="T:System.Net.Sockets.Socket" /> option, represented as an object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1767">オプションの値を表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1767">An object that represents the value of the option.</span>
          </span>
          <span data-ttu-id="12190-1768">
            <paramref name="optionName" /> パラメーターを <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> に設定した場合、戻り値は <see cref="T:System.Net.Sockets.LingerOption" /> クラスのインスタンスです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1768">When the <paramref name="optionName" /> parameter is set to <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> the return value is an instance of the <see cref="T:System.Net.Sockets.LingerOption" /> class.</span>
          </span>
          <span data-ttu-id="12190-1769">
            <paramref name="optionName" /> を <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> または <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" /> に設定した場合、戻り値は <see cref="T:System.Net.Sockets.MulticastOption" /> クラスのインスタンスです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1769">When <paramref name="optionName" /> is set to <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> or <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" />, the return value is an instance of the <see cref="T:System.Net.Sockets.MulticastOption" /> class.</span>
          </span>
          <span data-ttu-id="12190-1770">
            <paramref name="optionName" /> が他の値の場合、戻り値は整数です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1770">When <paramref name="optionName" /> is any other value, the return value is an integer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1771"><xref:System.Net.Sockets.Socket> オプションは、現在の動作を決定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1771"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1772">このオーバー ロードを使用して取得する、 <xref:System.Net.Sockets.SocketOptionName.Linger>、 <xref:System.Net.Sockets.SocketOptionName.AddMembership>、および<xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket>オプション。</span><span class="sxs-lookup"><span data-stu-id="12190-1772">Use this overload to get the <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, and <xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket> options.</span></span> <span data-ttu-id="12190-1773"><xref:System.Net.Sockets.SocketOptionName.Linger>オプションを使用して<xref:System.Net.Sockets.Socket>の`optionLevel`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-1773">For the <xref:System.Net.Sockets.SocketOptionName.Linger> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter.</span></span> <span data-ttu-id="12190-1774"><xref:System.Net.Sockets.SocketOptionName.AddMembership>と<xref:System.Net.Sockets.SocketOptionName.DropMembership>を使用して<xref:System.Net.Sockets.SocketOptionLevel.IP>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1774">For <xref:System.Net.Sockets.SocketOptionName.AddMembership> and <xref:System.Net.Sockets.SocketOptionName.DropMembership>, use <xref:System.Net.Sockets.SocketOptionLevel.IP>.</span></span> <span data-ttu-id="12190-1775">上記のオプションのいずれかの値の設定を使用する場合、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1775">If you want to set the value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1776">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1776">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1777">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1777">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1778">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1778">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1779">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1779">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1780">次のコード例の取得、<xref:System.Net.Sockets.LingerOption>と<xref:System.Net.Sockets.Socket.Send%2A>タイムアウト値し、それらをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="12190-1780">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1781">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1781">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-1782">または、<paramref name="optionName" /> が、サポートされていない値 <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" /> に設定されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1782">-or-  <paramref name="optionName" /> was set to the unsupported value <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1783">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1783">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public void GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, unsigned int8[] optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, cli::array &lt;System::Byte&gt; ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * byte[] -&gt; unit" Usage="socket.GetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="12190-1784">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1784">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="12190-1785">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1785">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="12190-1786">オプション設定を受信する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1786">An array of type <see cref="T:System.Byte" /> that is to receive the option setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1787">指定した <see cref="T:System.Net.Sockets.Socket" /> オプション設定をバイト配列として返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1787">Returns the specified <see cref="T:System.Net.Sockets.Socket" /> option setting, represented as a byte array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1788"><xref:System.Net.Sockets.Socket> オプションは、現在の動作を決定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1788"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1789">このメソッドの正常完了時に、によって指定された配列、`optionValue`パラメーターには、指定した値が含まれています。<xref:System.Net.Sockets.Socket>オプション。</span><span class="sxs-lookup"><span data-stu-id="12190-1789">Upon successful completion of this method, the array specified by the `optionValue` parameter contains the value of the specified <xref:System.Net.Sockets.Socket> option.</span></span>  
  
 <span data-ttu-id="12190-1790">ときの長さ、`optionValue`配列は、指定した値を格納するために必要なバイト数よりも小さい<xref:System.Net.Sockets.Socket>オプション、<xref:System.Net.Sockets.Socket.GetSocketOption%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1790">When the length of the `optionValue` array is smaller than the number of bytes required to store the value of the specified <xref:System.Net.Sockets.Socket> option, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1791">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1791">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1792">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1792">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="12190-1793">このオーバー ロードを使用して、任意のソケットのブール値または整数値で表されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1793">Use this overload for any sockets that are represented by Boolean values or integers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1794">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1794">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1795">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1795">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1796">次のコード例の取得、<xref:System.Net.Sockets.LingerOption>と<xref:System.Net.Sockets.Socket.Send%2A>タイムアウト値し、それらをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="12190-1796">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1797">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1797">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-1798">\- または -  .NET Compact Framework アプリケーションでは、Windows CE の既定のバッファー領域は 32768 バイトに設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1798">\- or -  In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes.</span>
          </span>
          <span data-ttu-id="12190-1799">ソケットごとのバッファー領域は、<see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" /> を呼び出して変更できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1799">You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1800">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1800">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public byte[] GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, int32 optionLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionLength As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionLength);" />
      <MemberSignature Language="F#" Value="member this.GetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * int -&gt; byte[]" Usage="socket.GetSocketOption (optionLevel, optionName, optionLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="12190-1801">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1801">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="12190-1802">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1802">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionLength">
          <span data-ttu-id="12190-1803">予期される戻り値のバイト単位の長さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1803">The length, in bytes, of the expected return value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1804">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションの値を配列で返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1804">Returns the value of the specified <see cref="T:System.Net.Sockets.Socket" /> option in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1805">ソケット オプションの値を格納している <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1805">An array of type <see cref="T:System.Byte" /> that contains the value of the socket option.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1806">`optionLength`パラメーターが返されるバイト配列の最大サイズを設定します。</span><span class="sxs-lookup"><span data-stu-id="12190-1806">The `optionLength` parameter sets the maximum size of the returned byte array.</span></span> <span data-ttu-id="12190-1807">オプションの値には、以下のバイト数が必要とする場合、配列にはそれだけ多くのバイト数。</span><span class="sxs-lookup"><span data-stu-id="12190-1807">If the option value requires fewer bytes, the array will contain only that many bytes.</span></span> <span data-ttu-id="12190-1808">オプションの値より多くの容量が必要な場合<xref:System.Net.Sockets.Socket.GetSocketOption%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1808">If the option value requires more bytes, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1809">このオーバー ロードを使用して、任意のソケットのブール値または整数値で表されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1809">Use this overload for any sockets that are represented by Boolean values or integers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1810">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1810">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1811">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1811">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1812">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1812">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1813">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1813">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1814">次のコード例の取得、<xref:System.Net.Sockets.LingerOption>と<xref:System.Net.Sockets.Socket.Send%2A>タイムアウト値し、それらをコンソールに表示します。</span><span class="sxs-lookup"><span data-stu-id="12190-1814">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1815">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1815">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-1816">\- または -  .NET Compact Framework アプリケーションでは、Windows CE の既定のバッファー領域は 32768 バイトに設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1816">\- or -  In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes.</span>
          </span>
          <span data-ttu-id="12190-1817">ソケットごとのバッファー領域は、<see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" /> を呼び出して変更できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1817">You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1818">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1818">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Net.Sockets.Socket.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1819">
            <see cref="T:System.Net.Sockets.Socket" /> のオペレーティング システム ハンドルを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1819">Gets the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1820">
            <see cref="T:System.IntPtr" /> のオペレーティング システム ハンドルを表す <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1820">An <see cref="T:System.IntPtr" /> that represents the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IOControl">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1821">
            <see cref="T:System.Net.Sockets.Socket" /> の下位操作モードを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1821">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IOControl">
      <MemberSignature Language="C#" Value="public int IOControl (int ioControlCode, byte[] optionInValue, byte[] optionOutValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IOControl(int32 ioControlCode, unsigned int8[] optionInValue, unsigned int8[] optionOutValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IOControl (ioControlCode As Integer, optionInValue As Byte(), optionOutValue As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IOControl(int ioControlCode, cli::array &lt;System::Byte&gt; ^ optionInValue, cli::array &lt;System::Byte&gt; ^ optionOutValue);" />
      <MemberSignature Language="F#" Value="member this.IOControl : int * byte[] * byte[] -&gt; int" Usage="socket.IOControl (ioControlCode, optionInValue, optionOutValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioControlCode" Type="System.Int32" />
        <Parameter Name="optionInValue" Type="System.Byte[]" />
        <Parameter Name="optionOutValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="ioControlCode">
          <span data-ttu-id="12190-1822">実行する操作の制御コードを指定する <see cref="T:System.Int32" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1822">An <see cref="T:System.Int32" /> value that specifies the control code of the operation to perform.</span>
          </span>
        </param>
        <param name="optionInValue">
          <span data-ttu-id="12190-1823">操作に必要な入力データを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1823">A <see cref="T:System.Byte" /> array that contains the input data required by the operation.</span>
          </span>
        </param>
        <param name="optionOutValue">
          <span data-ttu-id="12190-1824">操作によって返された出力データを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1824">A <see cref="T:System.Byte" /> array that contains the output data returned by the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1825">数値制御コードを使用して、<see cref="T:System.Net.Sockets.Socket" /> の下位操作モードを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1825">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" /> using numerical control codes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1826">
            <paramref name="optionOutValue" /> パラメーターのバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1826">The number of bytes in the <paramref name="optionOutValue" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1827"><xref:System.Net.Sockets.Socket.IOControl%2A>メソッドは、オペレーティング システムへの低レベルのアクセスを提供<xref:System.Net.Sockets.Socket>の現在のインスタンスの基になる、<xref:System.Net.Sockets.Socket>クラスです。</span><span class="sxs-lookup"><span data-stu-id="12190-1827">The <xref:System.Net.Sockets.Socket.IOControl%2A> method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class.</span></span> <span data-ttu-id="12190-1828">詳細については、MSDN ライブラリの WSAIoctl ドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-1828">For more information, see the WSAIoctl documentation in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1829">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1829">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1830">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1830">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1831">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1831">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1832">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1832">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1833">次のコード例では、FIONREAD と使用可能なプロパティの結果を比較します。</span><span class="sxs-lookup"><span data-stu-id="12190-1833">The following code example compares the results of FIONREAD and the Available property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl/CPP/iocontrolserver.cpp#1)]
 [!code-csharp[NCLSocketIoControl#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl/CS/iocontrolserver.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1834">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1834">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1835">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1835">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1836">
            <see cref="P:System.Net.Sockets.Socket.Blocking" /> プロパティを使用せずに、ブロッキング モードを変更しようとしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1836">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking" /> property.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-1837">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1837">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="12190-1838">アンマネージ コードを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1838">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="12190-1839">
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1839">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IOControl">
      <MemberSignature Language="C#" Value="public int IOControl (System.Net.Sockets.IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IOControl(valuetype System.Net.Sockets.IOControlCode ioControlCode, unsigned int8[] optionInValue, unsigned int8[] optionOutValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IOControl(System::Net::Sockets::IOControlCode ioControlCode, cli::array &lt;System::Byte&gt; ^ optionInValue, cli::array &lt;System::Byte&gt; ^ optionOutValue);" />
      <MemberSignature Language="F#" Value="member this.IOControl : System.Net.Sockets.IOControlCode * byte[] * byte[] -&gt; int" Usage="socket.IOControl (ioControlCode, optionInValue, optionOutValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioControlCode" Type="System.Net.Sockets.IOControlCode" />
        <Parameter Name="optionInValue" Type="System.Byte[]" />
        <Parameter Name="optionOutValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="ioControlCode">
          <span data-ttu-id="12190-1840">実行する操作の制御コードを指定する <see cref="T:System.Net.Sockets.IOControlCode" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1840">A <see cref="T:System.Net.Sockets.IOControlCode" /> value that specifies the control code of the operation to perform.</span>
          </span>
        </param>
        <param name="optionInValue">
          <span data-ttu-id="12190-1841">操作に必要な入力データを格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1841">An array of type <see cref="T:System.Byte" /> that contains the input data required by the operation.</span>
          </span>
        </param>
        <param name="optionOutValue">
          <span data-ttu-id="12190-1842">操作によって返された出力データを格納する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1842">An array of type <see cref="T:System.Byte" /> that contains the output data returned by the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1843">
            <see cref="T:System.Net.Sockets.IOControlCode" /> 列挙型を使用して制御コードを指定し、<see cref="T:System.Net.Sockets.Socket" /> の下位操作モードを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1843">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" /> using the <see cref="T:System.Net.Sockets.IOControlCode" /> enumeration to specify control codes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1844">
            <paramref name="optionOutValue" /> パラメーターのバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1844">The number of bytes in the <paramref name="optionOutValue" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1845">このメソッドは、オペレーティング システムへの低レベルのアクセスを提供<xref:System.Net.Sockets.Socket>の現在のインスタンスの基になる、<xref:System.Net.Sockets.Socket>クラスです。</span><span class="sxs-lookup"><span data-stu-id="12190-1845">This method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class.</span></span> <span data-ttu-id="12190-1846">詳細については、MSDN ライブラリの WSAIoctl ドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-1846">For more, see the WSAIoctl documentation in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1847">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1847">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1848">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1848">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1849">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1849">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1850">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1850">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1851">次のコード例は、呼び出し元の結果を比較して<xref:System.Net.Sockets.Socket.IOControl%2A>で<xref:System.Net.Sockets.IOControlCode.DataToRead>と<xref:System.Net.Sockets.Socket.Available%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1851">The following code example compares the results of calling <xref:System.Net.Sockets.Socket.IOControl%2A> with <xref:System.Net.Sockets.IOControlCode.DataToRead> and the <xref:System.Net.Sockets.Socket.Available%2A> property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl1/CPP/iocontrolcode.cpp#1)]
 [!code-csharp[NCLSocketIoControl1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl1/CS/iocontrolcode.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1852">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1852">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1853">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1853">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-1854">
            <see cref="P:System.Net.Sockets.Socket.Blocking" /> プロパティを使用せずに、ブロッキング モードを変更しようとしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1854">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking" /> property.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="12190-1855">アンマネージ コードを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1855">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="12190-1856">
            <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1856">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="IsBound">
      <MemberSignature Language="C#" Value="public bool IsBound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBound" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.IsBound" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBound { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBound : bool" Usage="System.Net.Sockets.Socket.IsBound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1857">
            <see cref="T:System.Net.Sockets.Socket" /> が特定のローカル ポートにバインドされているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1857">Gets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is bound to a specific local port.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1858">
            <see cref="T:System.Net.Sockets.Socket" /> がローカル ポートにバインドされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1858">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> is bound to a local port; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1859">呼び出すことによって明示的にバインドされている場合、ソケットは、ローカル ポートにバインドされたと見なされます、<xref:System.Net.Sockets.Socket.Bind%2A>メソッド、またはのようなメンバーを呼び出すことによって暗黙的にバインドされた<xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.SendTo%2A>、または<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>、一時的なローカル ポート (空きポートより大きい値を使用します。1024、オペレーティング システムによって選択されている。)サーバーを使用して、<xref:System.Net.Sockets.Socket.Bind%2A>クライアントがそれらに接続できるように、既知のポートにバインドするメソッド。</span><span class="sxs-lookup"><span data-stu-id="12190-1859">A socket is considered bound to a local port if it is explicitly bound by calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, or implicitly bound by calling members like <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, which use an ephemeral local port (a free port greater than 1024, selected by the operating system.) Servers use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a well-known port so that clients may connect to them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1860">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.IsBound%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1860">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.IsBound%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LingerState : System.Net.Sockets.LingerOption with get, set" Usage="System.Net.Sockets.Socket.LingerState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1861">
            <see cref="T:System.Net.Sockets.Socket" /> で、すべての保留中のデータを送信しようとするときにソケットを遅延して閉じるかどうかを指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1861">Gets or sets a value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> will delay closing a socket in an attempt to send all pending data.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1862">ソケットを閉じているときの待機方法を指定する <see cref="T:System.Net.Sockets.LingerOption" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1862">A <see cref="T:System.Net.Sockets.LingerOption" /> that specifies how to linger while closing a socket.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1863"><xref:System.Net.Sockets.Socket.LingerState%2A>プロパティ方法を変更<xref:System.Net.Sockets.Socket.Close%2A>メソッドは動作します。</span><span class="sxs-lookup"><span data-stu-id="12190-1863">The <xref:System.Net.Sockets.Socket.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves.</span></span> <span data-ttu-id="12190-1864">このプロパティ セットが Winsock によってする接続をリセットすることができます、条件を変更する場合。</span><span class="sxs-lookup"><span data-stu-id="12190-1864">This property when set modifies the conditions under which the connection can be reset by Winsock.</span></span> <span data-ttu-id="12190-1865">接続のリセットに IP プロトコルの動作に基づいて引き続き発生します。</span><span class="sxs-lookup"><span data-stu-id="12190-1865">Connection resets can still occur based on the IP protocol behavior.</span></span>  
  
 <span data-ttu-id="12190-1866">このプロパティは、接続指向の接続を開いたまま呼び出しの後に時間の長さを制御<xref:System.Net.Sockets.Socket.Close%2A>データが送信するのには残ります。</span><span class="sxs-lookup"><span data-stu-id="12190-1866">This property controls the length of time that a connection-oriented connection will remain open after a call to <xref:System.Net.Sockets.Socket.Close%2A> when data remains to be sent.</span></span>  
  
 <span data-ttu-id="12190-1867">呼び出すと、ピアにデータを送信する方法は、このデータが出力方向のネットワーク バッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1867">When you call methods to send data to a peer, this data is placed in the outgoing network buffer.</span></span> <span data-ttu-id="12190-1868">このプロパティは、前に、リモート ホストにこのデータが送信されるように使用できる、<xref:System.Net.Sockets.TcpClient.Close%2A>メソッドは、接続を切断します。</span><span class="sxs-lookup"><span data-stu-id="12190-1868">This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.</span></span>  
  
 <span data-ttu-id="12190-1869">接続を維持できるように、作成、 <xref:System.Net.Sockets.LingerOption> 、目的の値を含むをインスタンス化し、設定、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティをこのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1869">To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.Socket.LingerState%2A> property to this instance.</span></span>  
  
 <span data-ttu-id="12190-1870">次の表の動作、<xref:System.Net.Sockets.Socket.Close%2A>メソッドの有効な値を<xref:System.Net.Sockets.LingerOption.Enabled%2A>プロパティおよび<xref:System.Net.Sockets.LingerOption.LingerTime%2A>に格納されているプロパティ、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1870">The following table describes the behavior of the <xref:System.Net.Sockets.Socket.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.Socket.LingerState%2A> property.</span></span>  
  
|<span data-ttu-id="12190-1871">LingerState.Enabled</span><span class="sxs-lookup"><span data-stu-id="12190-1871">LingerState.Enabled</span></span>|<span data-ttu-id="12190-1872">LingerState.LingerTime</span><span class="sxs-lookup"><span data-stu-id="12190-1872">LingerState.LingerTime</span></span>|<span data-ttu-id="12190-1873">動作</span><span class="sxs-lookup"><span data-stu-id="12190-1873">Behavior</span></span>|  
|-------------------------|----------------------------|--------------|  
|<span data-ttu-id="12190-1874">`false` (無効)、既定値</span><span class="sxs-lookup"><span data-stu-id="12190-1874">`false` (disabled), the default value</span></span>|<span data-ttu-id="12190-1875">タイムアウトは適用、されません (既定値)。</span><span class="sxs-lookup"><span data-stu-id="12190-1875">The time-out is not applicable, (default).</span></span>|<span data-ttu-id="12190-1876">既定の IP プロトコル タイムアウトの期限が切れるまで、保留中のデータ送信を試みます。</span><span class="sxs-lookup"><span data-stu-id="12190-1876">Attempts to send pending data until the default IP protocol time-out expires.</span></span>|  
|<span data-ttu-id="12190-1877">`true` (有効)</span><span class="sxs-lookup"><span data-stu-id="12190-1877">`true` (enabled)</span></span>|<span data-ttu-id="12190-1878">0 以外のタイムアウト</span><span class="sxs-lookup"><span data-stu-id="12190-1878">A nonzero time-out</span></span>|<span data-ttu-id="12190-1879">指定したタイムアウトが経過するまでの試行が失敗した場合は、Winsock 接続がリセット保留中のデータ送信を試みます。</span><span class="sxs-lookup"><span data-stu-id="12190-1879">Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.</span></span>|  
|<span data-ttu-id="12190-1880">`true` (有効)</span><span class="sxs-lookup"><span data-stu-id="12190-1880">`true` (enabled)</span></span>|<span data-ttu-id="12190-1881">0 のタイムアウト</span><span class="sxs-lookup"><span data-stu-id="12190-1881">A zero timeout.</span></span>|<span data-ttu-id="12190-1882">保留中のデータを破棄します。</span><span class="sxs-lookup"><span data-stu-id="12190-1882">Discards any pending data.</span></span> <span data-ttu-id="12190-1883">接続志向ソケット (たとえば、TCP) の場合は、Winsock は接続をリセットします。</span><span class="sxs-lookup"><span data-stu-id="12190-1883">For connection-oriented socket (TCP, for example), Winsock resets the connection.</span></span>|  
  
 <span data-ttu-id="12190-1884">IP スタックは、接続のラウンド トリップ時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。</span><span class="sxs-lookup"><span data-stu-id="12190-1884">The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.</span></span> <span data-ttu-id="12190-1885">ほとんどの場合、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 より関連性が高いです。</span><span class="sxs-lookup"><span data-stu-id="12190-1885">In most cases, the time-out computed by the stack is more relevant than one defined by an application.</span></span> <span data-ttu-id="12190-1886">ソケットの既定の動作は、このとき、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="12190-1886">This is the default behavior for a socket when the <xref:System.Net.Sockets.Socket.LingerState%2A> property is not set.</span></span>  
  
 <span data-ttu-id="12190-1887">ときに、<xref:System.Net.Sockets.LingerOption.LingerTime%2A>に格納されているプロパティ、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定、既定の IP プロトコル タイムアウトを引き続き適用を上書きします。</span><span class="sxs-lookup"><span data-stu-id="12190-1887">When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.Socket.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1888">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1888">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.LingerState%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1889">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1889">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1890">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1890">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Listen">
      <MemberSignature Language="C#" Value="public void Listen (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Listen(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Listen (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Listen(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Listen : int -&gt; unit" Usage="socket.Listen backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog">
          <span data-ttu-id="12190-1891">保留中の接続のキューの最大長。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1891">The maximum length of the pending connections queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1892">
            <see cref="T:System.Net.Sockets.Socket" /> をリッスン状態にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1892">Places a <see cref="T:System.Net.Sockets.Socket" /> in a listening state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1893"><xref:System.Net.Sockets.Socket.Listen%2A> 接続指向により<xref:System.Net.Sockets.Socket>受信試行の接続をリッスンするようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1893"><xref:System.Net.Sockets.Socket.Listen%2A> causes a connection-oriented <xref:System.Net.Sockets.Socket> to listen for incoming connection attempts.</span></span> <span data-ttu-id="12190-1894">`backlog`パラメーターできますのキューへの同意に着信接続の数を指定します。</span><span class="sxs-lookup"><span data-stu-id="12190-1894">The `backlog` parameter specifies the number of incoming connections that can be queued for acceptance.</span></span> <span data-ttu-id="12190-1895">調べるには、接続の最大数を指定することができます、取得、<xref:System.Net.Sockets.SocketOptionName.MaxConnections>値。</span><span class="sxs-lookup"><span data-stu-id="12190-1895">To determine the maximum number of connections you can specify, retrieve the <xref:System.Net.Sockets.SocketOptionName.MaxConnections> value.</span></span> <span data-ttu-id="12190-1896"><xref:System.Net.Sockets.Socket.Listen%2A> ブロックされません。</span><span class="sxs-lookup"><span data-stu-id="12190-1896"><xref:System.Net.Sockets.Socket.Listen%2A> does not block.</span></span>  
  
 <span data-ttu-id="12190-1897">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1897">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1898">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1898">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="12190-1899">使用して<xref:System.Net.Sockets.Socket.Accept%2A>または<xref:System.Net.Sockets.Socket.BeginAccept%2A>キューからの接続を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="12190-1899">Use <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> to accept a connection from the queue.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1900">呼び出す必要があります、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.Listen%2A>、または<xref:System.Net.Sockets.Socket.Listen%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1900">You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method before calling <xref:System.Net.Sockets.Socket.Listen%2A>, or <xref:System.Net.Sockets.Socket.Listen%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1901">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1901">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1902">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1902">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1903">バックログ パラメーターは、オペレーティング システムに応じて異なる値に制限されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1903">The backlog parameter is limited to different values depending on the Operating System.</span></span> <span data-ttu-id="12190-1904">高い値を指定することがありますが、バックログは限られたオペレーティング システムに基づくです。</span><span class="sxs-lookup"><span data-stu-id="12190-1904">You may specify a higher value, but the backlog will be limited based on the Operating System.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1905">次のコード例では<xref:System.Net.Sockets.Socket>受信接続をリッスンするようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1905">The following code example uses <xref:System.Net.Sockets.Socket> to listen for incoming connections.</span></span>  
  
 [!code-cpp[Classic Socket.Listen Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Listen Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Listen Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Listen Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Listen Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Listen Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1906">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1906">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1907">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1907">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="LocalEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.LocalEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndPoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndPoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndPoint : System.Net.EndPoint" Usage="System.Net.Sockets.Socket.LocalEndPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1908">ローカル エンドポイントを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1908">Gets the local endpoint.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1909">
            <see cref="T:System.Net.EndPoint" /> が通信に使用している <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1909">The <see cref="T:System.Net.EndPoint" /> that the <see cref="T:System.Net.Sockets.Socket" /> is using for communications.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1910"><xref:System.Net.Sockets.Socket.LocalEndPoint%2A>プロパティを取得、<xref:System.Net.EndPoint>するローカル IP アドレスとポート番号を格納している、<xref:System.Net.Sockets.Socket>がバインドされています。</span><span class="sxs-lookup"><span data-stu-id="12190-1910">The <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property gets an <xref:System.Net.EndPoint> that contains the local IP address and port number to which your <xref:System.Net.Sockets.Socket> is bound.</span></span> <span data-ttu-id="12190-1911">これをキャストする必要があります<xref:System.Net.EndPoint>を<xref:System.Net.IPEndPoint>すべての情報を取得する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-1911">You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information.</span></span> <span data-ttu-id="12190-1912">呼び出すことができます、<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>ローカルを取得する方法を<xref:System.Net.IPAddress>、および<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>ローカル ポート番号を取得します。</span><span class="sxs-lookup"><span data-stu-id="12190-1912">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to retrieve the local <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to retrieve the local port number.</span></span>  
  
 <span data-ttu-id="12190-1913"><xref:System.Net.Sockets.Socket.LocalEndPoint%2A>通常プロパティへの呼び出しを加えた後、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1913">The <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property is usually set after you make a call to the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="12190-1914">ソケットのローカル IP アドレスとポート番号を割り当てるシステムを許可する場合、<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>最初の I/O 操作の後にプロパティが設定されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1914">If you allow the system to assign your socket's local IP address and port number, the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property will be set after the first I/O operation.</span></span> <span data-ttu-id="12190-1915">接続指向プロトコルでは、最初の I/O 操作になりますへの呼び出し、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1915">For connection-oriented protocols, the first I/O operation would be a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-1916">コネクションレスのプロトコルを最初の I/O 操作では、送信のいずれかまたは受信呼び出しは。</span><span class="sxs-lookup"><span data-stu-id="12190-1916">For connectionless protocols, the first I/O operation would be any of the send or receive calls.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1917">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1917">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1918">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1918">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1919">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1919">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1920">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1920">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1921">次のコード例では、取得し、ローカルおよびリモート エンドポイントを表示します。</span><span class="sxs-lookup"><span data-stu-id="12190-1921">The following code example retrieves and displays the local and remote endpoints.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#4)]
 [!code-csharp[Socket_Socket_Options#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#4)]
 [!code-vb[Socket_Socket_Options#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1922">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1922">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1923">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1923">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.Socket.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1924">発信マルチキャスト パケットが送信元アプリケーションに配信されるかどうかを指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1924">Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1925">
            <see cref="T:System.Net.Sockets.Socket" /> が発信マルチキャスト パケットを受け取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1925">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> receives outgoing multicast packets; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1926">マルチキャストは、インターネット上の多対多の通信用のスケーラブルな方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-1926">Multicast is a scalable method for many-to-many communication on the Internet.</span></span> <span data-ttu-id="12190-1927">マルチキャスト アドレスをサブスクライブしているプロセス次に、サブスクライブしているプロセスが送信したすべてのパケットは、マルチキャスト アドレスをサブスクライブしている他のすべてのプロセスによって受信されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1927">A process subscribes to a multicast address; then, any packets sent by a subscribed process are received by every other process subscribed to the multicast address.</span></span>  
  
 <span data-ttu-id="12190-1928">伝送制御プロトコル (TCP) ソケットにこのプロパティを設定する効果はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-1928">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1929">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.MulticastLoopback%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1929">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.MulticastLoopback%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1930">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1930">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1931">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1931">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NoDelay : bool with get, set" Usage="System.Net.Sockets.Socket.NoDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1932">ストリーム <see cref="T:System.Net.Sockets.Socket" /> が Nagle アルゴリズムを使用するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1932">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the stream <see cref="T:System.Net.Sockets.Socket" /> is using the Nagle algorithm.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1933">
            <see cref="T:System.Net.Sockets.Socket" /> が Nagle アルゴリズムを使用する場合は <see langword="false" />。それ以外の場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1933">
              <see langword="false" /> if the <see cref="T:System.Net.Sockets.Socket" /> uses the Nagle algorithm; otherwise, <see langword="true" />.</span>
          </span>
          <span data-ttu-id="12190-1934">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1934">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1935">Nagle アルゴリズムは、ソケット バッファーの小さなパケットを結合し、特定の状況で 1 つのパケットで送信したりすることで、ネットワーク トラフィックを減らすために設計されています。</span><span class="sxs-lookup"><span data-stu-id="12190-1935">The Nagle algorithm is designed to reduce network traffic by causing the socket to buffer small packets and then combine and send them in one packet under certain circumstances.</span></span> <span data-ttu-id="12190-1936">TCP パケットは、header、および送信されるデータの 40 バイトで構成されます。</span><span class="sxs-lookup"><span data-stu-id="12190-1936">A TCP packet consists of 40 bytes of header plus the data being sent.</span></span> <span data-ttu-id="12190-1937">Tcp の小さいデータ パケットが送信されると、TCP ヘッダーに起因するオーバーヘッドは、ネットワーク トラフィックのかなりの部分になります。負荷の高いネットワークでは、このオーバーヘッドの結果として得られる輻輳失われたデータグラムと再送信、だけでなく輻輳による過剰な伝達時間なることができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1937">When small packets of data are sent with TCP, the overhead resulting from the TCP header can become a significant part of the network traffic.On heavily loaded networks, the congestion resulting from this overhead can result in lost datagrams and retransmissions, as well as excessive propagation time caused by congestion.</span></span> <span data-ttu-id="12190-1938">Nagle アルゴリズムでは、送信の新しい TCP segmentswhen 新しい未確認の接続で previouslytransmitted データが残っている場合、ユーザーから到着するデータを送信を禁止します。</span><span class="sxs-lookup"><span data-stu-id="12190-1938">The Nagle algorithm inhibits the sending of new TCP segmentswhen new outgoing data arrives from the user if any previouslytransmitted data on the connection remains unacknowledged.</span></span>  
  
 <span data-ttu-id="12190-1939">ネットワーク アプリケーションの大部分は、Nagle アルゴリズムを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1939">The majority of network applications should use the Nagle algorithm.</span></span>  
  
 <span data-ttu-id="12190-1940">ユーザー データグラム プロトコル (UDP) ソケットにこのプロパティを設定しても影響します。</span><span class="sxs-lookup"><span data-stu-id="12190-1940">Setting this property on a User Datagram Protocol (UDP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1941">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.NoDelay%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1941">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.NoDelay%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1942">
            <see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1942">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1943">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1943">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OSSupportsIPv4">
      <MemberSignature Language="C#" Value="public static bool OSSupportsIPv4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OSSupportsIPv4" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.OSSupportsIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSSupportsIPv4 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool OSSupportsIPv4 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.OSSupportsIPv4 : bool" Usage="System.Net.Sockets.Socket.OSSupportsIPv4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1944">基になるオペレーティング システムおよびネットワーク アダプターが、インターネット プロトコル バージョン 4 (IPv4) をサポートするかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1944">Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1945">オペレーティング システムおよびネットワーク アダプターが IPv4 プロトコルをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1945">
              <see langword="true" /> if the operating system and network adaptors support the IPv4 protocol; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1946">オペレーティング システムでは、IPv4 と IPv6 の両方のプロトコルをサポート可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1946">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
      </Docs>
    </Member>
    <Member MemberName="OSSupportsIPv6">
      <MemberSignature Language="C#" Value="public static bool OSSupportsIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OSSupportsIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSSupportsIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool OSSupportsIPv6 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.OSSupportsIPv6 : bool" Usage="System.Net.Sockets.Socket.OSSupportsIPv6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1947">基になるオペレーティング システムおよびネットワーク アダプターが、インターネット プロトコル バージョン 6 (IPv6) をサポートするかどうかを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1947">Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1948">オペレーティング システムおよびネットワーク アダプターが IPv6 プロトコルをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1948">
              <see langword="true" /> if the operating system and network adaptors support the IPv6 protocol; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1949">オペレーティング システムでは、IPv4 と IPv6 の両方のプロトコルをサポート可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1949">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv4" />
      </Docs>
    </Member>
    <Member MemberName="Poll">
      <MemberSignature Language="C#" Value="public bool Poll (int microSeconds, System.Net.Sockets.SelectMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Poll(int32 microSeconds, valuetype System.Net.Sockets.SelectMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poll (microSeconds As Integer, mode As SelectMode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Poll(int microSeconds, System::Net::Sockets::SelectMode mode);" />
      <MemberSignature Language="F#" Value="member this.Poll : int * System.Net.Sockets.SelectMode -&gt; bool" Usage="socket.Poll (microSeconds, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="microSeconds" Type="System.Int32" />
        <Parameter Name="mode" Type="System.Net.Sockets.SelectMode" />
      </Parameters>
      <Docs>
        <param name="microSeconds">
          <span data-ttu-id="12190-1950">マイクロ秒単位の待機時間。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1950">The time to wait for a response, in microseconds.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="12190-1951">
            <see cref="T:System.Net.Sockets.SelectMode" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1951">One of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1952">
            <see cref="T:System.Net.Sockets.Socket" /> の状態を確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1952">Determines the status of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1953">
            <paramref name="mode" /> パラメーターで渡されるポーリング モードの値に基づいた <see cref="T:System.Net.Sockets.Socket" /> の状態。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1953">The status of the <see cref="T:System.Net.Sockets.Socket" /> based on the polling mode value passed in the <paramref name="mode" /> parameter.</span>
          </span>
          <span data-ttu-id="12190-1954">
            <list type="table">
              <listheader>
                <term> モード  </term>
                <description> 戻り値  <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> が呼び出されており、接続が保留中の場合は </description>
              </listheader>
              <item>
                <term>
                  <see cref="F:System.Net.Sockets.SelectMode.SelectRead" />
                </term>
                <description>
                  <see langword="true" />または、データを読み取ることができる場合は <see langword="true" /> または、接続が閉じている、リセットされている、または終了されている場合は <see langword="true" />、それ以外の場合は <see langword="false" /> を返します。<see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> を処理し、接続に成功した場合は </description>
              </item>
              <item>
                <term>
                  <see cref="F:System.Net.Sockets.SelectMode.SelectWrite" />
                </term>
                <description>
                  <see langword="true" /> または、データを送信できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> を返します。ブロックしない <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> を処理し、接続に失敗した場合は </description>
              </item>
              <item>
                <term>
                  <see cref="F:System.Net.Sockets.SelectMode.SelectError" />
                </term>
                <description>
                  <see langword="true" />または、<see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> が設定されておらず、帯域外データを使用できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> を返します。</description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1954">
              <list type="table">
                <listheader>
                  <term> Mode  </term>
                  <description> Return Value  </description>
                </listheader>
                <item>
                  <term>
                    <see cref="F:System.Net.Sockets.SelectMode.SelectRead" />
                  </term>
                  <description>
                    <see langword="true" /> if <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> has been called and a connection is pending;  -or-  <see langword="true" /> if data is available for reading;  -or-  <see langword="true" /> if the connection has been closed, reset, or terminated;  otherwise, returns <see langword="false" />.  </description>
                </item>
                <item>
                  <term>
                    <see cref="F:System.Net.Sockets.SelectMode.SelectWrite" />
                  </term>
                  <description>
                    <see langword="true" />, if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />, and the connection has succeeded;  -or-  <see langword="true" /> if data can be sent;  otherwise, returns <see langword="false" />.  </description>
                </item>
                <item>
                  <term>
                    <see cref="F:System.Net.Sockets.SelectMode.SelectError" />
                  </term>
                  <description>
                    <see langword="true" /> if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> that does not block, and the connection has failed;  -or-  <see langword="true" /> if <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> is not set and out-of-band data is available;  otherwise, returns <see langword="false" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1955"><xref:System.Net.Sockets.Socket.Poll%2A>メソッドの状態を確認、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1955">The <xref:System.Net.Sockets.Socket.Poll%2A> method will check the state of the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-1956">指定<xref:System.Net.Sockets.SelectMode.SelectRead?displayProperty=nameWithType>の`selectMode`パラメーターかどうかを<xref:System.Net.Sockets.Socket>を読み取ることができます。</span><span class="sxs-lookup"><span data-stu-id="12190-1956">Specify <xref:System.Net.Sockets.SelectMode.SelectRead?displayProperty=nameWithType> for the `selectMode` parameter to determine if the <xref:System.Net.Sockets.Socket> is readable.</span></span> <span data-ttu-id="12190-1957">指定<xref:System.Net.Sockets.SelectMode.SelectWrite?displayProperty=nameWithType>かどうかを<xref:System.Net.Sockets.Socket>が書き込み可能です。</span><span class="sxs-lookup"><span data-stu-id="12190-1957">Specify <xref:System.Net.Sockets.SelectMode.SelectWrite?displayProperty=nameWithType> to determine if the <xref:System.Net.Sockets.Socket> is writable.</span></span> <span data-ttu-id="12190-1958">使用して<xref:System.Net.Sockets.SelectMode.SelectError?displayProperty=nameWithType>エラー状態を検出するためにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1958">Use <xref:System.Net.Sockets.SelectMode.SelectError?displayProperty=nameWithType> to detect an error condition.</span></span> <span data-ttu-id="12190-1959"><xref:System.Net.Sockets.Socket.Poll%2A> 単位で指定された期間までの実行がブロックされます`microseconds`が経過しました。</span><span class="sxs-lookup"><span data-stu-id="12190-1959"><xref:System.Net.Sockets.Socket.Poll%2A> will block execution until the specified time period, measured in `microseconds`, elapses.</span></span> <span data-ttu-id="12190-1960">設定、`microSeconds`の応答を無限に待機する場合は負の整数へのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="12190-1960">Set the `microSeconds` parameter to a negative integer if you would like to wait indefinitely for a response.</span></span> <span data-ttu-id="12190-1961">複数のソケットの状態を確認するには、使用を好む場合がある、<xref:System.Net.Sockets.Socket.Select%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1961">If you want to check the status of multiple sockets, you might prefer to use the <xref:System.Net.Sockets.Socket.Select%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1962">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1962">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1963">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1963">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1964">このメソッドは、切断されたネットワーク ケーブルなどの接続に関する問題の特定の種類を検出できない場合や、リモート ホストが異常停止されたことです。</span><span class="sxs-lookup"><span data-stu-id="12190-1964">This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully.</span></span> <span data-ttu-id="12190-1965">このようなエラーを検出するためにデータの送受信を送信しようとする必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1965">You must attempt to send or receive data to detect these kinds of errors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1966">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-1966">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-1967">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-1967">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1968">次のコード例は、ソケットを作成しは、サーバーに接続を使用して<xref:System.Net.Sockets.Socket.Poll%2A>ソケットの状態を確認します。</span><span class="sxs-lookup"><span data-stu-id="12190-1968">The following code example creates a socket, connects to a server, and uses <xref:System.Net.Sockets.Socket.Poll%2A> to check the status of the socket.</span></span>  
  
 [!code-cpp[SelectModeExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SelectModeExample/CPP/source.cpp#1)]
 [!code-csharp[SelectModeExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SelectModeExample/CS/source.cs#1)]
 [!code-vb[SelectModeExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SelectModeExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-1969">
            <paramref name="mode" /> パラメーターが、<see cref="T:System.Net.Sockets.SelectMode" /> 値の 1 つではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1969">The <paramref name="mode" /> parameter is not one of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-1970">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1970">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-1971">以下の「解説」を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1971">See remarks below.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-1972">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1972">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SelectMode" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <Member MemberName="ProtocolType">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.ProtocolType ProtocolType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.ProtocolType ProtocolType" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ProtocolType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProtocolType As ProtocolType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::ProtocolType ProtocolType { System::Net::Sockets::ProtocolType get(); };" />
      <MemberSignature Language="F#" Value="member this.ProtocolType : System.Net.Sockets.ProtocolType" Usage="System.Net.Sockets.Socket.ProtocolType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.ProtocolType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1973">
            <see cref="T:System.Net.Sockets.Socket" /> のプロトコルの種類を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1973">Gets the protocol type of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-1974">
            <see cref="T:System.Net.Sockets.ProtocolType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1974">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1975"><xref:System.Net.Sockets.Socket.ProtocolType%2A>場合、プロパティが設定、<xref:System.Net.Sockets.Socket>が作成されを使用するプロトコルを指定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1975">The <xref:System.Net.Sockets.Socket.ProtocolType%2A> property is set when the <xref:System.Net.Sockets.Socket> is created, and specifies the protocol used by that <xref:System.Net.Sockets.Socket>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-1976">次のコード例では表示、 <xref:System.Net.Sockets.AddressFamily>、 <xref:System.Net.Sockets.SocketType>、および<xref:System.Net.Sockets.ProtocolType>コンソールにします。</span><span class="sxs-lookup"><span data-stu-id="12190-1976">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-1977">バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1977">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffer As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] -&gt; int" Usage="socket.Receive buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-1978">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1978">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-1979">バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信し、受信バッファーに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1979">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-1980">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-1980">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-1981"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドがバッファー パラメーターにデータを読み取り、読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1981">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="12190-1982">呼び出すことができます<xref:System.Net.Sockets.Socket.Receive%2A>接続指向とコネクションレス ソケットの両方からです。</span><span class="sxs-lookup"><span data-stu-id="12190-1982">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="12190-1983">のみこのオーバー ロードでは、受信バッファーを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-1983">This overload only requires you to provide a receive buffer.</span></span> <span data-ttu-id="12190-1984">バッファーの既定値は 0、サイズの既定値は、パラメーターの長さ、バッファー、オフセット、および<xref:System.Net.Sockets.SocketFlags>値の既定値は<xref:System.Net.Sockets.SocketFlags.None>します。</span><span class="sxs-lookup"><span data-stu-id="12190-1984">The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="12190-1985">接続指向のプロトコルを使用している必要がありますか呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立または<xref:System.Net.Sockets.Socket.Accept%2A>を呼び出す前に着信接続を受け入れるように<xref:System.Net.Sockets.Socket.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1985">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-1986"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドで確立されているリモート ホストから到着するデータを読み取るだけが、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1986">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-1987">コネクションレスのプロトコルを使用している場合は、使用することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1987">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-1988"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> すべてのホストから着信するデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-1988"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="12190-1989">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>しないデータがある、タイムアウト値を使用して設定された場合を除き、<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1989">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-1990">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Receive%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1990">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1991">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-1991">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-1992">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-1992">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-1993">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-1993">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-1994">接続指向を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズの最大使用可能な多くのデータを読み取る。</span><span class="sxs-lookup"><span data-stu-id="12190-1994">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="12190-1995">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-1995">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-1996">コネクションレス型を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>で指定した宛先アドレスの最初のキューに置かれたデータグラムを読み取り、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-1996">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-1997">受信したデータグラムがのサイズよりも大きいかどうか、`buffer`パラメーター、`buffer`設定します。 メッセージの最初の部分に余分なデータは失われますと<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-1997">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-1998">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-1998">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-1999">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-1999">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2000">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2000">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2001">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2001">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2002">次のコード例は、接続上のデータを受け取る<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2002">The following code example receives data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Sync_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Sync_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2003">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2003">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2004">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2004">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2005">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2005">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-2006">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2006">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2007">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2007">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2008">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2008">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffers As IList(Of ArraySegment(Of Byte))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; int" Usage="socket.Receive buffers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-2009">受信したデータを格納する <see cref="T:System.Byte" /> 型の複数の <see cref="T:System.ArraySegment`1" /> のリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2009">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2010">バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して、受信バッファーのリストに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2010">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2011">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2011">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2012">このメソッドは、バッファー パラメーターにデータを読み取りますを正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2012">This method reads data into the buffers parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="12190-2013">接続指向とコネクションレス ソケットの両方から呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="12190-2013">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="12190-2014">このオーバー ロードでは、どちらかを指定する必要があります。 または以上の受信バッファー。</span><span class="sxs-lookup"><span data-stu-id="12190-2014">This overload requires you to provide one or more receive buffers.</span></span>  
  
 <span data-ttu-id="12190-2015">接続指向のプロトコルを使用している必要がありますか呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立または<xref:System.Net.Sockets.Socket.Accept%2A>を呼び出す前に着信接続を受け入れるように<xref:System.Net.Sockets.Socket.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2015">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-2016"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、リモート ホストでの接続確立から到着するデータのみ読み取る、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2016">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2017">コネクションレスのプロトコルを使用している場合は、使用することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2017">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2018"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> すべてのホストから着信するデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2018"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="12190-2019">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>しないデータがある、タイムアウト値を使用して設定された場合を除き、<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2019">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2020">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Receive%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2020">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2021">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2021">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2022">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2022">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2023">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2023">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2024">接続指向を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズの最大使用可能な多くのデータを読み取る。</span><span class="sxs-lookup"><span data-stu-id="12190-2024">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="12190-2025">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2025">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-2026">場合は、コネクションレス型を使用している<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>で指定した宛先アドレスから最初にキュー入れられたデータグラムを読み取り、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2026">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-2027">受信したデータグラムがのサイズよりも大きいかどうか、`buffers`パラメーター、`buffers`設定します。 メッセージの最初の部分に余分なデータは失われますと<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2027">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2028">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2028">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2029">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2029">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="12190-2030">**注**このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2030">**Note** This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2031">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2031">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2032">
            <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2032">The <paramref name="buffer" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2033">ソケットへのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2033">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2034">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2034">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; -&gt; int" Usage="socket.Receive buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2035">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2035">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2036">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2036">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2037">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して受信バッファーに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2037">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2038">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2038">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2039"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドがバッファー パラメーターにデータを読み取り、読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2039">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="12190-2040">呼び出すことができます<xref:System.Net.Sockets.Socket.Receive%2A>接続指向とコネクションレス ソケットの両方からです。</span><span class="sxs-lookup"><span data-stu-id="12190-2040">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="12190-2041">このオーバー ロードだけ指定する必要が受信バッファーと、必要な<xref:System.Net.Sockets.SocketFlags>します。</span><span class="sxs-lookup"><span data-stu-id="12190-2041">This overload only requires you to provide a receive buffer and the necessary <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="12190-2042">バッファーのオフセットの既定値は 0 で、サイズの既定値はバイト パラメーターの長さ。</span><span class="sxs-lookup"><span data-stu-id="12190-2042">The buffer offset defaults to 0, and the size defaults to the length of the byte parameter.</span></span>  
  
 <span data-ttu-id="12190-2043">接続指向のプロトコルを使用している必要がありますか呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立または<xref:System.Net.Sockets.Socket.Accept%2A>を呼び出す前に着信接続を受け入れるように<xref:System.Net.Sockets.Socket.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2043">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-2044"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドで確立されているリモート ホストから到着するデータを読み取るだけが、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2044">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2045">コネクションレスのプロトコルを使用している場合は、使用することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2045">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2046"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> すべてのホストから着信するデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2046"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="12190-2047">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはデータが読み取られるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-2047">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available.</span></span> <span data-ttu-id="12190-2048">モードの非ブロッキングであるし、プロトコル スタック バッファーの使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2048">If you are in non-blocking mode, and there is no data available in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2049">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2049">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2050">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、再試行してください、受信操作します。</span><span class="sxs-lookup"><span data-stu-id="12190-2050">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.</span></span>  
  
 <span data-ttu-id="12190-2051">接続指向を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズの最大使用量のデータを読み取る。</span><span class="sxs-lookup"><span data-stu-id="12190-2051">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available up to the size of the buffer.</span></span> <span data-ttu-id="12190-2052">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2052">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-2053">場合は、コネクションレス型を使用している<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>で指定した宛先アドレスから最初にキュー入れられたデータグラムを読み取り、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2053">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-2054">受信したデータグラムがのサイズよりも大きいかどうか、`buffer`パラメーター、`buffer`設定します。 メッセージの最初の部分に余分なデータは失われますと<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2054">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2055">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2055">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2056">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2056">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2057">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2057">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2058">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2058">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2059">次のコード例は、データ バッファーを指定し、<xref:System.Net.Sockets.SocketFlags>接続上のデータを受信するため<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2059">The following code example specifies a data buffer, and <xref:System.Net.Sockets.SocketFlags> for receiving data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Sync_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Sync_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2060">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2060">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2061">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2061">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2062">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2062">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-2063">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2063">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2064">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2064">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2065">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2065">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffers, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-2066">受信したデータを格納する <see cref="T:System.Byte" /> 型の複数の <see cref="T:System.ArraySegment`1" /> のリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2066">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2067">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2067">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2068">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して受信バッファーのリストに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2068">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2069">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2069">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2070">このメソッドにデータを読み込みます、`buffers`パラメーターと正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2070">This method reads data into the `buffers` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="12190-2071">接続指向とコネクションレス ソケットの両方から呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="12190-2071">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="12190-2072">このオーバー ロードでは、どちらかを指定する必要があります。 または以上の受信バッファー。</span><span class="sxs-lookup"><span data-stu-id="12190-2072">This overload requires you to provide one or more receive buffers.</span></span> <span data-ttu-id="12190-2073"><xref:System.Net.Sockets.SocketFlags>値の既定値は<xref:System.Net.Sockets.SocketFlags.None>します。</span><span class="sxs-lookup"><span data-stu-id="12190-2073">The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="12190-2074">接続指向のプロトコルを使用している必要がありますか呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立または<xref:System.Net.Sockets.Socket.Accept%2A>を呼び出す前に着信接続を受け入れるように<xref:System.Net.Sockets.Socket.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2074">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-2075"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、リモート ホストでの接続確立から到着するデータのみ読み取る、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2075">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2076">コネクションレスのプロトコルを使用している場合は、使用することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2076">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2077"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> すべてのホストから着信するデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2077"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="12190-2078">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>しないデータがある、タイムアウト値を使用して設定された場合を除き、<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2078">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2079">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Receive%2A>スローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2079">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2080">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2080">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2081">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2081">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2082">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2082">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2083">接続指向を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズの最大使用可能な多くのデータを読み取る。</span><span class="sxs-lookup"><span data-stu-id="12190-2083">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="12190-2084">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2084">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-2085">場合は、コネクションレス型を使用している<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>で指定した宛先アドレスから最初にキュー入れられたデータグラムを読み取り、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2085">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-2086">受信したデータグラムがのサイズよりも大きいかどうか、`buffers`パラメーター、`buffers`設定します。 メッセージの最初の部分に余分なデータは失われますと<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2086">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2087">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2087">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2088">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2088">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2089">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2089">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2090">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2090">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2091">次のコード例は、接続上のデータを受信する方法を示します<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2091">The following code example demonstrates how to receive data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socketgenerics#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socketgenerics/CPP/sendgeneric.cpp#2)]
 [!code-csharp[System.Net.Sockets.Socketgenerics#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socketgenerics/CS/sendgeneric.cs#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2092">
            <paramref name="buffers" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2092">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-2093">または、<paramref name="buffers" />.Count が 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2093">-or-  <paramref name="buffers" />.Count is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2094">ソケットへのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2094">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2095">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2095">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2096">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2096">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2097">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2097">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2098">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2098">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2099">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2099">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2100">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2100">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2101">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> から指定したバイト数のデータを受信して受信バッファーに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2101">Receives the specified number of bytes of data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2102">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2102">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2103"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドへのデータを読み取り、`buffer`パラメーターと正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2103">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the `buffer` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="12190-2104">呼び出すことができます<xref:System.Net.Sockets.Socket.Receive%2A>接続指向とコネクションレス ソケットの両方からです。</span><span class="sxs-lookup"><span data-stu-id="12190-2104">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="12190-2105">このオーバー ロードだけが必要です、受信バッファー、バイトを受信して、必要な数を指定する<xref:System.Net.Sockets.SocketFlags>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2105">This overload only requires you to provide a receive buffer, the number of bytes you want to receive, and the necessary <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 <span data-ttu-id="12190-2106">接続指向のプロトコルを使用している必要がありますか呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立または<xref:System.Net.Sockets.Socket.Accept%2A>を呼び出す前に着信接続を受け入れるように<xref:System.Net.Sockets.Socket.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2106">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-2107"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドで確立されているリモート ホストから到着するデータを読み取るだけが、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2107">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2108">コネクションレスのプロトコルを使用している場合は、使用することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2108">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2109"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> すべてのホストから着信するデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2109"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="12190-2110">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>しないデータがある、タイムアウト値を使用して設定された場合を除き、<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2110">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2111">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Receive%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2111">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2112">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2112">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, The <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2113">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2113">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2114">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、再試行してください、受信操作します。</span><span class="sxs-lookup"><span data-stu-id="12190-2114">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.</span></span>  
  
 <span data-ttu-id="12190-2115">接続指向を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、数で指定したバイトの使用可能な多くのデータを読み取る、`size`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-2115">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="12190-2116">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2116">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-2117">コネクションレス型を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>で指定した宛先アドレスの最初のキューに置かれたデータグラムを読み取り、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2117">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-2118">受信したデータグラムがのサイズよりも大きいかどうか、`buffer`パラメーター、`buffer`設定します。 メッセージの最初の部分に余分なデータは失われますと<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2118">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2119">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2119">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2120">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2120">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2121">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2121">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2122">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2122">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2123">次にデータを受信する`buffer`を指定して<xref:System.Net.Sockets.SocketFlags.None>の<xref:System.Net.Sockets.SocketFlags>します。</span><span class="sxs-lookup"><span data-stu-id="12190-2123">The following receives the data found into `buffer`, and specifies <xref:System.Net.Sockets.SocketFlags.None> for <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 [!code-cpp[Socket_Send_Recieve#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Send_Recieve/CPP/source.cpp#4)]
 [!code-csharp[Socket_Send_Recieve#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Send_Recieve/CS/source.cs#4)]
 [!code-vb[Socket_Send_Recieve#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Send_Recieve/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2124">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2124">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2125">
            <paramref name="size" /> が <paramref name="buffer" /> のサイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2125">
              <paramref name="size" /> exceeds the size of <paramref name="buffer" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2126">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2126">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2127">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2127">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-2128">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2128">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2129">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2129">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2130">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2130">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffers, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-2131">受信したデータを格納する <see cref="T:System.Byte" /> 型の複数の <see cref="T:System.ArraySegment`1" /> のリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2131">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2132">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2132">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-2133">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2133">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2134">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して受信バッファーのリストに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2134">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2135">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2135">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2136">このメソッドにデータを読み込みます、`buffers`パラメーターと正常に読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2136">This method reads data into the `buffers` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="12190-2137">接続指向とコネクションレス ソケットの両方から呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="12190-2137">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="12190-2138">このオーバー ロードでは、どちらかを指定する必要があります。 または以上の受信バッファー。</span><span class="sxs-lookup"><span data-stu-id="12190-2138">This overload requires you to provide one or more receive buffers.</span></span> <span data-ttu-id="12190-2139"><xref:System.Net.Sockets.SocketFlags>値の既定値は<xref:System.Net.Sockets.SocketFlags.None>します。</span><span class="sxs-lookup"><span data-stu-id="12190-2139">The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="12190-2140">接続指向のプロトコルを使用している必要がありますか呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立または<xref:System.Net.Sockets.Socket.Accept%2A>を呼び出す前に着信接続を受け入れるように<xref:System.Net.Sockets.Socket.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2140">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-2141"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、リモート ホストでの接続確立から到着するデータのみ読み取る、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2141">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2142">コネクションレスのプロトコルを使用している場合は、使用することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2142">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2143"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> すべてのホストから着信するデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2143"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="12190-2144">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>しないデータがある、タイムアウト値を使用して設定された場合を除き、<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2144">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2145">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Receive%2A>スローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2145">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2146">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2146">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2147">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2147">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2148">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2148">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2149">接続指向を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドは、バッファーのサイズの最大使用可能な多くのデータを読み取る。</span><span class="sxs-lookup"><span data-stu-id="12190-2149">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="12190-2150">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2150">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-2151">コネクションレス型を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>で指定した宛先アドレスの最初のキューに置かれたデータグラムを読み取り、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2151">If you are using a connectionless <xref:System.Net.Sockets.Socket>,<xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-2152">受信したデータグラムがのサイズよりも大きいかどうか、`buffers`パラメーター、`buffers`設定します。 メッセージの最初の部分に余分なデータは失われますと<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2152">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2153">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2153">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2154">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2154">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2155">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2155">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2156">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2156">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2157">
            <paramref name="buffers" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2157">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-2158">または、<paramref name="buffers" />.Count が 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2158">-or-  <paramref name="buffers" />.Count is zero.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2159">ソケットへのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2159">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2160">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2160">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2161">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2161">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2162">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2162">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : Span&lt;byte&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffer, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Receive (buffer, offset, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2163">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2163">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-2164">受信データを格納する <c>buffer</c> 内の場所。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2164">The location in <c>buffer</c> to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2165">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2165">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2166">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2166">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2167">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> から指定したバイト数のデータを受信して、受信バッファー内の指定したオフセット位置に格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2167">Receives the specified number of bytes from a bound <see cref="T:System.Net.Sockets.Socket" /> into the specified offset position of the receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2168">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2168">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2169"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドがバッファー パラメーターにデータを読み取り、読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2169">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="12190-2170">呼び出すことができます<xref:System.Net.Sockets.Socket.Receive%2A>接続指向とコネクションレス ソケットの両方からです。</span><span class="sxs-lookup"><span data-stu-id="12190-2170">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="12190-2171">接続指向のプロトコルを使用している必要がありますか呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立または<xref:System.Net.Sockets.Socket.Accept%2A>を呼び出す前に着信接続を受け入れるように<xref:System.Net.Sockets.Socket.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2171">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-2172"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドで確立されているリモート ホストから到着するデータを読み取るだけが、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2172">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2173">コネクションレスのプロトコルを使用している場合は、使用することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2173">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2174"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> すべてのホストから着信するデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2174"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="12190-2175">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>しないデータがある、タイムアウト値を使用して設定された場合を除き、<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2175">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2176">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Receive%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2176">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2177">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2177">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2178">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="12190-2178">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="12190-2179">以下の「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2179">See Remarks below.</span></span> <span data-ttu-id="12190-2180">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2180">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2181">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2181">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2182">接続指向を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドがサイズ パラメーターで指定したバイトの数までの使用可能な多くのデータを読み取る。</span><span class="sxs-lookup"><span data-stu-id="12190-2182">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter.</span></span> <span data-ttu-id="12190-2183">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2183">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-2184">コネクションレス型を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>で指定した宛先アドレスの最初のキューに置かれたデータグラムを読み取り、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2184">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-2185">受信したデータグラムがのサイズよりも大きいかどうか、`buffer`パラメーター、`buffer`設定します。 メッセージの最初の部分に余分なデータは失われますと<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2185">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2186">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2186">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2187">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2187">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2188">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2188">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2189">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2189">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2190">次のコード例は、接続上のデータを受信する前に、データ バッファー、オフセット、サイズ、およびソケット フラグを指定します。<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2190">The following code example specifies a data buffer, an offset, a size, and a socket flag before receiving data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2191">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2191">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2192">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2192">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2193">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2193">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-2194">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2194">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2195">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2195">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2196">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2196">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-2197">または、<see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2197">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span>
          </span>
          <span data-ttu-id="12190-2198">または、<see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2198">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2199">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2199">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-2200">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2200">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2201">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2201">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2202">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2202">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Receive : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Receive (buffer, offset, size, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2203">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2203">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-2204">受信したデータを格納する、<c>buffer</c> パラメーター内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2204">The position in the <c>buffer</c> parameter to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2205">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2205">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2206">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2206">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-2207">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2207">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2208">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、バインドされた <see cref="T:System.Net.Sockets.Socket" /> からデータを受信して受信バッファーに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2208">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2209">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2209">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2210"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドがバッファー パラメーターにデータを読み取り、読み取られたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2210">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="12190-2211">呼び出すことができます<xref:System.Net.Sockets.Socket.Receive%2A>接続指向とコネクションレス ソケットの両方からです。</span><span class="sxs-lookup"><span data-stu-id="12190-2211">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="12190-2212">接続指向のプロトコルを使用している必要がありますか呼び出し<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立または<xref:System.Net.Sockets.Socket.Accept%2A>を呼び出す前に着信接続を受け入れるように<xref:System.Net.Sockets.Socket.Receive%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2212">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="12190-2213"><xref:System.Net.Sockets.Socket.Receive%2A>メソッドで確立されているリモート ホストから到着するデータを読み取るだけが、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2213">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2214">コネクションレスのプロトコルを使用している場合は、使用することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2214">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2215"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> すべてのホストから着信するデータを受信できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2215"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="12190-2216">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.Receive%2A>しないデータがある、タイムアウト値を使用して設定された場合を除き、<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2216">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2217">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Receive%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2217">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2218">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2218">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2219">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="12190-2219">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="12190-2220">以下の「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2220">See Remarks below.</span></span> <span data-ttu-id="12190-2221">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2221">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2222">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2222">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2223">接続指向を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドがサイズ パラメーターで指定したバイトの数までの使用可能な多くのデータを読み取る。</span><span class="sxs-lookup"><span data-stu-id="12190-2223">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter.</span></span> <span data-ttu-id="12190-2224">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2224">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="12190-2225">コネクションレス型を使用している場合<xref:System.Net.Sockets.Socket>、<xref:System.Net.Sockets.Socket.Receive%2A>で指定した宛先アドレスの最初のキューに置かれたデータグラムを読み取り、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2225">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="12190-2226">受信したデータグラムがのサイズよりも大きいかどうか、`buffer`パラメーター、`buffer`設定します。 メッセージの最初の部分に余分なデータは失われますと<xref:System.Net.Sockets.SocketException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2226">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2227">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2227">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2228">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2228">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2229">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2229">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2230">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2230">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2231">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2231">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2232">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2232">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2233">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2233">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-2234">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2234">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2235">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2235">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2236">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2236">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-2237">または、<see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2237">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property is not set.</span>
          </span>
          <span data-ttu-id="12190-2238">または、<see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2238">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2239">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2239">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-2240">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2240">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2241">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2241">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2242">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2242">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-2243">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2243">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2244">接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトからデータを受信する非同期要求を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2244">Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2245">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2245">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-2246">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2246">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-2247">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2247">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-2248">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2248">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2249"><xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッドを使用してのソケットまたはバインドされたコネクションレス ソケットを接続および着信データの読み取りに使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-2249">The <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method is used on connected sockets or bound connectionless sockets and is used to read incoming data.</span></span> <span data-ttu-id="12190-2250">ソケットのローカル アドレスは認識されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2250">The socket's local address must be known.</span></span>  
  
 <span data-ttu-id="12190-2251">バインドのコネクションレス ソケットは、この関数は、受信したメッセージの受け入れ元となるアドレスを制限します。</span><span class="sxs-lookup"><span data-stu-id="12190-2251">For bound connectionless sockets, this function restricts the addresses from which received messages are accepted.</span></span> <span data-ttu-id="12190-2252">関数には、接続で指定されたリモート アドレスからのメッセージのみを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2252">The function only returns messages from the remote address specified in the connection.</span></span> <span data-ttu-id="12190-2253">その他のアドレスからのメッセージが自動的に破棄されます。</span><span class="sxs-lookup"><span data-stu-id="12190-2253">Messages from other addresses are silently discarded.</span></span>  
  
 <span data-ttu-id="12190-2254"><xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>プロパティを`e`パラメーターが読み取り要求に関する追加情報がウィンドウのソケットのサービス プロバイダーを提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-2254">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request.</span></span> <span data-ttu-id="12190-2255">このパラメーターを使用する方法の詳細については、次を参照してください。<xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2255">For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="12190-2256">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが正常にこのメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2256">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <span data-ttu-id="12190-2257"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> または <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="12190-2257"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span></span>  
  
-   <span data-ttu-id="12190-2258"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 場合<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>設定されています。</span><span class="sxs-lookup"><span data-stu-id="12190-2258"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <span data-ttu-id="12190-2259"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 場合<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>設定されています。</span><span class="sxs-lookup"><span data-stu-id="12190-2259"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-2260">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2260">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-2261">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2261">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-2262">バイト ストリーム スタイルのソケットの受信データが、バッファーが指定された、接続を終了すると、または内部バッファー内のデータがなくなるまで、バッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="12190-2262">For byte stream-style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.</span></span>  
  
 <span data-ttu-id="12190-2263">関連付けられているバッファーの合計サイズの最大バッファーにメッセージ指向のソケットの場合は、受信メッセージが配置されて、`e`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-2263">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer associated with the `e` parameter.</span></span> <span data-ttu-id="12190-2264">メッセージがバッファーよりも大きい場合は、バッファーがメッセージの最初の部分が入力されます。</span><span class="sxs-lookup"><span data-stu-id="12190-2264">If the message is larger than the buffer, the buffer is filled with the first part of the message.</span></span>  
  
 <span data-ttu-id="12190-2265">接続指向のソケットに対して、<xref:System.Net.Sockets.Socket.ReceiveAsync%2A>メソッドが正常に終了するかどうか、ソケットは、バイト ストリーム メッセージ指向に依存している 2 つの方法のいずれかで仮想回線を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="12190-2265">For connection-oriented sockets, the <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method can indicate the graceful termination of the virtual circuit in one of two ways that depend on whether the socket is byte stream or message oriented.</span></span> <span data-ttu-id="12190-2266">バイト ストリーム、正常に閉じられたと以上のバイトを読み取ることが 0 バイトが読み取られたことを示します。</span><span class="sxs-lookup"><span data-stu-id="12190-2266">For byte streams, zero bytes having been read indicates graceful closure and that no more bytes will ever be read.</span></span> <span data-ttu-id="12190-2267">ここで、ゼロ バイトのメッセージがで使用できる多くの場合、メッセージ指向のソケットの<xref:System.Net.Sockets.SocketException>で、<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>ネイティブ Winsock WSAEDISCON エラー コード (10101) に設定が正常に閉じられたを示すために使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-2267">For message-oriented sockets, where a zero byte message is often allowable, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAEDISCON error code (10101) is used to indicate graceful closure.</span></span> <span data-ttu-id="12190-2268">いずれの場合、<xref:System.Net.Sockets.SocketException>で、<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>ネイティブ Winsock WSAECONNRESET に設定エラー コード (10054) を示す強制終了が発生しました。</span><span class="sxs-lookup"><span data-stu-id="12190-2268">In any case, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAECONNRESET error code (10054) indicates an abortive close has occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-2269">引数が無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2269">An argument was invalid.</span>
          </span>
          <span data-ttu-id="12190-2270">
            <paramref name="e" /> パラメーターの <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティまたは <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティは、有効なバッファーを参照する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2270">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <paramref name="e" /> parameter must reference valid buffers.</span>
          </span>
          <span data-ttu-id="12190-2271">これらのプロパティは、どちらか 1 つを設定できます。一度に両方のプロパティを設定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2271">One or the other of these properties may be set, but not both at the same time.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-2272">
            <paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2272">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-2273">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2273">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2274">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2274">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2275">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2275">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.Socket.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-2276">
            <see cref="T:System.Net.Sockets.Socket" /> の受信バッファーのサイズを指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2276">Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-2277">受信バッファーのサイズ (バイト単位) を格納している <see cref="T:System.Int32" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2277">An <see cref="T:System.Int32" /> that contains the size, in bytes, of the receive buffer.</span>
          </span>
          <span data-ttu-id="12190-2278">既定値は 8192 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2278">The default is 8192.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2279">大きなバッファー サイズは可能性がある空の受信確認 (TCP パケット データ部分はありません) の数を削減は、接続に関する問題を認識を遅らせるも可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2279">A larger buffer size potentially reduces the number of empty acknowledgements (TCP packets with no data portion), but might also delay the recognition of connection difficulties.</span></span> <span data-ttu-id="12190-2280">大きなファイルを転送するか、高帯域幅、待機時間の長い接続 (サテライト ブロード バンド プロバイダーなどです。) を使用している場合は、バッファー サイズを増やすことを検討してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2280">Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2281">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2281">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2282">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2282">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2283">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2283">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2284">設定操作として指定された値が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2284">The value specified for a set operation is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveFrom">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-2285">データグラムを受信し、ソース エンドポイントを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2285">Receives a datagram and stores the source endpoint.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveFrom (buffer As Byte(), ByRef remoteEP As EndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] *  -&gt; int" Usage="socket.ReceiveFrom (buffer, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2286">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2286">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-2287">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2287">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2288">データグラムを受信してデータバッファーに格納します。さらに、エンドポイントを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2288">Receives a datagram into the data buffer and stores the endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2289">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2289">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2290"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドへのデータを読み取り、`buffer`パラメーターが正常に読み取られたバイト数を返し、データの送信元となるリモート ホストのエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="12190-2290">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="12190-2291">このメソッドは、不明なホストまたは複数のホストからコネクションレス データグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="12190-2291">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="12190-2292">このオーバー ロードだけ指定する必要が receive `buffer`、および<xref:System.Net.EndPoint>リモート ホストを表すです。</span><span class="sxs-lookup"><span data-stu-id="12190-2292">This overload only requires you to provide a receive `buffer`, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="12190-2293">バッファーは、既定値は 0 をオフセットします。</span><span class="sxs-lookup"><span data-stu-id="12190-2293">The buffer offset defaults to 0.</span></span> <span data-ttu-id="12190-2294">既定値の長さは、サイズ、`buffer`パラメーターおよび`socketFlags`値の既定値は<xref:System.Net.Sockets.SocketFlags.None>します。</span><span class="sxs-lookup"><span data-stu-id="12190-2294">The size defaults to the length of the `buffer` parameter and the `socketFlags` value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2295">呼び出しの前に<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>、明示的にバインドする必要があります、<xref:System.Net.Sockets.Socket>を使用して、ローカル エンドポイントを<xref:System.Net.Sockets.Socket.Bind%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2295">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="12190-2296">そうしない場合<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2296">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-2297">コネクションレスのプロトコルで<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はローカル ネットワーク バッファーに書き込まれる最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="12190-2297">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="12190-2298">受信したデータグラムがのサイズよりも大きいかどうか`buffer`、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは入力`buffer`メッセージは、可能であれば、throw の多くで、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2298">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2299">信頼性の低いプロトコルを使用している場合、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="12190-2299">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="12190-2300">信頼性の高いプロトコルを使用している場合、超過データは、サービス プロバイダーによって保持するを呼び出して取得することができます、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>のに十分な大きさのバッファーを持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2300">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="12190-2301">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはデータが読み取られるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-2301">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="12190-2302">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2302">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2303">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2303">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2304">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2304">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2305"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>向けコネクションレスのプロトコルを接続指向プロトコルも使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2305">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="12190-2306">これを行う場合は、する必要がありますまずか、リモート ホスト接続を確立するを呼び出して、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド着信リモートを受け入れるかを呼び出して接続をホスト、<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2306">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2307">確立したり、接続を呼び出す前に許可しない場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドが表示されます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2307">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2308">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2308">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2309">このような場合は、のいずれかで、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは無視されます、`remoteEP`パラメーターとのみデータが、接続されているまたは既定のリモート ホストを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2309">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-2310">接続指向のソケットと<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>のサイズの最大使用量のデータを読み取る`buffer`です。</span><span class="sxs-lookup"><span data-stu-id="12190-2310">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`.</span></span> <span data-ttu-id="12190-2311">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2311">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2312">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2312">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2313">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2313">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2314"><xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>と一致する必要があります、<xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2314">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2315">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2315">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2316">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2316">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2317">次のコード例では、リモート ホストからコネクションレス データグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2317">The following code example receives a connectionless datagram from a remote host.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#9)]
 [!code-csharp[Socket_Sync_Send_Receive#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#9)]
 [!code-vb[Socket_Sync_Send_Receive#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2318">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2318">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-2319">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2319">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2320">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2320">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2321">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2321">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-2322">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2322">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2323">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2323">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2324">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2324">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2325">受信したデータの保存場所となる <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2325">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2326">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2326">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-2327">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2327">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2328">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、データグラムを受信してデータバッファーに格納します。さらに、エンドポイントを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2328">Receives a datagram into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2329">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2329">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2330"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドへのデータを読み取り、`buffer`パラメーターが正常に読み取られたバイト数を返し、データの送信元となるリモート ホストのエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="12190-2330">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="12190-2331">このメソッドは、不明なホストまたは複数のホストからコネクションレス データグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="12190-2331">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="12190-2332">このオーバー ロードだけ指定する必要が受信バッファー、必要な<xref:System.Net.Sockets.SocketFlags>、および<xref:System.Net.EndPoint>リモート ホストを表すです。</span><span class="sxs-lookup"><span data-stu-id="12190-2332">This overload only requires you to provide a receive buffer, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="12190-2333">オフセットの既定値 0 およびサイズの既定値は、バッファーのパラメーターの長さ。</span><span class="sxs-lookup"><span data-stu-id="12190-2333">The offset defaults to 0 and the size defaults to the length of the buffer parameter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2334">呼び出しの前に<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>、明示的にバインドする必要があります、<xref:System.Net.Sockets.Socket>を使用して、ローカル エンドポイントを<xref:System.Net.Sockets.Socket.Bind%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2334">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="12190-2335">そうしない場合<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2335">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-2336">コネクションレスのプロトコルで<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はローカル ネットワーク バッファーに書き込まれる最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="12190-2336">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="12190-2337">受信したデータグラムがのサイズよりも大きいかどうか`buffer`、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは入力`buffer`メッセージは、可能であれば、throw の多くで、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2337">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2338">信頼性の低いプロトコルを使用している場合、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="12190-2338">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="12190-2339">信頼性の高いプロトコルを使用している場合、超過データは、サービス プロバイダーによって保持するを呼び出して取得することができます、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>のに十分な大きさのバッファーを持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2339">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="12190-2340">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはデータが読み取られるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-2340">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="12190-2341">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2341">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2342">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2342">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2343">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2343">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2344"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>向けコネクションレスのプロトコルを接続指向プロトコルも使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2344">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="12190-2345">これを行う場合は、する必要がありますまずか、リモート ホスト接続を確立するを呼び出して、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド着信リモートを受け入れるかを呼び出して接続をホスト、<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2345">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2346">確立したり、接続を呼び出す前に許可しない場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドが表示されます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2346">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2347">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2347">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2348">このような場合は、のいずれかで、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは無視されます、`remoteEP`パラメーターとのみデータが、接続されているまたは既定のリモート ホストを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2348">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-2349">接続指向のソケットと<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>のサイズの最大使用量のデータを読み取る`buffer`です。</span><span class="sxs-lookup"><span data-stu-id="12190-2349">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`.</span></span> <span data-ttu-id="12190-2350">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2350">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2351">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2351">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2352">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2352">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2353"><xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>と一致する必要があります、<xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2353">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2354">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2354">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2355">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2355">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2356">次のコード例では、リモート ホストからコネクションレス データグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2356">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="12190-2357"><xref:System.Net.Sockets.SocketFlags> 渡される、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2357"><xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#10)]
 [!code-csharp[Socket_Sync_Send_Receive#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#10)]
 [!code-vb[Socket_Sync_Send_Receive#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2358">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2358">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-2359">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2359">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2360">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2360">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2361">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2361">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-2362">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2362">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2363">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2363">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2364">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2364">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2365">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2365">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2366">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2366">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2367">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2367">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-2368">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2368">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2369">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータを受信してデータ バッファーに格納します。さらに、エンドポイントを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2369">Receives the specified number of bytes into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2370">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2370">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2371"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドへのデータを読み取り、`buffer`パラメーターが正常に読み取られたバイト数を返し、データの送信元となるリモート ホストのエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="12190-2371">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="12190-2372">このメソッドは、不明なホストまたは複数のホストからコネクションレス データグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="12190-2372">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="12190-2373">このオーバー ロードだけ指定する必要が、必要なを受信するバイト数、受信バッファー <xref:System.Net.Sockets.SocketFlags>、および<xref:System.Net.EndPoint>リモート ホストを表すです。</span><span class="sxs-lookup"><span data-stu-id="12190-2373">This overload only requires you to provide a receive buffer, the number of bytes you want to receive, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="12190-2374">バッファーは、既定値は 0 をオフセットします。</span><span class="sxs-lookup"><span data-stu-id="12190-2374">The buffer offset defaults to 0.</span></span>  
  
 <span data-ttu-id="12190-2375">コネクションレスのプロトコルで<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はローカル ネットワーク バッファーに書き込まれる最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="12190-2375">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="12190-2376">受信したデータグラムがのサイズよりも大きいかどうか`buffer`、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは入力`buffer`メッセージは、可能であれば、throw の多くで、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2376">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2377">信頼性の低いプロトコルを使用している場合、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="12190-2377">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="12190-2378">信頼性の高いプロトコルを使用している場合、超過データは、サービス プロバイダーによって保持するを呼び出して取得することができます、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>のに十分な大きさのバッファーを持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2378">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="12190-2379">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはデータが読み取られるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-2379">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="12190-2380">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2380">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2381">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2381">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2382">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2382">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2383"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>向けコネクションレスのプロトコルを接続指向プロトコルも使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2383">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="12190-2384">これを行う場合は、する必要がありますまずか、リモート ホスト接続を確立するを呼び出して、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド着信リモートを受け入れるかを呼び出して接続をホスト、<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2384">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2385">確立したり、接続を呼び出す前に許可しない場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドが表示されます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2385">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2386">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2386">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2387">このような場合は、のいずれかで、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは無視されます、`remoteEP`パラメーターとのみデータが、接続されているまたは既定のリモート ホストを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2387">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-2388">接続指向のソケットと<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>がで指定したバイトの数まで使用できる多くのデータを読み取り、`size`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-2388">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="12190-2389">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2389">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2390">呼び出しの前に<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>、明示的にバインドする必要があります、<xref:System.Net.Sockets.Socket>を使用して、ローカル エンドポイントを<xref:System.Net.Sockets.Socket.Bind%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2390">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="12190-2391">そうしない場合<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2391">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2392">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2392">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2393">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2393">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2394"><xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>と一致する必要があります、<xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2394">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2395">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2395">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2396">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2396">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2397">次のコード例では、リモート ホストからコネクションレス データグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2397">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="12190-2398">バッファー サイズ、および<xref:System.Net.Sockets.SocketFlags>に渡される、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2398">The buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#11)]
 [!code-csharp[Socket_Sync_Send_Receive#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#11)]
 [!code-vb[Socket_Sync_Send_Receive#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2399">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2399">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-2400">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2400">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2401">
            <paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2401">
              <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2402">または、<paramref name="size" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2402">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2403">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2403">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-2404">または、<see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2404">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span>
          </span>
          <span data-ttu-id="12190-2405">または、<see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2405">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2406">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2406">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-2407">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2407">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2408">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2408">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2409">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2409">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFrom : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.ReceiveFrom (buffer, offset, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2410">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2410">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-2411">受信したデータを格納する、<c>buffer</c> パラメーター内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2411">The position in the <c>buffer</c> parameter to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2412">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2412">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2413">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2413">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-2414">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2414">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2415">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、指定したバイト数のデータを受信して、データ バッファー内の指定した位置に格納します。またエンドポイントを格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2415">Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2416">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2416">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2417"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドへのデータを読み取り、`buffer`パラメーターが正常に読み取られたバイト数を返し、データの送信元となるリモート ホストのエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="12190-2417">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="12190-2418">このメソッドは、不明なホストまたは複数のホストからコネクションレス データグラムを受信する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="12190-2418">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="12190-2419">コネクションレスのプロトコルで<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はローカル ネットワーク バッファーに書き込まれる最初のエンキューされたデータグラムを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="12190-2419">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="12190-2420">受信したデータグラムがのサイズよりも大きいかどうか`buffer`、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは入力`buffer`メッセージは、可能であれば、throw の多くで、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2420">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2421">信頼性の低いプロトコルを使用している場合、余分なデータが失われます。</span><span class="sxs-lookup"><span data-stu-id="12190-2421">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="12190-2422">信頼性の高いプロトコルを使用している場合、超過データは、サービス プロバイダーによって保持するを呼び出して取得することができます、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>のに十分な大きさのバッファーを持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2422">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="12190-2423">読み取り、使用可能なデータがない場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはデータが読み取られるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-2423">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="12190-2424">モードの非ブロッキングであるし、利用可能なデータがない場合、プロトコル スタック バッファー、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはすぐに完了し、スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2424">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2425">使用することができます、<xref:System.Net.Sockets.Socket.Available%2A>プロパティ データが読み取り可能かを判断します。</span><span class="sxs-lookup"><span data-stu-id="12190-2425">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="12190-2426">ときに<xref:System.Net.Sockets.Socket.Available%2A>0 以外の場合は、受信操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2426">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="12190-2427"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A>向けコネクションレスのプロトコルを接続指向プロトコルも使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2427">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="12190-2428">これを行う場合は、する必要がありますまずか、リモート ホスト接続を確立するを呼び出して、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド着信リモートを受け入れるかを呼び出して接続をホスト、<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2428">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2429">確立したり、接続を呼び出す前に許可しない場合、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドが表示されます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2429">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2430">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2430">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="12190-2431">このような場合は、のいずれかで、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドは無視されます、`remoteEP`パラメーターとのみデータが、接続されているまたは既定のリモート ホストを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2431">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-2432">接続指向のソケットと<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>はバイト単位で指定された量まで利用可能な量のデータを読み取り、`size`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-2432">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the amount of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="12190-2433">リモート ホストがシャット ダウンした場合、<xref:System.Net.Sockets.Socket>との接続、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッド、および利用可能なすべてのデータを受信、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドはすぐに完了し、0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2433">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2434">呼び出しの前に<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>、明示的にバインドする必要があります、<xref:System.Net.Sockets.Socket>を使用して、ローカル エンドポイントを<xref:System.Net.Sockets.Socket.Bind%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2434">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="12190-2435">そうしない場合<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2435">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2436">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2436">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2437">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2437">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2438"><xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>と一致する必要があります、<xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2438">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2439">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2439">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2440">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2440">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2441">次のコード例では、リモート ホストからコネクションレス データグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2441">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="12190-2442">オフセット、バッファー サイズ、および<xref:System.Net.Sockets.SocketFlags>に渡される、<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2442">The offset, buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#12](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#12)]
 [!code-csharp[Socket_Sync_Send_Receive#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#12)]
 [!code-vb[Socket_Sync_Send_Receive#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2443">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2443">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-2444">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2444">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2445">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2445">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2446">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2446">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-2447">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2447">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2448">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さからオフセット パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2448">-or-  <paramref name="size" /> is greater than the length of the <paramref name="buffer" /> minus the value of the offset parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2449">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2449">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-2450">または、<see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2450">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span>
          </span>
          <span data-ttu-id="12190-2451">または、ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2451">-or-  An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2452">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2452">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2453">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2453">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2454">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2454">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFromAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveFromAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveFromAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveFromAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveFromAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveFromAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-2455">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2455">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2456">指定したネットワーク デバイスから、データの非同期の受信を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2456">Begins to asynchronously receive data from a specified network device.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2457">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2457">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-2458">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2458">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-2459">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2459">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-2460">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2460">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2461"><xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>コネクションレス ソケット上のデータを受信するには、主にメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-2461">The <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> method is used primarily to receive data on a connectionless socket.</span></span> <span data-ttu-id="12190-2462">ソケットのローカル アドレスは認識されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2462">The socket's local address must be known.</span></span>  
  
 <span data-ttu-id="12190-2463">呼び出し元を設定する必要があります、<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティを<xref:System.Net.IPEndPoint>リモート ホストの元のデータを受信することです。</span><span class="sxs-lookup"><span data-stu-id="12190-2463">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.</span></span>  
  
 <span data-ttu-id="12190-2464"><xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>プロパティを`e`パラメーターが読み取り要求に関する追加情報がウィンドウのソケットのサービス プロバイダーを提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-2464">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request.</span></span> <span data-ttu-id="12190-2465">このパラメーターを使用する方法の詳細については、次を参照してください。<xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2465">For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="12190-2466">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが正常にこのメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2466">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-2467">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2467">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-2468">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2468">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-2469">メッセージ指向のソケットでは、受信メッセージは、バッファーの合計サイズの最大バッファーに配置します。</span><span class="sxs-lookup"><span data-stu-id="12190-2469">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer.</span></span> <span data-ttu-id="12190-2470"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>と<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>プロパティは、バッファー内のデータの配置場所と、データの量を決定します。</span><span class="sxs-lookup"><span data-stu-id="12190-2470">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 <span data-ttu-id="12190-2471">バイト ストリーム – スタイルのソケットの受信データが、バッファーが指定された、接続を終了すると、または内部バッファー内のデータがなくなるまで、バッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="12190-2471">For byte stream–style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.</span></span> <span data-ttu-id="12190-2472"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>と<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>プロパティは、バッファー内のデータの配置場所と、データの量を決定します。</span><span class="sxs-lookup"><span data-stu-id="12190-2472">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2473">
            <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> に null 値を指定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2473">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-2474">
            <paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2474">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-2475">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2475">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2476">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2476">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2477">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2477">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public int ReceiveMessageFrom (byte[] buffer, int offset, int size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveMessageFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags&amp; socketFlags, class System.Net.EndPoint&amp; remoteEP, [out] valuetype System.Net.Sockets.IPPacketInformation&amp; ipPacketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveMessageFrom (buffer As Byte(), offset As Integer, size As Integer, ByRef socketFlags As SocketFlags, ByRef remoteEP As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveMessageFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags % socketFlags, System::Net::EndPoint ^ % remoteEP, [Runtime::InteropServices::Out] System::Net::Sockets::IPPacketInformation % ipPacketInformation);" />
      <MemberSignature Language="F#" Value="member this.ReceiveMessageFrom : byte[] * int * int *  *  *  -&gt; int" Usage="socket.ReceiveMessageFrom (buffer, offset, size, socketFlags, remoteEP, ipPacketInformation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags&amp;" RefType="ref" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="ipPacketInformation" Type="System.Net.Sockets.IPPacketInformation&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2478">受信したデータの格納場所である、<see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2478">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-2479">受信したデータを格納する、<c>buffer</c> パラメーター内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2479">The position in the <c>buffer</c> parameter to store the received data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2480">受信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2480">The number of bytes to receive.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2481">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2481">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-2482">リモート サーバーを表す、参照渡しされた <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2482">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span>
          </span>
        </param>
        <param name="ipPacketInformation">
          <span data-ttu-id="12190-2483">アドレスとインターフェイスの情報を保持する <see cref="T:System.Net.Sockets.IPPacketInformation" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2483">An <see cref="T:System.Net.Sockets.IPPacketInformation" /> holding address and interface information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2484">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、指定したバイト数のデータをデータ バッファー内の指定した位置で受信して、エンドポイントおよびパケット情報を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2484">Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint and packet information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2485">受信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2485">The number of bytes received.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2486"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドへのデータを読み取り、`buffer`パラメーターが正常に読み取られたバイト数を返し、データの送信元、受信したパケットに関する情報だけでなく、リモート ホストのエンドポイントをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="12190-2486">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent, as well as information about the received packet.</span></span>  
  
 <span data-ttu-id="12190-2487"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>コネクションレス ソケットでメッセージ データを受信するには、主にメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-2487">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method is used primarily to receive message data on a connectionless socket.</span></span> <span data-ttu-id="12190-2488">ソケットのローカル アドレスは認識されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2488">The socket's local address must be known.</span></span> <span data-ttu-id="12190-2489">このメソッドは、データグラムと生のソケットとのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2489">This method can only be used with datagram and raw sockets.</span></span> <span data-ttu-id="12190-2490">ソケットの種類に設定されたソケットを初期化する必要があります<xref:System.Net.Sockets.SocketType.Dgram>または<xref:System.Net.Sockets.SocketType.Raw>このメソッドを呼び出す前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-2490">The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType.Dgram> or <xref:System.Net.Sockets.SocketType.Raw> before calling this method.</span></span> <span data-ttu-id="12190-2491">これを使用して、ソケットを作成するとき<xref:System.Net.Sockets.Socket.%23ctor%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2491">This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="12190-2492">メッセージ指向のソケットでは、受信メッセージに配置、`buffer`パラメーターで指定された合計サイズの最大、`size`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-2492">For message-oriented sockets, an incoming message is placed into the `buffer` parameter up to the total size specified in the `size` parameter.</span></span> <span data-ttu-id="12190-2493">`offset`パラメーター内の場所を決定する、`buffer`データが配置されます。</span><span class="sxs-lookup"><span data-stu-id="12190-2493">The `offset` parameter determines where in the `buffer` the data is placed.</span></span> <span data-ttu-id="12190-2494">配置している実際のデータ量、`buffer`によって返される、<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2494">The actual amount of data placed into the `buffer` is returned by the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="12190-2495"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドに自動的にメソッドを設定、<xref:System.Net.Sockets.SocketOptionName.PacketInformation>ソケット オプションに`true`初めて呼び出された、指定された<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2495">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method automatically method sets the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-2496">ただし、返された<xref:System.Net.Sockets.IPPacketInformation>オブジェクトがのみ有効になります、ソケット オプションが設定された後に、ローカル コンピューターに到達するパケットです。</span><span class="sxs-lookup"><span data-stu-id="12190-2496">However, the returned <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set.</span></span> <span data-ttu-id="12190-2497">ローカル エンドポイントにバインドされている場合、ソケットの間でパケットが送信する場合 (によって明示的に、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドの 1 つによって暗黙的にまたは、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>、 <xref:System.Net.Sockets.Socket.SendTo%2A>、または<xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッド) とその最初の呼び出し、 <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドを呼び出し<xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A>メソッドは無効な<xref:System.Net.Sockets.IPPacketInformation>これらのパケットのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="12190-2497">If a socket is sent packets between when it is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and its first call to the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method, calls to <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method will return invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.</span></span>  
  
 <span data-ttu-id="12190-2498">ようにすべて<xref:System.Net.Sockets.IPPacketInformation>オブジェクトが有効で、アプリケーションを設定する必要があります、<xref:System.Net.Sockets.SocketOptionName.PacketInformation>ソケット オプションに`true`を使用して、ローカル エンドポイントにバインドされる前に、<xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2498">To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="12190-2499">アプリケーションを調べることができます、`ipPacketInformation`ユニキャスト、マルチキャスト、またはブロードキャスト アドレスを使用してデータグラムが送信されたかを把握する必要がある場合のパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="12190-2499">An application can examine the `ipPacketInformation` parameter if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2500"><xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.ReceiveFrom%2A>と一致する必要があります、<xref:System.Net.Sockets.AddressFamily>の<xref:System.Net.EndPoint>で使用される<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2500">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2501">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2501">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2502">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2502">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2503">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2503">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-2504">\- または -  <paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2504">\- or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2505">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2505">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2506">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2506">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-2507">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2507">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2508">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さからオフセット パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2508">-or-  <paramref name="size" /> is greater than the length of the <paramref name="buffer" /> minus the value of the offset parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2509">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2509">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-2510">または、<see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> プロパティが設定されていませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2510">-or-  The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span>
          </span>
          <span data-ttu-id="12190-2511">または、.NET Framework が、AMD 64 ビット プロセッサ上で実行されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2511">-or-  The .NET Framework is running on an AMD 64-bit processor.</span>
          </span>
          <span data-ttu-id="12190-2512">または、ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2512">-or-  An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2513">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2513">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-2514">Windows 2000 以前のオペレーティング システムです。このメソッドを使用するには、Windows XP が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2514">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span>
          </span>
        </exception>
        <permission cref="T:System.Net.SocketPermission">
          <span data-ttu-id="12190-2515">ネットワークからの接続を受け入れるため。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2515">for accepting connections from the network.</span>
          </span>
          <span data-ttu-id="12190-2516">
            <see cref="F:System.Net.NetworkAccess.Accept" /> (関連する列挙体)</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2516">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span>
          </span>
        </permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFromAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveMessageFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveMessageFromAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveMessageFromAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveMessageFromAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.ReceiveMessageFromAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.ReceiveMessageFromAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-2517">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2517">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2518">指定された <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" /> を使用し、指定されたバイト数のデータの非同期受信を開始して、データ バッファー内の指定された場所に格納します。さらに、エンドポイントとパケットの情報を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2518">Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" />, and stores the endpoint and packet information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2519">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2519">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-2520">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2520">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-2521">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2521">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-2522">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2522">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2523"><xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>コネクションレス ソケットでメッセージ データを受信するには、主にメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-2523">The <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method is used primarily to receive message data on a connectionless socket.</span></span> <span data-ttu-id="12190-2524">ソケットのローカル アドレスは認識されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2524">The socket's local address must be known.</span></span> <span data-ttu-id="12190-2525">このメソッドは、データグラムと生のソケットとのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2525">This method can only be used with datagram and raw sockets.</span></span> <span data-ttu-id="12190-2526">ソケットの種類に設定されたソケットを初期化する必要があります<xref:System.Net.Sockets.SocketType.Dgram>または<xref:System.Net.Sockets.SocketType.Raw>このメソッドを呼び出す前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-2526">The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType.Dgram> or <xref:System.Net.Sockets.SocketType.Raw> before calling this method.</span></span> <span data-ttu-id="12190-2527">これを使用して、ソケットを作成するとき<xref:System.Net.Sockets.Socket.%23ctor%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2527">This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="12190-2528">呼び出し元を設定する必要があります、<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティを<xref:System.Net.IPEndPoint>リモート ホストの元のデータを受信することです。</span><span class="sxs-lookup"><span data-stu-id="12190-2528">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.</span></span>  
  
 <span data-ttu-id="12190-2529">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが正常にこのメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2529">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-2530">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2530">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-2531">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2531">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-2532">メッセージ指向のソケットでは、受信メッセージは、バッファーの合計サイズの最大バッファーに配置します。</span><span class="sxs-lookup"><span data-stu-id="12190-2532">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer.</span></span> <span data-ttu-id="12190-2533"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>と<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>プロパティは、バッファー内のデータの配置場所と、データの量を決定します。</span><span class="sxs-lookup"><span data-stu-id="12190-2533">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 <span data-ttu-id="12190-2534"><xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>メソッドが自動的に設定、<xref:System.Net.Sockets.SocketOptionName.PacketInformation>ソケット オプションに`true`初めて呼び出された、指定された<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2534">The <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method automatically sets the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-2535">ただし、<xref:System.Net.Sockets.IPPacketInformation>オブジェクトがのみ有効になります、ソケット オプションが設定された後に、ローカル コンピューターに到達するパケットです。</span><span class="sxs-lookup"><span data-stu-id="12190-2535">However, the <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set.</span></span> <span data-ttu-id="12190-2536">ソケットがローカル エンドポイントにバインドされている場合、ソケットの間でパケットが送信する場合 (によって明示的に、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドまたはの 1 つによって暗黙的に、 <xref:System.Net.Sockets.Socket.Connect%2A>、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>、 <xref:System.Net.Sockets.Socket.SendTo%2A>、または<xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッド) および最初の呼び出し、 <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>へのメソッドを呼び出し<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>メソッドは無効になります<xref:System.Net.Sockets.IPPacketInformation>これらのパケットのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="12190-2536">If a socket is sent packets between when the socket is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and the first call to the <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method, calls to <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method will result in invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.</span></span>  
  
 <span data-ttu-id="12190-2537">ようにすべて<xref:System.Net.Sockets.IPPacketInformation>オブジェクトが有効で、アプリケーションを設定する必要があります、<xref:System.Net.Sockets.SocketOptionName.PacketInformation>ソケット オプションに`true`を使用して、ローカル エンドポイントにバインドされる前に、<xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2537">To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to`true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="12190-2538">アプリケーションは、その結果を調べることができます<xref:System.Net.Sockets.IPPacketInformation>オブジェクトのかどうか、ユニキャスト、マルチキャスト、またはブロードキャスト アドレスを使用してデータグラムが送信されたかを知る必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2538">An application can examine the resulting <xref:System.Net.Sockets.IPPacketInformation> objects if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2539">
            <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> に null 値を指定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2539">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-2540">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2540">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2541">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2541">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2542">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2542">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveTimeout : int with get, set" Usage="System.Net.Sockets.Socket.ReceiveTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-2543">同期の <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 呼び出しがタイムアウトするまでの合計時間を指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2543">Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Receive" /> call will time out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-2544">タイムアウト値 (ミリ秒)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2544">The time-out value, in milliseconds.</span>
          </span>
          <span data-ttu-id="12190-2545">既定値は 0 です。タイムアウトが無期限であることを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2545">The default value is 0, which indicates an infinite time-out period.</span>
          </span>
          <span data-ttu-id="12190-2546">-1 の指定も、タイムアウトが無期限であることを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2546">Specifying -1 also indicates an infinite time-out period.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2547">このオプションを適用する同期<xref:System.Net.Sockets.Socket.Receive%2A>呼び出しのみです。</span><span class="sxs-lookup"><span data-stu-id="12190-2547">This option applies to synchronous <xref:System.Net.Sockets.Socket.Receive%2A> calls only.</span></span> <span data-ttu-id="12190-2548">タイムアウト期間を超えた場合、<xref:System.Net.Sockets.Socket.Receive%2A>メソッドがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2548">If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2549">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.ReceiveTimeout%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2549">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2550">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2550">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2551">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2551">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2552">設定操作として指定された値が -1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2552">The value specified for a set operation is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoteEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint RemoteEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint RemoteEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoteEndPoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ RemoteEndPoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteEndPoint : System.Net.EndPoint" Usage="System.Net.Sockets.Socket.RemoteEndPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-2553">リモート エンドポイントを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2553">Gets the remote endpoint.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-2554">
            <see cref="T:System.Net.EndPoint" /> の通信先の <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2554">The <see cref="T:System.Net.EndPoint" /> with which the <see cref="T:System.Net.Sockets.Socket" /> is communicating.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2555">接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>プロパティを取得、<xref:System.Net.EndPoint>するリモート IP アドレスとポート番号を格納している、<xref:System.Net.Sockets.Socket>が接続されています。</span><span class="sxs-lookup"><span data-stu-id="12190-2555">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property gets the <xref:System.Net.EndPoint> that contains the remote IP address and port number to which the <xref:System.Net.Sockets.Socket> is connected.</span></span> <span data-ttu-id="12190-2556">コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>既定リモート IP アドレスとポート番号が含まれています、<xref:System.Net.Sockets.Socket>と通信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2556">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> contains the default remote IP address and port number with which the <xref:System.Net.Sockets.Socket> will communicate.</span></span> <span data-ttu-id="12190-2557">これをキャストする必要があります<xref:System.Net.EndPoint>を<xref:System.Net.IPEndPoint>すべての情報を取得する前にします。</span><span class="sxs-lookup"><span data-stu-id="12190-2557">You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information.</span></span> <span data-ttu-id="12190-2558">呼び出すことができます、<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>リモートを取得する方法を<xref:System.Net.IPAddress>、および<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>をリモートのポート番号を取得する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-2558">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to retrieve the remote <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to retrieve the remote port number.</span></span>  
  
 <span data-ttu-id="12190-2559"><xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>いずれかへの呼び出し後に設定されている<xref:System.Net.Sockets.Socket.Accept%2A>または<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2559">The <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> is set after a call to either <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2560">以前にこのプロパティにアクセスしようとする場合<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2560">If you try to access this property earlier, <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2561">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2561">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2562">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2562">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2563">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2563">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2564">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2564">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2565">次のコード例では、取得し、ローカルおよびリモート エンドポイントを表示します。</span><span class="sxs-lookup"><span data-stu-id="12190-2565">The following code example retrieves and displays the local and remote endpoints.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#4)]
 [!code-csharp[Socket_Socket_Options#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#4)]
 [!code-vb[Socket_Socket_Options#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2566">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2566">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2567">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2567">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public static void Select (System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, int microSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Select(class System.Collections.IList checkRead, class System.Collections.IList checkWrite, class System.Collections.IList checkError, int32 microSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Select (checkRead As IList, checkWrite As IList, checkError As IList, microSeconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Select(System::Collections::IList ^ checkRead, System::Collections::IList ^ checkWrite, System::Collections::IList ^ checkError, int microSeconds);" />
      <MemberSignature Language="F#" Value="static member Select : System.Collections.IList * System.Collections.IList * System.Collections.IList * int -&gt; unit" Usage="System.Net.Sockets.Socket.Select (checkRead, checkWrite, checkError, microSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkRead" Type="System.Collections.IList" />
        <Parameter Name="checkWrite" Type="System.Collections.IList" />
        <Parameter Name="checkError" Type="System.Collections.IList" />
        <Parameter Name="microSeconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="checkRead">
          <span data-ttu-id="12190-2568">読みやすさを確認する <see cref="T:System.Net.Sockets.Socket" /> インスタンスの <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2568">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for readability.</span>
          </span>
        </param>
        <param name="checkWrite">
          <span data-ttu-id="12190-2569">書き込み機能をチェックする <see cref="T:System.Net.Sockets.Socket" /> インスタンスの <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2569">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for writability.</span>
          </span>
        </param>
        <param name="checkError">
          <span data-ttu-id="12190-2570">エラーをチェックする <see cref="T:System.Net.Sockets.Socket" /> インスタンスの <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2570">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for errors.</span>
          </span>
        </param>
        <param name="microSeconds">
          <span data-ttu-id="12190-2571">タイムアウト値 (マイクロ秒)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2571">The time-out value, in microseconds.</span>
          </span>
          <span data-ttu-id="12190-2572">値が -1 の場合は、タイムアウトが無限であることを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2572">A -1 value indicates an infinite time-out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2573">1 つまたは複数のソケットのステータスを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2573">Determines the status of one or more sockets.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2574"><xref:System.Net.Sockets.Socket.Select%2A> 1 つまたは複数のステータスを決定する静的メソッドは、<xref:System.Net.Sockets.Socket>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="12190-2574"><xref:System.Net.Sockets.Socket.Select%2A> is a static method that determines the status of one or more <xref:System.Net.Sockets.Socket> instances.</span></span> <span data-ttu-id="12190-2575">1 つまたは複数のソケットを配置する必要があります、<xref:System.Collections.IList>使用する前に、<xref:System.Net.Sockets.Socket.Select%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2575">You must place one or more sockets into an <xref:System.Collections.IList> before you can use the <xref:System.Net.Sockets.Socket.Select%2A> method.</span></span> <span data-ttu-id="12190-2576">読みやすさを呼び出して確認<xref:System.Net.Sockets.Socket.Select%2A>で、<xref:System.Collections.IList>として、`checkRead`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-2576">Check for readability by calling <xref:System.Net.Sockets.Socket.Select%2A> with the <xref:System.Collections.IList> as the `checkRead` parameter.</span></span> <span data-ttu-id="12190-2577">確認するには、どうを使用して、`checkWrite`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-2577">To check your sockets for writability, use the `checkWrite` parameter.</span></span> <span data-ttu-id="12190-2578">エラー条件を検出するため使用`checkError`です。</span><span class="sxs-lookup"><span data-stu-id="12190-2578">For detecting error conditions, use `checkError`.</span></span> <span data-ttu-id="12190-2579">呼び出した後<xref:System.Net.Sockets.Socket.Select%2A>、<xref:System.Collections.IList>の条件を満たすソケットのみが格納されます。</span><span class="sxs-lookup"><span data-stu-id="12190-2579">After calling <xref:System.Net.Sockets.Socket.Select%2A>, the <xref:System.Collections.IList> will be filled with only those sockets that satisfy the conditions.</span></span>  
  
 <span data-ttu-id="12190-2580">リッスン状態の場合は、読みやすくすることを意味する呼び出し<xref:System.Net.Sockets.Socket.Accept%2A>ブロックすることがなくは成功します。</span><span class="sxs-lookup"><span data-stu-id="12190-2580">If you are in a listening state, readability means that a call to <xref:System.Net.Sockets.Socket.Accept%2A> will succeed without blocking.</span></span> <span data-ttu-id="12190-2581">接続を受け入れている場合、読みやすさはデータが読み取り可能であるを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2581">If you have already accepted the connection, readability means that data is available for reading.</span></span> <span data-ttu-id="12190-2582">このような場合は、すべての受信操作はブロックすることがなく成功します。</span><span class="sxs-lookup"><span data-stu-id="12190-2582">In these cases, all receive operations will succeed without blocking.</span></span> <span data-ttu-id="12190-2583">読みやすくすることもあるかどうか、リモート<xref:System.Net.Sockets.Socket>がシャット ダウン接続以外の場合はそのケースへの呼び出し<xref:System.Net.Sockets.Socket.Receive%2A>は返されたゼロのバイト数で、すぐに戻ります。</span><span class="sxs-lookup"><span data-stu-id="12190-2583">Readability can also indicate whether the remote <xref:System.Net.Sockets.Socket> has shut down the connection; in that case a call to <xref:System.Net.Sockets.Socket.Receive%2A> will return immediately, with zero bytes returned.</span></span>  
  
 <span data-ttu-id="12190-2584"><xref:System.Net.Sockets.Socket.Select%2A> 時に返す目的のソケットの少なくとも 1 つ (におけるソケット、 `checkRead`、 `checkWrite`、および`checkError`を一覧表示) が、指定した条件を満たしている、または`microSeconds`パラメーターを超過すると、どちらか早い方です。</span><span class="sxs-lookup"><span data-stu-id="12190-2584"><xref:System.Net.Sockets.Socket.Select%2A> returns when at least one of the sockets of interest (the sockets in the `checkRead`, `checkWrite`, and `checkError` lists) meets its specified criteria, or the `microSeconds` parameter is exceeded, whichever comes first.</span></span> <span data-ttu-id="12190-2585">設定`microSeconds`を-1 に無限のタイムアウトを指定します。</span><span class="sxs-lookup"><span data-stu-id="12190-2585">Setting `microSeconds` to -1 specifies an infinite time-out.</span></span>  
  
 <span data-ttu-id="12190-2586">非ブロッキング呼び出しを行う場合<xref:System.Net.Sockets.Socket.Connect%2A>、書き込みの許可が正常に接続していることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2586">If you make a nonblocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, writability means that you have connected successfully.</span></span> <span data-ttu-id="12190-2587">確立された接続がある場合、書き込みの許可は、すべての送信操作はブロックすることがなく成功を意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2587">If you already have a connection established, writability means that all send operations will succeed without blocking.</span></span>  
  
 <span data-ttu-id="12190-2588">非ブロッキング呼び出しを行ったかどうか<xref:System.Net.Sockets.Socket.Connect%2A>、`checkerror`パラメーターが正常に接続されていないソケットを識別します。</span><span class="sxs-lookup"><span data-stu-id="12190-2588">If you have made a non-blocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, the `checkerror` parameter identifies sockets that have not connected successfully.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2589">使用して、<xref:System.Net.Sockets.Socket.Poll%2A>メソッドの場合は、1 つの状態を判別する<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2589">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method if you only want to determine the status of a single <xref:System.Net.Sockets.Socket>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2590">このメソッドは、切断されたネットワーク ケーブルなどの接続に関する問題の特定の種類を検出できない場合や、リモート ホストが異常停止されたことです。</span><span class="sxs-lookup"><span data-stu-id="12190-2590">This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully.</span></span> <span data-ttu-id="12190-2591">このようなエラーを検出するためにデータの送受信を送信しようとする必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2591">You must attempt to send or receive data to detect these kinds of errors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2592">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2592">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2593">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2593">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2594">次のコード例では<xref:System.Net.Sockets.Socket.Select%2A>接続要求をリッスンしているソケットを決定します。</span><span class="sxs-lookup"><span data-stu-id="12190-2594">The following code example uses <xref:System.Net.Sockets.Socket.Select%2A> to determine which listening sockets have a connection request.</span></span>  
  
 [!code-cpp[Socket_Select#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Select/CPP/source.cpp#1)]
 [!code-csharp[Socket_Select#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Select/CS/source.cs#1)]
 [!code-vb[Socket_Select#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Select/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2595">
            <paramref name="checkRead" /> パラメーターは <see langword="null" /> または空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2595">The <paramref name="checkRead" /> parameter is <see langword="null" /> or empty.</span>
          </span>
          <span data-ttu-id="12190-2596">- および -  <paramref name="checkWrite" /> パラメーターが <see langword="null" /> または空です。  - および -  <paramref name="checkError" /> パラメーターが <see langword="null" /> または空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2596">-and-  The <paramref name="checkWrite" /> parameter is <see langword="null" /> or empty  -and-  The <paramref name="checkError" /> parameter is <see langword="null" /> or empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2597">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2597">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-2598">接続された <see cref="T:System.Net.Sockets.Socket" /> にデータを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2598">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffer As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] -&gt; int" Usage="socket.Send buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2599">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2599">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2600">接続された <see cref="T:System.Net.Sockets.Socket" /> にデータを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2600">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2601">
            <see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2601">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2602"><xref:System.Net.Sockets.Socket.Send%2A> 指定されたリモート ホストにデータを同期的に送信、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドを正常に送信したバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2602"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="12190-2603"><xref:System.Net.Sockets.Socket.Send%2A> 接続指向とコネクションレス プロトコルの両方を使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2603"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="12190-2604">このオーバー ロードには、送信するデータを格納しているバッファーが必要です。</span><span class="sxs-lookup"><span data-stu-id="12190-2604">This overload requires a buffer that contains the data you want to send.</span></span> <span data-ttu-id="12190-2605"><xref:System.Net.Sockets.SocketFlags>を 0 に初期値として、バッファーのオフセットの既定値は 0、およびバッファーのサイズを既定値を送信するバイト数。</span><span class="sxs-lookup"><span data-stu-id="12190-2605">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</span></span>  
  
 <span data-ttu-id="12190-2606">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に、または<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2606">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2607">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2607">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2608">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2608">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-2609">使用しない場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す必要が<xref:System.Net.Sockets.Socket.Connect%2A>への各呼び出しの前に<xref:System.Net.Sockets.Socket.Send%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2609">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="12190-2610">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2610">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2611">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.Send%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2611">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="12190-2612">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Send%2A>を使用して、タイムアウトが設定されていない限り、すべてのバッファー内のバイトを送信するまでブロックされます<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2612">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2613">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Send%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2613">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2614">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.Send%2A>送信バッファー内のバイト数より小さい場合でも正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2614">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="12190-2615">送信されたバイト数を追跡して、アプリケーションが、バッファー内のバイトを送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-2615">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="12190-2616">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2616">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2617">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2617">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2618">正常に完了する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2618">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2619">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2619">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2620">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2620">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2621">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-2621">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-2622">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2622">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2623">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2623">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2624">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2624">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2625">次のコード例を示しますに接続されたデータの送信<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2625">The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Sync_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Sync_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2626">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2626">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2627">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2627">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2628">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2628">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffers As IList(Of ArraySegment(Of Byte))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; -&gt; int" Usage="socket.Send buffers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-2629">送信するデータを格納する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" /> のリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2629">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2630">リスト内のバッファーのセットを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2630">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2631">
            <see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2631">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2632"><xref:System.Net.Sockets.Socket.Send%2A> 接続指向とコネクションレス プロトコルの両方を使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2632"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="12190-2633">このオーバー ロードには、送信するデータを含む、少なくとも 1 つのバッファーが必要です。</span><span class="sxs-lookup"><span data-stu-id="12190-2633">This overload requires at least one buffer that contains the data you want to send.</span></span>  
  
 <span data-ttu-id="12190-2634">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に、または<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2634">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2635">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2635">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2636">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2636">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-2637">使用しない場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す必要が<xref:System.Net.Sockets.Socket.Connect%2A>への各呼び出しの前に<xref:System.Net.Sockets.Socket.Send%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2637">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="12190-2638">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2638">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2639">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.Send%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2639">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="12190-2640">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Send%2A>を使用して、タイムアウトが設定されていない限り、すべてのバッファー内のバイトを送信するまでブロックされます<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2640">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2641">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Send%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2641">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2642">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.Send%2A>送信バッファー内のバイト数より小さい場合でも正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2642">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="12190-2643">送信されたバイト数を追跡して、アプリケーションが、バッファー内のバイトを送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-2643">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="12190-2644">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2644">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2645">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2645">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2646">正常に完了する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2646">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2647">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2647">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2648">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2648">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2649">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-2649">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-2650">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2650">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2651">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2651">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2652">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2652">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2653">
            <paramref name="buffers" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2653">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-2654">
            <paramref name="buffers" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2654">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2655">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2655">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-2656">以下の解説を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2656">See remarks section below.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2657">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2657">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffer As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; -&gt; int" Usage="socket.Send buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2658">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2658">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2659">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2659">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2660">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、接続された <see cref="T:System.Net.Sockets.Socket" /> にデータを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2660">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" /> using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2661">
            <see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2661">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2662"><xref:System.Net.Sockets.Socket.Send%2A> 確立されているリモート ホストにデータを同期的に送信、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドを正常に送信したバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2662"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="12190-2663"><xref:System.Net.Sockets.Socket.Send%2A>接続指向とコネクションレス プロトコルの両方のメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2663">The <xref:System.Net.Sockets.Socket.Send%2A> method can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="12190-2664">このオーバー ロードは、送信するデータを格納するバッファーとビットごとの組み合わせが必要です。<xref:System.Net.Sockets.SocketFlags>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2664">This overload requires a buffer that contains the data you want to send and a bitwise combination of <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="12190-2665">バッファーは、既定値は 0、およびバッファーのサイズを既定値を送信するバイト数をオフセットします。</span><span class="sxs-lookup"><span data-stu-id="12190-2665">The buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</span></span> <span data-ttu-id="12190-2666">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターの値に、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-2666">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter value, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-2667">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に、または<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2667">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2668">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2668">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2669">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2669">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-2670">使用しない場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す必要が、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドに対する各呼び出しの前に<xref:System.Net.Sockets.Socket.Send%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2670">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="12190-2671">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2671">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2672">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.Send%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2672">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="12190-2673">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Send%2A>を使用して、タイムアウトが設定されていない限り、すべてのバッファー内のバイトを送信するまでブロックされます<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2673">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2674">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Send%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2674">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2675">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.Send%2A>送信バッファー内のバイト数より小さい場合でも正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2675">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="12190-2676">送信されたバイト数を追跡して、アプリケーションが要求されたバイト数を送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-2676">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="12190-2677">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2677">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2678">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2678">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2679">正常に完了する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2679">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2680">バッファーのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2680">You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-2681">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2681">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2682">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2682">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2683">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2683">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2684">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-2684">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-2685">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2685">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2686">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2686">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2687">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2687">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2688">次のコード例を示しますに接続されたデータの送信<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2688">The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Sync_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Sync_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2689">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2689">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2690">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2690">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2691">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2691">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffers, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-2692">送信するデータを格納する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" /> のリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2692">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2693">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2693">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2694">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、リスト内のバッファーのセットを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2694">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2695">
            <see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2695">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2696">このオーバー ロードには、送信するデータを含む、少なくとも 1 つのバッファーが必要です。</span><span class="sxs-lookup"><span data-stu-id="12190-2696">This overload requires at least one buffer that contains the data you want to send.</span></span> <span data-ttu-id="12190-2697"><xref:System.Net.Sockets.SocketFlags>値の既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="12190-2697">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span> <span data-ttu-id="12190-2698">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketFlags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-2698">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketFlags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-2699">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に、または<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2699">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2700">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2700">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2701">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2701">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-2702">使用しない場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す必要が<xref:System.Net.Sockets.Socket.Connect%2A>への各呼び出しの前に<xref:System.Net.Sockets.Socket.Send%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2702">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="12190-2703">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2703">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2704">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.Send%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2704">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="12190-2705">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Send%2A>を使用して、タイムアウトが設定されていない限り、すべてのバッファー内のバイトを送信するまでブロックされます<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2705">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2706">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Send%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2706">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2707">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.Send%2A>送信バッファー内のバイト数より小さい場合でも正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2707">In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="12190-2708">送信されたバイト数を追跡して、アプリケーションが、バッファー内のバイトを送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-2708">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="12190-2709">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2709">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2710">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2710">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2711">正常に完了する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2711">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2712">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2712">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2713">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2713">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2714">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-2714">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-2715">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2715">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2716">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2716">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2717">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2717">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2718">
            <paramref name="buffers" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2718">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-2719">
            <paramref name="buffers" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2719">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2720">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2720">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2721">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2721">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2722">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2722">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2723">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2723">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2724">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2724">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2725">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータを、接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2725">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2726">
            <see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2726">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2727"><xref:System.Net.Sockets.Socket.Send%2A> 確立されているリモート ホストにデータを同期的に送信、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドを正常に送信したバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2727"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="12190-2728"><xref:System.Net.Sockets.Socket.Send%2A> 接続指向とコネクションレス プロトコルの両方を使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2728"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="12190-2729">このオーバー ロードには、送信するバイト数といずれかのビットごとの組み合わせを送信するデータを格納するバッファーが必要です。<xref:System.Net.Sockets.SocketFlags>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2729">This overload requires a buffer that contains the data you want to send, the number of bytes you want to send, and a bitwise combination of any <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="12190-2730">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-2730">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-2731">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に、または<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2731">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2732">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2732">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2733">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2733">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-2734">使用しない場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す必要が、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドに対する各呼び出しの前に、<xref:System.Net.Sockets.Socket.Send%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2734">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="12190-2735">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2735">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2736">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.Send%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2736">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="12190-2737">接続指向プロトコルが<xref:System.Net.Sockets.Socket.Send%2A>を使用して、タイムアウトが設定されていない限り、要求されたバイト数を送信するまでブロックされます<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2737">With a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2738">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Send%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2738">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2739">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.Send%2A>送信を要求したバイト数よりも少ない場合でも正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2739">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="12190-2740">送信されたバイト数を追跡して、アプリケーションが要求されたバイト数を送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-2740">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="12190-2741">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2741">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2742">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2742">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2743">正常に完了する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2743">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2744">サイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2744">You must ensure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-2745">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2745">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2746">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2746">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2747">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2747">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2748">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-2748">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-2749">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2749">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2750">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2750">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2751">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2751">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2752">次のコード例は、バッファーで見つかったデータを送信し、指定<xref:System.Net.Sockets.SocketFlags.None>の<xref:System.Net.Sockets.SocketFlags>します。</span><span class="sxs-lookup"><span data-stu-id="12190-2752">The following code example sends the data found in buffer, and specifies <xref:System.Net.Sockets.SocketFlags.None> for <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#3)]
 [!code-csharp[Socket_Sync_Send_Receive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#3)]
 [!code-vb[Socket_Sync_Send_Receive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2753">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2753">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2754">
            <paramref name="size" /> が 0 未満か、バッファーのサイズを超える値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2754">
              <paramref name="size" /> is less than 0 or exceeds the size of the buffer.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2755">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2755">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-2756">または、ソケットへのアクセス中にオペレーティング システム エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2756">-or-  An operating system error occurs while accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2757">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2757">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffers, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffers">
          <span data-ttu-id="12190-2758">送信するデータを格納する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" /> のリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2758">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2759">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2759">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-2760">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2760">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2761">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、リスト内のバッファーのセットを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2761">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2762">
            <see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2762">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2763">このオーバー ロードには、送信するデータを含む、少なくとも 1 つのバッファーが必要です。</span><span class="sxs-lookup"><span data-stu-id="12190-2763">This overload requires at least one buffer that contains the data you want to send.</span></span> <span data-ttu-id="12190-2764"><xref:System.Net.Sockets.SocketFlags>値の既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="12190-2764">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span> <span data-ttu-id="12190-2765">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketFlags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-2765">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketFlags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-2766">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に、または<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2766">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2767">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2767">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2768">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2768">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-2769">使用しない場合、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドを呼び出す必要が<xref:System.Net.Sockets.Socket.Connect%2A>への各呼び出しの前に<xref:System.Net.Sockets.Socket.Send%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2769">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="12190-2770">使用することができます<xref:System.Net.Sockets.Socket.SendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2770">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2771">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.Send%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2771">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="12190-2772">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Send%2A>を使用して、タイムアウトが設定されていない限り、すべてのバッファー内のバイトを送信するまでブロックされます<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2772">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2773">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Send%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2773">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2774">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.Send%2A>送信バッファー内のバイト数より小さい場合でも正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2774">In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="12190-2775">送信されたバイト数を追跡して、アプリケーションが、バッファー内のバイトを送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-2775">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="12190-2776">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2776">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2777">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2777">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2778">正常に完了する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2778">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2779">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2779">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2780">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2780">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2781">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-2781">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-2782">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2782">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2783">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2783">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2784">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2784">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2785">
            <paramref name="buffers" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2785">
              <paramref name="buffers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-2786">
            <paramref name="buffers" /> が空です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2786">
              <paramref name="buffers" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2787">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2787">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2788">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2788">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : ReadOnlySpan&lt;byte&gt; * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffer, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * int * System.Net.Sockets.SocketFlags -&gt; int" Usage="socket.Send (buffer, offset, size, socketFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2789">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2789">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-2790">データの送信を開始する、データ バッファー内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2790">The position in the data buffer at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2791">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2791">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2792">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2792">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2793">指定したオフセットから開始し、指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、指定したバイト数のデータを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2793">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2794">
            <see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2794">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2795"><xref:System.Net.Sockets.Socket.Send%2A> 指定されたリモート ホストにデータを同期的に送信、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドを正常に送信したバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2795"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="12190-2796"><xref:System.Net.Sockets.Socket.Send%2A> 接続指向とコネクションレス プロトコルの両方を使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2796"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="12190-2797">指定した場合、オーバー ロードでは、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-2797">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-2798">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に、または<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2798">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2799">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2799">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2800">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2800">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="12190-2801">使用しない場合<xref:System.Net.Sockets.Socket.SendTo%2A>を呼び出す必要が<xref:System.Net.Sockets.Socket.Connect%2A>への各呼び出しの前に<xref:System.Net.Sockets.Socket.Send%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2801">If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="12190-2802">使用することが<xref:System.Net.Sockets.Socket.SendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2802">It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2803">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.Send%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2803">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="12190-2804">サイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認するもあります。</span><span class="sxs-lookup"><span data-stu-id="12190-2804">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-2805">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2805">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-2806">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Send%2A>を使用して、タイムアウトが設定されていない限り、要求されたバイト数を送信するまでブロックされます<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2806">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2807">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Send%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2807">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2808">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.Send%2A>送信を要求したバイト数よりも少ない場合でも正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2808">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="12190-2809">送信されたバイト数を追跡して、アプリケーションが要求されたバイト数を送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-2809">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="12190-2810">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2810">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2811">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2811">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2812">正常に完了する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2812">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2813">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2813">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2814">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2814">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2815">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-2815">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-2816">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2816">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2817">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2817">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2818">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2818">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2819">次のコード例は、データ バッファー、オフセット、サイズを指定します。 および<xref:System.Net.Sockets.SocketFlags>に接続されたデータを送信するため<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2819">The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2820">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2820">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2821">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2821">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2822">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2822">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-2823">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2823">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2824">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2824">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2825">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2825">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-2826">または、<see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2826">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2827">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2827">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * int * System.Net.Sockets.SocketFlags *  -&gt; int" Usage="socket.Send (buffer, offset, size, socketFlags, errorCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-2828">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2828">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-2829">データの送信を開始する、データ バッファー内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2829">The position in the data buffer at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-2830">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2830">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-2831">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2831">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="errorCode">
          <span data-ttu-id="12190-2832">ソケット エラーを格納する <see cref="T:System.Net.Sockets.SocketError" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2832">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2833">指定したオフセットから開始し、指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、指定したバイト数のデータを接続された <see cref="T:System.Net.Sockets.Socket" /> に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2833">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2834">
            <see cref="T:System.Net.Sockets.Socket" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2834">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2835"><xref:System.Net.Sockets.Socket.Send%2A> 指定されたリモート ホストにデータを同期的に送信、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドを正常に送信したバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="12190-2835"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="12190-2836"><xref:System.Net.Sockets.Socket.Send%2A> 接続指向とコネクションレス プロトコルの両方を使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2836"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="12190-2837">指定した場合、オーバー ロードでは、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-2837">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-2838">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>このメソッドを呼び出す前に、または<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2838">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2839">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2839">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2840">使用する必要があります複数の異なるホストにデータを送信する、コネクションレスのプロトコルとプランを使用している場合<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2840">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="12190-2841">使用しない場合<xref:System.Net.Sockets.Socket.SendTo%2A>を呼び出す必要が<xref:System.Net.Sockets.Socket.Connect%2A>への各呼び出しの前に<xref:System.Net.Sockets.Socket.Send%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2841">If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="12190-2842">使用することが<xref:System.Net.Sockets.Socket.SendTo%2A>で既定のリモート ホストを確立した後でも<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2842">It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="12190-2843">呼び出しの前に既定のリモート ホストを変更することもできます。<xref:System.Net.Sockets.Socket.Send%2A>を別の呼び出しを行って<xref:System.Net.Sockets.Socket.Connect%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2843">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="12190-2844">サイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認するもあります。</span><span class="sxs-lookup"><span data-stu-id="12190-2844">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-2845">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2845">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-2846">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.Send%2A>を使用して、タイムアウトが設定されていない限り、要求されたバイト数を送信するまでブロックされます<xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2846">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-2847">タイムアウト値を超えている場合、<xref:System.Net.Sockets.Socket.Send%2A>呼び出しがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2847">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2848">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.Send%2A>送信を要求したバイト数よりも少ない場合でも正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2848">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="12190-2849">送信されたバイト数を追跡して、アプリケーションが要求されたバイト数を送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-2849">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="12190-2850">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2850">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2851">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2851">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2852">正常に完了する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2852">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2853">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2853">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2854">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2854">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2855">送信が正常に完了しても、データが正常に配信されることは示しません。</span><span class="sxs-lookup"><span data-stu-id="12190-2855">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="12190-2856">転送するデータを保持するために、トランスポート システム内で使用可能なバッファー領域がない場合は、送信ソケットが非ブロッキング モードに設定されている場合を除きがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2856">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2857">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2857">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2858">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2858">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2859">次のコード例は、データ バッファー、オフセット、サイズを指定します。 および<xref:System.Net.Sockets.SocketFlags>に接続されたデータを送信するため<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2859">The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-2860">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2860">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2861">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2861">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2862">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2862">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-2863">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2863">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-2864">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2864">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2865">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2865">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-2866">または、<see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2866">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2867">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2867">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public bool SendAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-2868">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2868">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2869">接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトに、データを非同期に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2869">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2870">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2870">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-2871">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2871">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-2872">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2872">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-2873">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2873">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2874"><xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドを使用して、接続指向のソケットで 1 つ以上のバッファーの送信データを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="12190-2874">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method is used to write outgoing data from one or more buffers on a connection-oriented socket.</span></span> <span data-ttu-id="12190-2875">このメソッドこともできます、ただし、コネクションレス型のソケット接続操作でリモート ホストが指定されています。</span><span class="sxs-lookup"><span data-stu-id="12190-2875">This method can also be used, however, on connectionless sockets that have specified a remote host on a connect operation.</span></span>  
  
 <span data-ttu-id="12190-2876"><xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドで確立されているリモート ホストへの非同期送信操作を開始、 <xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2876">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span>  
  
 <span data-ttu-id="12190-2877">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが正常にこのメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2877">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <span data-ttu-id="12190-2878"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> または <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="12190-2878"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span></span>  
  
-   <span data-ttu-id="12190-2879"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 場合<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>設定されています。</span><span class="sxs-lookup"><span data-stu-id="12190-2879"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <span data-ttu-id="12190-2880"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 場合<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>設定されています。</span><span class="sxs-lookup"><span data-stu-id="12190-2880"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-2881">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.SendAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2881">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-2882">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2882">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-2883"><xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドが例外をスロー最初に呼び出す必要はありません<xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2883">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A><xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A>.</span></span>  
  
 <span data-ttu-id="12190-2884">呼び出す、<xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-2884">Calling the <xref:System.Net.Sockets.Socket.SendAsync%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="12190-2885">メッセージ指向のソケットでは、基になる Windows sockets サービス プロバイダーのメッセージの最大サイズを超えないようにしないでください。</span><span class="sxs-lookup"><span data-stu-id="12190-2885">For message-oriented sockets, do not exceed the maximum message size of the underlying Windows sockets service provider.</span></span> <span data-ttu-id="12190-2886">データが長すぎて、基になるサービス プロバイダーの場合は、データは送信されず<xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Sockets.SocketException>で、<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType>ネイティブ Winsock WSAEMSGSIZE エラー コード (10040) に設定します。</span><span class="sxs-lookup"><span data-stu-id="12190-2886">If the data is too long to pass atomically through the underlying service provider, no data is transmitted and the <xref:System.Net.Sockets.Socket.SendAsync%2A> method throws a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAEMSGSIZE error code (10040).</span></span>  
  
 <span data-ttu-id="12190-2887">なおが正常に完了、<xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドは、データが正常に送信されたことを指定していません。</span><span class="sxs-lookup"><span data-stu-id="12190-2887">Note that the successful completion of the <xref:System.Net.Sockets.Socket.SendAsync%2A> method does not indicate that the data was successfully delivered.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-2888">
            <paramref name="e" /> パラメーターの <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティまたは <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティは、有効なバッファーを参照する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2888">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <paramref name="e" /> parameter must reference valid buffers.</span>
          </span>
          <span data-ttu-id="12190-2889">これらのプロパティは、どちらか 1 つを設定できます。一度に両方のプロパティを設定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2889">One or the other of these properties may be set, but not both at the same time.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-2890">
            <paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2890">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-2891">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2891">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2892">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2892">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2893">
            <see cref="T:System.Net.Sockets.Socket" /> がまだ接続されていないか、<see cref="M:System.Net.Sockets.Socket.Accept" />、<see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />、または <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" /> の各メソッドによって取得されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2893">The <see cref="T:System.Net.Sockets.Socket" /> is not yet connected or was not obtained via an <see cref="M:System.Net.Sockets.Socket.Accept" />, <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />,or <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" />, method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.Socket.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-2894">
            <see cref="T:System.Net.Sockets.Socket" /> の送信バッファーのサイズを指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2894">Gets or sets a value that specifies the size of the send buffer of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-2895">送信バッファーのサイズ (バイト単位) を格納している <see cref="T:System.Int32" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2895">An <see cref="T:System.Int32" /> that contains the size, in bytes, of the send buffer.</span>
          </span>
          <span data-ttu-id="12190-2896">既定値は 8192 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2896">The default is 8192.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2897">大きなバッファー サイズは、接続に関する問題を認識に遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2897">A larger buffer size might delay the recognition of connection difficulties.</span></span> <span data-ttu-id="12190-2898">大きなファイルを転送するか、高帯域幅、待機時間の長い接続 (サテライト ブロード バンド プロバイダーなどです。) を使用している場合は、バッファー サイズを増やすことを検討してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2898">Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2899">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.SendBufferSize%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2899">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.SendBufferSize%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2900">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2900">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2901">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2901">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-2902">設定操作として指定された値が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2902">The value specified for a set operation is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-2903">接続された <see cref="T:System.Net.Sockets.Socket" /> に、ファイルおよびオプション データを同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2903">Sends a file and optional data synchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendFile">
      <MemberSignature Language="C#" Value="public void SendFile (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFile(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendFile (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendFile(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.SendFile : string -&gt; unit" Usage="socket.SendFile fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="12190-2904">送信されるファイルのパスと名前を含む <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2904">A <see cref="T:System.String" /> that contains the path and name of the file to be sent.</span>
          </span>
          <span data-ttu-id="12190-2905">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2905">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2906">
            <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 送信フラグを使用して、接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトにファイル <paramref name="fileName" /> を送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2906">Sends the file <paramref name="fileName" /> to a connected <see cref="T:System.Net.Sockets.Socket" /> object with the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> transmit flag.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2907">このオーバー ロードは、そのファイルを送信`fileName`接続されたソケットにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2907">This overload sends the file `fileName` to the connected socket.</span></span> <span data-ttu-id="12190-2908">`flags`パラメーターの既定値<xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread>(0)、および`preBuffer`と`postBuffer`パラメーターに既定の`null`します。</span><span class="sxs-lookup"><span data-stu-id="12190-2908">The `flags` parameter defaults to <xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread> (0), and the `preBuffer` and `postBuffer` parameters default to `null`.</span></span> <span data-ttu-id="12190-2909">場合`fileName`されますが、ローカルのディレクトリでファイルの名前だけで識別可能性があります。 それ以外の場合、完全なパスとファイルの名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2909">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="12190-2910">ワイルドカード ("..\\\myfile.txt") と UNC 共有名 ("\\\\\\\shared ディレクトリ\\\myfile.txt") はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="12190-2910">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="12190-2911">ファイルが見つからない場合、例外<xref:System.IO.FileNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2911">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="12190-2912">このメソッドを使用して、 `TransmitFile` Windows Sockets 2 API である関数。</span><span class="sxs-lookup"><span data-stu-id="12190-2912">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="12190-2913">詳細については、`TransmitFile`関数およびそのフラグは、MSDN ライブラリの Windows Sockets ドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2913">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="12190-2914"><xref:System.Net.Sockets.Socket.SendFile%2A> 指定されたリモート ホストにファイルを同期的に送信、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2914"><xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2915"><xref:System.Net.Sockets.Socket.SendFile%2A> 接続指向両方とコネクションレスのプロトコルを使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2915"><xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.</span></span>  
  
 <span data-ttu-id="12190-2916">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>それ以外の場合、このメソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendFile%2A>スロー、<xref:System.Net.Sockets.SocketException>例外。</span><span class="sxs-lookup"><span data-stu-id="12190-2916">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span> <span data-ttu-id="12190-2917">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2917">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2918">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.SendFile%2A>ファイルを送信するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-2918">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the file is sent.</span></span> <span data-ttu-id="12190-2919">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.SendFile%2A>ファイル全体が送信される前に正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2919">In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent.</span></span> <span data-ttu-id="12190-2920">送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2920">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2921">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2921">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2922">正常に完了する、<xref:System.Net.Sockets.Socket.SendFile%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2922">A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2923">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2923">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2924">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2924">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2925">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2925">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2926">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2926">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2927">次のコード例は、作成しソケットを接続し、リモート ホストにファイルを送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2927">The following code example creates and connects a socket and then sends a file to the remote host.</span></span> <span data-ttu-id="12190-2928">ファイル"test.txt"は、ローカル コンピューターのルート ディレクトリにあります。</span><span class="sxs-lookup"><span data-stu-id="12190-2928">The file "test.txt" is located in the root directory of the local machine.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#3)]
 [!code-csharp[NCLSocketEnhancements#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-2929">ソケットがリモート ホストに接続されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2929">The socket is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2930">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2930">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-2931">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトはブロック モードではなく、この同期呼び出しを受け付けることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2931">The <see cref="T:System.Net.Sockets.Socket" /> object is not in blocking mode and cannot accept this synchronous call.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="12190-2932">ファイル <paramref name="fileName" /> が見つかりませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2932">The file <paramref name="fileName" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2933">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2933">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendFile">
      <MemberSignature Language="C#" Value="public void SendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFile(string fileName, unsigned int8[] preBuffer, unsigned int8[] postBuffer, valuetype System.Net.Sockets.TransmitFileOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendFile (fileName As String, preBuffer As Byte(), postBuffer As Byte(), flags As TransmitFileOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendFile(System::String ^ fileName, cli::array &lt;System::Byte&gt; ^ preBuffer, cli::array &lt;System::Byte&gt; ^ postBuffer, System::Net::Sockets::TransmitFileOptions flags);" />
      <MemberSignature Language="F#" Value="member this.SendFile : string * byte[] * byte[] * System.Net.Sockets.TransmitFileOptions -&gt; unit" Usage="socket.SendFile (fileName, preBuffer, postBuffer, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="preBuffer" Type="System.Byte[]" />
        <Parameter Name="postBuffer" Type="System.Byte[]" />
        <Parameter Name="flags" Type="System.Net.Sockets.TransmitFileOptions" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="12190-2934">送信されるファイルのパスと名前を含む <see cref="T:System.String" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2934">A <see cref="T:System.String" /> that contains the path and name of the file to be sent.</span>
          </span>
          <span data-ttu-id="12190-2935">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2935">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="preBuffer">
          <span data-ttu-id="12190-2936">ファイルが送信される前に送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2936">A <see cref="T:System.Byte" /> array that contains data to be sent before the file is sent.</span>
          </span>
          <span data-ttu-id="12190-2937">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2937">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="postBuffer">
          <span data-ttu-id="12190-2938">ファイルが送信された後で送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2938">A <see cref="T:System.Byte" /> array that contains data to be sent after the file is sent.</span>
          </span>
          <span data-ttu-id="12190-2939">このパラメーターは、<see langword="null" /> に設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2939">This parameter can be <see langword="null" />.</span>
          </span>
        </param>
        <param name="flags">
          <span data-ttu-id="12190-2940">1 つ以上の <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2940">One or more of <see cref="T:System.Net.Sockets.TransmitFileOptions" /> values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2941">指定した <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 値を使用して、接続された <see cref="T:System.Net.Sockets.Socket" /> オブジェクトにファイル <paramref name="fileName" /> およびデータのバッファーを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2941">Sends the file <paramref name="fileName" /> and buffers of data to a connected <see cref="T:System.Net.Sockets.Socket" /> object using the specified <see cref="T:System.Net.Sockets.TransmitFileOptions" /> value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2942">このオーバー ロードには、送信するファイルとビットごとの組み合わせの名が必要です。<xref:System.Net.Sockets.TransmitFileOptions>値。</span><span class="sxs-lookup"><span data-stu-id="12190-2942">This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values.</span></span> <span data-ttu-id="12190-2943">`preBuffer`パラメーターには、ファイルの前にすべてのデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="12190-2943">The `preBuffer` parameter contains any data you want to precede the file.</span></span> <span data-ttu-id="12190-2944">`postBuffer` ファイルを使用するデータが含まれています。</span><span class="sxs-lookup"><span data-stu-id="12190-2944">`postBuffer` contains data you want to follow the file.</span></span> <span data-ttu-id="12190-2945">場合`fileName`されますが、現在の作業ディレクトリでファイルの名前だけで識別可能性があります。 それ以外の場合、完全なパスとファイルの名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2945">If `fileName` is in the current working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="12190-2946">ワイルドカード ("..\\\myfile.txt") と UNC 共有名 ("\\\\\\\shared ディレクトリ\\\myfile.txt") はサポートされています。</span><span class="sxs-lookup"><span data-stu-id="12190-2946">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span>  
  
 <span data-ttu-id="12190-2947">`flags`パラメーターは、ファイルの転送に関する追加情報がウィンドウのソケット サービス プロバイダーを提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-2947">The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="12190-2948">このパラメーターを使用する方法の詳細については、次を参照してください。<xref:System.Net.Sockets.TransmitFileOptions>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2948">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="12190-2949">このメソッドを使用して、 `TransmitFile` Windows Sockets 2 API である関数。</span><span class="sxs-lookup"><span data-stu-id="12190-2949">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="12190-2950">詳細については、`TransmitFile`関数およびそのフラグは、MSDN ライブラリの Windows Sockets ドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2950">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="12190-2951"><xref:System.Net.Sockets.Socket.SendFile%2A> 指定されたリモート ホストにファイルを同期的に送信、<xref:System.Net.Sockets.Socket.Connect%2A>または<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-2951"><xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-2952"><xref:System.Net.Sockets.Socket.SendFile%2A> 接続指向両方とコネクションレスのプロトコルを使用できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2952"><xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.</span></span>  
  
 <span data-ttu-id="12190-2953">コネクションレスのプロトコルを使用している場合を呼び出す必要があります<xref:System.Net.Sockets.Socket.Connect%2A>です。 このメソッドを呼び出す前にそれ以外の場合<xref:System.Net.Sockets.Socket.SendFile%2A>スロー、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2953">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method; otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-2954">いずれかを使用する必要があります、接続指向プロトコルを使用している場合<xref:System.Net.Sockets.Socket.Connect%2A>リモート ホスト接続を確立するかを使用して<xref:System.Net.Sockets.Socket.Accept%2A>着信接続を受け入れるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2954">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="12190-2955">接続指向のプロトコルを使用している場合<xref:System.Net.Sockets.Socket.SendFile%2A>ファイル全体を送信するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="12190-2955">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the entire file is sent.</span></span> <span data-ttu-id="12190-2956">モードでは非ブロッキング、<xref:System.Net.Sockets.Socket.SendFile%2A>ファイル全体が送信される前に正常に完了場合があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2956">In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent.</span></span> <span data-ttu-id="12190-2957">送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-2957">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-2958">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2958">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-2959">正常に完了する、<xref:System.Net.Sockets.Socket.SendFile%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-2959">A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2960">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-2960">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-2961">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-2961">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-2962">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-2962">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-2963">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-2963">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-2964">次のコード例では、作成し、ソケットを接続します。</span><span class="sxs-lookup"><span data-stu-id="12190-2964">The following code example creates and connects a socket.</span></span> <span data-ttu-id="12190-2965">ファイル"test.txt"は、ローカル コンピューターのルート ディレクトリにあります。</span><span class="sxs-lookup"><span data-stu-id="12190-2965">The file "test.txt" is located in the root directory of the local machine.</span></span> <span data-ttu-id="12190-2966">この例では事前バッファリングと事後バッファリングのデータを作成し、ファイルのあるリモート ホストに送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-2966">In this example, we create a prebuffer and postbuffer of data and send them to the remote host with the file.</span></span> <span data-ttu-id="12190-2967">既定値<xref:System.Net.Sockets.TransmitFileOptions>使用されます。</span><span class="sxs-lookup"><span data-stu-id="12190-2967">The default <xref:System.Net.Sockets.TransmitFileOptions> are used.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#4)]
 [!code-csharp[NCLSocketEnhancements#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-2968">オペレーティング システムは Windows NT 以降ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2968">The operating system is not Windows NT or later.</span>
          </span>
          <span data-ttu-id="12190-2969">\- または -  ソケットがリモート ホストに接続されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2969">\- or -  The socket is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-2970">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2970">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-2971">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトはブロック モードではなく、この同期呼び出しを受け付けることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2971">The <see cref="T:System.Net.Sockets.Socket" /> object is not in blocking mode and cannot accept this synchronous call.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="12190-2972">ファイル <paramref name="fileName" /> が見つかりませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2972">The file <paramref name="fileName" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-2973">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2973">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendPacketsAsync">
      <MemberSignature Language="C#" Value="public bool SendPacketsAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendPacketsAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPacketsAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendPacketsAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendPacketsAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendPacketsAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-2974">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2974">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-2975">接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトに、ファイルのコレクションまたはメモリ内のデータ バッファーを非同期に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2975">Sends a collection of files or in memory data buffers asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-2976">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2976">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-2977">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2977">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-2978">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2978">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-2979">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-2979">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-2980"><xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>リモート ホストにデータ バッファーをメモリ内、またはファイルのコレクションに送信するメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-2980">The <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is used to send a collection of files or in memory data buffers to remote host.</span></span> <span data-ttu-id="12190-2981"><xref:System.Net.Sockets.Socket>リモート ホストに既に接続されている必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2981">The <xref:System.Net.Sockets.Socket> must already be connected to the remote host.</span></span>  
  
 <span data-ttu-id="12190-2982">場合、<xref:System.Net.Sockets.SendPacketsElement?displayProperty=nameWithType>作業ディレクトリでファイルを参照、ファイルの名前だけで識別できること以外の場合はそれ以外の場合、完全なパスとファイルの名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2982">If a <xref:System.Net.Sockets.SendPacketsElement?displayProperty=nameWithType> references a file in the working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="12190-2983">ワイルドカードおよび UNC 共有名がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="12190-2983">Wildcards and UNC share names are supported.</span></span> <span data-ttu-id="12190-2984">ファイルが見つからない場合<xref:System.IO.FileNotFoundException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="12190-2984">If the file is not found, <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="12190-2985">完了の通知、イベント ハンドラーを実装するコールバック メソッドを作成する必要があります\<SocketAsyncEventArgs > を委任し、アタッチするためのコールバック、<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="12190-2985">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="12190-2986"><xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType>プロパティを`e`パラメーターは、ファイルの転送に関する追加情報がウィンドウのソケット サービス プロバイダーを提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-2986">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="12190-2987">このパラメーターを使用する方法の詳細については、次を参照してください。<xref:System.Net.Sockets.TransmitFileOptions>です。</span><span class="sxs-lookup"><span data-stu-id="12190-2987">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="12190-2988">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが正常にこのメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-2988">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-2989">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-2989">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-2990">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2990">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-2991">このメソッドは、Windows ソケット 2 API で見つかった TransmitPackets 関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-2991">This method uses the TransmitPackets function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="12190-2992">TransmitPackets 関数およびそのフラグの詳細については、MSDN ライブラリの Windows Sockets ドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="12190-2992">For more information about the TransmitPackets function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="12190-2993">接続指向プロトコルでは、意図したものが、<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>メソッドに対しても機能コネクションレスのプロトコルを最初に呼び出すこと、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>既定のリモート ホストを構築する方法です。</span><span class="sxs-lookup"><span data-stu-id="12190-2993">Although intended for connection-oriented protocols, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method to establish a default remote host.</span></span> <span data-ttu-id="12190-2994">コネクションレスのプロトコルを使用している場合は、ファイルのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="12190-2994">With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-2995">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>スロー、<xref:System.Net.Sockets.SocketException>例外。</span><span class="sxs-lookup"><span data-stu-id="12190-2995">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
 <span data-ttu-id="12190-2996"><xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>が使用されるオペレーティング システムに従ってメソッドを最適化します。</span><span class="sxs-lookup"><span data-stu-id="12190-2996">The <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized according to the operating system on which it is used.</span></span> <span data-ttu-id="12190-2997">Windows server のエディションで、<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>メソッドは高パフォーマンスを最適化します。</span><span class="sxs-lookup"><span data-stu-id="12190-2997">On Windows server editions, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized for high performance.</span></span>  
  
 <span data-ttu-id="12190-2998">Windows クライアントの各エディションで、<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>メソッドが最低限のメモリとリソース使用率を最適化します。</span><span class="sxs-lookup"><span data-stu-id="12190-2998">On Windows client editions, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized for minimum memory and resource utilization.</span></span>  
  
 <span data-ttu-id="12190-2999">使用、<xref:System.Net.Sockets.TransmitFileOptions.UseKernelApc?displayProperty=nameWithType>フラグ、<xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType>プロパティを`e`パラメーターは、大幅なパフォーマンス上の利点を提供できます。</span><span class="sxs-lookup"><span data-stu-id="12190-2999">Use of the <xref:System.Net.Sockets.TransmitFileOptions.UseKernelApc?displayProperty=nameWithType> flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> property on the `e` parameter can deliver significant performance benefits.</span></span> <span data-ttu-id="12190-3000">場合、スレッドを開始する、<xref:System.Net.Sockets.Socket.SendPacketsAsync%2A>大量の計算には、メソッドの呼び出しを使用している、可能であればもわずかながら、Apc が起動できない可能性があることもできます。</span><span class="sxs-lookup"><span data-stu-id="12190-3000">If the thread initiating the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method call is being used for heavy computations, it is possible, though unlikely, that APCs could be prevented from launching.</span></span> <span data-ttu-id="12190-3001">カーネルとユーザー モードの Apc の違いがあることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="12190-3001">Note that there is a difference between kernel and user-mode APCs.</span></span> <span data-ttu-id="12190-3002">スレッドが待機状態には、カーネル Apc が起動します。</span><span class="sxs-lookup"><span data-stu-id="12190-3002">Kernel APCs launch when a thread is in a wait state.</span></span> <span data-ttu-id="12190-3003">ユーザー モード Apc スレッドは、アラートの待機状態での起動します。</span><span class="sxs-lookup"><span data-stu-id="12190-3003">User-mode APCs launch when a thread is in an alertable wait state</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="12190-3004">
            <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> プロパティで指定されたファイルが見つかりませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3004">The file specified in the <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> property was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-3005">
            <paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3005">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-3006">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3006">Windows XP or later is required for this method.</span>
          </span>
          <span data-ttu-id="12190-3007">この例外は、<see cref="T:System.Net.Sockets.Socket" /> がリモート ホストに接続されていない場合にも発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3007">This exception also occurs if the <see cref="T:System.Net.Sockets.Socket" /> is not connected to a remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3008">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3008">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3009">コネクションレスの <see cref="T:System.Net.Sockets.Socket" /> が使用されており、送信するファイルが基になるトランスポートの最大パケット サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3009">A connectionless <see cref="T:System.Net.Sockets.Socket" /> is being used and the file being sent exceeds the maximum packet size of the underlying transport.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendTimeout : int with get, set" Usage="System.Net.Sockets.Socket.SendTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-3010">同期の <see cref="Overload:System.Net.Sockets.Socket.Send" /> 呼び出しがタイムアウトするまでの合計時間を指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3010">Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Send" /> call will time out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-3011">タイムアウト値 (ミリ秒)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3011">The time-out value, in milliseconds.</span>
          </span>
          <span data-ttu-id="12190-3012">プロパティに 1 から 499 までの値を設定しても、その値は 500 に変更されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3012">If you set the property with a value between 1 and 499, the value will be changed to 500.</span>
          </span>
          <span data-ttu-id="12190-3013">既定値は 0 です。タイムアウトが無期限であることを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3013">The default value is 0, which indicates an infinite time-out period.</span>
          </span>
          <span data-ttu-id="12190-3014">-1 の指定も、タイムアウトが無期限であることを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3014">Specifying -1 also indicates an infinite time-out period.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3015">このオプションを適用する同期<xref:System.Net.Sockets.Socket.Send%2A>呼び出しのみです。</span><span class="sxs-lookup"><span data-stu-id="12190-3015">This option applies to synchronous <xref:System.Net.Sockets.Socket.Send%2A> calls only.</span></span> <span data-ttu-id="12190-3016">タイムアウト期間を超えた場合、<xref:System.Net.Sockets.Socket.Send%2A>メソッドがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3016">If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3017">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.SendTimeout%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3017">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.SendTimeout%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3018">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3018">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3019">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3019">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-3020">設定操作として指定された値が -1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3020">The value specified for a set operation is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendTo">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-3021">データを特定のエンドポイントに送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3021">Sends data to a specific endpoint.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendTo (buffer As Byte(), remoteEP As EndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-3022">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3022">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-3023">データの送信先を表す <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3023">The <see cref="T:System.Net.EndPoint" /> that represents the destination for the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3024">指定したエンドポイントにデータを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3024">Sends data to the specified endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-3025">送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3025">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3026">このオーバー ロードでは、バッファーのオフセットの既定値は 0 の場合のサイズに既定値を送信するバイトの数、`buffer`パラメーター、および<xref:System.Net.Sockets.SocketFlags>値の既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="12190-3026">In this overload, the buffer offset defaults to 0, the number of bytes to send defaults to the size of the `buffer` parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span>  
  
 <span data-ttu-id="12190-3027">コネクションレスのプロトコルを使用している場合は既定のリモート ホストとの確立する必要はありません、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3027">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="12190-3028">この呼び出しをする場合にだけ、<xref:System.Net.Sockets.Socket.Send%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3028">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="12190-3029">呼び出す場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>、`remoteEP`パラメーターは、操作のみを送信するため、指定された既定のリモート ホストに上書きされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3029">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="12190-3030">必要はありませんを呼び出して、<xref:System.Net.Sockets.Socket.Bind%2A>メソッド、基になるサービス プロバイダーが最も適切なローカル ネットワーク アドレスとポート番号を割り当てるためです。</span><span class="sxs-lookup"><span data-stu-id="12190-3030">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="12190-3031">使用することができます、割り当てられているローカル ネットワーク アドレスとポート番号を識別する必要がある場合、<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>後プロパティ、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に完了するとします。</span><span class="sxs-lookup"><span data-stu-id="12190-3031">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="12190-3032">コネクションレス プロトコルは、意図したものが<xref:System.Net.Sockets.Socket.SendTo%2A>接続指向プロトコルでも動作します。</span><span class="sxs-lookup"><span data-stu-id="12190-3032">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="12190-3033">呼び出してリモート ホスト接続を確立する必要がありますまず接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド、着信要求を使用して接続を受け入れるか、<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3033">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-3034">確立したり、リモート ホスト接続を許可しない場合<xref:System.Net.Sockets.Socket.SendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3034">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-3035">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3035">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-3036">このような場合は、のいずれかで<xref:System.Net.Sockets.Socket.SendTo%2A>は無視されます、`remoteEP`パラメーターとのみデータを送信する、接続または既定のリモート ホストします。</span><span class="sxs-lookup"><span data-stu-id="12190-3036">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-3037">ブロッキング ソケットは、すべてのバッファー内のバイトが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3037">Blocking sockets will block until the all of the bytes in the buffer are sent.</span></span> <span data-ttu-id="12190-3038">非ブロッキング<xref:System.Net.Sockets.Socket>が完了する、すぐにその可能性がありますいないすべての送信内のバイト、`buffer`です。</span><span class="sxs-lookup"><span data-stu-id="12190-3038">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`.</span></span> <span data-ttu-id="12190-3039">送信されたバイト数を追跡して、アプリケーションでは、すべてのバイトを送信するまで、操作を再試行する、アプリケーションの責任である、`buffer`です。</span><span class="sxs-lookup"><span data-stu-id="12190-3039">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`.</span></span> <span data-ttu-id="12190-3040">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-3040">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-3041">ネットワーク効率を向上させるのに基になるシステムは大量の送信データが収集されるまでに伝送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3041">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="12190-3042">正常に完了する、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-3042">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="12190-3043">ブロッキング モードは、コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.SendTo%2A>データグラムが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3043">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="12190-3044">ブロードキャスト アドレスにデータを送信する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3044">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-3045">送信されたバイト数が、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認するもあります。</span><span class="sxs-lookup"><span data-stu-id="12190-3045">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-3046">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.SendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3046">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3047">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3047">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3048">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3048">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3049">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-3049">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-3050">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-3050">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3051">次のコード例は、指定したリモート ホストにコネクションレス データグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-3051">The following code example sends a connectionless datagram to the specified remote host.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Sync_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Sync_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-3052">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3052">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-3053">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3053">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3054">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3054">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3055">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3055">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-3056">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3056">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-3057">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3057">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-3058">データの送信先の位置を表す <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3058">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3059">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用して、特定のエンドポイントにデータを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3059">Sends data to a specific endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-3060">送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3060">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3061">このオーバー ロードでは、バッファーのオフセットの既定値は 0、およびのサイズに既定値を送信するバイト数、`buffer`です。</span><span class="sxs-lookup"><span data-stu-id="12190-3061">In this overload, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the `buffer`.</span></span> <span data-ttu-id="12190-3062">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-3062">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-3063">コネクションレスのプロトコルを使用している場合は既定のリモート ホストとの確立する必要はありません、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3063">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="12190-3064">この呼び出しをする場合にだけ、<xref:System.Net.Sockets.Socket.Send%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3064">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="12190-3065">呼び出す場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>、`remoteEP`パラメーターは、操作のみを送信するため、指定された既定のリモート ホストに上書きされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3065">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="12190-3066">必要はありませんを呼び出して、<xref:System.Net.Sockets.Socket.Bind%2A>メソッド、基になるサービス プロバイダーが最も適切なローカル ネットワーク アドレスとポート番号を割り当てるためです。</span><span class="sxs-lookup"><span data-stu-id="12190-3066">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="12190-3067">使用することができます、割り当てられているローカル ネットワーク アドレスとポート番号を識別する必要がある場合、<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>後プロパティ、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に完了するとします。</span><span class="sxs-lookup"><span data-stu-id="12190-3067">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="12190-3068">コネクションレス プロトコルは、意図したものが<xref:System.Net.Sockets.Socket.SendTo%2A>接続指向プロトコルでも動作します。</span><span class="sxs-lookup"><span data-stu-id="12190-3068">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="12190-3069">呼び出してリモート ホスト接続を確立する必要がありますまず接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド、着信要求を使用して接続を受け入れるか、<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3069">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-3070">確立したり、リモート ホスト接続を許可しない場合<xref:System.Net.Sockets.Socket.SendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3070">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-3071">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3071">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-3072">このような場合は、のいずれかで<xref:System.Net.Sockets.Socket.SendTo%2A>は無視されます、`remoteEP`パラメーターとのみデータを送信する、接続または既定のリモート ホストします。</span><span class="sxs-lookup"><span data-stu-id="12190-3072">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-3073">ブロッキング ソケットはブロックされるまで、要求されたすべてのバイト数の`buffer`送信されます。</span><span class="sxs-lookup"><span data-stu-id="12190-3073">Blocking sockets will block until the requested all of the bytes in the `buffer` are sent.</span></span> <span data-ttu-id="12190-3074">非ブロッキング<xref:System.Net.Sockets.Socket>が完了する、すぐにその可能性がありますいないすべての送信内のバイト、`buffer`です。</span><span class="sxs-lookup"><span data-stu-id="12190-3074">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`.</span></span> <span data-ttu-id="12190-3075">送信されたバイト数を追跡して、アプリケーションでは、すべてのバイトを送信するまで、操作を再試行する、アプリケーションの責任である、`buffer`です。</span><span class="sxs-lookup"><span data-stu-id="12190-3075">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`.</span></span> <span data-ttu-id="12190-3076">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-3076">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-3077">ネットワーク効率を向上させるのに基になるシステムは大量の発信データが収集されるまで転送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3077">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="12190-3078">正常に完了する、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-3078">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="12190-3079">ブロッキング モードは、コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.SendTo%2A>データグラムが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3079">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="12190-3080">ブロードキャスト アドレスにデータを送信する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3080">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-3081">送信されたバイト数が、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認するもあります。</span><span class="sxs-lookup"><span data-stu-id="12190-3081">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-3082">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.SendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3082">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3083">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3083">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3084">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3084">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3085">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-3085">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-3086">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-3086">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3087">次のコード例は、指定したリモート ホストにコネクションレス データグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-3087">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="12190-3088"><xref:System.Net.Sockets.SocketFlags> 渡される、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3088"><xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#6)]
 [!code-csharp[Socket_Sync_Send_Receive#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#6)]
 [!code-vb[Socket_Sync_Send_Receive#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-3089">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3089">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-3090">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3090">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3091">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3091">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3092">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3092">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-3093">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3093">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-3094">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3094">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-3095">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3095">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-3096">データの送信先の位置を表す <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3096">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3097">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータを、指定したエンドポイントに送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3097">Sends the specified number of bytes of data to the specified endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-3098">送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3098">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3099">このオーバー ロードでは、バッファーは、既定値は 0 をオフセットします。</span><span class="sxs-lookup"><span data-stu-id="12190-3099">In this overload, the buffer offset defaults to 0.</span></span> <span data-ttu-id="12190-3100">指定した場合、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-3100">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-3101">コネクションレスのプロトコルを使用している場合は既定のリモート ホストとの確立する必要はありません、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3101">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="12190-3102">この呼び出しをする場合にだけ、<xref:System.Net.Sockets.Socket.Send%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3102">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="12190-3103">呼び出す場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>、`remoteEP`パラメーターは、操作のみを送信するため、指定された既定のリモート ホストに上書きされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3103">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="12190-3104">必要はありませんを呼び出して、<xref:System.Net.Sockets.Socket.Bind%2A>メソッド、基になるサービス プロバイダーが最も適切なローカル ネットワーク アドレスとポート番号を割り当てるためです。</span><span class="sxs-lookup"><span data-stu-id="12190-3104">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="12190-3105">使用することができます、割り当てられているローカル ネットワーク アドレスとポート番号を識別する必要がある場合、<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>後プロパティ、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に完了するとします。</span><span class="sxs-lookup"><span data-stu-id="12190-3105">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="12190-3106">コネクションレス プロトコルは、意図したものが<xref:System.Net.Sockets.Socket.SendTo%2A>接続指向プロトコルでも動作します。</span><span class="sxs-lookup"><span data-stu-id="12190-3106">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="12190-3107">呼び出してリモート ホスト接続を確立する必要がありますまず接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド、着信要求を使用して接続を受け入れるか、<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3107">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-3108">確立したり、リモート ホスト接続を許可しない場合<xref:System.Net.Sockets.Socket.SendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3108">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-3109">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3109">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-3110">このような場合は、のいずれかで<xref:System.Net.Sockets.Socket.SendTo%2A>は無視されます、`remoteEP`パラメーターとのみデータを送信する、接続または既定のリモート ホストします。</span><span class="sxs-lookup"><span data-stu-id="12190-3110">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-3111">ブロッキング ソケットは、要求されたバイト数が送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3111">Blocking sockets will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="12190-3112">非ブロッキング<xref:System.Net.Sockets.Socket>完了いない送信すべて単一の操作で要求されたバイトの可能性がありますが、すぐにします。</span><span class="sxs-lookup"><span data-stu-id="12190-3112">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation.</span></span> <span data-ttu-id="12190-3113">送信されたバイト数を追跡して、アプリケーションが要求されたバイト数を送信するまで、操作を再試行する、アプリケーションの責任です。</span><span class="sxs-lookup"><span data-stu-id="12190-3113">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="12190-3114">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-3114">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-3115">ネットワーク効率を向上させるのに基になるシステムは大量の発信データが収集されるまで転送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3115">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="12190-3116">正常に完了する、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-3116">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="12190-3117">ブロッキング モードは、コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.SendTo%2A>データグラムが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3117">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="12190-3118">ブロードキャスト アドレスにデータを送信する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3118">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-3119">送信されたバイト数が、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認するもあります。</span><span class="sxs-lookup"><span data-stu-id="12190-3119">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-3120">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.SendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3120">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3121">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3121">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3122">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3122">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3123">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-3123">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-3124">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-3124">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3125">次のコード例は、指定したリモート ホストにコネクションレス データグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-3125">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="12190-3126">サイズと<xref:System.Net.Sockets.SocketFlags>に渡される、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3126">The size and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Sync_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Sync_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-3127">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3127">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-3128">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3128">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-3129">指定した <paramref name="size" /> が <paramref name="buffer" /> のサイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3129">The specified <paramref name="size" /> exceeds the size of <paramref name="buffer" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3130">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3130">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3131">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3131">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.SendTo : byte[] * int * int * System.Net.Sockets.SocketFlags * System.Net.EndPoint -&gt; int" Usage="socket.SendTo (buffer, offset, size, socketFlags, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="12190-3132">送信されるデータを含む <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3132">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="12190-3133">データの送信を開始する、データ バッファー内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3133">The position in the data buffer at which to begin sending data.</span>
          </span>
        </param>
        <param name="size">
          <span data-ttu-id="12190-3134">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3134">The number of bytes to send.</span>
          </span>
        </param>
        <param name="socketFlags">
          <span data-ttu-id="12190-3135">
            <see cref="T:System.Net.Sockets.SocketFlags" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3135">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="12190-3136">データの送信先の位置を表す <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3136">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3137">指定した <see cref="T:System.Net.Sockets.SocketFlags" /> を使用し、指定したバイト数のデータを、指定したエンドポイントに送信します。送信はバッファー内の指定した位置から開始されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3137">Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-3138">送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3138">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3139">指定した場合、オーバー ロードでは、<xref:System.Net.Sockets.SocketFlags.DontRoute>としてフラグを設定、`socketflags`パラメーターに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-3139">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-3140">コネクションレスのプロトコルを使用している場合は既定のリモート ホストとの確立する必要はありません、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3140">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="12190-3141">この呼び出しをする場合にだけ、<xref:System.Net.Sockets.Socket.Send%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3141">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="12190-3142">呼び出す場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendTo%2A>、`remoteEP`パラメーターは、操作のみを送信するため、指定された既定のリモート ホストに上書きされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3142">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="12190-3143">必要はありませんを呼び出して、<xref:System.Net.Sockets.Socket.Bind%2A>メソッド、基になるサービス プロバイダーが最も適切なローカル ネットワーク アドレスとポート番号を割り当てるためです。</span><span class="sxs-lookup"><span data-stu-id="12190-3143">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="12190-3144">使用することができます、割り当てられているローカル ネットワーク アドレスとポート番号を識別する必要がある場合、<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>後プロパティ、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドが正常に完了するとします。</span><span class="sxs-lookup"><span data-stu-id="12190-3144">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="12190-3145">コネクションレス プロトコルは、意図したものが<xref:System.Net.Sockets.Socket.SendTo%2A>接続指向プロトコルでも動作します。</span><span class="sxs-lookup"><span data-stu-id="12190-3145">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="12190-3146">呼び出してリモート ホスト接続を確立する必要がありますまず接続指向のプロトコルを使用している場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッド、着信要求を使用して接続を受け入れるか、<xref:System.Net.Sockets.Socket.Accept%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3146">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="12190-3147">確立したり、リモート ホスト接続を許可しない場合<xref:System.Net.Sockets.Socket.SendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3147">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-3148">呼び出しの前にコネクションレスのプロトコルの既定のリモート ホストを確立することも、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3148">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="12190-3149">このような場合は、のいずれかで<xref:System.Net.Sockets.Socket.SendTo%2A>は無視されます、`remoteEP`パラメーターとのみデータを送信する、接続または既定のリモート ホストします。</span><span class="sxs-lookup"><span data-stu-id="12190-3149">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="12190-3150">ブロッキング ソケットは、要求されたバイト数が送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3150">Blocking sockets will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="12190-3151">非ブロッキング以降<xref:System.Net.Sockets.Socket>完了いない送信すべて単一の操作で要求されたバイトの可能性がありますが、すぐにします。</span><span class="sxs-lookup"><span data-stu-id="12190-3151">Since a non-blocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation.</span></span> <span data-ttu-id="12190-3152">アプリケーション送信されたバイト数を追跡して、アプリケーションが要求されたバイト数を送信するまで、操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="12190-3152">It is your applications responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="12190-3153">また、送信するデータがすぐに、ネットワーク上に表示される保証はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-3153">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="12190-3154">ネットワーク効率を向上させるのに基になるシステムは大量の発信データが収集されるまで転送を遅れる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3154">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="12190-3155">正常に完了する、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドは、基になるシステムが実際のデータをネットワークに送信バッファーする領域がいることを意味します。</span><span class="sxs-lookup"><span data-stu-id="12190-3155">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="12190-3156">ブロッキング モードは、コネクションレスのプロトコルを使用している場合<xref:System.Net.Sockets.Socket.SendTo%2A>データグラムが送信されるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="12190-3156">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="12190-3157">ブロードキャスト アドレスにデータを送信する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3157">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="12190-3158">サイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認するもあります。</span><span class="sxs-lookup"><span data-stu-id="12190-3158">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-3159">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.SendTo%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3159">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3160">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3160">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3161">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3161">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3162">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-3162">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-3163">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-3163">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3164">次のコード例は、指定したリモート ホストにコネクションレス データグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="12190-3164">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="12190-3165">オフセット、サイズ、および<xref:System.Net.Sockets.SocketFlags>に渡される、<xref:System.Net.Sockets.Socket.SendTo%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3165">The offset, size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Sync_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Sync_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-3166">
            <paramref name="buffer" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3166">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="12190-3167">または、<paramref name="remoteEP" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3167">-or-  <paramref name="remoteEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-3168">
            <paramref name="offset" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3168">
              <paramref name="offset" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-3169">または、<paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3169">-or-  <paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span>
          </span>
          <span data-ttu-id="12190-3170">または、<paramref name="size" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3170">-or-  <paramref name="size" /> is less than 0.</span>
          </span>
          <span data-ttu-id="12190-3171">または、<paramref name="size" /> が、<paramref name="buffer" /> の長さから <paramref name="offset" /> パラメーターの値を引いた値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3171">-or-  <paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3172">
            <paramref name="socketFlags" /> は、値の有効な組み合わせではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3172">
              <paramref name="socketFlags" /> is not a valid combination of values.</span>
          </span>
          <span data-ttu-id="12190-3173">または、<see cref="T:System.Net.Sockets.Socket" /> にアクセス中にオペレーティング システム エラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3173">-or-  An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3174">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3174">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="12190-3175">コール スタック内の呼び出し元が、必要なアクセス許可を保持していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3175">A caller in the call stack does not have the required permissions.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendToAsync">
      <MemberSignature Language="C#" Value="public bool SendToAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendToAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendToAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendToAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.SendToAsync : System.Net.Sockets.SocketAsyncEventArgs -&gt; bool" Usage="socket.SendToAsync e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12190-3176">この非同期ソケット操作に使用する <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3176">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3177">特定のリモート ホストにデータを非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3177">Sends data asynchronously to a specific remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12190-3178">I/O 操作が保留中の場合は、<see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3178">Returns <see langword="true" /> if the I/O operation is pending.</span>
          </span>
          <span data-ttu-id="12190-3179">操作の完了時に、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3179">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span>
          </span>
          <span data-ttu-id="12190-3180">I/O 操作が同期的に完了した場合は、<see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3180">Returns <see langword="false" /> if the I/O operation completed synchronously.</span>
          </span>
          <span data-ttu-id="12190-3181">この場合、<paramref name="e" /> パラメーターの <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> イベントは発生しません。メソッド呼び出しから制御が戻った直後に、パラメーターとして渡された <paramref name="e" /> オブジェクトを調べて操作の結果を取得できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3181">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3182"><xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッドで指定されたリモート ホストへの非同期送信操作を開始、<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>のプロパティ、`e`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-3182">The <xref:System.Net.Sockets.Socket.SendToAsync%2A> method starts an asynchronous send operation to the remote host specified in the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property of the `e` parameter.</span></span> <span data-ttu-id="12190-3183">呼び出す、<xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="12190-3183">Calling the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method gives you the ability to send data within a separate execution thread.</span></span> <span data-ttu-id="12190-3184">このメソッドはコネクションレスのプロトコルのものが<xref:System.Net.Sockets.Socket.SendToAsync%2A>コネクションレス型との接続指向プロトコルの両方で動作します。</span><span class="sxs-lookup"><span data-stu-id="12190-3184">Although this method is intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendToAsync%2A> works with both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="12190-3185">完了の通知、イベント ハンドラーを実装するコールバック メソッドを作成する必要があります\<SocketAsyncEventArgs > を委任し、アタッチするためのコールバック、<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="12190-3185">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="12190-3186">次のプロパティとイベントを<xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType>オブジェクトが正常にこのメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3186">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="12190-3187">呼び出し元の設定、<xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType>を呼び出す前に必要なすべてのユーザー状態オブジェクトのプロパティ、<xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッド情報をコールバック メソッドで取得できるようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-3187">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="12190-3188">コールバックは、1 つのオブジェクトより多くの情報を必要とする場合は、メンバーとして他の必要な状態情報を保持するために、小さいクラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="12190-3188">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="12190-3189">最初に呼び出す必要がある接続指向のプロトコルを使用している場合、 <xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3189">If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span> <span data-ttu-id="12190-3190">それ以外の場合<xref:System.Net.Sockets.Socket.SendToAsync%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3190">Otherwise <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-3191">接続指向のプロトコルを使用する場合、<xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッドは無視されます、<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>プロパティと送信のデータを<xref:System.Net.EndPoint?displayProperty=nameWithType>で確立されている、 <xref:System.Net.Sockets.Socket.Accept%2A>、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A>、 <xref:System.Net.Sockets.Socket.BeginAccept%2A>、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3191">When using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method will ignore the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property and send data to the <xref:System.Net.EndPoint?displayProperty=nameWithType> established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span>  
  
 <span data-ttu-id="12190-3192">コネクションレスのプロトコルを使用している場合は既定のリモート ホストとの確立する必要はありません、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendToAsync%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3192">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendToAsync%2A>.</span></span> <span data-ttu-id="12190-3193">この呼び出しをする場合にだけ、<xref:System.Net.Sockets.Socket.BeginSend%2A>または<xref:System.Net.Sockets.Socket.SendAsync%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3193">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.SendAsync%2A> methods.</span></span> <span data-ttu-id="12190-3194">呼び出す場合、 <xref:System.Net.Sockets.Socket.BeginConnect%2A>、 <xref:System.Net.Sockets.Socket.Connect%2A>、または<xref:System.Net.Sockets.Socket.ConnectAsync%2A>メソッドを呼び出す前に<xref:System.Net.Sockets.Socket.SendToAsync%2A>、<xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>操作のみを送信するのプロパティで指定された既定のリモート ホストは無効です。</span><span class="sxs-lookup"><span data-stu-id="12190-3194">If you do call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendToAsync%2A>, the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="12190-3195">必要はありませんを呼び出して、<xref:System.Net.Sockets.Socket.Bind%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3195">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="12190-3196">この場合、基になるサービス プロバイダーは、最も適切なローカル ネットワーク IP アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="12190-3196">In this case, the underlying service provider will assign the most appropriate local network IP address and port number.</span></span> <span data-ttu-id="12190-3197">基になるサービス プロバイダーは、空いているポートを選択する場合は、ゼロのポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-3197">Use a port number of zero if you want the underlying service provider to select a free port.</span></span> <span data-ttu-id="12190-3198">使用することができます、割り当てられているローカル ネットワーク IP アドレスとポート番号を識別する必要がある場合、<xref:System.Net.Sockets.Socket.LocalEndPoint%2A>後プロパティ、<xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>イベントがシグナル状態にし、関連付けられているデリゲートが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="12190-3198">If you need to identify the assigned local network IP address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event is signaled and the associated delegates are called.</span></span>  
  
 <span data-ttu-id="12190-3199">ブロードキャスト アドレスにデータを送信する場合は、最初に呼び出す必要があります、<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドと set ソケット オプションを<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>true に設定します。</span><span class="sxs-lookup"><span data-stu-id="12190-3199">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option for <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> to true.</span></span> <span data-ttu-id="12190-3200">バッファーのサイズが、基になるサービス プロバイダーのパケットの最大サイズを超えていないことを確認するもあります。</span><span class="sxs-lookup"><span data-stu-id="12190-3200">You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="12190-3201">場合は、データグラムが送信されず<xref:System.Net.Sockets.Socket.SendToAsync%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3201">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="12190-3202">DontRoute フラグを指定する場合、<xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType>プロパティに、データを送信すると、ルーティングされません。</span><span class="sxs-lookup"><span data-stu-id="12190-3202">If you specify the DontRoute flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="12190-3203">メッセージ指向のソケットでは、基になるトランスポートのメッセージの最大サイズを超えないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3203">For message-oriented sockets, care must be taken not to exceed the maximum message size of the underlying transport.</span></span> <span data-ttu-id="12190-3204">バッファーのサイズは、基になるサービス プロバイダーのパケットの最大サイズを超えている場合、データグラムが送信されず、<xref:System.Net.Sockets.Socket.SendToAsync%2A>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3204">If the size of the buffer exceeds the maximum packet size of the underlying service provider, the datagram is not sent and <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="12190-3205">正常に完了、<xref:System.Net.Sockets.Socket.SendToAsync%2A>メソッドは、データが正常に送信されたことを指定していません。</span><span class="sxs-lookup"><span data-stu-id="12190-3205">The successful completion of a <xref:System.Net.Sockets.Socket.SendToAsync%2A> method does not indicate that the data was successfully delivered.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-3206">
            <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> に null 値を指定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3206">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-3207">
            <paramref name="e" /> パラメーターに指定された <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> オブジェクトを使用してソケット操作が既に進行していました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3207">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-3208">このメソッドには Windows XP 以降が必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3208">Windows XP or later is required for this method.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3209">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3209">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3210">指定されたプロトコルは接続指向ですが、<see cref="T:System.Net.Sockets.Socket" /> がまだ接続されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3210">The protocol specified is connection-oriented, but the <see cref="T:System.Net.Sockets.Socket" /> is not yet connected.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SetIPProtectionLevel">
      <MemberSignature Language="C#" Value="public void SetIPProtectionLevel (System.Net.Sockets.IPProtectionLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetIPProtectionLevel(valuetype System.Net.Sockets.IPProtectionLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetIPProtectionLevel (level As IPProtectionLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetIPProtectionLevel(System::Net::Sockets::IPProtectionLevel level);" />
      <MemberSignature Language="F#" Value="member this.SetIPProtectionLevel : System.Net.Sockets.IPProtectionLevel -&gt; unit" Usage="socket.SetIPProtectionLevel level" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Net.Sockets.IPProtectionLevel" />
      </Parameters>
      <Docs>
        <param name="level">
          <span data-ttu-id="12190-3211">このソケットに設定する IP 保護レベル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3211">The IP protection level to set on this socket.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3212">ソケットの IP 保護レベルを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3212">Set the IP protection level on a socket.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3213"><xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A>メソッドにより、制限、IPv6、または IP ソケット アドレスと同じローカル リンクまたはサイト ローカル プレフィックスなど、特定のスコープをリッスンするようにします。</span><span class="sxs-lookup"><span data-stu-id="12190-3213">The <xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> method enables restricting an a IPv6 or IP socket to listen on a specified scope, such as addresses with the same link local or site local prefix.</span></span> <span data-ttu-id="12190-3214">このソケット オプションでは、IPv6、または IP ソケットにアクセス制限を設定するアプリケーションを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-3214">This socket option enables applications to place access restrictions on IPv6 or IP sockets.</span></span> <span data-ttu-id="12190-3215">この制限により、プライベート LAN で実行されるアプリケーションを外部からの攻撃に対して簡単かつ堅牢に強化できます。</span><span class="sxs-lookup"><span data-stu-id="12190-3215">Such restrictions enable an application running on a private LAN to simply and robustly harden itself against external attacks.</span></span> <span data-ttu-id="12190-3216">このソケット オプションは、アクセスの制限を削除する場合にも使用できます、`level`にパラメーターが設定されている<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3216">This socket option can also be used to remove access restrictions if the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="12190-3217">このソケット オプションで待機中のソケットのスコープを変更して、適切な場合はパブリック ユーザーおよびプライベート ユーザーからの無制限のアクセスを許可したり、必要に応じて同じサイトへのアクセスのみに制限したりできます。</span><span class="sxs-lookup"><span data-stu-id="12190-3217">This socket option widens or narrows the scope of a listening socket, enabling unrestricted access from public and private users when appropriate, or restricting access only to the same site, as required.</span></span>  
  
 <span data-ttu-id="12190-3218">このソケット オプションには、<xref:System.Net.Sockets.IPProtectionLevel> 列挙型で指定されている定義済みの保護レベルが設定されています。</span><span class="sxs-lookup"><span data-stu-id="12190-3218">This socket option has defined protection levels specified in the <xref:System.Net.Sockets.IPProtectionLevel> enumeration.</span></span>  
  
 <span data-ttu-id="12190-3219"><xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A>メソッドを使用を有効または無効のように、ネットワーク アドレス トラバーサル (NAT) を<xref:System.Net.Sockets.Socket>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="12190-3219">The <xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> method is used to enable or disable Network Address Traversal (NAT) for a <xref:System.Net.Sockets.Socket> instance.</span></span> <span data-ttu-id="12190-3220">NAT トラバーサルを指定するには、Teredo、6to4、または ISATAP トンネルを使用します。</span><span class="sxs-lookup"><span data-stu-id="12190-3220">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="12190-3221">ときに、`level`にパラメーターが設定されている<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>、または<xref:System.Net.Sockets.IPProtectionLevel.Restricted>、NAT トラバーサルが明示的に無効になります、<xref:System.Net.Sockets.Socket>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="12190-3221">When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, or <xref:System.Net.Sockets.IPProtectionLevel.Restricted>, this explicitly disables NAT traversal for a <xref:System.Net.Sockets.Socket> instance.</span></span>  
  
 <span data-ttu-id="12190-3222">ときに、`level`にパラメーターが設定されている<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>、NAT トラバーサルを許可するこの可能性があります、<xref:System.Net.Sockets.Socket>によっては、システム上でファイアウォール規則です。</span><span class="sxs-lookup"><span data-stu-id="12190-3222">When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, this may allow NAT traversal for a <xref:System.Net.Sockets.Socket> depending on firewall rules in place on the system.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="12190-3223">
            <paramref name="level" /> パラメーターとして <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" /> を使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3223">The <paramref name="level" /> parameter cannot be <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" />.</span>
          </span>
          <span data-ttu-id="12190-3224">IP 保護レベルを未指定に設定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3224">The IP protection level cannot be set to unspecified.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-3225">ソケットの <see cref="T:System.Net.Sockets.AddressFamily" /> は、<see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> または <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3225">The <see cref="T:System.Net.Sockets.AddressFamily" /> of the socket must be either <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSocketOption">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="12190-3226">
            <see cref="T:System.Net.Sockets.Socket" /> オプションを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3226">Sets a <see cref="T:System.Net.Sockets.Socket" /> option.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, bool optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, bool optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, bool optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * bool -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="12190-3227">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3227">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="12190-3228">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3228">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="12190-3229">
            <see cref="T:System.Boolean" /> として表されるオプションの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3229">The value of the option, represented as a <see cref="T:System.Boolean" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3230">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションを、指定した <see cref="T:System.Boolean" /> 値に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3230">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified <see cref="T:System.Boolean" /> value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3231"><xref:System.Net.Sockets.Socket> オプションは、現在の動作を決定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3231"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-3232">設定`optionValue`に`true`オプションを有効にまたは`false`オプションを無効にします。</span><span class="sxs-lookup"><span data-stu-id="12190-3232">Set `optionValue` to `true` to enable the option, or to `false` to disable the option.</span></span>  
  
 <span data-ttu-id="12190-3233"><xref:System.Net.Sockets.Socket> オプションは、プロトコルのサポートのレベルでグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="12190-3233"><xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.</span></span>  
  
 <span data-ttu-id="12190-3234">次のとおり、さまざまな<xref:System.Net.Sockets.Socket>オプションをこのオーバー ロードを使用して設定できます。</span><span class="sxs-lookup"><span data-stu-id="12190-3234">Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload.</span></span> <span data-ttu-id="12190-3235">これらのオプションが適切にグループ化<xref:System.Net.Sockets.SocketOptionLevel>値。</span><span class="sxs-lookup"><span data-stu-id="12190-3235">These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value.</span></span> <span data-ttu-id="12190-3236">これらのオプションのいずれかを設定する場合は、必ず使用して、適切な<xref:System.Net.Sockets.SocketOptionLevel>値を`optionLevel`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-3236">If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value for the `optionLevel` parameter.</span></span> <span data-ttu-id="12190-3237">設定を選択するオプションを指定する必要があります、`optionName`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-3237">The option you choose to set must be specified in the `optionName` parameter.</span></span> <span data-ttu-id="12190-3238">記載されているオプションのいずれかの現在の値を取得するには、使用する場合、<xref:System.Net.Sockets.Socket.GetSocketOption%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3238">If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
 <span data-ttu-id="12190-3239"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3239"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.AcceptConnection>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Broadcast>  
  
-   <xref:System.Net.Sockets.SocketOptionName.DontLinger>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Debug>  
  
-   <xref:System.Net.Sockets.SocketOptionName.KeepAlive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.OutOfBandInline>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReuseAddress>  
  
 <span data-ttu-id="12190-3240"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3240"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HeaderIncluded>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastLoopback>  
  
-   <xref:System.Net.Sockets.SocketOptionName.UseLoopback>  
  
 <span data-ttu-id="12190-3241"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3241"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.BsdUrgent>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Expedited>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoDelay>  
  
 <span data-ttu-id="12190-3242"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3242"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoChecksum>  
  
 <span data-ttu-id="12190-3243">これらのオプションの詳細についてを参照してください、<xref:System.Net.Sockets.SocketOptionName>列挙します。</span><span class="sxs-lookup"><span data-stu-id="12190-3243">For more information on these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3244">表示された場合、<xref:System.Net.Sockets.SocketException>例外を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3244">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3245">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3245">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3246">ソケットを開き、により、次のコード例、`DontLinger`と`OutOfBandInline`ソケット オプション。</span><span class="sxs-lookup"><span data-stu-id="12190-3246">The following code example opens a socket and enables the `DontLinger` and the `OutOfBandInline` socket options.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#5)]
 [!code-csharp[NCLSocketEnhancements#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3247">
            <see cref="T:System.Net.Sockets.Socket" /> オブジェクトは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3247">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3248">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3248">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, unsigned int8[] optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, cli::array &lt;System::Byte&gt; ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * byte[] -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="12190-3249">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3249">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="12190-3250">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3250">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="12190-3251">オプションの値を表す <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3251">An array of type <see cref="T:System.Byte" /> that represents the value of the option.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3252">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションを、指定した値に設定します。この値はバイト配列で表されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3252">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified value, represented as a byte array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3253"><xref:System.Net.Sockets.Socket> オプションは、現在の動作を決定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3253"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-3254">このオーバー ロードを使用して、それらを設定する<xref:System.Net.Sockets.Socket>オプションの値としてバイト配列を必要とするオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3254">Use this overload to set those <xref:System.Net.Sockets.Socket> options that require a byte array as an option value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3255">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3255">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3256">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3256">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3257">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-3257">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-3258">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-3258">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3259">次のコード例のセット、<xref:System.Net.Sockets.LingerOption>と<xref:System.Net.Sockets.Socket.Send%2A>タイムアウト値。</span><span class="sxs-lookup"><span data-stu-id="12190-3259">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3260">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3260">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3261">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3261">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, int32 optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * int -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="12190-3262">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3262">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="12190-3263">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3263">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="12190-3264">オプションの値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3264">A value of the option.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3265">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションを、指定した整数値に設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3265">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3266"><xref:System.Net.Sockets.Socket> オプションは、現在の動作を決定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3266"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-3267">オプションである場合の<xref:System.Boolean>0 以外の値をこのオプションを有効にして、オプションを無効にゼロ値を指定、データ型します。</span><span class="sxs-lookup"><span data-stu-id="12190-3267">For an option with a <xref:System.Boolean> data type, specify a nonzero value to enable the option, and a zero value to disable the option.</span></span> <span data-ttu-id="12190-3268">整数データ型のオプションでは、適切な値を指定します。</span><span class="sxs-lookup"><span data-stu-id="12190-3268">For an option with an integer data type, specify the appropriate value.</span></span> <span data-ttu-id="12190-3269"><xref:System.Net.Sockets.Socket> オプションは、プロトコルのサポートのレベルでグループ化されます。</span><span class="sxs-lookup"><span data-stu-id="12190-3269"><xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.</span></span>  
  
 <span data-ttu-id="12190-3270">次のとおり、さまざまな<xref:System.Net.Sockets.Socket>オプションをこのオーバー ロードを使用して設定できます。</span><span class="sxs-lookup"><span data-stu-id="12190-3270">Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload.</span></span> <span data-ttu-id="12190-3271">これらのオプションが適切にグループ化<xref:System.Net.Sockets.SocketOptionLevel>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3271">These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel>.</span></span> <span data-ttu-id="12190-3272">これらのオプションのいずれかを設定する場合は、必ず使用して、適切な<xref:System.Net.Sockets.SocketOptionLevel>の`optionLevel`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-3272">If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> for the `optionLevel` parameter.</span></span> <span data-ttu-id="12190-3273">設定を選択するオプションを指定する必要があります、`optionName`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-3273">The option you choose to set must be specified in the `optionName` parameter.</span></span> <span data-ttu-id="12190-3274">記載されているオプションのいずれかの現在の値を取得するには、使用する場合、<xref:System.Net.Sockets.Socket.GetSocketOption%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3274">If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
 <span data-ttu-id="12190-3275"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3275"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Broadcast>  
  
-   <xref:System.Net.Sockets.SocketOptionName.DontLinger>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Debug>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Error>  
  
-   <xref:System.Net.Sockets.SocketOptionName.KeepAlive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.OutOfBandInline>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReceiveBuffer>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReceiveTimeout>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReuseAddress>  
  
-   <xref:System.Net.Sockets.SocketOptionName.SendBuffer>  
  
-   <xref:System.Net.Sockets.SocketOptionName.SendTimeout>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Type>  
  
 <span data-ttu-id="12190-3276"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3276"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HeaderIncluded>  
  
-   <xref:System.Net.Sockets.SocketOptionName.IPOptions>  
  
-   <xref:System.Net.Sockets.SocketOptionName.IpTimeToLive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastInterface>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastLoopback>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastTimeToLive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.TypeOfService>  
  
-   <xref:System.Net.Sockets.SocketOptionName.UseLoopback>  
  
 <span data-ttu-id="12190-3277"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3277"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.BsdUrgent>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Expedited>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoDelay>  
  
 <span data-ttu-id="12190-3278"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3278"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ChecksumCoverage>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoChecksum>  
  
 <span data-ttu-id="12190-3279"><xref:System.Net.Sockets.SocketOptionLevel.IPv6?displayProperty=nameWithType> このオーバー ロードを使用して設定できるオプションです。</span><span class="sxs-lookup"><span data-stu-id="12190-3279"><xref:System.Net.Sockets.SocketOptionLevel.IPv6?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HopLimit>  
  
 <span data-ttu-id="12190-3280">これらのオプションの詳細についてを参照してください、<xref:System.Net.Sockets.SocketOptionName>列挙します。</span><span class="sxs-lookup"><span data-stu-id="12190-3280">For more information about these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3281">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3281">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3282">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3282">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3283">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-3283">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-3284">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-3284">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3285">次のコード例のセット、<xref:System.Net.Sockets.LingerOption>と<xref:System.Net.Sockets.Socket.Send%2A>タイムアウト値。</span><span class="sxs-lookup"><span data-stu-id="12190-3285">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3286">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3286">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3287">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3287">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, object optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, object optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, System::Object ^ optionValue);" />
      <MemberSignature Language="F#" Value="member this.SetSocketOption : System.Net.Sockets.SocketOptionLevel * System.Net.Sockets.SocketOptionName * obj -&gt; unit" Usage="socket.SetSocketOption (optionLevel, optionName, optionValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="optionLevel">
          <span data-ttu-id="12190-3288">
            <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3288">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span>
          </span>
        </param>
        <param name="optionName">
          <span data-ttu-id="12190-3289">
            <see cref="T:System.Net.Sockets.SocketOptionName" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3289">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span>
          </span>
        </param>
        <param name="optionValue">
          <span data-ttu-id="12190-3290">オプションの値を格納する <see cref="T:System.Net.Sockets.LingerOption" /> または <see cref="T:System.Net.Sockets.MulticastOption" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3290">A <see cref="T:System.Net.Sockets.LingerOption" /> or <see cref="T:System.Net.Sockets.MulticastOption" /> that contains the value of the option.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3291">指定した <see cref="T:System.Net.Sockets.Socket" /> オプションを、指定した値に設定します。この値はオブジェクトで表されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3291">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified value, represented as an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3292"><xref:System.Net.Sockets.Socket> オプションは、現在の動作を決定<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3292"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-3293">このオーバー ロードを使用して、設定、 <xref:System.Net.Sockets.SocketOptionName.Linger>、 <xref:System.Net.Sockets.SocketOptionName.AddMembership>、および<xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket>オプション。</span><span class="sxs-lookup"><span data-stu-id="12190-3293">Use this overload to set the <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, and <xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket> options.</span></span> <span data-ttu-id="12190-3294"><xref:System.Net.Sockets.SocketOptionName.Linger>オプションを使用して<xref:System.Net.Sockets.Socket>の`optionLevel`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-3294">For the <xref:System.Net.Sockets.SocketOptionName.Linger> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter.</span></span> <span data-ttu-id="12190-3295"><xref:System.Net.Sockets.SocketOptionName.AddMembership>と<xref:System.Net.Sockets.SocketOptionName.DropMembership>を使用して<xref:System.Net.Sockets.SocketOptionLevel.IP>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3295">For <xref:System.Net.Sockets.SocketOptionName.AddMembership> and <xref:System.Net.Sockets.SocketOptionName.DropMembership>, use <xref:System.Net.Sockets.SocketOptionLevel.IP>.</span></span> <span data-ttu-id="12190-3296">上記のオプションのいずれかの現在の値を取得するには、使用する場合、<xref:System.Net.Sockets.Socket.GetSocketOption%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="12190-3296">If you want to get the current value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3297">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3297">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3298">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3298">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3299">次のコード例のセット、<xref:System.Net.Sockets.LingerOption>と<xref:System.Net.Sockets.Socket.Send%2A>のタイムアウト値。</span><span class="sxs-lookup"><span data-stu-id="12190-3299">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="12190-3300">
            <paramref name="optionValue" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3300">
              <paramref name="optionValue" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3301">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3301">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3302">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3302">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown (System.Net.Sockets.SocketShutdown how);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown(valuetype System.Net.Sockets.SocketShutdown how) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown (how As SocketShutdown)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown(System::Net::Sockets::SocketShutdown how);" />
      <MemberSignature Language="F#" Value="member this.Shutdown : System.Net.Sockets.SocketShutdown -&gt; unit" Usage="socket.Shutdown how" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="how" Type="System.Net.Sockets.SocketShutdown" />
      </Parameters>
      <Docs>
        <param name="how">
          <span data-ttu-id="12190-3303">許可されなくなる操作を指定する <see cref="T:System.Net.Sockets.SocketShutdown" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3303">One of the <see cref="T:System.Net.Sockets.SocketShutdown" /> values that specifies the operation that will no longer be allowed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12190-3304">
            <see cref="T:System.Net.Sockets.Socket" /> での送受信を無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3304">Disables sends and receives on a <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3305">接続指向の使用時に<xref:System.Net.Sockets.Socket>、常に呼び出し、<xref:System.Net.Sockets.Socket.Shutdown%2A>閉じる前にメソッド、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3305">When using a connection-oriented <xref:System.Net.Sockets.Socket>, always call the <xref:System.Net.Sockets.Socket.Shutdown%2A> method before closing the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-3306">これにより、すべてのデータが送信されが閉じる前に、接続されたソケットで受信したことです。</span><span class="sxs-lookup"><span data-stu-id="12190-3306">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="12190-3307">呼び出す、<xref:System.Net.Sockets.Socket.Close%2A>マネージし、アンマネージに関連付けられているリソースのすべてを解放するメソッド、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3307">Call the <xref:System.Net.Sockets.Socket.Close%2A> method to free all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="12190-3308">再利用しないで、<xref:System.Net.Sockets.Socket>終了後にします。</span><span class="sxs-lookup"><span data-stu-id="12190-3308">Do not attempt to reuse the <xref:System.Net.Sockets.Socket> after closing.</span></span>  
  
 <span data-ttu-id="12190-3309">次の表に、<xref:System.Net.Sockets.SocketShutdown>に対して有効な列挙値、`how`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="12190-3309">The following table shows the <xref:System.Net.Sockets.SocketShutdown> enumeration values that are valid for the `how` parameter.</span></span>  
  
|<span data-ttu-id="12190-3310">[値]</span><span class="sxs-lookup"><span data-stu-id="12190-3310">Value</span></span>|<span data-ttu-id="12190-3311">説明</span><span class="sxs-lookup"><span data-stu-id="12190-3311">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="12190-3312">送信</span><span class="sxs-lookup"><span data-stu-id="12190-3312">Send</span></span>|<span data-ttu-id="12190-3313">この送信は無効に<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3313">Disable sending on this <xref:System.Net.Sockets.Socket>.</span></span>|  
|<span data-ttu-id="12190-3314">Receive</span><span class="sxs-lookup"><span data-stu-id="12190-3314">Receive</span></span>|<span data-ttu-id="12190-3315">この受信を無効にする<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3315">Disable receiving on this <xref:System.Net.Sockets.Socket>.</span></span>|  
|<span data-ttu-id="12190-3316">両方</span><span class="sxs-lookup"><span data-stu-id="12190-3316">Both</span></span>|<span data-ttu-id="12190-3317">両方の送受信にこれを無効にする<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3317">Disable both sending and receiving on this <xref:System.Net.Sockets.Socket>.</span></span>|  
  
 <span data-ttu-id="12190-3318">設定`how`に<xref:System.Net.Sockets.SocketShutdown.Send>後続のことを指定するために呼び出す<xref:System.Net.Sockets.Socket.Send%2A>は許可されていません。</span><span class="sxs-lookup"><span data-stu-id="12190-3318">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Send> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Send%2A> are not allowed.</span></span> <span data-ttu-id="12190-3319">場合は、コネクションレス型を使用している<xref:System.Net.Sockets.Socket>を指定して、<xref:System.Net.Sockets.SocketShutdown.Send>効果はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-3319">If you are using a connectionless <xref:System.Net.Sockets.Socket>, specifying <xref:System.Net.Sockets.SocketShutdown.Send> will have no effect.</span></span>  
  
 <span data-ttu-id="12190-3320">設定`how`に<xref:System.Net.Sockets.SocketShutdown.Receive>後続のことを指定するために呼び出す<xref:System.Net.Sockets.Socket.Receive%2A>は許可されていません。</span><span class="sxs-lookup"><span data-stu-id="12190-3320">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Receive> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Receive%2A> are not allowed.</span></span> <span data-ttu-id="12190-3321">下位のプロトコル層への影響はありません。</span><span class="sxs-lookup"><span data-stu-id="12190-3321">This has no effect on lower protocol layers.</span></span> <span data-ttu-id="12190-3322">接続指向のプロトコルを使用している呼び出しの後に、次の条件のいずれかが存在する場合、接続が終了<xref:System.Net.Sockets.Socket.Shutdown%2A>:</span><span class="sxs-lookup"><span data-stu-id="12190-3322">If you are using a connection-oriented protocol, the connection is terminated if either of the following conditions exist after a call to <xref:System.Net.Sockets.Socket.Shutdown%2A> :</span></span>  
  
-   <span data-ttu-id="12190-3323">データは受信を待機しているネットワークの着信バッファーです。</span><span class="sxs-lookup"><span data-stu-id="12190-3323">Data is in the incoming network buffer waiting to be received.</span></span>  
  
-   <span data-ttu-id="12190-3324">多くのデータが到着しました。</span><span class="sxs-lookup"><span data-stu-id="12190-3324">More data has arrived.</span></span>  
  
 <span data-ttu-id="12190-3325">コネクションレスのプロトコルを使用している場合は、データグラムが受け入れてし、キューに置かれました。</span><span class="sxs-lookup"><span data-stu-id="12190-3325">If you are using a connectionless protocol, datagrams are accepted and queued.</span></span> <span data-ttu-id="12190-3326">ただし、追加の受信データグラムの使用可能なバッファー領域がない場合は破棄され、送信者にエラーが返されません。</span><span class="sxs-lookup"><span data-stu-id="12190-3326">However, if no buffer space is available for additional incoming datagrams, they will be discarded and no error will be returned to the sender.</span></span> <span data-ttu-id="12190-3327">使用して<xref:System.Net.Sockets.Socket.Shutdown%2A>、コネクションレスで<xref:System.Net.Sockets.Socket>はお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="12190-3327">Using <xref:System.Net.Sockets.Socket.Shutdown%2A> on a connectionless <xref:System.Net.Sockets.Socket> is not recommended.</span></span>  
  
 <span data-ttu-id="12190-3328">設定`how`に<xref:System.Net.Sockets.SocketShutdown.Both>両方の送信を無効にし、前述のように受信します。</span><span class="sxs-lookup"><span data-stu-id="12190-3328">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Both> disables both sends and receives as described above.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3329">表示された場合、<xref:System.Net.Sockets.SocketException>を呼び出すときに、<xref:System.Net.Sockets.Socket.Shutdown%2A>メソッドを使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3329">If you receive a <xref:System.Net.Sockets.SocketException> when calling the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3330">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3330">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12190-3331">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="12190-3331">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="12190-3332">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="12190-3332">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3333">次のコード例では<xref:System.Net.Sockets.Socket.Shutdown%2A>を無効にする、<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3333">The following code example uses <xref:System.Net.Sockets.Socket.Shutdown%2A> to disable the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3334">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3334">An error occurred when attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3335">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3335">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketShutdown" />
      </Docs>
    </Member>
    <Member MemberName="SocketType">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketType SocketType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.SocketType SocketType" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SocketType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SocketType As SocketType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::SocketType SocketType { System::Net::Sockets::SocketType get(); };" />
      <MemberSignature Language="F#" Value="member this.SocketType : System.Net.Sockets.SocketType" Usage="System.Net.Sockets.Socket.SocketType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-3336">
            <see cref="T:System.Net.Sockets.Socket" /> の型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3336">Gets the type of the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-3337">
            <see cref="T:System.Net.Sockets.SocketType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3337">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3338"><xref:System.Net.Sockets.Socket.SocketType%2A> 読み取り専用と設定されているときに、<xref:System.Net.Sockets.Socket>を作成します。</span><span class="sxs-lookup"><span data-stu-id="12190-3338"><xref:System.Net.Sockets.Socket.SocketType%2A> is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3339">次のコード例では表示、 <xref:System.Net.Sockets.AddressFamily>、 <xref:System.Net.Sockets.SocketType>、および<xref:System.Net.Sockets.ProtocolType>コンソールにします。</span><span class="sxs-lookup"><span data-stu-id="12190-3339">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.SocketType" />
      </Docs>
    </Member>
    <Member MemberName="SupportsIPv4">
      <MemberSignature Language="C#" Value="public static bool SupportsIPv4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SupportsIPv4" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SupportsIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SupportsIPv4 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SupportsIPv4 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsIPv4 : bool" Usage="System.Net.Sockets.Socket.SupportsIPv4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use OSSupportsIPv4 instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-3340">現在のホストで IPv4 サポートが使用可能で有効になっているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3340">Gets a value indicating whether IPv4 support is available and enabled on the current host.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-3341">現在のホストが IPv4 プロトコルをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3341">
              <see langword="true" /> if the current host supports the IPv4 protocol; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3342">オペレーティング システムでは、IPv4 と IPv6 の両方のプロトコルをサポート可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3342">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.SupportsIPv6" />
      </Docs>
    </Member>
    <Member MemberName="SupportsIPv6">
      <MemberSignature Language="C#" Value="public static bool SupportsIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SupportsIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SupportsIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SupportsIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SupportsIPv6 { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsIPv6 : bool" Usage="System.Net.Sockets.Socket.SupportsIPv6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use OSSupportsIPv6 instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-3343">互換性のために残されている特定の <see cref="T:System.Net.Dns" /> メンバー向けに、フレームワークが IPv6 をサポートしているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3343">Gets a value that indicates whether the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns" /> members.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-3344">互換性のために残されている特定の <see cref="T:System.Net.Dns" /> メソッド向けに、フレームワークが IPv6 をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3344">
              <see langword="true" /> if the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns" /> methods; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3345">オペレーティング システムでは、IPv4 と IPv6 の両方のプロトコルをサポート可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3345">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
        <altmember cref="P:System.Net.Sockets.Socket.SupportsIPv4" />
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.Socket.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-3346">
            <see cref="T:System.Net.Sockets.Socket" /> によって送信されたインターネット プロトコル (IP) パケットの有効期間 (TTL) の値を指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3346">Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-3347">TTL の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3347">The TTL value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3348">TTL 値は、ルーターはパケットとインターネット制御メッセージ プロトコル (ICMP) の"TTL を超えています"を破棄する前に、パケットが走査できるルーターの最大数を示すエラー メッセージが送信者に返されます。</span><span class="sxs-lookup"><span data-stu-id="12190-3348">The TTL value indicates the maximum number of routers the packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) "TTL exceeded" error message is returned to the sender.</span></span>  
  
 <span data-ttu-id="12190-3349">TTL 値は、0 255 からの値に設定可能性があります。</span><span class="sxs-lookup"><span data-stu-id="12190-3349">The TTL value may be set to a value from 0 to 255.</span></span> <span data-ttu-id="12190-3350">このプロパティが設定されていないときに、ソケットの既定の TTL 値は 32 です。</span><span class="sxs-lookup"><span data-stu-id="12190-3350">When this property is not set, the default TTL value for a socket is 32.</span></span>  
  
 <span data-ttu-id="12190-3351">伝送制御プロトコル (TCP) ソケットでこのプロパティの設定は無視されますスタックによって、TCP/IP ソケットを使用して正常な接続が確立された場合。</span><span class="sxs-lookup"><span data-stu-id="12190-3351">Setting this property on a Transmission Control Protocol (TCP) socket is ignored by the TCP/IP stack if a successful connection has been established using the socket.</span></span>  
  
 <span data-ttu-id="12190-3352">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>固有のエラー コードを取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3352">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="12190-3353">このコードを取得した後 Windows ソケットのバージョン 2 API エラー コードのドキュメント、MSDN ライブラリを参照エラーの詳細な説明。</span><span class="sxs-lookup"><span data-stu-id="12190-3353">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12190-3354">使用を次のコード例に示します、<xref:System.Net.Sockets.Socket.Ttl%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="12190-3354">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.Ttl%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="12190-3355">TTL 値には、負の数を設定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3355">The TTL value can't be set to a negative number.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="12190-3356">このプロパティは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ファミリまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ファミリのソケットに対してだけ設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3356">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="12190-3357">ソケットへのアクセスを試行しているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3357">An error occurred when attempting to access the socket.</span>
          </span>
          <span data-ttu-id="12190-3358">このエラーは、TTL に 255 より大きい値を設定しようとしたときにも返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3358">This error is also returned when an attempt was made to set TTL to a value higher than 255.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="12190-3359">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3359">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UseOnlyOverlappedIO">
      <MemberSignature Language="C#" Value="public bool UseOnlyOverlappedIO { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseOnlyOverlappedIO" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.UseOnlyOverlappedIO" />
      <MemberSignature Language="VB.NET" Value="Public Property UseOnlyOverlappedIO As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseOnlyOverlappedIO { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseOnlyOverlappedIO : bool with get, set" Usage="System.Net.Sockets.Socket.UseOnlyOverlappedIO" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("This doesn't do anything on Mono yet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12190-3360">ソケットが重複 I/O モードだけを使用する必要があるかどうかを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3360">Specifies whether the socket should only use Overlapped I/O mode.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12190-3361">
            <see cref="T:System.Net.Sockets.Socket" /> が重複 I/O モードだけを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3361">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> uses only overlapped I/O; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="12190-3362">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3362">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12190-3363">このプロパティを設定`true`の<xref:System.Net.Sockets.Socket>を呼び出そうと<xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3363">Set this property to `true` for a <xref:System.Net.Sockets.Socket> you intend to call <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.</span></span> <span data-ttu-id="12190-3364">それ以外の場合、フレームワークは、ソケットは、の使用を禁止するように、完了ポートを割り当てることが<xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>です。</span><span class="sxs-lookup"><span data-stu-id="12190-3364">Otherwise, the Framework may assign a completion port to the socket, which would prohibit the use of <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12190-3365">ソケットが完了ポートにバインドされています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="12190-3365">The socket has been bound to a completion port.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>