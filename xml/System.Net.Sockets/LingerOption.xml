<Type Name="LingerOption" FullName="System.Net.Sockets.LingerOption">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cb8ae307f2beeee884316616773a1e30713d0a21" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69072611" /></Metadata><TypeSignature Language="C#" Value="public class LingerOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LingerOption extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.LingerOption" />
  <TypeSignature Language="VB.NET" Value="Public Class LingerOption" />
  <TypeSignature Language="C++ CLI" Value="public ref class LingerOption" />
  <TypeSignature Language="F#" Value="type LingerOption = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Net.Sockets.Socket" /> メソッドまたは <see cref="M:System.Net.Sockets.Socket.Close" /> メソッドを呼び出した後で <see cref="M:System.Net.Sockets.TcpClient.Close" /> の接続を維持するかどうかを指定します。また、送信するデータが残っている場合は、接続を維持する時間を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションがメソッドまたは<xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.TcpClient>メソッドを呼び出した後も、送信ネットワークバッファーにデータが残っている可能性があります。 終了後にが未送信データの送信を試行<xref:System.Net.Sockets.Socket>する時間を指定する場合は、 `enable`パラメーターをに<xref:System.Net.Sockets.LingerOption> `true`設定してを作成し`seconds` 、パラメーターを目的の時間に設定します。 パラメーターを使用して、が<xref:System.Net.Sockets.Socket>タイムアウトする前に接続を維持する期間を指定します。 `seconds``enable` <xref:System.Net.Sockets.LingerOption> `seconds` `true`を閉じた後も常に接続状態を維持しない場合は、パラメーターをに設定し、パラメーターを0に設定してインスタンスを作成します。 <xref:System.Net.Sockets.Socket> この場合、はすぐ<xref:System.Net.Sockets.Socket>に終了し、未送信のデータは失われます。 作成したら、を<xref:System.Net.Sockets.LingerOption> <xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=nameWithType>メソッドに渡します。 を使用して<xref:System.Net.Sockets.TcpClient>データを送受信する場合は、 <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType>プロパティで<xref:System.Net.Sockets.LingerOption>インスタンスを設定します。  
  
 IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。 これは、プロパティ<xref:System.Net.Sockets.Socket>が設定<xref:System.Net.Sockets.TcpClient>されて<xref:System.Net.Sockets.Socket.LingerState%2A>いない場合は、 <xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティが設定されていない場合のの既定の動作です。  
  
   
  
## Examples  
 次の例では、 <xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出した後も1秒間待機するように、以前に作成したを設定しています。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LingerOption (bool enable, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enable As Boolean, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LingerOption(bool enable, int seconds);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.LingerOption : bool * int -&gt; System.Net.Sockets.LingerOption" Usage="new System.Net.Sockets.LingerOption (enable, seconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable"><see cref="M:System.Net.Sockets.Socket.Close" /> メソッドが呼び出された後も接続を維持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="seconds"><see cref="M:System.Net.Sockets.Socket.Close" /> メソッドが呼び出された後、接続を維持する秒数。</param>
        <summary><see cref="T:System.Net.Sockets.LingerOption" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を<xref:System.Net.Sockets.Socket>閉じた後も、送信ネットワークバッファーにデータが残っている可能性があります。 Close メソッドが呼び出された後も、未<xref:System.Net.Sockets.Socket>送信データの転送を続行するかどうかを指定するには、パラメーターを使用します。`enable` パラメーターを使用して、がタイムアウト前に送信<xref:System.Net.Sockets.Socket>されていないデータの転送を試行する時間を指定します。 `seconds`パラメーターにを`true`指定し`enable` 、 `seconds`パラメーターに0を指定した<xref:System.Net.Sockets.Socket>場合、は、送信ネットワークバッファーにデータが残っていない状態になるまでデータの送信を試みます。 パラメーターにを`false`指定すると、は<xref:System.Net.Sockets.Socket>直ちに終了し、未送信のデータは失われます。 `enable`  
  
 次の表では、T:System.Net.Sockets.LingerOption インスタンス<xref:System.Net.Sockets.Socket.Close%2A?displayProperty=nameWithType>が<xref:System.Net.Sockets.TcpClient.Close%2A?displayProperty=nameWithType>作成され、 `enable` `seconds` に設定されている場合に、パラメーターとパラメーターの使用可能な値に基づいてメソッドとメソッドの動作について説明します。<xref:System.Net.Sockets.Socket.LingerState%2A?displayProperty=nameWithType>または<xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType>プロパティ。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false`(無効)、既定値|タイムアウトは適用されません (既定)。|既定の IP プロトコルのタイムアウトが経過するまで、接続指向のソケット (TCP など) の保留中のデータを送信しようとします。|  
|`true`enabled|0以外のタイムアウト|指定したタイムアウトが経過するまで保留中のデータを送信しようとします。失敗した場合は、Winsock によって接続がリセットされます。|  
|`true`enabled|ゼロタイムアウト。|保留中のデータを破棄します。 接続指向のソケット (TCP など) の場合、Winsock によって接続がリセットされます。|  
  
 IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。 これは、 <xref:System.Net.Sockets.Socket.LingerState%2A>プロパティが設定されていない場合のソケットの既定の動作です。  
  
 プロパティに格納されているプロパティが既定のipプロトコルタイムアウトよりも大きい値に設定されている場合でも、既定のipプロトコルタイムアウトが適用され、上書きされます。<xref:System.Net.Sockets.LingerOption.LingerTime%2A> <xref:System.Net.Sockets.Socket.LingerState%2A>  
  
   
  
## Examples  
 次の例では、 <xref:System.Net.Sockets.Socket> <xref:System.Net.Sockets.Socket.Close%2A>メソッドを呼び出した後も1秒間待機するように、以前に作成したを設定しています。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Net.Sockets.LingerOption.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Net.Sockets.Socket" /> を閉じた後も接続を維持するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Net.Sockets.Socket" /> が呼び出された後も <see cref="M:System.Net.Sockets.Socket.Close" /> が接続を維持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.LingerOption.Enabled%2A>プロパティを使用して、 <xref:System.Net.Sockets.Socket>を閉じた後もを終了するかどうかを決定できます。 この値をまた`true`は`false`に変更し、 <xref:System.Net.Sockets.LingerOption>変更を<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドに渡すか<xref:System.Net.Sockets.TcpClient.LingerState%2A> 、 <xref:System.Net.Sockets.Socket.LingerState%2A>または property.to を無効にするか、残留を有効にします。  
  
 次の表では、プロパティの<xref:System.Net.Sockets.LingerOption.Enabled%2A>使用可能な値の動作<xref:System.Net.Sockets.LingerOption.LingerTime%2A>と、プロパティに<xref:System.Net.Sockets.Socket.LingerState%2A>格納されているプロパティについて説明します。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false`(無効)、既定値|タイムアウトは適用されません (既定)。|既定の IP プロトコルのタイムアウトが経過するまで、接続指向のソケット (TCP など) の保留中のデータを送信しようとします。|  
|`true`enabled|0以外のタイムアウト|指定したタイムアウトが経過するまで保留中のデータを送信しようとします。失敗した場合は、Winsock によって接続がリセットされます。|  
|`true`enabled|ゼロタイムアウト。|保留中のデータを破棄します。 接続指向のソケット (TCP など) の場合、Winsock によって接続がリセットされます。|  
  
 IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。 これは、 <xref:System.Net.Sockets.Socket.LingerState%2A>プロパティが設定されていない場合のソケットの既定の動作です。  
  
 プロパティに格納されているプロパティが既定のipプロトコルタイムアウトよりも大きい値に設定されている場合でも、既定のipプロトコルタイムアウトが適用され、上書きされます。<xref:System.Net.Sockets.LingerOption.LingerTime%2A> <xref:System.Net.Sockets.Socket.LingerState%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerTime">
      <MemberSignature Language="C#" Value="public int LingerTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LingerTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.LingerTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LingerTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LingerTime : int with get, set" Usage="System.Net.Sockets.LingerOption.LingerTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信するデータが残っている場合に、<see cref="M:System.Net.Sockets.Socket.Close" /> メソッドを呼び出した後で接続を維持する時間を取得または設定します。</summary>
        <value><see cref="M:System.Net.Sockets.Socket.Close" /> が呼び出された後、接続を維持する秒数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 閉じ<xref:System.Net.Sockets.Socket>たが、タイムアウトしたデータの転送を試行する時間を指定する場合は、この値を使用します。この値は、必要なタイムアウト期間 (秒単位) に設定することもできます。  
  
 プロパティがで、 `true`が0に設定<xref:System.Net.Sockets.LingerOption.LingerTime%2A>されている<xref:System.Net.Sockets.Socket>場合、は送信ネットワークバッファーで送信する保留中のデータを破棄します。 <xref:System.Net.Sockets.LingerOption.Enabled%2A> この値を変更する場合は、変更され<xref:System.Net.Sockets.LingerOption>たインスタンスを<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドに渡すか<xref:System.Net.Sockets.TcpClient.LingerState%2A> 、 <xref:System.Net.Sockets.Socket.LingerState%2A>またはプロパティを設定する必要があります。  
  
 次の表では、プロパティの<xref:System.Net.Sockets.LingerOption.Enabled%2A>使用可能な値の動作<xref:System.Net.Sockets.LingerOption.LingerTime%2A>と、プロパティに<xref:System.Net.Sockets.Socket.LingerState%2A>格納されているプロパティについて説明します。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false`(無効)、既定値|タイムアウトは適用されません (既定)。|既定の IP プロトコルのタイムアウトが経過するまで、接続指向のソケット (TCP など) の保留中のデータを送信しようとします。|  
|`true`enabled|0以外のタイムアウト|指定したタイムアウトが経過するまで保留中のデータを送信しようとします。失敗した場合は、Winsock によって接続がリセットされます。|  
|`true`enabled|ゼロタイムアウト。|保留中のデータを破棄します。 接続指向のソケット (TCP など) の場合、Winsock によって接続がリセットされます。|  
  
 IP スタックは、接続のラウンドトリップ時間に基づいて、使用する既定の IP プロトコルタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されるタイムアウトは、アプリケーションで定義されているものよりも関連性が高くなります。 これは、 <xref:System.Net.Sockets.Socket.LingerState%2A>プロパティが設定されていない場合のソケットの既定の動作です。  
  
 プロパティに格納されているプロパティが既定のipプロトコルタイムアウトよりも大きい値に設定されている場合でも、既定のipプロトコルタイムアウトが適用され、上書きされます。<xref:System.Net.Sockets.LingerOption.LingerTime%2A> <xref:System.Net.Sockets.Socket.LingerState%2A>  
  
   
  
## Examples  
 次の例では、このプロパティの値を表示します。  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
