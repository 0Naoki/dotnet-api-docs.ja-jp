<Type Name="LingerOption" FullName="System.Net.Sockets.LingerOption">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d3be57a7c3dc02f48b97bbc0844b2ec708eac020" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58703122" /></Metadata><TypeSignature Language="C#" Value="public class LingerOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LingerOption extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.LingerOption" />
  <TypeSignature Language="VB.NET" Value="Public Class LingerOption" />
  <TypeSignature Language="C++ CLI" Value="public ref class LingerOption" />
  <TypeSignature Language="F#" Value="type LingerOption = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Net.Sockets.Socket" /> メソッドまたは <see cref="M:System.Net.Sockets.Socket.Close" /> メソッドを呼び出した後で <see cref="M:System.Net.Sockets.TcpClient.Close" /> の接続を維持するかどうかを指定します。また、送信するデータが残っている場合は、接続を維持する時間を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 できる場合もありますデータ送信のネットワーク バッファーで使用可能なアプリケーションを呼び出してから、<xref:System.Net.Sockets.Socket>または<xref:System.Net.Sockets.TcpClient>メソッド。 量を指定する場合の時間を<xref:System.Net.Sockets.Socket>は終了タグの後の未送信のデータの転送を作成しよう、<xref:System.Net.Sockets.LingerOption>で、`enable`パラメーターに設定`true`、および`seconds`パラメーターが必要な時間数に設定. `seconds`パラメーターを使用するようにはどのくらいの期間を示す、<xref:System.Net.Sockets.Socket>タイムアウトになるまで接続を維持します。たくない場合、<xref:System.Net.Sockets.Socket>一定の期間終了後に接続したまま、作成、<xref:System.Net.Sockets.LingerOption>インスタンス、`enable`パラメーターに設定`true`と`seconds`パラメーター 0 に設定します。 ここで、<xref:System.Net.Sockets.Socket>は直ちに終了し、未送信のすべてのデータは失われます。 作成されたら、渡す、<xref:System.Net.Sockets.LingerOption>を<xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=nameWithType>メソッド。 使用してデータを送受信する場合、<xref:System.Net.Sockets.TcpClient>を設定し、<xref:System.Net.Sockets.LingerOption>インスタンス、<xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType>プロパティ。  
  
 IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。 ほとんどの場合は、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上です。 既定の動作は、これを<xref:System.Net.Sockets.Socket>ときに、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティが設定されていないと、<xref:System.Net.Sockets.TcpClient>ときに、<xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティが設定されていません。  
  
   
  
## Examples  
 次の例では、設定、以前に作成した<xref:System.Net.Sockets.Socket>呼び出した後、1 秒間の待機、<xref:System.Net.Sockets.Socket.Close%2A>メソッド。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LingerOption (bool enable, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enable As Boolean, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LingerOption(bool enable, int seconds);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.LingerOption : bool * int -&gt; System.Net.Sockets.LingerOption" Usage="new System.Net.Sockets.LingerOption (enable, seconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable"><see cref="M:System.Net.Sockets.Socket.Close" /> メソッドが呼び出された後も接続を維持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="seconds"><see cref="M:System.Net.Sockets.Socket.Close" /> メソッドが呼び出された後、接続を維持する秒数。</param>
        <summary><see cref="T:System.Net.Sockets.LingerOption" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 できる場合もありますデータ送信のネットワーク バッファーで使用できるを閉じた後、<xref:System.Net.Sockets.Socket>します。 使用して、`enable`かどうかを指定するパラメーター、 <xref:System.Net.Sockets.Socket> close メソッドが呼び出された後、未送信のデータの転送を続行します。 使用して、`seconds`パラメーターを示すようにはどのくらいの期間、<xref:System.Net.Sockets.Socket>タイムアウトするまでに未送信のデータ転送を試行します。指定した場合`true`の`enable`パラメーターとの場合は 0、`seconds`パラメーター、<xref:System.Net.Sockets.Socket>は出力方向のネットワーク バッファーにデータの左側がなくなるまで、データを送信ましょう。 指定した場合`false`の`enable`パラメーター、<xref:System.Net.Sockets.Socket>は直ちに終了し、未送信のすべてのデータは失われます。  
  
 次の表で、動作を示します、<xref:System.Net.Sockets.Socket.Close%2A?displayProperty=nameWithType>と<xref:System.Net.Sockets.TcpClient.Close%2A?displayProperty=nameWithType>メソッドは、可能な値に基づく、`enable`と`seconds`閉じてインスタンスが作成され、で設定するときにパラメーター<xref:System.Net.Sockets.Socket.LingerState%2A?displayProperty=nameWithType>または<xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType>プロパティ。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false` (無効)、既定値|タイムアウトが適用可能で、ない (既定値)。|既定値まで IP プロトコル タイムアウト保留中の接続指向のソケット (たとえば、TCP) のデータ送信を試みます期限が切れます。|  
|`true` (有効)|0 以外のタイムアウト|指定したタイムアウトが経過すると、失敗した場合、Winsock 接続をリセットするまで、保留中のデータ送信を試行します。|  
|`true` (有効)|0 のタイムアウト。|保留中のデータを破棄します。 接続志向ソケット (たとえば、TCP) の場合は、Winsock は接続をリセットします。|  
  
 IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。 ほとんどの場合は、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上です。 これは、ソケットの既定の動作と、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティは設定されません。  
  
 ときに、<xref:System.Net.Sockets.LingerOption.LingerTime%2A>にプロパティが格納されている、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定は、既定の IP プロトコル タイムアウトの表示およびオーバーライドはまだ適用されます。  
  
   
  
## Examples  
 次の例では、設定、以前に作成した<xref:System.Net.Sockets.Socket>呼び出した後、1 秒間の待機、<xref:System.Net.Sockets.Socket.Close%2A>メソッド。  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Net.Sockets.LingerOption.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Net.Sockets.Socket" /> を閉じた後も接続を維持するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Net.Sockets.Socket" /> が呼び出された後も <see cref="M:System.Net.Sockets.Socket.Close" /> が接続を維持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Net.Sockets.LingerOption.Enabled%2A>プロパティを確認するかどうか、<xref:System.Net.Sockets.Socket>終了タグの後の待機は。 この値に変更`true`または`false`させ、変更された<xref:System.Net.Sockets.LingerOption>を<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドまたはセット、<xref:System.Net.Sockets.TcpClient.LingerState%2A>または<xref:System.Net.Sockets.Socket.LingerState%2A>property.to が残留を有効または無効にします。  
  
 次の表に、可能な値の動作、<xref:System.Net.Sockets.LingerOption.Enabled%2A>プロパティおよび<xref:System.Net.Sockets.LingerOption.LingerTime%2A>にプロパティが格納されている、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティ。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false` (無効)、既定値|タイムアウトが適用可能で、ない (既定値)。|既定値まで IP プロトコル タイムアウト保留中の接続指向のソケット (たとえば、TCP) のデータ送信を試みます期限が切れます。|  
|`true` (有効)|0 以外のタイムアウト|指定したタイムアウトが経過すると、失敗した場合、Winsock 接続をリセットするまで、保留中のデータ送信を試行します。|  
|`true` (有効)|0 のタイムアウト。|保留中のデータを破棄します。 接続志向ソケット (たとえば、TCP) の場合は、Winsock は接続をリセットします。|  
  
 IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。 ほとんどの場合は、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上です。 これは、ソケットの既定の動作と、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティは設定されません。  
  
 ときに、<xref:System.Net.Sockets.LingerOption.LingerTime%2A>にプロパティが格納されている、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定は、既定の IP プロトコル タイムアウトの表示およびオーバーライドはまだ適用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerTime">
      <MemberSignature Language="C#" Value="public int LingerTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LingerTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.LingerTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LingerTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LingerTime : int with get, set" Usage="System.Net.Sockets.LingerOption.LingerTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信するデータが残っている場合に、<see cref="M:System.Net.Sockets.Socket.Close" /> メソッドを呼び出した後で接続を維持する時間を取得または設定します。</summary>
        <value><see cref="M:System.Net.Sockets.Socket.Close" /> が呼び出された後、接続を維持する秒数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 長時間閉じた方法を決定する場合にこの値を使用して<xref:System.Net.Sockets.Socket>タイムアウトするまでに未送信のデータ転送を試みます。この値は秒単位で、目的のタイムアウト期間に設定することもできます。  
  
 場合、<xref:System.Net.Sockets.LingerOption.Enabled%2A>プロパティは`true`、設定して<xref:System.Net.Sockets.LingerOption.LingerTime%2A>を 0 に、<xref:System.Net.Sockets.Socket>保留中の送信のネットワーク バッファーに送信するデータがすべて破棄します。 変更、渡す必要がある場合、この値を変更すると、<xref:System.Net.Sockets.LingerOption>インスタンスを<xref:System.Net.Sockets.Socket.SetSocketOption%2A>メソッドまたはセット、<xref:System.Net.Sockets.TcpClient.LingerState%2A>または<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティ。  
  
 次の表に、可能な値の動作、<xref:System.Net.Sockets.LingerOption.Enabled%2A>プロパティおよび<xref:System.Net.Sockets.LingerOption.LingerTime%2A>にプロパティが格納されている、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティ。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------------|  
|`false` (無効)、既定値|タイムアウトが適用可能で、ない (既定値)。|既定値まで IP プロトコル タイムアウト保留中の接続指向のソケット (たとえば、TCP) のデータ送信を試みます期限が切れます。|  
|`true` (有効)|0 以外のタイムアウト|指定したタイムアウトが経過すると、失敗した場合、Winsock 接続をリセットするまで、保留中のデータ送信を試行します。|  
|`true` (有効)|0 のタイムアウト。|保留中のデータを破棄します。 接続志向ソケット (たとえば、TCP) の場合は、Winsock は接続をリセットします。|  
  
 IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。 ほとんどの場合は、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上です。 これは、ソケットの既定の動作と、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティは設定されません。  
  
 ときに、<xref:System.Net.Sockets.LingerOption.LingerTime%2A>にプロパティが格納されている、<xref:System.Net.Sockets.Socket.LingerState%2A>プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定は、既定の IP プロトコル タイムアウトの表示およびオーバーライドはまだ適用されます。  
  
   
  
## Examples  
 次の例では、このプロパティの値が表示されます。  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>