<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NetworkStream.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.NetworkStream">
          <source>Provides the underlying stream of data for network access.</source>
          <target state="translated">ネットワーク アクセスの基になるデータ ストリームを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class provides methods for sending and receiving data over <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> sockets in blocking mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>クラス経由でデータを送受信するためのメソッドを提供<ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph>ブロッキング モード ソケットします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>For more information about blocking versus nonblocking <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>s, see <bpt id="p1">[</bpt>Using an Asynchronous Client Socket<ept id="p1">](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>.</source>
          <target state="translated">ブロックの詳細については非ブロッキング<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>s」を参照してください<bpt id="p1">[</bpt>非同期クライアント ソケットの使用<ept id="p1">](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class for both synchronous and asynchronous data transfer.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>の両方の同期および非同期のデータ転送クラス。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>For more information about synchronous and asynchronous communication, see <bpt id="p1">[</bpt>Sockets<ept id="p1">](~/docs/framework/network-programming/sockets.md)</ept>.</source>
          <target state="translated">同期と非同期通信の詳細については、次を参照してください。 <bpt id="p1">[</bpt>Sockets<ept id="p1">](~/docs/framework/network-programming/sockets.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>To create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, you must provide a connected <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">作成する、 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>、接続を提供する必要があります<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>You can also specify what <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> permission the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> has over the provided <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">新機能を指定することも<ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph>権限、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>経由で提供されているが<ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>By default, closing the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not close the provided <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">既定では、終了、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が提供されているを閉じない<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>If you want the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to have permission to close the provided <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, you must specify <ph id="ph3">`true`</ph> for the value of the <ph id="ph4">`ownsSocket`</ph> parameter.</source>
          <target state="translated">場合は、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を閉じる、提供されたアクセス許可が<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>を指定する必要があります<ph id="ph3">`true`</ph>の値を<ph id="ph4">`ownsSocket`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> methods for simple single thread synchronous blocking I/O.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>簡単な 1 つのメソッドが同期のブロッキング I/O をスレッドです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>If you want to process your I/O using separate threads, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> methods, or the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> methods for communication.</source>
          <target state="translated">個別のスレッドを使用して、I/O を処理する場合は、使用を検討して、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph>メソッド、または<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph>の通信方法です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not support random access to the network data stream.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>ネットワークのデータ ストリームへのランダム アクセスをサポートしていません。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The value of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> property, which indicates whether the stream supports seeking, is always <ph id="ph2">`false`</ph>; reading the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> property, reading the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt;</ph> property, or calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> method will throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">値、 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> 、ストリームがシークをサポートしているかどうかを示す、プロパティは常に<ph id="ph2">`false`</ph>以外の場合は読み取り、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph>プロパティを読み取り、<ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt;</ph>プロパティ、または通話、<ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph>メソッドがスローされます、<ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">読み取りし、書き込み操作は、のインスタンスで同時に実行することができます、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>クラス同期の必要がない場合。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">書き込み操作のための 1 つの一意のスレッドと読み取り操作の 1 つの一意なスレッドがある限りは行われません間のインターフェイス間での読み取りと書き込みスレッドとは同期されませんが必要です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The following code example demonstrates how to create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> from a connected <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and perform basic synchronous blocking I/O.</source>
          <target state="translated">次のコード例を作成する方法を示しています、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>接続から<ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>基本的な同期ブロッキング I/O を実行します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.NetworkStream">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> クラスの新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> がデータの送受信に使用する <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> クラスの新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を指定された読み取り/書き込みアクセスで作成された<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not own the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, so calling the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method does not close the <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が、基になるを所有していない<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>を呼び出すので、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph>メソッドが閉じない、<ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The following code example illustrates how to create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">次のコード例を作成する方法を示しています、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>で、<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが接続されていません。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="socket" /&gt;</ph> パラメーターの <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> プロパティが <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが非ブロック状態です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> がデータの送受信に使用する <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will take ownership of the <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> に設定すると、<ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> の所有権を取得することを示します。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ownership.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 所有権を使用して、指定した <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> の <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を指定された読み取り/書き込みアクセスで作成された<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>If the value of <ph id="ph1">`ownsSocket`</ph> parameter is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> takes ownership of the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method also closes the underlying <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">場合の値<ph id="ph1">`ownsSocket`</ph>パラメーターが<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>所有権を基になる<ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>を呼び出すと、<ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph>メソッドも閉じられます、基になる<ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with ownership of the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">次のコード例を作成、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>の所有権を<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが接続されていません。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>the value of the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="socket" /&gt;</ph> パラメーターの <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> プロパティの値が <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>the <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが非ブロック状態です。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> がデータの送受信に使用する <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values that specify the type of access given to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> over the provided <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 値のビットごとの組み合わせです。提供された <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> に対する <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> に付与されているアクセス許可の種類を指定します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified access rights.</source>
          <target state="translated">指定したアクセス権を持つ、指定した <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> クラスの新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with the specified access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を指定した指定したアクセスで作成された<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not own the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, so calling the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method does not close the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">このコンス トラクターを持つ、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が、基になるを所有していない<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>を呼び出すので、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph>メソッドは、基になるを閉じられません<ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`access`</ph>パラメーター セット、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph>のプロパティ、<ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">指定した場合<ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>への呼び出しにより、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">指定した場合<ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>への呼び出しにより、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, both method calls are allowed.</source>
          <target state="translated">指定した場合<ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>、両方のメソッド呼び出しが許可されます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with the ability to read and write to the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">次のコード例を作成、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を読み書きする機能を<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが接続されていません。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="socket" /&gt;</ph> パラメーターの <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> プロパティが <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>the <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが非ブロック状態です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> がデータの送受信に使用する <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values that specifies the type of access given to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> over the provided <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> 値のビットごとの組み合わせです。提供された <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> に対する <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> に付与されているアクセス許可の種類を指定します。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will take ownership of the <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> に設定すると、<ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> の所有権を取得することを示します。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified access rights and the specified <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ownership.</source>
          <target state="translated">指定したアクセス権と指定した <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 所有権で、指定した <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> の <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> クラスの新しいインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を指定された読み取り/書き込みアクセスで作成された<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If the value of the <ph id="ph1">`ownsSocket`</ph> parameter is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> takes ownership of the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method also closes the underlying <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">場合の値、<ph id="ph1">`ownsSocket`</ph>パラメーターが<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>所有権を基になる<ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>を呼び出すと、<ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph>メソッドも閉じられます、基になる<ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`access`</ph>パラメーター セット、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph>のプロパティ、<ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">指定した場合<ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>への呼び出しにより、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">指定した場合<ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>への呼び出しにより、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, both method calls are allowed.</source>
          <target state="translated">指定した場合<ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>、両方のメソッド呼び出しが許可されます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with the ability to read and write to the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">次のコード例を作成、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を読み書きする機能を<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Ownership of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is given to this <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> by specifying <ph id="ph3">`true`</ph> for the <ph id="ph4">`ownsSocket`</ph> parameter.</source>
          <target state="translated">所有権、<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>がこれに与えられます<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を指定して<ph id="ph3">`true`</ph>の<ph id="ph4">`ownsSocket`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが接続されていません。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="socket" /&gt;</ph> パラメーターの <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> プロパティが <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="socket" /&gt;</ph> パラメーターが非ブロック状態です。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that is the location in memory to store data read from the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> 型の配列。<ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> から読み取られたデータを格納するメモリ内の場所です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin storing the data.</source>
          <target state="translated">データの格納を開始する <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の場所。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The number of bytes to read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> から読み取るバイト数。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that is executed when <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> completes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> の完了時に実行される <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that contains any additional user-defined data.</source>
          <target state="translated">追加のユーザー定義のデータを格納するオブジェクト。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> からの非同期の読み取りを開始します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated">非同期呼び出しを表す <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method starts asynchronously reading data from the incoming network buffers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドが入力方向のネットワーク バッファーからデータを非同期的に読み取りを開始します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method gives you the ability to receive data within a separate execution thread.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドは、個別の実行スレッド内でデータを受信する機能を提供します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">実装するコールバック メソッドを作成する必要があります、<ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph>を委任し、その名前を渡す、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>At the very minimum, your <ph id="ph1">`state`</ph> parameter must contain the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">少なくとも、<ph id="ph1">`state`</ph>パラメーターを含める必要があります、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Because you will want to obtain the received data within your callback method, you should create a small class or structure to hold a read buffer and any other useful information.</source>
          <target state="translated">コールバック メソッド内で受信したデータを取得するための小さなクラスまたは読み取りバッファーおよびその他の有用な情報を保持する構造体を作成する必要があります。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the structure or class instance to the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method through the <ph id="ph2">`state`</ph> parameter.</source>
          <target state="translated">構造体またはクラス インスタンスを渡す、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドによって、<ph id="ph2">`state`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Your callback method should call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method.</source>
          <target state="translated">コールバック メソッドを呼び出す必要があります、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>When your application calls <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, the system will wait until data is received or an error occurs, and then the system will use a separate thread to execute the specified callback method, and blocks on <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> until the provided <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> reads data or throws an exception.</source>
          <target state="translated">アプリケーションを呼び出すと<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>、まで、データが受信またはエラーが発生して、システムが指定されたコールバック メソッド、および ブロックの実行に別のスレッドを使用し、システムが待機<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph>まで、提供された<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>データを読み取るか例外をスローします。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you want the original thread to block after you call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">場合は、元のスレッドをブロックを呼び出した後、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドを使用して、<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> in the callback method when you want the original thread to continue executing.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>元のスレッドに実行を継続する場合は、コールバック メソッドにします。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information about writing callback methods, see <bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</source>
          <target state="translated">コールバック メソッドの記述に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>コールバック メソッドとしてのデリゲートをマーシャ リング<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method reads as much data as is available, up to the number of bytes specified by the <ph id="ph2">`size`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドで指定したバイトの数までの使用可能な限りデータを読み込みます、<ph id="ph2">`size`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">表示された場合、 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>、確認、<ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph>プロパティのかどうかが原因で、<ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">場合は、使用、<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph>プロパティを特定のエラー コードを取得し、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細についてを参照してください。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">読み取りし、書き込み操作は、のインスタンスで同時に実行することができます、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>クラス同期の必要がない場合。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">書き込み操作のための 1 つの一意のスレッドと読み取り操作の 1 つの一意なスレッドがある限りは行われません間のインターフェイス間での読み取りと書き込みスレッドとは同期されませんが必要です。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> to read data asynchronously from the network stream.</source>
          <target state="translated">次のコード例では<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>をネットワーク ストリームから非同期的にデータを読み取る。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`myReadCallBack`</ph> method implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate and is called by the system when <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> returns.</source>
          <target state="translated"><ph id="ph1">`myReadCallBack`</ph>メソッドを実装して、<ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>を委任し、システムによって呼び出されるときに<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>を返します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> paramater.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> パラメーターの長さを超えています。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> が、<ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> パラメーターの値を引いた <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> の長さを超えています。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">基になっている <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>There was a failure while reading from the network.</source>
          <target state="translated">ネットワークからの読み取り中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">ソケットへのアクセス中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the data to write to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> に書き込むデータを格納する <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 型の配列。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin sending the data.</source>
          <target state="translated">データの送信を開始する <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の場所。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The number of bytes to write to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> に書き込むバイト数。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that is executed when <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> completes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> の完了時に実行される <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> デリゲート。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that contains any additional user-defined data.</source>
          <target state="translated">追加のユーザー定義のデータを格納するオブジェクト。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write to a stream.</source>
          <target state="translated">ストリームへの非同期の書き込みを開始します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated">非同期呼び出しを表す <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method starts an asynchronous send operation to the remote host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>メソッドがリモート ホストへの非同期送信操作を開始します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method gives you the ability to send data within a separate execution thread.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method.</source>
          <target state="translated">実装するコールバック メソッドを作成する必要があります、<ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph>を委任し、その名前を渡す、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>At the very minimum, your <ph id="ph1">`state`</ph> parameter must contain the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">少なくとも、<ph id="ph1">`state`</ph>パラメーターを含める必要があります、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If your callback needs more information, you can create a small class or structure to hold the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> and the other required information.</source>
          <target state="translated">コールバックは、詳細を必要とする場合は、小さなクラスまたは構造体を作成することができます、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>およびその他の必要な情報です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the structure or class instance to the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method through the <ph id="ph2">`state`</ph> parameter.</source>
          <target state="translated">構造体またはクラス インスタンスを渡す、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>メソッドによって、<ph id="ph2">`state`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Your callback method should implement the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method.</source>
          <target state="translated">コールバック メソッドを実装する必要があります、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>When your application calls <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, the system uses a separate thread to execute the specified callback method, and blocks on <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> until the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> sends the number of bytes requested or throws an exception.</source>
          <target state="translated">アプリケーションを呼び出すと<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>、システムを別のスレッドを使用して、指定されたコールバック メソッドを実行してでブロック<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph>まで、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を要求したバイト数を送信または例外をスローします。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you want the original thread to block after you call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">場合は、元のスレッドをブロックを呼び出した後、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>メソッドを使用して、<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> in the callback method when you want the original thread to continue executing.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph>元のスレッドに実行を継続する場合は、コールバック メソッドにします。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information about writing callback methods, see <bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</source>
          <target state="translated">コールバック メソッドの記述に関する詳細については、次を参照してください。<bpt id="p1">[</bpt>コールバック メソッドとしてのデリゲートをマーシャ リング<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">表示された場合、 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>、確認、<ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph>プロパティのかどうかが原因で、<ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">場合は、使用、<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph>プロパティを特定のエラー コードを取得し、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細についてを参照してください。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">読み取りし、書き込み操作は、のインスタンスで同時に実行することができます、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>クラス同期の必要がない場合。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">書き込み操作のための 1 つの一意のスレッドと読み取り操作の 1 つの一意なスレッドがある限りは行われません間のインターフェイス間での読み取りと書き込みスレッドとは同期されませんが必要です。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> to write data asynchronously to a network stream.</source>
          <target state="translated">次のコード例では<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>ネットワーク ストリームに非同期的にデータを書き込む。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`myWriteCallBack`</ph> method implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate and is called by the system when <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> returns.</source>
          <target state="translated"><ph id="ph1">`myWriteCallBack`</ph>メソッドを実装して、<ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>を委任し、システムによって呼び出されるときに<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>を返します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> の長さを超えています。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> パラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> パラメーターが、<ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> パラメーターの値を引いた <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> の長さを超えています。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">基になっている <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>There was a failure while writing to the network.</source>
          <target state="translated">ネットワークへの書き込み中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">ソケットへのアクセス中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> supports reading.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が読み取りをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be read from the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームからデータを読み取ることができる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph>は<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>への呼び出しにより、<ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>Provide the appropriate <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerated value in the constructor to set the readability and writability of the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">適切な提供<ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph>読みやすさとの書き込みの許可を設定するコンス トラクター内の値を列挙、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph>場合、プロパティが設定、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が初期化されています。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The following code example checks <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> to verify that the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable.</source>
          <target state="translated">次のコード例のチェック<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph>ことを確認する、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を読み取ることができます。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>It then performs a read operation on the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">読み取り操作を実行し、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source>Gets a value that indicates whether the stream supports seeking.</source>
          <target state="translated">ストリームがシークをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source>This property is not currently supported.This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">このプロパティは現在サポートされていません。このプロパティは常に <ph id="ph1">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases to indicate that <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> cannot seek a specific location in the stream.</source>
          <target state="translated">常に、<ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> がストリームの特定の場所をシークできないことを示す <ph id="ph1">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source>Indicates whether timeout properties are usable for <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">タイムアウトのプロパティが <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> で使用可能かどうかを示します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">常に <ph id="ph1">&lt;see langword="true" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source>This property is present because it is inherited from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>.</source>
          <target state="translated">継承されているために、このプロパティは存在<ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> supports writing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が書き込みをサポートしているかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be written to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> にデータを書き込むことができる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph>は<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>への呼び出しにより、<ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>Provide the appropriate <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerated value in the constructor to set the readability and writability of the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">適切な提供<ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph>読みやすさとの書き込みの許可を設定するコンス トラクター内の値を列挙、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph>場合、プロパティが設定、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が初期化されています。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The following code example checks <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> to verify that the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">次のコード例のチェック<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph>ことを確認する、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が書き込み可能です。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>It then performs a write operation on the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">書き込み操作を実行し、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.</source>
          <target state="translated">閉じる前に、残りのデータを送信するために待機するミリ秒数を指定する 32 ビット符号付き整数。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>Closes the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> after waiting the specified time to allow data to be sent.</source>
          <target state="translated">指定した時間待機した後、<ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> を閉じて、データを送信できるようにします。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method frees both unmanaged and managed resources associated with the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph>メソッドに関連付けられているアンマネージ コードとマネージの両方のリソースを解放、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> owns the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, it is closed as well.</source>
          <target state="translated">場合、 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> 、基になるを所有している<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>、閉じられているとします。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>If a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> was associated with a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method will close the TCP connection, but not dispose of the associated <ph id="ph4">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が関連付けられて、 <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph>メソッドは、TCP 接続を閉じますが、関連する置換<ph id="ph4">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> パラメーターが -1 未満。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Gets a value that indicates whether data is available on the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> to be read.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> に読み取り対象のデータがあるかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data is available on the stream to be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームからデータを読み取ることができる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> property to determine if data is ready to be read.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph>プロパティ データが読み取ることができるかを判断します。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, a call to <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> returns immediately.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph>は<ph id="ph2">`true`</ph>への呼び出し<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>が直ちに返されます。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>If the remote host shuts down or closes the connection, <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> may throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">リモート ホストがシャット ダウン、または、接続を閉じる場合<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph>スローする可能性があります、<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The following code example reads from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> as long as data is available.</source>
          <target state="translated">次のコード例を読み取り、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>データが使用可能な限り、します。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">基になっている <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> プロパティを使用して特定のエラー コードを取得してください。エラーの詳細については、MSDN で Windows Socket Version 2 API のエラー コードのドキュメントを参照してください。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">マネージ リソースとアンマネージ リソースの両方を解放する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。アンマネージ リソースだけを解放する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドは、パブリック<ph id="ph1">`Dispose`</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> プロテクト呼び出します<ph id="ph2">`Dispose(Boolean)`</ph>メソッドを<ph id="ph3">`disposing`</ph>パラメーターに設定<ph id="ph4">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 呼び出す<ph id="ph2">`Dispose`</ph>で<ph id="ph3">`disposing`</ph>'éý'<ph id="ph4">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">`disposing`</ph> パラメーターが <ph id="ph2">`true`</ph> の場合、このメソッドは、この <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">このメソッドは、参照される各オブジェクトの <ph id="ph1">`Dispose`</ph> メソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> は、他のオブジェクトから複数回呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> をオーバーライドする場合は、以前に <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">実装する方法の詳細についての<ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>Dispose メソッドの実装<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">詳細については<ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>を参照してください<bpt id="p1">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>と<bpt id="p2">[</bpt>Finalize メソッドをオーバーライドする<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>です。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents an asynchronous call.</source>
          <target state="translated">非同期呼び出しを表す <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Handles the end of an asynchronous read.</source>
          <target state="translated">非同期読み取りの終了を処理します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> から読み取るバイト数。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method completes the asynchronous read operation started in the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph>メソッドで開始された非同期の読み取り操作が完了すると、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Before calling <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, you need to create a callback method that implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated">呼び出しの前に<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>を実装するコールバック メソッドを作成する必要があります、<ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>This callback method executes in a separate thread and is called by the system after <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> returns.</source>
          <target state="translated">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>を返します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The callback method must accept the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method as a parameter.</source>
          <target state="translated">コールバック メソッドに同意する必要があります、<ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>から返される、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドのパラメーターとして。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Within the callback method, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to obtain the state object passed to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">コールバック メソッド内で、<ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>に渡される状態オブジェクトを取得する、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Extract the receiving <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> from this state object.</source>
          <target state="translated">受信側の抽出<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>この状態オブジェクトから。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>After obtaining the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method to successfully complete the read operation and return the number of bytes read.</source>
          <target state="translated">取得した後に、 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>、呼び出し、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph>メソッドを正常に読み取り操作を完了して、読み取られたバイト数を返します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method blocks until data is available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph>メソッドはデータがあるまでブロックします。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method reads as much data as is available up to the number of bytes specified in the <ph id="ph2">`size`</ph> parameter of the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph>メソッドで指定されたバイトの数まで使用量のデータの読み取り、<ph id="ph2">`size`</ph>のパラメーター、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If the remote host shuts down the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> connection and all available data has been received, the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method completes immediately and returns zero bytes.</source>
          <target state="translated">リモート ホストがシャット ダウンした場合、<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>接続と使用可能なすべてのデータを受信、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph>メソッドをすぐに完了し、0 バイトを返します。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>To obtain the received data, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>, and extract the buffer contained in the resulting state object.</source>
          <target state="translated">受信したデータを取得する呼び出し、<ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph>のプロパティ、 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>、し、結果の状態オブジェクトに含まれているバッファーを抽出します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">表示された場合、 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>、確認、<ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph>プロパティのかどうかが原因で、<ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">場合は、使用、<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph>プロパティを特定のエラー コードを取得し、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細についてを参照してください。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>In the following code example, <ph id="ph1">`myReadCallback`</ph> is provided to <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> as the callback method.</source>
          <target state="translated">次のコード例で<ph id="ph1">`myReadCallback`</ph>に提供される<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>コールバック メソッドとして。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> is implemented in <ph id="ph2">`myReadCallback`</ph> to complete the asynchronous read call started by <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> 実装されて<ph id="ph2">`myReadCallback`</ph>を非同期の完了によって開始された呼び出しを読み取る<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">基になっている <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">ソケットへのアクセス中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated">非同期呼び出しを表す <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Handles the end of an asynchronous write.</source>
          <target state="translated">非同期書き込みの終了を処理します。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> completes the asynchronous send operation started in <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 開始された非同期送信操作が完了した<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Before calling <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, you need to create a callback method that implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated">呼び出しの前に<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>を実装するコールバック メソッドを作成する必要があります、<ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph>を委任します。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>This callback method executes in a separate thread and is called by the system after <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> returns.</source>
          <target state="translated">このコールバック メソッドが別のスレッドで実行され、後にシステムによって呼び出される<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>を返します。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The callback method must accept the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method as a parameter.</source>
          <target state="translated">コールバック メソッドに同意する必要があります、<ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>から返される、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>メソッドのパラメーターとして。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Within the callback method, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">`IAsyncResult`</ph> parameter to obtain the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">コールバック メソッド内で、<ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph>のプロパティ、<ph id="ph2">`IAsyncResult`</ph>を取得するパラメーター、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>After obtaining the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, you can call the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method to successfully complete the send operation and return the number of bytes sent.</source>
          <target state="translated">取得した後に、 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>、呼び出すことができます、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph>を正常に送信操作を完了し、送信されたバイト数を返すメソッド。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method blocks until the requested number of bytes are sent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph>メソッド、要求されたバイト数を送信するまでブロックします。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">表示された場合、 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>、確認、<ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph>プロパティのかどうかが原因で、<ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">場合は、使用、<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph>プロパティを特定のエラー コードを取得し、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細についてを参照してください。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>In the following code example, <ph id="ph1">`myWriteCallback`</ph> is provided to <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> as the callback method.</source>
          <target state="translated">次のコード例で<ph id="ph1">`myWriteCallback`</ph>に提供される<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>コールバック メソッドとして。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> is implemented in <ph id="ph2">`myWriteCallback`</ph> to complete the asynchronous write call started by <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> 実装されて<ph id="ph2">`myWriteCallback`</ph>によって開始された非同期の書き込み呼び出しを完了する<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">基になっている <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>An error occurred while writing to the network.</source>
          <target state="translated">ネットワークへの書き込み中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">ソケットへのアクセス中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> によって使用されているすべてのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph> をオーバーライドします。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>Application code should not call this method; an object's <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">アプリケーション コードではこのメソッドを呼び出す必要がありますいません。オブジェクトの<ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph>への呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限り、ガベージ コレクション中にメソッドが自動的に起動、<ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>For more information about using the Finalize method, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">詳細については、Finalize メソッドを使用して、次を参照してください。 <bpt id="p1">[</bpt>Finalize メソッドおよびデストラクター<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>、<bpt id="p2">[</bpt>アンマネージ リソースのクリーンアップ<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>、および<bpt id="p3">[</bpt>Finalize メソッドをオーバーライドする<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>です。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>Flushes data from the stream.</source>
          <target state="translated">ストリームからデータをフラッシュします。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>This method is reserved for future use.</source>
          <target state="translated">このメソッドは将来使用するために予約されています。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> method; however, because <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is not buffered, it has no affect on network streams.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph>メソッドを実装して、<ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph>メソッドです。 ただし、ため<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>がバッファリングされていない場合、その影響を与えませんネットワーク ストリームにします。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> method does not throw an exception.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph>メソッドが例外をスローしません。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that this  operation should be canceled.</source>
          <target state="translated">この操作を取り消す必要があることを示す通知を伝達するために使用するキャンセル トークン。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Flushes data from the stream as an asynchronous operation.</source>
          <target state="translated">非同期操作として、ストリームからデータをフラッシュします。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">非同期操作を表すタスク オブジェクト。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">この操作はブロックされません。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after data has been flushed from the stream for the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> instance.</source>
          <target state="translated">返された<ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>オブジェクトは、ストリームからデータがフラッシュされた後に、完了、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>インスタンス。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>Gets the length of the data available on the stream.</source>
          <target state="translated">ストリームで使用できるデータ長を取得します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>This property is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">このプロパティは現在サポートされていないため、常に <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> をスローします。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>The length of the data available on the stream.</source>
          <target state="translated">ストリームで使用できるデータ長。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>Any use of this property.</source>
          <target state="translated">このプロパティの使用。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>Gets or sets the current position in the stream.</source>
          <target state="translated">ストリーム内の現在位置を取得または設定します。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>This property is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">このプロパティは現在サポートされていないため、常に <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> をスローします。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>The current position in the stream.</source>
          <target state="translated">ストリームの現在の位置。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>Any use of this property.</source>
          <target state="translated">このプロパティの使用。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that is the location in memory to store data read from the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> 型の配列。<ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> から読み取られたデータを格納するメモリ内の場所です。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin storing the data to.</source>
          <target state="translated">データの格納を開始する <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の場所。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> から読み取るバイト数。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads data from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> からデータを読み取ります。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>, or 0 if the socket is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> から読み取るバイト数。ソケットが閉じられている場合は 0。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This method reads data into the <ph id="ph1">`buffer`</ph> parameter and returns the number of bytes successfully read.</source>
          <target state="translated">このメソッドにデータを読み込みます、<ph id="ph1">`buffer`</ph>パラメーターと正常に読み取られたバイト数を返します。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the socket is closed, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method returns 0.</source>
          <target state="translated">ソケットが閉じられた場合、 <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> 0 が返されます。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> operation reads as much data as is available, up to the number of bytes specified by the <ph id="ph2">`size`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>操作で指定したバイトの数までの使用可能な多くのデータを読み取り、<ph id="ph2">`size`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the remote host shuts down the connection, and all available data has been received, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method completes immediately and return zero bytes.</source>
          <target state="translated">リモート ホストをシャット ダウン、接続し、使用可能なすべてのデータを受信すると場合、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>メソッドはすぐに完了し、0 バイトを返します。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Check to see if the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property.</source>
          <target state="translated">かどうかをチェック、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>は呼び出すことによって、読み取り可能な<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If you attempt to read from a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is not readable, you will get an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">読み取りを試行した場合、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を読み取ることができない、表示される、<ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">表示された場合、 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>、確認、<ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph>プロパティのかどうかが原因で、<ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">場合は、使用、<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph>プロパティを特定のエラー コードを取得し、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細についてを参照してください。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> to determine if data is available to be read.</source>
          <target state="translated">次のコード例では<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph>データが読み取り可能かを判断します。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If data is available, it reads from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">読み取るデータがある場合、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> の長さを超えています。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> パラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> パラメーターが、<ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> パラメーターの値を引いた <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> の長さを超えています。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">ソケットへのアクセス中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">基になっている <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>There is a failure reading from the network.</source>
          <target state="translated">ネットワークからの読み取りでエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> can be read.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> を読み取ることができるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> can be read; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> を読み取ることができる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>You must derive from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class to use the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property.</source>
          <target state="translated">派生する必要があります、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>クラスを使用する、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph>は<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>への呼び出しにより、<ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>You can also determine whether a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable by checking the publicly accessible <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property.</source>
          <target state="translated">確認することもかどうか、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>チェック パブリックにアクセスして読み取ることが<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph>場合、プロパティが設定、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が初期化されています。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>In the following code example, the <ph id="ph1">`CanCommunicate`</ph> property checks the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property to determine if the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable.</source>
          <target state="translated">次のコード例では、<ph id="ph1">`CanCommunicate`</ph>プロパティのチェック、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph>プロパティかどうかを<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を読み取ることができます。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>Gets or sets the amount of time that a read operation blocks waiting for data.</source>
          <target state="translated">読み取り操作がデータを待機する時間を取得または設定します。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails.</source>
          <target state="translated">読み取り操作が失敗するまでの経過時間 (ミリ秒単位) を指定する <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The default value, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, specifies that the read operation does not time out.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> で、読み取り操作がタイムアウトしないことを示します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>If the read operation does not complete within the time specified by this property, the read operation throws an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">このプロパティによって指定された時間内で読み取り操作が完了しない場合、読み取り操作をスロー、<ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>This property affects only synchronous reads performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">このプロパティは影響のみ同期読み取りを呼び出すことによって実行される、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>This property does not affect asynchronous reads performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">このプロパティでは呼び出すことによって実行される非同期の読み取りには影響しません、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The following code example sets the read time-out for a network stream to 10 milliseconds.</source>
          <target state="translated">次のコード例では、10 ミリ秒をネットワーク ストリームの読み取りのタイムアウトを設定します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The value specified is less than or equal to zero and is not <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">指定した値が 0 以下のため <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This parameter is not used.</source>
          <target state="translated">このパラメーターは使用されません。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This parameter is not used.</source>
          <target state="translated">このパラメーターは使用されません。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the stream to the given value.</source>
          <target state="translated">ストリームの現在位置を特定の値に設定します。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This method is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">このメソッドは現在サポートされていないため、常に <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> をスローします。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The position in the stream.</source>
          <target state="translated">ストリーム内の位置。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Any use of this property.</source>
          <target state="translated">このプロパティの使用。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>This parameter is not used.</source>
          <target state="translated">このパラメーターは使用されません。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>Sets the length of the stream.</source>
          <target state="translated">ストリームの長さを設定します。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>This method always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">このメソッドは、常に <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> をスローします。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>Any use of this property.</source>
          <target state="translated">このプロパティの使用。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">基になる <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that represents the underlying network connection.</source>
          <target state="translated">基になるネットワーク接続を表す <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> can use this property to get the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">派生するクラス<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>、基になるため、このプロパティを使用できます<ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Use the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Socket%2A&gt;</ph> property if you require access beyond that which <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> provides.</source>
          <target state="translated">使用して、基になる<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>から返される、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Socket%2A&gt;</ph>をさらにアクセスが必要な場合は、プロパティ<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>を提供します。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>This property is accessible only through this class or a derived class.</source>
          <target state="translated">このプロパティは、このクラスまたは派生クラスによってのみアクセスできます。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>The following code example retrieves the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to verify an active connection.</source>
          <target state="translated">次のコード例を基になる取得<ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>をアクティブな接続を確認します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the data to write to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> に書き込むデータを格納する <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> 型の配列。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to start writing data.</source>
          <target state="translated">データの書き込みを開始する <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> 内の場所。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> に書き込むバイト数。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes data to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> にデータを書き込みます。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method starts at the specified <ph id="ph2">`offset`</ph> and sends <ph id="ph3">`size`</ph> bytes from the contents of <ph id="ph4">`buffer`</ph> to the network.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>メソッドを指定した開始<ph id="ph2">`offset`</ph>送信<ph id="ph3">`size`</ph>の内容からバイト<ph id="ph4">`buffer`</ph>ネットワークにします。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method blocks until the requested number of bytes is sent or a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>メソッドは、要求されたバイト数が送信されるまで、ブロック<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">表示された場合、<ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>を使用して、<ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph>プロパティを特定のエラー コードを取得し、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細についてを参照してください。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Check to see if the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable by accessing the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">かどうかをチェック、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>にアクセスして書き込み可能である、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you attempt to write to a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is not writable, you will get an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">書き込みを試行した場合、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>外にある書き込み可能な表示される、<ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">表示された場合、 <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>、確認、<ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph>プロパティのかどうかが原因で、<ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example checks to see whether the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">次のコード例を参照してくださいかどうか確認するかどうか、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が書き込み可能です。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If it is, then <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> is used to write a small message.</source>
          <target state="translated">場合は、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>小さいメッセージを書き込むために使用します。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> パラメーターが <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> の長さを超えています。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> パラメーターが 0 未満です。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> パラメーターが、<ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> パラメーターの値を引いた <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> の長さを超えています。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>There was a failure while writing to the network.</source>
          <target state="translated">ネットワークへの書き込み中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">ソケットへのアクセス中にエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>There was a failure reading from the network.</source>
          <target state="translated">ネットワークからの読み取りでエラーが発生しました。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is writable.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> が書き込み可能かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be written to the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">ストリームにデータを書き込むことができる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>You must derive from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class to use the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property.</source>
          <target state="translated">派生する必要があります、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>クラスを使用する、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph>は<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>への呼び出しにより、<ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>You can also determine whether a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable by checking the publicly accessible <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">確認することもかどうか、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>パブリックにアクセスできるをチェックして書き込み可能である<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph>場合、プロパティが設定、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が初期化されています。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>In the following code example, the <ph id="ph1">`CanCommunicate`</ph> property checks the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property to determine if the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">次のコード例では、<ph id="ph1">`CanCommunicate`</ph>プロパティのチェック、<ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph>プロパティかどうかを<ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>が書き込み可能です。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>Gets or sets the amount of time that a write operation blocks waiting for data.</source>
          <target state="translated">書き込み操作がデータを待機する時間を取得または設定します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails.</source>
          <target state="translated">書き込み操作が失敗するまでの経過時間 (ミリ秒単位) を指定する <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The default value, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, specifies that the write operation does not time out.</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> で、書き込み操作がタイムアウトしないことを示します。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>If the write operation does not complete within the time specified by this property, the write operation throws a <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">このプロパティによって指定された時間内での書き込み操作が完了しない場合、書き込み操作をスロー、<ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>This property affects only synchronous write operations performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">このプロパティを呼び出して実行のみ同期書き込み操作の影響、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>This property does not affect asynchronous writes performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method.</source>
          <target state="translated">このプロパティでは呼び出すことによって実行される非同期の書き込みには影響しません、<ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The following code example sets the write time-out for a network stream to 10 milliseconds.</source>
          <target state="translated">次のコード例では、10 ミリ秒をネットワーク ストリームの書き込みのタイムアウトを設定します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The value specified is less than or equal to zero and is not <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">指定した値が 0 以下のため <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph> ではありません。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>