<Type Name="UdpClient" FullName="System.Net.Sockets.UdpClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7303a7e93d44ff0dec4634d108595cec87c458e6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39911639" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UdpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="617b8-101">ユーザー データグラム プロトコル (UDP) のネットワーク サービスを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="617b8-101">Provides User Datagram Protocol (UDP) network services.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-102"><xref:System.Net.Sockets.UdpClient>クラスはコネクションレスの UDP データグラムを同期モードのブロックに送受信するための単純なメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="617b8-102">The <xref:System.Net.Sockets.UdpClient> class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode.</span></span> <span data-ttu-id="617b8-103">UDP はコネクションレス トランスポート プロトコルであるために、データを送受信する前にリモート ホスト接続を確立する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="617b8-103">Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data.</span></span> <span data-ttu-id="617b8-104">しかし、次の 2 つの方法のいずれかで既定のリモート ホストを確立するオプションはあります。</span><span class="sxs-lookup"><span data-stu-id="617b8-104">You do, however, have the option of establishing a default remote host in one of the following two ways:</span></span>  
  
-   <span data-ttu-id="617b8-105">インスタンスを作成、<xref:System.Net.Sockets.UdpClient>リモート ホスト名を使用してクラスし、パラメーターとしてポート番号。</span><span class="sxs-lookup"><span data-stu-id="617b8-105">Create an instance of the <xref:System.Net.Sockets.UdpClient> class using the remote host name and port number as parameters.</span></span>  
  
-   <span data-ttu-id="617b8-106">インスタンスを作成、<xref:System.Net.Sockets.UdpClient>クラスを呼び出して、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-106">Create an instance of the <xref:System.Net.Sockets.UdpClient> class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span>  
  
 <span data-ttu-id="617b8-107">提供される送信メソッドを使用することができます、<xref:System.Net.Sockets.UdpClient>リモート デバイスにデータを送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-107">You can use any of the send methods provided in the <xref:System.Net.Sockets.UdpClient> to send data to a remote device.</span></span> <span data-ttu-id="617b8-108">使用して、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドをリモート ホストからデータを受信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-108">Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-109">呼び出さない<xref:System.Net.Sockets.UdpClient.Send%2A>ホスト名を使用してまたは<xref:System.Net.IPEndPoint>既定のリモート ホストを既に指定した場合。</span><span class="sxs-lookup"><span data-stu-id="617b8-109">Do not call <xref:System.Net.Sockets.UdpClient.Send%2A> using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host.</span></span> <span data-ttu-id="617b8-110">この場合、<xref:System.Net.Sockets.UdpClient>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="617b8-110">If you do, <xref:System.Net.Sockets.UdpClient> will throw an exception.</span></span>  
  
 <span data-ttu-id="617b8-111"><xref:System.Net.Sockets.UdpClient> メソッドでは、マルチキャスト データグラムを送受信することもできます。</span><span class="sxs-lookup"><span data-stu-id="617b8-111"><xref:System.Net.Sockets.UdpClient> methods also allow you to send and receive multicast datagrams.</span></span> <span data-ttu-id="617b8-112">使用して、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>サブスクライブするメソッド、<xref:System.Net.Sockets.UdpClient>マルチキャスト グループにします。</span><span class="sxs-lookup"><span data-stu-id="617b8-112">Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a <xref:System.Net.Sockets.UdpClient> to a multicast group.</span></span> <span data-ttu-id="617b8-113">使用して、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>登録を解除する方法、<xref:System.Net.Sockets.UdpClient>マルチキャスト グループから。</span><span class="sxs-lookup"><span data-stu-id="617b8-113">Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a <xref:System.Net.Sockets.UdpClient> from a multicast group.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-114">次の例では確立、<xref:System.Net.Sockets.UdpClient>ポート 11000 で、ホスト名 www.contoso.com を使用して接続します。</span><span class="sxs-lookup"><span data-stu-id="617b8-114">The following example establishes a <xref:System.Net.Sockets.UdpClient> connection using the host name www.contoso.com on port 11000.</span></span> <span data-ttu-id="617b8-115">短い文字列メッセージは、2 つの個別のリモート ホスト マシンに送信されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-115">A small string message is sent to two separate remote host machines.</span></span> <span data-ttu-id="617b8-116"><xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドは、メッセージを受信するまでに実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="617b8-116">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received.</span></span> <span data-ttu-id="617b8-117">使用して、<xref:System.Net.IPEndPoint>に渡される<xref:System.Net.Sockets.UdpClient.Receive%2A>、応答してホストの身元を明らかになりました。</span><span class="sxs-lookup"><span data-stu-id="617b8-117">Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.</span></span>  
  
 [!code-cpp[Classic UdpClientExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClientExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClientExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClientExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClientExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClientExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">
      <span data-ttu-id="617b8-118">送信接続を確立するか、受信要求を受け入れます。</span>
      <span class="sxs-lookup">
        <span data-stu-id="617b8-118">To establish an outgoing connection or accept an incoming request.</span>
      </span>
    </permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-119">
            <see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-119">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="617b8-120">
            <see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-121">このコンス トラクターを作成する新しい<xref:System.Net.Sockets.UdpClient>と基になるサービス プロバイダーが、最も適切なローカル IPv4 アドレスとポート番号を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="617b8-121">This constructor creates a new <xref:System.Net.Sockets.UdpClient> and allows the underlying service provider to assign the most appropriate local IPv4 address and port number.</span></span> <span data-ttu-id="617b8-122">このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>インスタンスは変更したり、IPv6 のターゲットで connect メソッドの呼び出しによって上書きされることはできません IPv4 のアドレス ファミリを設定します。</span><span class="sxs-lookup"><span data-stu-id="617b8-122">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-123">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-123">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-124">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-124">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="617b8-125">このコンス トラクターでは、ソケットのバインドが実行しないためマルチキャスト グループに参加適していません。</span><span class="sxs-lookup"><span data-stu-id="617b8-125">This constructor is not suitable for joining a multicast group because it does not perform socket binding.</span></span> <span data-ttu-id="617b8-126">また、IPv4 アドレスの種類でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="617b8-126">Also, it works only with IPv4 address types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-127">次の例では、既定のコンス トラクターを使用してのインスタンスを作成する方法、<xref:System.Net.Sockets.UdpClient>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-127">The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-128">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-128">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">
          <span data-ttu-id="617b8-129">通信を開始するローカル ポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-129">The local port number from which you intend to communicate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-130">
            <see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化し、指定したローカル ポート番号にバインドします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-130">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the local port number provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-131">このコンス トラクター生成の基になる<xref:System.Net.Sockets.Socket>し通信するために使用するポート番号にバインドします。</span><span class="sxs-lookup"><span data-stu-id="617b8-131">This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.</span></span> <span data-ttu-id="617b8-132">関心がある場合のみローカルのポート番号の設定では、このコンス トラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-132">Use this constructor if you are only interested in setting the local port number.</span></span> <span data-ttu-id="617b8-133">基になるサービス プロバイダーでは、ローカルの IP アドレスを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="617b8-133">The underlying service provider will assign the local IP address.</span></span> <span data-ttu-id="617b8-134">コンス トラクターに 0 を渡すと、基になるサービス プロバイダーは、ポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="617b8-134">If you pass 0 to the constructor, the underlying service provider will assign a port number.</span></span> <span data-ttu-id="617b8-135">このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>インスタンスは変更したり、IPv6 のターゲットで connect メソッドの呼び出しによって上書きされることはできません IPv4 のアドレス ファミリを設定します。</span><span class="sxs-lookup"><span data-stu-id="617b8-135">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with an address family of IPv4 that cannot be changed or overwritten by a connect method call with an IPv6 target.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-136">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-136">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-137">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-137">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="617b8-138">このコンス トラクターは、IPv4 アドレスの種類でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="617b8-138">This constructor works only with IPv4 address types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-139">次の例のインスタンスを作成するローカル ポート番号を使用して、<xref:System.Net.Sockets.UdpClient>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-139">The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="617b8-140">
            <paramref name="port" /> パラメーターが <see cref="F:System.Net.IPEndPoint.MaxPort" /> より大きい値か <see cref="F:System.Net.IPEndPoint.MinPort" /> より小さい値です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-140">The <paramref name="port" /> parameter is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" /> or less than <see cref="F:System.Net.IPEndPoint.MinPort" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-141">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-141">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <span data-ttu-id="617b8-142">UDP 接続のバインド先のローカル エンドポイントを表す <see cref="T:System.Net.IPEndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-142">An <see cref="T:System.Net.IPEndPoint" /> that respresents the local endpoint to which you bind the UDP connection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-143">
            <see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化し、指定したローカル エンドポイントにバインドします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-143">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the specified local endpoint.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-144">このコンス トラクターが新たに作成<xref:System.Net.Sockets.UdpClient>にバインドしますと、<xref:System.Net.IPEndPoint>で指定された、`localEP`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="617b8-144">This constructor creates a new <xref:System.Net.Sockets.UdpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter.</span></span> <span data-ttu-id="617b8-145">作成する必要がありますこのコンス トラクターを呼び出す前に、<xref:System.Net.IPEndPoint>を送信し、データを受信する IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-145">Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data.</span></span> <span data-ttu-id="617b8-146">データを送受信するためのローカル IP アドレスとポート番号を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="617b8-146">You do not need to specify a local IP address and port number for sending and receiving data.</span></span> <span data-ttu-id="617b8-147">そうでない場合、基になるサービス プロバイダーは最も適切なローカル IP アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="617b8-147">If you do not, the underlying service provider will assign the most appropriate local IP address and port number.</span></span>  
  
 <span data-ttu-id="617b8-148">このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>インスタンスがで指定したアドレス ファミリを設定、`localEP`パラメーターを変更するか、別のアドレス ファミリの connect メソッドの呼び出しによって上書きされることはできません。</span><span class="sxs-lookup"><span data-stu-id="617b8-148">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `localEP` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-149">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-149">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-150">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-150">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-151">次の例では、インスタンスを作成する方法、<xref:System.Net.Sockets.UdpClient>クラスのローカル エンドポイントを使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-151">The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-152">
            <paramref name="localEP" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-152">
              <paramref name="localEP" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-153">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-153">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family">
          <span data-ttu-id="617b8-154">ソケットのアドレッシング スキームを指定する <see cref="T:System.Net.Sockets.AddressFamily" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-154">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values that specifies the addressing scheme of the socket.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-155">
            <see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-155">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-156">`family`パラメーターは、リスナーが IP version 4 (IPv4) アドレスまたは IP version 6 (IPv6) を使用するかどうかを決定します。 アドレス。</span><span class="sxs-lookup"><span data-stu-id="617b8-156">The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.</span></span> <span data-ttu-id="617b8-157">IPv4 アドレスを使用するには<xref:System.Net.Sockets.AddressFamily.InterNetwork>値。</span><span class="sxs-lookup"><span data-stu-id="617b8-157">To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value.</span></span> <span data-ttu-id="617b8-158">IPv6 アドレスを使用するに渡す、<xref:System.Net.Sockets.AddressFamily.InterNetworkV6>値。</span><span class="sxs-lookup"><span data-stu-id="617b8-158">To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value.</span></span> <span data-ttu-id="617b8-159">その他の値を渡すと、スローするメソッド、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-159">Passing any other value will cause the method to throw an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="617b8-160">このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>インスタンスがで指定したアドレス ファミリを設定、`family`パラメーターを変更するか、別のアドレス ファミリの connect メソッドの呼び出しによって上書きされることはできません。</span><span class="sxs-lookup"><span data-stu-id="617b8-160">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-161">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-161">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-162">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-162">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="617b8-163"><xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>ソケット バインドが実行しないため、マルチキャスト グループに参加するのには適していません。</span><span class="sxs-lookup"><span data-stu-id="617b8-163">The <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> is not suitable for joining a multicast group because it does not perform socket binding.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="617b8-164">
            <paramref name="family" /> が、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> でも <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> でもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-164">
              <paramref name="family" /> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-165">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-165">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port, System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port, valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer, family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port, System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int * System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (port, family)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="port">
          <span data-ttu-id="617b8-166">受信接続の試行を待機するポート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-166">The port on which to listen for incoming connection attempts.</span>
          </span>
        </param>
        <param name="family">
          <span data-ttu-id="617b8-167">ソケットのアドレッシング スキームを指定する <see cref="T:System.Net.Sockets.AddressFamily" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-167">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values that specifies the addressing scheme of the socket.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-168">
            <see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化し、指定したローカル ポート番号にバインドします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-168">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and binds it to the local port number provided.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-169">このコンス トラクター生成の基になる<xref:System.Net.Sockets.Socket>し通信するために使用するポート番号にバインドします。</span><span class="sxs-lookup"><span data-stu-id="617b8-169">This constructor creates an underlying <xref:System.Net.Sockets.Socket> and binds it to the port number from which you intend to communicate.</span></span>  
  
 <span data-ttu-id="617b8-170">`family`パラメーターは、リスナーが IP version 4 (IPv4) アドレスまたは IP version 6 (IPv6) を使用するかどうかを決定します。 アドレス。</span><span class="sxs-lookup"><span data-stu-id="617b8-170">The `family` parameter determines whether the listener uses an IP version 4 address (IPv4) or an IP version 6 (IPv6) address.</span></span> <span data-ttu-id="617b8-171">IPv4 アドレスを使用するには<xref:System.Net.Sockets.AddressFamily.InterNetwork>値。</span><span class="sxs-lookup"><span data-stu-id="617b8-171">To use an IPv4 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetwork> value.</span></span> <span data-ttu-id="617b8-172">IPv6 アドレスを使用するに渡す、<xref:System.Net.Sockets.AddressFamily.InterNetworkV6>値。</span><span class="sxs-lookup"><span data-stu-id="617b8-172">To use an IPv6 address, pass the <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> value.</span></span> <span data-ttu-id="617b8-173">その他の値を渡すと、スローするメソッド、<xref:System.ArgumentException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-173">Passing any other value will cause the method to throw an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="617b8-174">このコンス トラクターを使用する場合、<xref:System.Net.Sockets.UdpClient>インスタンスがで指定したアドレス ファミリを設定、`family`パラメーターを変更するか、別のアドレス ファミリの connect メソッドの呼び出しによって上書きされることはできません。</span><span class="sxs-lookup"><span data-stu-id="617b8-174">If this constructor is used, the <xref:System.Net.Sockets.UdpClient> instance is set with the address family specified by the `family` parameter  that cannot be changed or overwritten by a connect method call with a different address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-175">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-175">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-176">このコードを入手した場合を参照してください。、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-176">Once you have obtained this code, refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-177">次のコード例では、UDP マルチキャスト グループで使用するクライアントを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="617b8-177">The following code example shows how to create a UDP client to use in a multicast group.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#3)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="617b8-178">
            <paramref name="family" /> が、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> でも <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> でもありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-178">
              <paramref name="family" /> is not <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="617b8-179">
            <paramref name="port" /> は <see cref="F:System.Net.IPEndPoint.MaxPort" /> を超えているか、または <see cref="F:System.Net.IPEndPoint.MinPort" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-179">
              <paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" /> or less than <see cref="F:System.Net.IPEndPoint.MinPort" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-180">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-180">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : string * int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname">
          <span data-ttu-id="617b8-181">接続先のリモート DNS ホスト名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-181">The name of the remote DNS host to which you intend to connect.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="617b8-182">接続先のリモート ポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-182">The remote port number to which you intend to connect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-183">
            <see cref="T:System.Net.Sockets.UdpClient" /> クラスの新しいインスタンスを初期化し、既定のリモート ホストを確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-183">Initializes a new instance of the <see cref="T:System.Net.Sockets.UdpClient" /> class and establishes a default remote host.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-184">このコンス トラクターは、新しい初期化<xref:System.Net.Sockets.UdpClient>を使用してリモート ホストを確立し、`hostname`と`port`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="617b8-184">This constructor initializes a new <xref:System.Net.Sockets.UdpClient> and establishes a remote host using the `hostname` and `port` parameters.</span></span> <span data-ttu-id="617b8-185">既定のリモート ホストを確立するは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="617b8-185">Establishing a default remote host is optional.</span></span> <span data-ttu-id="617b8-186">このコンス トラクターを使用する場合を呼び出すたびに、リモート ホストを指定する必要はありません、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-186">If you use this constructor, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="617b8-187">既定のリモート ホストを指定すると、そのホストにのみ制限されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-187">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="617b8-188">いつでも既定のリモート ホストを変更するには呼び出すことによって、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-188">You can change the default remote host at any time by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="617b8-189">呼び出しで、リモート ホストを指定するかどうか、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドでは、このコンス トラクターを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="617b8-189">If you want to specify a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, do not use this constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-190">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-190">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-191">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-191">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-192">次の例では、インスタンスを作成する方法、<xref:System.Net.Sockets.UdpClient>クラスのホスト名を使用して、ポート番号。</span><span class="sxs-lookup"><span data-stu-id="617b8-192">The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-193">
            <paramref name="hostname" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-193">
              <paramref name="hostname" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="617b8-194">
            <paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-194">
              <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-195">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-195">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.UdpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-196">既定のリモート ホストが確立されたかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-196">Gets or sets a value indicating whether a default remote host has been established.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="617b8-197">接続がアクティブな場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-197">
              <see langword="true" /> if a connection is active; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-198">派生したクラス<xref:System.Net.Sockets.UdpClient>このプロパティを使用して既定のリモート ホストが確立されているかどうかを決定できます。</span><span class="sxs-lookup"><span data-stu-id="617b8-198">Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to determine if a default remote host has been established.</span></span> <span data-ttu-id="617b8-199">既定のリモート ホストを確立するには、適切なコンス トラクターを使用または呼び出すことによって、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-199">You can establish a default remote host by using the appropriate constructor or by calling the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="617b8-200">既定のリモート ホストを確立するへの呼び出しで、リモート ホストを指定できません<xref:System.Net.Sockets.UdpClient.Send%2A>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-200">If you do establish a default remote host, you cannot specify a remote host in your call to <xref:System.Net.Sockets.UdpClient.Send%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.UdpClient" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="udpClient.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">
          <span data-ttu-id="617b8-201">NAT トラバーサルを有効にするか無効にするかを指定するブール値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-201">A Boolean value that specifies whether to enable or disable NAT traversal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-202">
            <see cref="T:System.Net.Sockets.UdpClient" /> インスタンスのネットワーク アドレス変換 (NAT: Network Address Translation) トラバーサルを有効または無効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-202">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.UdpClient" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-203"><xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A>メソッドの使用を有効または、NAT トラバーサルを無効にする、<xref:System.Net.Sockets.UdpClient>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="617b8-203">The <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.</span></span> <span data-ttu-id="617b8-204">Teredo、6to4、または、ISATAP のトンネルを使用して、NAT トラバーサルを指定することがあります。</span><span class="sxs-lookup"><span data-stu-id="617b8-204">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="617b8-205">ときに、`allowed`パラメーターが false の場合、<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>に関連付けられているソケットのオプションが設定されている<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-205">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="617b8-206">NAT トラバーサルを明示的に無効になります、<xref:System.Net.Sockets.UdpClient>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="617b8-206">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.UdpClient> instance.</span></span>  
  
 <span data-ttu-id="617b8-207">ときに、`allowed`パラメーターが true の場合、<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>に関連付けられているソケットのオプションが設定されている<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-207">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="617b8-208">NAT トラバーサルを許可することがありますこれを<xref:System.Net.Sockets.UdpClient>によっては、システム上の場所でのファイアウォール ルール。</span><span class="sxs-lookup"><span data-stu-id="617b8-208">This may allow NAT traversal for a <xref:System.Net.Sockets.UdpClient> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="617b8-209">Teredo アドレスは、IPv6 アドレス プレフィックスが 2001年::/32。</span><span class="sxs-lookup"><span data-stu-id="617b8-209">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="617b8-210">Teredo アドレスは、通常の DNS 名解決によって返されるまたはローカル インターフェイスに割り当てられた IPv6 アドレスとして列挙できます。</span><span class="sxs-lookup"><span data-stu-id="617b8-210">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.UdpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-211">読み取りが可能なネットワークから受信したデータの量を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-211">Gets the amount of data received from the network that is available to read.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="617b8-212">ネットワークから受信したデータのバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-212">The number of bytes of data received from the network.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-213"><xref:System.Net.Sockets.UdpClient.Available%2A>読み取り用のネットワーク バッファーにキューにデータの量を決定するプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-213">The <xref:System.Net.Sockets.UdpClient.Available%2A> property is used to determine the amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="617b8-214">データが使用可能な場合は、呼び出す<xref:System.Net.Sockets.NetworkStream.Read%2A>データを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-214">If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data.</span></span> <span data-ttu-id="617b8-215">使用可能なデータがない場合、<xref:System.Net.Sockets.UdpClient.Available%2A>プロパティは 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="617b8-215">If no data is available, the <xref:System.Net.Sockets.UdpClient.Available%2A> property returns 0.</span></span>  
  
 <span data-ttu-id="617b8-216">リモート ホストがシャット ダウンまたは、接続を閉じる場合、<xref:System.Net.Sockets.UdpClient.Available%2A>プロパティがスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-216">If the remote host shuts down or closes the connection, the <xref:System.Net.Sockets.UdpClient.Available%2A> property throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-217">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>を特定のエラー コードを取得し、MSDN ライブラリで Windows Sockets version 2 API エラー コード ドキュメントを参照してください[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)/の詳細については、エラーがあります。</span><span class="sxs-lookup"><span data-stu-id="617b8-217">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-218">次のコード例の使用を示しています、<xref:System.Net.Sockets.UdpClient.Available%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="617b8-218">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.Available%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-219">ソケットへのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-219">An error occurred while attempting to access the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-220">
            <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-220">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginReceive (requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="requestCallback">
          <span data-ttu-id="617b8-221">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-221">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="617b8-222">受信操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-222">A user-defined object that contains information about the receive operation.</span>
          </span>
          <span data-ttu-id="617b8-223">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-223">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-224">データグラムをリモート ホストから非同期的に受信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-224">Receives a datagram from a remote host asynchronously.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-225">非同期の受信を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-225">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous receive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-226">非同期の<xref:System.Net.Sockets.UdpClient.BeginReceive%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.UdpClient.EndReceive%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-226">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndReceive%2A> method.</span></span> <span data-ttu-id="617b8-227">通常、メソッドは、によって呼び出される、`requestCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="617b8-227">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="617b8-228">操作が完了するまで、このメソッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="617b8-228">This method does not block until the operation is complete.</span></span> <span data-ttu-id="617b8-229">操作が完了するまでにブロックするを使用して、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-229">To block until the operation is complete, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="617b8-230">詳細については、非同期プログラミング モデルを使用して、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。</span><span class="sxs-lookup"><span data-stu-id="617b8-230">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-231">次のコード例では<xref:System.Net.Sockets.UdpClient.BeginReceive%2A>を非同期的にサーバーの応答を受信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-231">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> to asynchronously receive a server response.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-232">データグラムをリモート ホストに非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-232">Sends a datagram to a remote host asynchronously.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">
          <span data-ttu-id="617b8-233">送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-233">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-234">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-234">The number of bytes to send.</span>
          </span>
        </param>
        <param name="requestCallback">
          <span data-ttu-id="617b8-235">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-235">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="617b8-236">送信操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-236">A user-defined object that contains information about the send operation.</span>
          </span>
          <span data-ttu-id="617b8-237">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-237">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-238">データグラムをリモート ホストに非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-238">Sends a datagram to a remote host asynchronously.</span>
          </span>
          <span data-ttu-id="617b8-239">送信先は、<see cref="Overload:System.Net.Sockets.UdpClient.Connect" /> の呼び出しであらかじめ指定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-239">The destination was specified previously by a call to <see cref="Overload:System.Net.Sockets.UdpClient.Connect" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-240">非同期の送信を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-240">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-241">非同期の<xref:System.Net.Sockets.UdpClient.BeginSend%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.UdpClient.EndSend%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-241">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="617b8-242">通常、メソッドは、によって呼び出される、`requestCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="617b8-242">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="617b8-243">操作が完了するまで、このメソッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="617b8-243">This method does not block until the operation completes.</span></span> <span data-ttu-id="617b8-244">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="617b8-244">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="617b8-245">詳細については、非同期プログラミング モデルを使用して、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。</span><span class="sxs-lookup"><span data-stu-id="617b8-245">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-246">次のコード例では<xref:System.Net.Sockets.UdpClient.BeginSend%2A>サーバー要求を非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-246">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, endPoint, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">
          <span data-ttu-id="617b8-247">送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-247">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-248">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-248">The number of bytes to send.</span>
          </span>
        </param>
        <param name="endPoint">
          <span data-ttu-id="617b8-249">データの送信先を表す <see cref="T:System.Net.EndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-249">The <see cref="T:System.Net.EndPoint" /> that represents the destination for the data.</span>
          </span>
        </param>
        <param name="requestCallback">
          <span data-ttu-id="617b8-250">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-250">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="617b8-251">送信操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-251">A user-defined object that contains information about the send operation.</span>
          </span>
          <span data-ttu-id="617b8-252">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-252">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-253">データグラムを送信先に非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-253">Sends a datagram to a destination asynchronously.</span>
          </span>
          <span data-ttu-id="617b8-254">送信先は、<see cref="T:System.Net.EndPoint" /> で指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-254">The destination is specified by a <see cref="T:System.Net.EndPoint" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-255">非同期の送信を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-255">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-256">非同期の<xref:System.Net.Sockets.UdpClient.BeginSend%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.UdpClient.EndSend%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-256">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="617b8-257">通常、メソッドは、によって呼び出される、`requestCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="617b8-257">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="617b8-258">操作が完了するまで、このメソッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="617b8-258">This method does not block until the operation is complete.</span></span> <span data-ttu-id="617b8-259">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="617b8-259">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="617b8-260">詳細については、非同期プログラミング モデルを使用して、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。</span><span class="sxs-lookup"><span data-stu-id="617b8-260">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-261">次のコード例では<xref:System.Net.Sockets.UdpClient.BeginSend%2A>サーバー要求を非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-261">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, string hostname, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, hostname As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, hostname, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">
          <span data-ttu-id="617b8-262">送信されるデータを格納する <see cref="T:System.Byte" /> 配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-262">A <see cref="T:System.Byte" /> array that contains the data to be sent.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-263">送信するバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-263">The number of bytes to send.</span>
          </span>
        </param>
        <param name="hostname">
          <span data-ttu-id="617b8-264">送信先のホスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-264">The destination host.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="617b8-265">送信先のポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-265">The destination port number.</span>
          </span>
        </param>
        <param name="requestCallback">
          <span data-ttu-id="617b8-266">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-266">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="617b8-267">送信操作に関する情報を格納するユーザー定義のオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-267">A user-defined object that contains information about the send operation.</span>
          </span>
          <span data-ttu-id="617b8-268">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-268">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-269">データグラムを送信先に非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-269">Sends a datagram to a destination asynchronously.</span>
          </span>
          <span data-ttu-id="617b8-270">送信先は、ホスト名とポート番号で指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-270">The destination is specified by the host name and port number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-271">非同期の送信を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-271">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous send.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-272">非同期の<xref:System.Net.Sockets.UdpClient.BeginSend%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.UdpClient.EndSend%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-272">The asynchronous <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operation must be completed by calling the <xref:System.Net.Sockets.UdpClient.EndSend%2A> method.</span></span> <span data-ttu-id="617b8-273">通常、メソッドは、によって呼び出される、`requestCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="617b8-273">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="617b8-274">操作が完了するまで、このメソッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="617b8-274">This method does not block until the operation is complete.</span></span> <span data-ttu-id="617b8-275">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="617b8-275">To block until the operation is complete, use one of the <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads.</span></span>  
  
 <span data-ttu-id="617b8-276">詳細については、非同期プログラミング モデルを使用して、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。</span><span class="sxs-lookup"><span data-stu-id="617b8-276">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-277">次のコード例では<xref:System.Net.Sockets.UdpClient.BeginSend%2A>サーバー要求を非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-277">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.UdpClient.Client" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-278">基になるネットワーク <see cref="T:System.Net.Sockets.Socket" /> を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-278">Gets or sets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="617b8-279">基になるネットワーク <see cref="T:System.Net.Sockets.Socket" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-279">The underlying Network <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-280"><xref:System.Net.Sockets.UdpClient> 作成、<xref:System.Net.Sockets.Socket>をネットワーク経由でデータを送受信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-280"><xref:System.Net.Sockets.UdpClient> creates a <xref:System.Net.Sockets.Socket> used to send and receive data over a network.</span></span> <span data-ttu-id="617b8-281">派生したクラス<xref:System.Net.Sockets.UdpClient>このプロパティを取得または設定を使用できます<xref:System.Net.Sockets.Socket>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-281">Classes deriving from <xref:System.Net.Sockets.UdpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="617b8-282">使用して、基になる<xref:System.Net.Sockets.Socket>から返された<xref:System.Net.Sockets.UdpClient.Client%2A>が必要な場合にアクセスされる<xref:System.Net.Sockets.UdpClient>を提供します。</span><span class="sxs-lookup"><span data-stu-id="617b8-282">Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.UdpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.UdpClient> provides.</span></span> <span data-ttu-id="617b8-283">使用することもできます<xref:System.Net.Sockets.UdpClient.Client%2A>を基になるかを設定する<xref:System.Net.Sockets.Socket>既存<xref:System.Net.Sockets.Socket>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-283">You can also use <xref:System.Net.Sockets.UdpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="617b8-284">これはの簡潔さを活用する場合に役立ちます。<xref:System.Net.Sockets.UdpClient>既存を使用して<xref:System.Net.Sockets.Socket>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-284">This is useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.UdpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-285">次の例では、使用、<xref:System.Net.Sockets.UdpClient.Client%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="617b8-285">The following example demonstrates the use of the <xref:System.Net.Sockets.UdpClient.Client%2A> property.</span></span> <span data-ttu-id="617b8-286">基になるため、この例ではブロードキャストが有効になって<xref:System.Net.Sockets.Socket>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-286">In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="udpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="617b8-287">UDP 接続を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-287">Closes the UDP connection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-288"><xref:System.Net.Sockets.UdpClient.Close%2A> 、基になるを無効にします<xref:System.Net.Sockets.Socket>に関連付けられているすべてのマネージ コードとアンマネージ リソースを解放し、<xref:System.Net.Sockets.UdpClient>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-288">The <xref:System.Net.Sockets.UdpClient.Close%2A> disables the underlying <xref:System.Net.Sockets.Socket> and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.UdpClient>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-289">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-289">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-290">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-290">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-291">次の例では、終了、<xref:System.Net.Sockets.UdpClient>呼び出すことによって、<xref:System.Net.Sockets.UdpClient.Close%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-291">The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the <xref:System.Net.Sockets.UdpClient.Close%2A> method.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-292">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-292">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-293">既定のリモート ホストを確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-293">Establishes a default remote host.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (endPoint As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="udpClient.Connect endPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="endPoint">
          <span data-ttu-id="617b8-294">データ送信先のネットワーク エンドポイントを指定する <see cref="T:System.Net.IPEndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-294">An <see cref="T:System.Net.IPEndPoint" /> that specifies the network endpoint to which you intend to send data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-295">指定されたネットワーク エンドポイントを使用して、既定のリモート ホストを確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-295">Establishes a default remote host using the specified network endpoint.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-296"><xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドで指定された値を使用して、既定のリモート ホストの確立、`endPoint`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="617b8-296">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the value specified in the `endPoint` parameter.</span></span> <span data-ttu-id="617b8-297">確立されるは各呼び出しで、リモート ホストを指定する必要はありません、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-297">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="617b8-298">既定のリモート ホストを確立するは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="617b8-298">Establishing a default remote host is optional.</span></span> <span data-ttu-id="617b8-299">既定のリモート ホストを指定すると、そのホストにのみ制限されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-299">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="617b8-300">別のリモート ホストにデータグラムを送信する場合は、別の呼び出しを行う必要があります、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド別に作成または<xref:System.Net.Sockets.UdpClient>既定のリモート ホストなし。</span><span class="sxs-lookup"><span data-stu-id="617b8-300">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span> <span data-ttu-id="617b8-301">既定のリモートを確立している場合ホストおよびするも、リモート ホストへの呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド、<xref:System.Net.Sockets.UdpClient.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-301">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-302">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-302">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-303">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-303">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="617b8-304">呼び出す場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは、指定した既定値は破棄されます以外のアドレスから到着する任意のデータグラムします。</span><span class="sxs-lookup"><span data-stu-id="617b8-304">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="617b8-305">継承する場合を除き、このメソッドを使用してブロードキャスト アドレスに既定のリモート ホストを設定することはできません<xref:System.Net.Sockets.UdpClient>、クライアント メソッドを使用して、基になるを取得する<xref:System.Net.Sockets.Socket>、ソケット オプションを設定および<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-305">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the Client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="617b8-306">ただし、指定した場合、既定値にデータをブロードキャスト ブロードキャスト アドレス、255.255.255.255、<xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType>への呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-306">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="617b8-307">アプリケーションにブロードキャスト アドレスより詳細に制御が必要な場合も元に戻すことができますを使用して、<xref:System.Net.Sockets.Socket>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-307">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-308">UDP プロトコルがコネクションレスであるため、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="617b8-308">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="617b8-309">呼び出すのではない、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド マルチキャスト データグラムを受信する場合。</span><span class="sxs-lookup"><span data-stu-id="617b8-309">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-310">次の例では、<xref:System.Net.IPEndPoint>を既定のリモート ホストを確立します。</span><span class="sxs-lookup"><span data-stu-id="617b8-310">The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-311">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-311">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-312">
            <paramref name="endPoint" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-312">
              <paramref name="endPoint" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-313">
            <see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-313">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress addr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress addr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ addr, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.Connect (addr, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="addr">
          <span data-ttu-id="617b8-314">データ送信先のリモート ホストの <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-314">The <see cref="T:System.Net.IPAddress" /> of the remote host to which you intend to send data.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="617b8-315">データ送信先のポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-315">The port number to which you intend send data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-316">指定した IP アドレスとポート番号を使用して、既定のリモート ホストを確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-316">Establishes a default remote host using the specified IP address and port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-317"><xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドで指定された値を使用して、既定のリモート ホストの確立、`addr`と`port`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="617b8-317">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `addr` and `port` parameters.</span></span> <span data-ttu-id="617b8-318">確立されるは各呼び出しで、リモート ホストを指定する必要はありません、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-318">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="617b8-319">既定のリモート ホストを確立するは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="617b8-319">Establishing a default remote host is optional.</span></span> <span data-ttu-id="617b8-320">既定のリモート ホストを指定すると、そのホストにのみ制限されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-320">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="617b8-321">別のリモート ホストにデータグラムを送信する場合は、別の呼び出しを行う必要があります、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド別に作成または<xref:System.Net.Sockets.UdpClient>既定のリモート ホストなし。</span><span class="sxs-lookup"><span data-stu-id="617b8-321">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span> <span data-ttu-id="617b8-322">既定のリモートを確立している場合ホストおよびするも、リモート ホストへの呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド、<xref:System.Net.Sockets.UdpClient.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-322">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-323">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-323">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-324">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-324">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="617b8-325">呼び出す場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは、指定した既定値は破棄されます以外のアドレスから到着する任意のデータグラムします。</span><span class="sxs-lookup"><span data-stu-id="617b8-325">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="617b8-326">継承する場合を除き、このメソッドを使用してブロードキャスト アドレスに既定のリモート ホストを設定することはできません<xref:System.Net.Sockets.UdpClient>、クライアント メソッドを使用して、基になるを取得する<xref:System.Net.Sockets.Socket>、ソケット オプションを設定および<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-326">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="617b8-327">ただし、指定した場合、既定値にデータをブロードキャスト ブロードキャスト アドレス、255.255.255.255、<xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType>への呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-327">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="617b8-328">アプリケーションにブロードキャスト アドレスより詳細に制御が必要な場合も元に戻すことができますを使用して、<xref:System.Net.Sockets.Socket>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-328">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-329">UDP プロトコルがコネクションレスであるため、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="617b8-329">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="617b8-330">呼び出すのではない、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド マルチキャスト データグラムを受信する場合。</span><span class="sxs-lookup"><span data-stu-id="617b8-330">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-331">次の例では、リモート ホストに接続する IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-331">The following example uses an IP address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-332">
            <see cref="T:System.Net.Sockets.UdpClient" /> は閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-332">
              <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-333">
            <paramref name="addr" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-333">
              <paramref name="addr" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="617b8-334">
            <paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-334">
              <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-335">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-335">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="udpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname">
          <span data-ttu-id="617b8-336">データ送信先のリモート ホストの DNS 名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-336">The DNS name of the remote host to which you intend send data.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="617b8-337">データ送信先のリモート ホストのポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-337">The port number on the remote host to which you intend to send data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-338">指定したホスト名とポート番号を使用して、既定のリモート ホストを確立します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-338">Establishes a default remote host using the specified host name and port number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-339"><xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドで指定された値を使用して、既定のリモート ホストの確立、`port`と`hostname`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="617b8-339">The <xref:System.Net.Sockets.UdpClient.Connect%2A> method establishes a default remote host using the values specified in the `port` and `hostname` parameters.</span></span> <span data-ttu-id="617b8-340">確立されるは各呼び出しで、リモート ホストを指定する必要はありません、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-340">Once established, you do not have to specify a remote host in each call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
 <span data-ttu-id="617b8-341">既定のリモート ホストを確立するは省略可能です。</span><span class="sxs-lookup"><span data-stu-id="617b8-341">Establishing a default remote host is optional.</span></span> <span data-ttu-id="617b8-342">既定のリモート ホストを指定すると、そのホストにのみ制限されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-342">Specifying a default remote host limits you to that host only.</span></span> <span data-ttu-id="617b8-343">別のリモート ホストにデータグラムを送信する場合は、別の呼び出しを行う必要があります、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド別に作成または<xref:System.Net.Sockets.UdpClient>既定のリモート ホストなし。</span><span class="sxs-lookup"><span data-stu-id="617b8-343">If you want to send datagrams to a different remote host, you must make another call to the <xref:System.Net.Sockets.UdpClient.Connect%2A> method or create another <xref:System.Net.Sockets.UdpClient> without a default remote host.</span></span>  
  
 <span data-ttu-id="617b8-344">既定のリモートを確立している場合ホストおよびするも、リモート ホストへの呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド、<xref:System.Net.Sockets.UdpClient.Send%2A>がスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-344">If you have established a default remote host and you also provide a remote host in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method, <xref:System.Net.Sockets.UdpClient.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-345">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-345">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-346">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-346">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="617b8-347">呼び出す場合、<xref:System.Net.Sockets.Socket.Connect%2A>メソッドは、指定した既定値は破棄されます以外のアドレスから到着する任意のデータグラムします。</span><span class="sxs-lookup"><span data-stu-id="617b8-347">If you call the <xref:System.Net.Sockets.Socket.Connect%2A> method, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="617b8-348">継承する場合を除き、このメソッドを使用してブロードキャスト アドレスに既定のリモート ホストを設定することはできません<xref:System.Net.Sockets.UdpClient>、クライアント メソッドを使用して、基になるを取得する<xref:System.Net.Sockets.Socket>、ソケット オプションを設定および<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-348">You cannot set the default remote host to a broadcast address using this method unless you inherit from <xref:System.Net.Sockets.UdpClient>, use the client method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="617b8-349">ただし、指定した場合、既定値にデータをブロードキャスト ブロードキャスト アドレス、255.255.255.255、<xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType>への呼び出しで、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-349">You can however, broadcast data to the default broadcast address, 255.255.255.255, if you specify <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> in your call to the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="617b8-350">アプリケーションにブロードキャスト アドレスより詳細に制御が必要な場合も元に戻すことができますを使用して、<xref:System.Net.Sockets.Socket>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-350">If your application requires greater control over broadcast addresses, you can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-351">UDP プロトコルがコネクションレスであるため、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="617b8-351">Since the UDP protocol is connectionless, the <xref:System.Net.Sockets.UdpClient.Connect%2A> method does not block.</span></span> <span data-ttu-id="617b8-352">呼び出すのではない、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド マルチキャスト データグラムを受信する場合。</span><span class="sxs-lookup"><span data-stu-id="617b8-352">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method if you intend to receive multicasted datagrams.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-353">次の例で、ホスト名とポート番号をリモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="617b8-353">The following example uses the host name and port number to connect to a remote host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-354">
            <see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-354">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="617b8-355">
            <paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-355">
              <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-356">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-356">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="617b8-357">
            <see cref="T:System.Net.Sockets.UdpClient" /> によって使用されているマネージド リソースおよびアンマネージド リソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-357">Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.UdpClient" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="udpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="617b8-358">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-358">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-359">
            <see cref="T:System.Net.Sockets.UdpClient" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-359">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.UdpClient" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-360">このメソッドは、パブリック`Dispose()`メソッドと<xref:System.Object.Finalize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-360">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="617b8-361">`Dispose()` 保護された起動`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="617b8-361">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="617b8-362"><xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`に設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="617b8-362"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="617b8-363">ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<xref:System.Net.Sockets.UdpClient>参照。</span><span class="sxs-lookup"><span data-stu-id="617b8-363">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.UdpClient> references.</span></span> <span data-ttu-id="617b8-364">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="617b8-364">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="617b8-365">
            <para>
              <see langword="Dispose" /> 他のオブジェクトで何度も呼び出せます。オーバーライドするときに<see langword="Dispose(Boolean)" />の事前に呼び出したで以前破棄されたオブジェクトを参照しないように注意する<see langword="Dispose" />します。実装する方法についての詳細は<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-365">
              <para>
                <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.UdpClient.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-366">
            <see cref="T:System.Net.Sockets.UdpClient" /> でインターネット プロトコル (IP) データグラムの断片化を許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を、取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-366">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> allows Internet Protocol (IP) datagrams to be fragmented.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="617b8-367">
            <see cref="T:System.Net.Sockets.UdpClient" /> でデータグラムの断片化を許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-367">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows datagram fragmentation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="617b8-368">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-368">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-369">データグラムには、そのサイズを超えたら、最大転送単位 (MTU)、伝送中の断片化が必要です。</span><span class="sxs-lookup"><span data-stu-id="617b8-369">Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.</span></span> <span data-ttu-id="617b8-370">送信元のホストまたは中間のルーターで、データグラムを断片化可能性があります。</span><span class="sxs-lookup"><span data-stu-id="617b8-370">Datagrams may be fragmented by the sending host or by an intermediate router.</span></span> <span data-ttu-id="617b8-371">データグラムを断片化しなければならない場合、<xref:System.Net.Sockets.Socket.DontFragment%2A>オプションが設定されている、データグラムを破棄すると、およびインターネット コントロール メッセージ プロトコル (ICMP) エラー メッセージは、データグラムの送信者に送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-371">If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-372">次のコード例の使用を示しています、<xref:System.Net.Sockets.Socket.DontFragment%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="617b8-372">The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="617b8-373">このプロパティは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> フラグまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> フラグを使用するソケットに対してのみ設定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-373">This property can be set only for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DropMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-374">マルチキャスト グループへの参加を取り消します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-374">Leaves a multicast group.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.DropMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">
          <span data-ttu-id="617b8-375">参加を取り消すマルチキャスト グループの <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-375">The <see cref="T:System.Net.IPAddress" /> of the multicast group to leave.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-376">マルチキャスト グループへの参加を取り消します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-376">Leaves a multicast group.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-377"><xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>メソッド金額によって引き出さ、<xref:System.Net.Sockets.UdpClient>指定されたマルチキャスト グループから<xref:System.Net.IPAddress>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-377">The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="617b8-378">呼び出した後、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>メソッドは、基になる<xref:System.Net.Sockets.Socket>ルーターとルーターをマルチキャスト グループから削除する、インターネット グループ管理プロトコル (IGMP) パケットを送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-378">After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.</span></span> <span data-ttu-id="617b8-379">後に、<xref:System.Net.Sockets.UdpClient>解除一時的に、グループからはできなくなりますをそのグループに送信されたデータグラムを受信できます。</span><span class="sxs-lookup"><span data-stu-id="617b8-379">After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-380">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-380">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-381">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-381">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-382">次の例では、マルチキャスト アドレスを提供することで、マルチキャスト グループを削除する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="617b8-382">The following example demonstrates how to drop a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-383">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-383">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-384">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-384">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="617b8-385">この IP アドレスは、ソケットのアドレッシング スキームを定義する <see cref="T:System.Net.Sockets.AddressFamily" /> 値と互換性がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-385">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-386">
            <paramref name="multicastAddr" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-386">
              <paramref name="multicastAddr" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr, int32 ifindex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress, ifindex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr, int ifindex);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.DropMulticastGroup (multicastAddr, ifindex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="ifindex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">
          <span data-ttu-id="617b8-387">参加を取り消すマルチキャスト グループの <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-387">The <see cref="T:System.Net.IPAddress" /> of the multicast group to leave.</span>
          </span>
        </param>
        <param name="ifindex">
          <span data-ttu-id="617b8-388">参加を取り消すマルチキャスト グループのローカル アドレス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-388">The local address of the multicast group to leave.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-389">マルチキャスト グループへの参加を取り消します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-389">Leaves a multicast group.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-390"><xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>メソッド金額によって引き出さ、<xref:System.Net.Sockets.UdpClient>指定されたマルチキャスト グループから<xref:System.Net.IPAddress>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-390">The <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method withdraws the <xref:System.Net.Sockets.UdpClient> from the multicast group identified by the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="617b8-391">呼び出した後、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>メソッドは、基になる<xref:System.Net.Sockets.Socket>ルーターとルーターをマルチキャスト グループから削除する、インターネット グループ管理プロトコル (IGMP) パケットを送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-391">After calling the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router, removing the router from the multicast group.</span></span> <span data-ttu-id="617b8-392">後に、<xref:System.Net.Sockets.UdpClient>解除一時的に、グループからはできなくなりますをそのグループに送信されたデータグラムを受信できます。</span><span class="sxs-lookup"><span data-stu-id="617b8-392">After a <xref:System.Net.Sockets.UdpClient> withdraws from the group, it will no longer be able to receive datagrams sent to that group.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-393">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="617b8-393">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="617b8-394">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-394">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-395">次のコード例では、マルチキャスト アドレスを提供することで、マルチキャスト グループを削除する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="617b8-395">The following code example demonstrates how to drop a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-396">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-396">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-397">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-397">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="617b8-398">この IP アドレスは、ソケットのアドレッシング スキームを定義する <see cref="T:System.Net.Sockets.AddressFamily" /> 値と互換性がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-398">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-399">
            <paramref name="multicastAddr" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-399">
              <paramref name="multicastAddr" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-400">
            <see cref="T:System.Boolean" /> がブロードキャスト パケットの送受信を許可するかどうかを指定する <see cref="T:System.Net.Sockets.UdpClient" /> 値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-400">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> may send or receive broadcast packets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="617b8-401">
            <see cref="T:System.Net.Sockets.UdpClient" /> でブロードキャスト パケットを許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-401">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows broadcast packets; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="617b8-402">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-402">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-403">ブロードキャストでは、特定のサブネットに制限されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-403">Broadcasting is limited to a specific subnet.</span></span> <span data-ttu-id="617b8-404">255.255.255.255; にパケットを送信して、ローカル サブネットにブロードキャストすることができます。または、すべてのビットのホスト部分で設定を持つインターネット プロトコル (IP) アドレスのネットワーク部分は、有向ブロードキャスト アドレスを使用することができます。</span><span class="sxs-lookup"><span data-stu-id="617b8-404">You can broadcast to your local subnet by sending a packet to 255.255.255.255; or, you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.</span></span> <span data-ttu-id="617b8-405">たとえば、自分の IP アドレスが 192.168.1.40 (最初の 3 つのオクテットとしてネットワーク部分とホストの部分のクラス C アドレスは、最後のオクテット) の場合は、有向ブロードキャスト アドレスは 192.168.1.255 します。</span><span class="sxs-lookup"><span data-stu-id="617b8-405">For example, if your IP address is 192.168.1.40 (a Class C address, with the network portion as the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-406">次のコード例の使用を示しています、<xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="617b8-406">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EndReceive(class System.IAsyncResult asyncResult, class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EndReceive(IAsyncResult ^ asyncResult, System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult *  -&gt; byte[]" Usage="udpClient.EndReceive (asyncResult, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="617b8-407">
            <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-407">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</span>
          </span>
        </param>
        <param name="remoteEP">
          <span data-ttu-id="617b8-408">指定したリモート エンドポイント。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-408">The specified remote endpoint.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-409">保留中の非同期受信を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-409">Ends a pending asynchronous receive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-410">成功した場合は、データグラム データを格納するバイトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-410">If successful, an array of bytes that contains datagram data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-411">このメソッドはブロックするまで、操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="617b8-411">This method blocks until the operation is complete.</span></span>  
  
 <span data-ttu-id="617b8-412">この操作を同期的に実行するには、使用、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-412">To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-413">次のコード例では<xref:System.Net.Sockets.UdpClient.BeginSend%2A>サーバー応答の非同期の受信を完了します。</span><span class="sxs-lookup"><span data-stu-id="617b8-413">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-414">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-414">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="617b8-415">
            <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-415">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="617b8-416">
            <see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> が、非同期の読み取りのために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-416">
              <see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-417">基になる <see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-417">An error occurred when attempting to access the underlying <see cref="T:System.Net.Sockets.Socket" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-418">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-418">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="udpClient.EndSend asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="617b8-419">
            <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-419">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-420">保留中の非同期送信を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-420">Ends a pending asynchronous send.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-421">正常に完了した場合は、<see cref="T:System.Net.Sockets.UdpClient" /> に送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-421">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.UdpClient" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-422">このメソッドはブロックするまで、操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="617b8-422">This method blocks until the operation is complete.</span></span>  
  
 <span data-ttu-id="617b8-423">この操作を同期的に実行するには、使用、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-423">To perform this operation synchronously, use the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-424">次のコード例では<xref:System.Net.Sockets.UdpClient.BeginSend%2A>サーバー要求の非同期の送信を完了します。</span><span class="sxs-lookup"><span data-stu-id="617b8-424">The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-425">
            <paramref name="asyncResult" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-425">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="617b8-426">
            <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> が返されませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-426">
              <paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="617b8-427">
            <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> が、非同期の読み取りのために以前に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-427">
              <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous read.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-428">基になるソケットへのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-428">An error occurred when attempting to access the underlying socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-429">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-429">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-430">
            <see cref="T:System.Net.Sockets.UdpClient" /> で 1 つのクライアントだけがポートを使用できるかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-430">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.UdpClient" /> allows only one client to use a port.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="617b8-431">
            <see cref="T:System.Net.Sockets.UdpClient" /> で、1 つのクライアントだけが特定のポートを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-431">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> allows only one client to use a specific port; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="617b8-432">既定値は、Windows Server 2003 および Windows XP Service Pack 2 以降では <see langword="true" /> で、その他のすべてのバージョンでは <see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-432">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-433">既定では、複数のクライアントが特定のポートを使用できます。ただし、クライアントの 1 つだけでは、ポートに送信されるネットワーク トラフィックの操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="617b8-433">By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="617b8-434">使用することができます、<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A>プロパティを複数のクライアントが特定のポートを使用するを防ぐためにします。</span><span class="sxs-lookup"><span data-stu-id="617b8-434">You can use the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.</span></span>  
  
 <span data-ttu-id="617b8-435">基になるソケット クライアント ポートにバインドする前に、このプロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="617b8-435">This property must be set before the underlying socket is bound to a client port.</span></span> <span data-ttu-id="617b8-436">呼び出す場合<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>、 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>、 <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>、または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>、コンス トラクターの副作用として、クライアントのポートがバインドされているし、後で設定することはできません、<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A>プロパティ</span><span class="sxs-lookup"><span data-stu-id="617b8-436">If you call <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>, or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>, the client port is bound as a side effect of the constructor, and you cannot subsequently set the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-437">次のコード例を作成、 <xref:System.Net.Sockets.UdpClient>、取得し、設定、<xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="617b8-437">The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-438">基になるソケットへのアクセスを試みているときにエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-438">An error occurred when attempting to access the underlying socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-439">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-439">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!UdpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="udpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="JoinMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-440">
            <see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-440">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">
          <span data-ttu-id="617b8-441">参加対象のグループのマルチキャスト <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-441">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-442">
            <see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-442">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-443"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッドのサブスクライブ、<xref:System.Net.Sockets.UdpClient>を指定してマルチキャスト グループに<xref:System.Net.IPAddress>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-443">The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="617b8-444">呼び出した後、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッドは、基になる<xref:System.Net.Sockets.Socket>マルチキャスト グループのメンバーシップを要求するルーターをインターネット グループ管理プロトコル (IGMP) パケットを送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-444">After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.</span></span> <span data-ttu-id="617b8-445">マルチキャスト アドレス範囲は、224.0.0.0 ~ 239.255.255.255 です。</span><span class="sxs-lookup"><span data-stu-id="617b8-445">The multicast address range is 224.0.0.0 to 239.255.255.255.</span></span> <span data-ttu-id="617b8-446">この範囲外のアドレスを指定する場合、または要求が行われるルーターがマルチキャスト対応していない、<xref:System.Net.Sockets.UdpClient>がスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-446">If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-447">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-447">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-448">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-448">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="617b8-449">1 回、<xref:System.Net.Sockets.UdpClient>が表示されているマルチキャスト グループのメンバーとして、ルーターを指定した送信 multicasted データグラムを受信できる場合がなります<xref:System.Net.IPAddress>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-449">Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-450">作成する必要があります、<xref:System.Net.Sockets.UdpClient>マルチキャストのポート番号を使用してそれをできなく multicasted データグラムを受信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-450">You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number; otherwise, you will not be able to receive multicasted datagrams.</span></span> <span data-ttu-id="617b8-451">呼び出すのではない、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドを呼び出す前に、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッド、または<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドは機能しません。</span><span class="sxs-lookup"><span data-stu-id="617b8-451">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, or the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will not work.</span></span> <span data-ttu-id="617b8-452">マルチキャスト IP アドレスにデータグラムを送信するマルチキャスト グループに属している必要はありません。</span><span class="sxs-lookup"><span data-stu-id="617b8-452">You do not need to belong to a multicast group to send datagrams to a multicast IP address.</span></span>  
  
 <span data-ttu-id="617b8-453">マルチキャスト グループに参加する前に、ソケットがエンドポイント、ポートにバインドされていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="617b8-453">Before joining a multicast group, make sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="617b8-454">ポートまたはエンドポイントをパラメーターとして受け入れるコンス トラクターのいずれかを呼び出して操作を行います。</span><span class="sxs-lookup"><span data-stu-id="617b8-454">You do that by calling one of the constructors that accept a port or an endpoint as a parameter.</span></span>  
  
 <span data-ttu-id="617b8-455">マルチキャスト データグラムを受信を停止するには、呼び出し、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>メソッドを提供し、<xref:System.Net.IPAddress>撤退するグループ元となるのです。</span><span class="sxs-lookup"><span data-stu-id="617b8-455">To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-456">IPv6 の場合は、いくつかのマルチキャスト アドレス範囲から選択できます。</span><span class="sxs-lookup"><span data-stu-id="617b8-456">In the IPv6 case, there are several multicast address ranges you can choose from.</span></span> <span data-ttu-id="617b8-457">IETF の RFC 2375 を参照してください。</span><span class="sxs-lookup"><span data-stu-id="617b8-457">Please, refer to the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-458">呼び出すことはできません<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>で、<xref:System.Net.Sockets.UdpClient>特定のローカル ポートを使用せずに作成 (つまりを使用して、<xref:System.Net.Sockets.UdpClient.%23ctor>または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>コンス トラクター)。</span><span class="sxs-lookup"><span data-stu-id="617b8-458">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-459">次のコード例では、マルチキャスト アドレスを入力してマルチキャスト グループに参加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="617b8-459">The following code example demonstrates how to join a multicast group by providing a multicast address.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#1)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-460">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-460">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-461">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-461">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="617b8-462">この IP アドレスは、ソケットのアドレッシング スキームを定義する <see cref="T:System.Net.Sockets.AddressFamily" /> 値と互換性がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-462">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(int32 ifindex, class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (ifindex As Integer, multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(int ifindex, System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : int * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (ifindex, multicastAddr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifindex" Type="System.Int32" />
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="ifindex">
          <span data-ttu-id="617b8-463">マルチキャスト グループを結合するローカル IP アドレスが関連付けられているインターフェイス インデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-463">The interface index associated with the local IP address on which to join the multicast group.</span>
          </span>
        </param>
        <param name="multicastAddr">
          <span data-ttu-id="617b8-464">参加対象のグループのマルチキャスト <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-464">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-465">
            <see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-465">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-466">マルチキャスト グループに参加する前に、ポート、エンドポイントに、ソケットがバインドされていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="617b8-466">Before joining a multicast group, be sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="617b8-467">ポートまたはエンドポイントをパラメーターとして受け取るコンス トラクターのいずれかを呼び出すことによって、これを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="617b8-467">You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</span></span>  
  
 <span data-ttu-id="617b8-468">`infindex`パラメーターは、同じリンク上のハードウェア インターフェイスを識別するために使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-468">The `infindex` parameter is used to identify a hardware interface on the same link.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-469">これは、いくつかのマルチキャスト アドレス範囲から選択します。</span><span class="sxs-lookup"><span data-stu-id="617b8-469">There are several multicast address ranges to choose from.</span></span> <span data-ttu-id="617b8-470">IETF RFC 2375 を参照してください。</span><span class="sxs-lookup"><span data-stu-id="617b8-470">Refer to the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-471">呼び出すことはできません<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>で、<xref:System.Net.Sockets.UdpClient>特定のローカル ポートを使用せずに作成 (つまりを使用して、<xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType>または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>コンス トラクター)。</span><span class="sxs-lookup"><span data-stu-id="617b8-471">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> constructor).</span></span>  
  
   
  
## Examples  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#5)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-472">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-472">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-473">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-473">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, int32 timeToLive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, timeToLive As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, int timeToLive);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, timeToLive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="timeToLive" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">
          <span data-ttu-id="617b8-474">参加するマルチキャスト グループの <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-474">The <see cref="T:System.Net.IPAddress" /> of the multicast group to join.</span>
          </span>
        </param>
        <param name="timeToLive">
          <span data-ttu-id="617b8-475">ルーター ホップ数で計測した有効期間 (TTL)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-475">The Time to Live (TTL), measured in router hops.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-476">指定された有効期間 (TTL: Time to Live) で <see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-476">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group with the specified Time to Live (TTL).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-477"><xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッドのサブスクライブ、<xref:System.Net.Sockets.UdpClient>を指定してマルチキャスト グループに<xref:System.Net.IPAddress>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-477">The <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method subscribes the <xref:System.Net.Sockets.UdpClient> to a multicast group using the specified <xref:System.Net.IPAddress>.</span></span> <span data-ttu-id="617b8-478">呼び出した後、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッドは、基になる<xref:System.Net.Sockets.Socket>マルチキャスト グループのメンバーシップを要求するルーターをインターネット グループ管理プロトコル (IGMP) パケットを送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-478">After calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method, the underlying <xref:System.Net.Sockets.Socket> sends an Internet Group Management Protocol (IGMP) packet to the router requesting membership to the multicast group.</span></span> <span data-ttu-id="617b8-479">マルチキャスト アドレス範囲は、224.0.0.0 ~ 239.255.255.255 です。</span><span class="sxs-lookup"><span data-stu-id="617b8-479">The multicast address range is 224.0.0.0 to 239.255.255.255.</span></span> <span data-ttu-id="617b8-480">この範囲外のアドレスを指定する場合、または要求が行われるルーターがマルチキャスト対応していない、<xref:System.Net.Sockets.UdpClient>がスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-480">If you specify an address outside this range or if the router to which the request is made is not multicast enabled, <xref:System.Net.Sockets.UdpClient> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-481">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-481">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-482">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-482">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span> <span data-ttu-id="617b8-483">`timeToLive`破棄される前に、マルチキャスト データグラムのルーター ホップの数が許可されるパラメーターを指定します。</span><span class="sxs-lookup"><span data-stu-id="617b8-483">The `timeToLive` parameter specifies how many router hops will be allowed for a multicasted datagram before being discarded.</span></span> <span data-ttu-id="617b8-484">1 回、<xref:System.Net.Sockets.UdpClient>が表示されているマルチキャスト グループのメンバーとして、ルーターを指定した送信 multicasted データグラムを受信できる場合がなります<xref:System.Net.IPAddress>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-484">Once the <xref:System.Net.Sockets.UdpClient> is listed with the router as a member of the multicast group, it will be able to receive multicasted datagrams sent to the specified <xref:System.Net.IPAddress>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-485">作成する必要があります、<xref:System.Net.Sockets.UdpClient>マルチキャストのポート番号を使用して multicasted データグラムを受信できなくのそれ以外の場合。</span><span class="sxs-lookup"><span data-stu-id="617b8-485">You must create the <xref:System.Net.Sockets.UdpClient> using the multicast port number otherwise you will not be able to receive multicasted datagrams.</span></span> <span data-ttu-id="617b8-486">呼び出すのではない、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドを呼び出す前に、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッドまたは receive メソッドが機能しません。</span><span class="sxs-lookup"><span data-stu-id="617b8-486">Do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method or the receive method will not work.</span></span> <span data-ttu-id="617b8-487">マルチキャスト IP アドレスにデータグラムを送信するマルチキャスト グループに属している必要はありません。</span><span class="sxs-lookup"><span data-stu-id="617b8-487">You do not need to belong to a multicast group to send datagrams to a multicast IP address.</span></span>  
  
 <span data-ttu-id="617b8-488">マルチキャスト グループに参加する前に、ソケットがエンドポイント、ポートにバインドされていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="617b8-488">Before joining a multicast group make sure the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="617b8-489">ポートまたはエンドポイントをパラメーターとして受け入れるコンス トラクターのいずれかを呼び出して操作を行います。</span><span class="sxs-lookup"><span data-stu-id="617b8-489">You do that by calling one of the constructors that accept as parameter a port or an endpoint.</span></span>  
  
 <span data-ttu-id="617b8-490">マルチキャスト データグラムを受信を停止するには、呼び出し、<xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>メソッドを提供し、<xref:System.Net.IPAddress>撤退するグループ元となるのです。</span><span class="sxs-lookup"><span data-stu-id="617b8-490">To stop receiving multicasted datagrams, call the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method and provide the <xref:System.Net.IPAddress> of the group from which you would like to withdraw.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-491">呼び出すことはできません<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>で、<xref:System.Net.Sockets.UdpClient>特定のローカル ポートを使用せずに作成 (つまりを使用して、<xref:System.Net.Sockets.UdpClient.%23ctor>または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>コンス トラクター)。</span><span class="sxs-lookup"><span data-stu-id="617b8-491">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-492">次の例では、2 つのパラメーター、マルチキャスト アドレスでは、TTL を表す数値を提供し、マルチキャスト グループに参加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="617b8-492">The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="617b8-493">提供される TTL の値が 0 から 255 ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-493">The TTL provided is not between 0 and 255</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-494">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-494">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-495">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-495">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-496">
            <paramref name="multicastAddr" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-496">
              <paramref name="multicastAddr" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="617b8-497">この IP アドレスは、ソケットのアドレッシング スキームを定義する <see cref="T:System.Net.Sockets.AddressFamily" /> 値と互換性がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-497">The IP address is not compatible with the <see cref="T:System.Net.Sockets.AddressFamily" /> value that defines the addressing scheme of the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, class System.Net.IPAddress localAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, localAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, System::Net::IPAddress ^ localAddress);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, localAddress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="localAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">
          <span data-ttu-id="617b8-498">参加対象のグループのマルチキャスト <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-498">The multicast <see cref="T:System.Net.IPAddress" /> of the group you want to join.</span>
          </span>
        </param>
        <param name="localAddress">
          <span data-ttu-id="617b8-499">ローカル <see cref="T:System.Net.IPAddress" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-499">The local <see cref="T:System.Net.IPAddress" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-500">
            <see cref="T:System.Net.Sockets.UdpClient" /> をマルチキャスト グループに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-500">Adds a <see cref="T:System.Net.Sockets.UdpClient" /> to a multicast group.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-501">マルチキャスト グループに参加する前に、ポート、エンドポイントに、ソケットがバインドされていることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="617b8-501">Before you join a multicast group, be sure that the socket is bound to the port or endpoint.</span></span> <span data-ttu-id="617b8-502">ポートまたはエンドポイントをパラメーターとして受け取るコンス トラクターのいずれかを呼び出すことによって、これを行うことができます。</span><span class="sxs-lookup"><span data-stu-id="617b8-502">You can do this by calling one of the constructors that accepts a port or an endpoint as parameter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-503">これは、いくつかのマルチキャスト アドレス範囲から選択します。</span><span class="sxs-lookup"><span data-stu-id="617b8-503">There are several multicast address ranges to choose from.</span></span> <span data-ttu-id="617b8-504">IETF の RFC 2375 でそれらを見つけることができます。</span><span class="sxs-lookup"><span data-stu-id="617b8-504">You can find them in the IETF RFC 2375.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-505">呼び出すことはできません<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>で、<xref:System.Net.Sockets.UdpClient>特定のローカル ポートを使用せずに作成 (つまりを使用して、<xref:System.Net.Sockets.UdpClient.%23ctor>または<xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>コンス トラクター)。</span><span class="sxs-lookup"><span data-stu-id="617b8-505">You cannot call <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> on a <xref:System.Net.Sockets.UdpClient> constructed without a specific local port (that is, using the <xref:System.Net.Sockets.UdpClient.%23ctor> or <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-506">次のコード例の使用を示しています、<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-506">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.UdpClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-507">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-507">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-508">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-508">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-509">発信マルチキャスト パケットが送信元アプリケーションに配信されるかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-509">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether outgoing multicast packets are delivered to the sending application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="617b8-510">
            <see cref="T:System.Net.Sockets.UdpClient" /> が発信マルチキャスト パケットを受け取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-510">
              <see langword="true" /> if the <see cref="T:System.Net.Sockets.UdpClient" /> receives outgoing multicast packets; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-511">マルチキャストは、インターネットでの多対多の通信にスケーラブルな方法です。</span><span class="sxs-lookup"><span data-stu-id="617b8-511">Multicast is a scalable method for many-to-many communication on the Internet.</span></span> <span data-ttu-id="617b8-512">プロセスがマルチキャスト アドレスにサブスクライブしている場合、パケットは送信でマルチキャスト アドレスにサブスクライブしているその他のすべてのプロセスで、プロセスが受信したこと。</span><span class="sxs-lookup"><span data-stu-id="617b8-512">If a process subscribes to a multicast address, any packets sent by that process are received by every other process that has subscribed to the multicast address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-513">次のコード例の使用を示しています、<xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="617b8-513">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.UdpClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public byte[] Receive (ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Receive(class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Receive(System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Receive :  -&gt; byte[]" Usage="udpClient.Receive remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="remoteEP">
          <span data-ttu-id="617b8-514">データの送信元のリモート ホストを表す <see cref="T:System.Net.IPEndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-514">An <see cref="T:System.Net.IPEndPoint" /> that represents the remote host from which the data was sent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-515">リモート ホストが送信した UDP データグラムを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-515">Returns a UDP datagram that was sent by a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-516">データグラム データを格納する <see cref="T:System.Byte" /> 型の配列</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-516">An array of type <see cref="T:System.Byte" /> that contains datagram data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-517"><xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドは、リモート ホストからデータグラムを受信するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="617b8-517">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method will block until a datagram arrives from a remote host.</span></span> <span data-ttu-id="617b8-518">データがあるときに、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドは最初のエンキューされたデータグラムを読み取り、バイト配列としてのデータ部分を返します。</span><span class="sxs-lookup"><span data-stu-id="617b8-518">When data is available, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will read the first enqueued datagram and return the data portion as a byte array.</span></span> <span data-ttu-id="617b8-519">このメソッド、`remoteEP`パラメーター、<xref:System.Net.IPAddress>と送信者のポート番号。</span><span class="sxs-lookup"><span data-stu-id="617b8-519">This method populates the `remoteEP` parameter with the <xref:System.Net.IPAddress> and port number of the sender.</span></span>  
  
 <span data-ttu-id="617b8-520">既定のリモート ホストを指定する場合、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドはそのホストでのみからデータグラムを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="617b8-520">If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, the <xref:System.Net.Sockets.UdpClient.Receive%2A> method will accept datagrams from that host only.</span></span> <span data-ttu-id="617b8-521">その他のすべてのデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-521">All other datagrams will be discarded.</span></span>  
  
 <span data-ttu-id="617b8-522">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-522">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-523">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-523">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-524">マルチキャスト データグラムを受信する場合、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドを呼び出す前に、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-524">If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span> <span data-ttu-id="617b8-525"><xref:System.Net.Sockets.UdpClient>受信に使用するマルチキャストのポート番号を使用してデータグラムを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="617b8-525">The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-526">次の例で、<xref:System.Net.Sockets.UdpClient.Receive%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-526">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Receive%2A> method.</span></span> <span data-ttu-id="617b8-527"><xref:System.Net.Sockets.UdpClient.Receive%2A>メソッドは、メッセージを受信するまでに実行をブロックします。</span><span class="sxs-lookup"><span data-stu-id="617b8-527">The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until it receives a message.</span></span> <span data-ttu-id="617b8-528">使用して、<xref:System.Net.IPEndPoint>に渡される<xref:System.Net.Sockets.UdpClient.Receive%2A>、応答してホストの身元を明らかになりました。</span><span class="sxs-lookup"><span data-stu-id="617b8-528">Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-529">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-529">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-530">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-530">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.ReceiveAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync () As Task(Of UdpReceiveResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::UdpReceiveResult&gt; ^ ReceiveAsync();" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;" Usage="udpClient.ReceiveAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="617b8-531">リモート ホストが送信した UDP データグラムを非同期的に返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-531">Returns a UDP datagram asynchronously that was sent by a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-532">
            <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-532">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
          <span data-ttu-id="617b8-533">非同期操作を表すタスク オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-533">The task object representing the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-534">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="617b8-534">This operation will not block.</span></span> <span data-ttu-id="617b8-535">返された<xref:System.Threading.Tasks.Task%601>> オブジェクトは、UDP パケットが受信された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="617b8-535">The returned <xref:System.Threading.Tasks.Task%601>> object will complete after the UDP packet has been received.</span></span>  
  
 <span data-ttu-id="617b8-536">既定のリモート ホストを指定する場合、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドでは、このメソッドはそのホストでのみからデータグラムを受け入れます。</span><span class="sxs-lookup"><span data-stu-id="617b8-536">If you specify a default remote host in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method, this method will accept datagrams from that host only.</span></span> <span data-ttu-id="617b8-537">その他のすべてのデータグラムは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-537">All other datagrams will be discarded.</span></span>  
  
 <span data-ttu-id="617b8-538">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-538">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-539">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-539">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="617b8-540">マルチキャスト データグラムを受信する場合、<xref:System.Net.Sockets.UdpClient.Connect%2A>前に、このメソッドを呼び出すメソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-540">If you intend to receive multicasted datagrams, do not call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method prior to calling this method.</span></span> <span data-ttu-id="617b8-541"><xref:System.Net.Sockets.UdpClient>受信に使用するマルチキャストのポート番号を使用してデータグラムを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="617b8-541">The <xref:System.Net.Sockets.UdpClient> you use to receive datagrams must be created using the multicast port number.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-542">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-542">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-543">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-543">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-544">UDP データグラムをリモート ホストに送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-544">Sends a UDP datagram to a remote host.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int -&gt; int" Usage="udpClient.Send (dgram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dgram">
          <span data-ttu-id="617b8-545">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-545">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-546">データグラム内のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-546">The number of bytes in the datagram.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-547">UDP データグラムをリモート ホストに送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-547">Sends a UDP datagram to a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-548">送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-548">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-549">このオーバー ロードで確立されているリモート ホストにデータグラムを送信する、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドと送信したバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="617b8-549">This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and returns the number of bytes sent.</span></span> <span data-ttu-id="617b8-550">呼び出さない場合<xref:System.Net.Sockets.UdpClient.Connect%2A>このオーバー ロードを呼び出す前に、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドがスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-550">If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-551">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-551">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-552">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-552">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="617b8-553">呼び出す必要がある別のリモート ホストにデータグラムを送信する場合、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドと、目的のリモート ホストを指定します。</span><span class="sxs-lookup"><span data-stu-id="617b8-553">If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host.</span></span> <span data-ttu-id="617b8-554">その他のいずれかを使用して、<xref:System.Net.Sockets.UdpClient.Send%2A>ブロードキャスト アドレスにデータグラムを送信するメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="617b8-554">Use either of the other <xref:System.Net.Sockets.UdpClient.Send%2A> method overloads to send datagrams to a broadcast address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-555">次の例で、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-555">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="617b8-556">このオーバー ロードを使用する前に、既定のリモート ホストを確立する必要があります。</span><span class="sxs-lookup"><span data-stu-id="617b8-556">You must establish a default remote host prior to using this overload.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-557">
            <paramref name="dgram" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-557">
              <paramref name="dgram" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="617b8-558">
            <see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-558">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-559">
            <see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-559">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-560">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-560">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.IPEndPoint -&gt; int" Usage="udpClient.Send (dgram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="dgram">
          <span data-ttu-id="617b8-561">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-561">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send, represented as an array of bytes.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-562">データグラム内のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-562">The number of bytes in the datagram.</span>
          </span>
        </param>
        <param name="endPoint">
          <span data-ttu-id="617b8-563">データグラムの送信先のホストとポートを表す <see cref="T:System.Net.IPEndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-563">An <see cref="T:System.Net.IPEndPoint" /> that represents the host and port to which to send the datagram.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-564">指定したリモート エンドポイントにあるホストに UDP データグラムを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-564">Sends a UDP datagram to the host at the specified remote endpoint.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-565">送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-565">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-566"><xref:System.Net.Sockets.UdpClient.Send%2A>メソッドが指定されたエンドポイントにデータグラムを送信し、正常に送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="617b8-566">The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the specified endpoint and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="617b8-567">このオーバー ロードを呼び出す前にまずを作成、<xref:System.Net.IPEndPoint>データグラムの配信先のリモート ホストの IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-567">Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered.</span></span> <span data-ttu-id="617b8-568">データグラムを送信するには、既定のブロードキャストにアドレス、255.255.255.255 を指定することによって<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>の<xref:System.Net.IPAddress.Address%2A>のプロパティ、<xref:System.Net.IPEndPoint>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-568">You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="617b8-569">これを作成した後<xref:System.Net.IPEndPoint>に渡す、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドとして、`endPoint`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="617b8-569">After you have created this <xref:System.Net.IPEndPoint>, pass it to the <xref:System.Net.Sockets.UdpClient.Send%2A> method as the `endPoint` parameter.</span></span>  
  
 <span data-ttu-id="617b8-570">その他のブロードキャスト アドレスにデータグラムを送信する場合は、使用、<xref:System.Net.Sockets.UdpClient.Client%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.Socket>、ソケット オプションを設定および<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="617b8-570">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="617b8-571">使用することも元に戻すことができます、<xref:System.Net.Sockets.Socket>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-571">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-572">指定しない、`endPoint`リモート ホストを既に確立している場合は、このメソッドのパラメーター、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-572">Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="617b8-573">この場合、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドがスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-573">If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-574">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-574">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-575">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-575">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-576">次の例で、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-576">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="617b8-577">この例では、<xref:System.Net.IPEndPoint>ターゲット ホストを指定します。</span><span class="sxs-lookup"><span data-stu-id="617b8-577">This example uses an <xref:System.Net.IPEndPoint> to specify the target host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-578">
            <paramref name="dgram" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-578">
              <paramref name="dgram" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="617b8-579">
            <see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-579">
              <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-580">
            <see cref="T:System.Net.Sockets.UdpClient" /> は閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-580">
              <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-581">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-581">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, hostname As String, port As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * string * int -&gt; int" Usage="udpClient.Send (dgram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dgram">
          <span data-ttu-id="617b8-582">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-582">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-583">データグラム内のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-583">The number of bytes in the datagram.</span>
          </span>
        </param>
        <param name="hostname">
          <span data-ttu-id="617b8-584">データグラム送信先のリモート ホストの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-584">The name of the remote host to which you intend to send the datagram.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="617b8-585">通信先のリモート ポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-585">The remote port number with which you intend to communicate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-586">指定したリモート ホストの指定したポートに UDP データグラムを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-586">Sends a UDP datagram to a specified port on a specified remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-587">送信されたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-587">The number of bytes sent.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-588"><xref:System.Net.Sockets.UdpClient.Send%2A>メソッドで指定された値にデータグラムの送信、`hostname`と`port`パラメーターと正常に送信したバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="617b8-588">The <xref:System.Net.Sockets.UdpClient.Send%2A> method sends datagrams to the values specified by the `hostname` and `port` parameters and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="617b8-589">データグラムを既定のブロードキャスト アドレスに送信するには「255.255.255.255」を指定して、`hostname`パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="617b8-589">You can send datagrams to the default broadcast address by specifying "255.255.255.255" for the `hostname` parameter value.</span></span>  
  
 <span data-ttu-id="617b8-590">その他のブロードキャスト アドレスにデータグラムを送信する場合は、使用、<xref:System.Net.Sockets.UdpClient.Client%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.Socket>、ソケット オプションを設定および<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="617b8-590">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="617b8-591">使用することも元に戻すことができます、<xref:System.Net.Sockets.Socket>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-591">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="617b8-592">ポート番号をこのメソッドのリモート ホストを既に確立している場合またはホスト名を指定しないでください、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-592">Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="617b8-593">この場合、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッドがスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-593">If you do, the <xref:System.Net.Sockets.UdpClient.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-594">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-594">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-595">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-595">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-596">次の例で、<xref:System.Net.Sockets.UdpClient.Send%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-596">The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method.</span></span> <span data-ttu-id="617b8-597">この例では、ホスト名とポート番号を使用して、ターゲット ホストを識別します。</span><span class="sxs-lookup"><span data-stu-id="617b8-597">This example uses a host name and a port number to identify the target host.</span></span>  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-598">
            <paramref name="dgram" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-598">
              <paramref name="dgram" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="617b8-599">
            <see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-599">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-600">
            <see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-600">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-601">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-601">An error occurred when accessing the socket.</span>
          </span>
        </exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-602">UDP データグラムをリモート ホストに非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-602">Sends a UDP datagram asynchronously to a remote host.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="datagram">
          <span data-ttu-id="617b8-603">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-603">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-604">データグラム内のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-604">The number of bytes in the datagram.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-605">UDP データグラムをリモート ホストに非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-605">Sends a UDP datagram asynchronously to a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-606">
            <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-606">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-607">このオーバー ロードで確立されているリモート ホストにデータグラムを送信する、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-607">This overload sends datagrams to the remote host established in the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="617b8-608">呼び出さない場合<xref:System.Net.Sockets.UdpClient.Connect%2A>このオーバー ロードを呼び出す前に、メソッドがスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-608">If you do not call <xref:System.Net.Sockets.UdpClient.Connect%2A> before calling this overload, the method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-609">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-609">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-610">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-610">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="617b8-611">呼び出す必要がある別のリモート ホストにデータグラムを送信する場合、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッドと、目的のリモート ホストを指定します。</span><span class="sxs-lookup"><span data-stu-id="617b8-611">If you want to send datagrams to a different remote host, you must call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method and specify the desired remote host.</span></span> <span data-ttu-id="617b8-612">その他のいずれかを使用して、<xref:System.Net.Sockets.UdpClient.SendAsync%2A>ブロードキャスト アドレスにデータグラムを送信するメソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="617b8-612">Use either of the other <xref:System.Net.Sockets.UdpClient.SendAsync%2A> method overloads to send datagrams to a broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-613">
            <paramref name="dgram" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-613">
              <paramref name="dgram" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="617b8-614">
            <see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-614">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-615">
            <see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-615">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-616">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-616">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * System.Net.IPEndPoint -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="datagram">
          <span data-ttu-id="617b8-617">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-617">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-618">データグラム内のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-618">The number of bytes in the datagram.</span>
          </span>
        </param>
        <param name="endPoint">
          <span data-ttu-id="617b8-619">データグラムの送信先のホストとポートを表す <see cref="T:System.Net.IPEndPoint" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-619">An <see cref="T:System.Net.IPEndPoint" /> that represents the host and port to which to send the datagram.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-620">UDP データグラムをリモート ホストに非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-620">Sends a UDP datagram asynchronously to a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-621">
            <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-621">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-622">このメソッドは、指定されたエンドポイントにデータグラムを送信します。</span><span class="sxs-lookup"><span data-stu-id="617b8-622">This method sends datagrams to the specified endpoint.</span></span> <span data-ttu-id="617b8-623">このオーバー ロードを呼び出す前にまずを作成、<xref:System.Net.IPEndPoint>データグラムの配信先のリモート ホストの IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="617b8-623">Before calling this overload, you must first create an <xref:System.Net.IPEndPoint> using the IP address and port number of the remote host to which your datagrams will be delivered.</span></span> <span data-ttu-id="617b8-624">データグラムを送信するには、既定のブロードキャストにアドレス、255.255.255.255 を指定することによって<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>の<xref:System.Net.IPAddress.Address%2A>のプロパティ、<xref:System.Net.IPEndPoint>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-624">You can send datagrams to the default broadcast address, 255.255.255.255, by specifying <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> for the <xref:System.Net.IPAddress.Address%2A> property of the <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="617b8-625">これを作成した後<xref:System.Net.IPEndPoint>、としては、このメソッドに渡す、`endPoint`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="617b8-625">After you have created this <xref:System.Net.IPEndPoint>, pass it to this method as the `endPoint` parameter.</span></span>  
  
 <span data-ttu-id="617b8-626">その他のブロードキャスト アドレスにデータグラムを送信する場合は、使用、<xref:System.Net.Sockets.UdpClient.Client%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.Socket>、ソケット オプションを設定および<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="617b8-626">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="617b8-627">使用することも元に戻すことができます、<xref:System.Net.Sockets.Socket>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-627">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="617b8-628">指定しない、`endPoint`リモート ホストを既に確立している場合は、このメソッドのパラメーター、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-628">Do not provide an `endPoint` parameter to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="617b8-629">このメソッドをスローした場合、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-629">If you do, this method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-630">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-630">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-631">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-631">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-632">
            <paramref name="dgram" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-632">
              <paramref name="dgram" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="617b8-633">
            <see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-633">
              <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-634">
            <see cref="T:System.Net.Sockets.UdpClient" /> は閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-634">
              <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-635">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-635">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * string * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="datagram">
          <span data-ttu-id="617b8-636">バイトの配列として表された、送信する UDP データグラムを指定する <see cref="T:System.Byte" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-636">An array of type <see cref="T:System.Byte" /> that specifies the UDP datagram that you intend to send represented as an array of bytes.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="617b8-637">データグラム内のバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-637">The number of bytes in the datagram.</span>
          </span>
        </param>
        <param name="hostname">
          <span data-ttu-id="617b8-638">データグラム送信先のリモート ホストの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-638">The name of the remote host to which you intend to send the datagram.</span>
          </span>
        </param>
        <param name="port">
          <span data-ttu-id="617b8-639">通信先のリモート ポート番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-639">The remote port number with which you intend to communicate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="617b8-640">UDP データグラムをリモート ホストに非同期的に送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-640">Sends a UDP datagram asynchronously to a remote host.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="617b8-641">
            <see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-641">Returns <see cref="T:System.Threading.Tasks.Task`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-642">このメソッドで指定された値にデータグラムを送信する、`hostname`と`port`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="617b8-642">This method sends datagrams to the values specified by the `hostname` and `port` parameters.</span></span> <span data-ttu-id="617b8-643">データグラムを既定のブロードキャスト アドレスに送信するには「255.255.255.255」を指定して、`hostname`パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="617b8-643">You can send datagrams to the default broadcast address by specifying "255.255.255.255" for the `hostname` parameter value.</span></span>  
  
 <span data-ttu-id="617b8-644">その他のブロードキャスト アドレスにデータグラムを送信する場合は、使用、<xref:System.Net.Sockets.UdpClient.Client%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.Socket>、ソケット オプションを設定および<xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="617b8-644">If you want to send datagrams to any other broadcast address, use the <xref:System.Net.Sockets.UdpClient.Client%2A> method to obtain the underlying <xref:System.Net.Sockets.Socket>, and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="617b8-645">使用することも元に戻すことができます、<xref:System.Net.Sockets.Socket>クラス。</span><span class="sxs-lookup"><span data-stu-id="617b8-645">You can also revert to using the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="617b8-646">ポート番号をこのメソッドのリモート ホストを既に確立している場合またはホスト名を指定しないでください、<xref:System.Net.Sockets.UdpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="617b8-646">Do not provide a host name or port number to this method if you have already established a remote host with the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.</span></span> <span data-ttu-id="617b8-647">このメソッドをスローした場合、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="617b8-647">If you do, this method will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="617b8-648">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="617b8-648">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="617b8-649">このコードを入手した場合を参照してください、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="617b8-649">Once you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="617b8-650">
            <paramref name="dgram" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-650">
              <paramref name="dgram" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="617b8-651">
            <see cref="T:System.Net.Sockets.UdpClient" /> が既定のリモート ホストを既に確立しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-651">The <see cref="T:System.Net.Sockets.UdpClient" /> has already established a default remote host.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="617b8-652">
            <see cref="T:System.Net.Sockets.UdpClient" /> が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-652">The <see cref="T:System.Net.Sockets.UdpClient" /> is closed.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="617b8-653">ソケットへのアクセス中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-653">An error occurred when accessing the socket.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.UdpClient.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="617b8-654">
            <see cref="T:System.Net.Sockets.UdpClient" /> によって送信されたインターネット プロトコル (IP) パケットの有効期間 (TTL) の値を指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-654">Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.UdpClient" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="617b8-655">TTL の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="617b8-655">The TTL value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="617b8-656">TTL の値がルーターはパケットとインターネット制御メッセージ プロトコル (ICMP) の"TTL を超えています"を破棄する前にパケットが走査できるルーターの最大数を示すエラー メッセージが送信者に返されます。</span><span class="sxs-lookup"><span data-stu-id="617b8-656">The TTL value indicates the maximum number of routers a packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) "TTL exceeded" error message is returned to the sender.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="617b8-657">次のコード例の使用を示しています、<xref:System.Net.Sockets.UdpClient.Ttl%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="617b8-657">The following code example shows the use of the <xref:System.Net.Sockets.UdpClient.Ttl%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.UdpClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>