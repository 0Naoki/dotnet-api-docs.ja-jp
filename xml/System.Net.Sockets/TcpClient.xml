<Type Name="TcpClient" FullName="System.Net.Sockets.TcpClient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7a5e2f54532ab6d29e3d7d8aafa745aa2f0a1a55" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58736221" /></Metadata><TypeSignature Language="C#" Value="public class TcpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type TcpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="b5386-101">TCP ネットワーク サービス用のクライアント接続を提供します。</span><span class="sxs-lookup"><span data-stu-id="b5386-101">Provides client connections for TCP network services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-102">`TcpClient`クラスには、送信、接続するための単純なメソッドと、受信同期のブロッキング モードでのネットワーク経由でデータをストリーム配信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-102">The `TcpClient` class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.</span></span>  
  
 <span data-ttu-id="b5386-103">順序で`TcpClient`接続、データを交換し、<xref:System.Net.Sockets.TcpListener>または<xref:System.Net.Sockets.Socket>TCP で作成された<xref:System.Net.Sockets.ProtocolType>受信接続要求をリッスンする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-103">In order for `TcpClient` to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests.</span></span> <span data-ttu-id="b5386-104">次の 2 つの方法のいずれかで、このリスナーに接続できます。</span><span class="sxs-lookup"><span data-stu-id="b5386-104">You can connect to this listener in one of the following two ways:</span></span>  
  
-   <span data-ttu-id="b5386-105">作成、`TcpClient`にある 3 つのいずれかを呼び出すと<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-105">Create a `TcpClient` and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods.</span></span>  
  
-   <span data-ttu-id="b5386-106">作成、`TcpClient`ホスト名を使用して、リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-106">Create a `TcpClient` using the host name and port number of the remote host.</span></span> <span data-ttu-id="b5386-107">このコンス トラクターは、接続を自動的に試行します。</span><span class="sxs-lookup"><span data-stu-id="b5386-107">This constructor will automatically attempt a connection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-108">同期ブロック モードでコネクションレスのデータグラムを送信する場合を使用して、<xref:System.Net.Sockets.UdpClient>クラス。</span><span class="sxs-lookup"><span data-stu-id="b5386-108">If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-109">次のコード例を確立、`TcpClient`接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-109">The following code example establishes a `TcpClient` connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CPP/tcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CS/tcpclient.cs#1)]
 [!code-vb[System.Net.Sockets.TcpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/VB/tcpclient.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="b5386-110">送信接続を確立するか、受信要求をそのまま使用する権限です。</span><span class="sxs-lookup"><span data-stu-id="b5386-110">Permission to establish an outgoing connection or accept an incoming request.</span></span></permission>
    <block subset="none" type="overrides"><para><span data-ttu-id="b5386-111">データを送受信するを使用して、<see cref="M:System.Net.Sockets.TcpClient.GetStream" />メソッドを取得する、<see cref="T:System.Net.Sockets.NetworkStream" />します。</span><span class="sxs-lookup"><span data-stu-id="b5386-111">To send and receive data, use the <see cref="M:System.Net.Sockets.TcpClient.GetStream" /> method to obtain a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span> <span data-ttu-id="b5386-112">呼び出す、<see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />と<see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />のメソッド、<see cref="T:System.Net.Sockets.NetworkStream" />をリモート ホストとデータを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-112">Call the <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" /> methods of the <see cref="T:System.Net.Sockets.NetworkStream" /> to send and receive data with the remote host.</span></span> <span data-ttu-id="b5386-113">使用して、<see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />に関連付けられているすべてのリソースを解放するメソッド、<see cref="T:System.Net.Sockets.TcpClient" />します。</span><span class="sxs-lookup"><span data-stu-id="b5386-113">Use the <see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" /> method to release all resources associated with the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></para></block>
    <altmember cref="T:System.Net.Sockets.TcpListener" />
    <altmember cref="T:System.Net.Sockets.NetworkStream" />
    <altmember cref="T:System.Net.Sockets.Socket" />
    <altmember cref="T:System.Net.Sockets.ProtocolType" />
    <altmember cref="T:System.Net.IPEndPoint" />
    <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
    <related type="Article" href="~/docs/framework/network-programming/tcp-udp.md"><span data-ttu-id="b5386-114">TCP-UDP</span><span class="sxs-lookup"><span data-stu-id="b5386-114">TCP-UDP</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5386-115"><see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b5386-115">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5386-116"><see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b5386-116">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-117">このコンス トラクターを作成する新しい<xref:System.Net.Sockets.TcpClient>と基になるサービス プロバイダーが、最も適切なローカル IP アドレスとポート番号を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="b5386-117">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number.</span></span> <span data-ttu-id="b5386-118">最初に呼び出す必要があります、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッド データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="b5386-118">You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-119">このコンス トラクターは、IPv4 アドレスの種類でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="b5386-119">This constructor works only with IPv4 address types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-120">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-120">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-121">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-121">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-122">次のコード例は、既定のコンス トラクターを使用して新しいを作成する方法を示します<xref:System.Net.Sockets.TcpClient>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-122">The following code example demonstrates how to use the default constructor to create a new <xref:System.Net.Sockets.TcpClient>.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="b5386-123">TCP <see cref="T:System.Net.IPEndPoint" /> のバインド先の <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-123">The <see cref="T:System.Net.IPEndPoint" /> to which you bind the TCP <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="b5386-124"><see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化し、指定したローカル エンドポイントにバインドします。</span><span class="sxs-lookup"><span data-stu-id="b5386-124">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and binds it to the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-125">このコンス トラクターが新たに作成<xref:System.Net.Sockets.TcpClient>にバインドしますと、<xref:System.Net.IPEndPoint>で指定された、`localEP`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b5386-125">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter.</span></span> <span data-ttu-id="b5386-126">作成する必要がありますこのコンス トラクターを呼び出す前に、`IPEndPoint`を送信し、データを受信する IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="b5386-126">Before you call this constructor, you must create an `IPEndPoint` using the IP address and port number from which you intend to send and receive data.</span></span> <span data-ttu-id="b5386-127">接続して通信する前に、ローカル IP アドレスとポート番号を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-127">You do not need to specify a local IP address and port number before connecting and communicating.</span></span> <span data-ttu-id="b5386-128">作成する場合、`TcpClient`他のコンス トラクターを使用して、基になるサービス プロバイダーは最も適切なローカル IP アドレスとポート番号を割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="b5386-128">If you create a `TcpClient` using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.</span></span>  
  
 <span data-ttu-id="b5386-129">呼び出す必要があります、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッド データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="b5386-129">You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-130">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-130">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-131">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-131">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-132">次のコード例は、のインスタンスを作成する方法を示します、<xref:System.Net.Sockets.TcpClient>クラスのローカル エンドポイントを使用します。</span><span class="sxs-lookup"><span data-stu-id="b5386-132">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a local endpoint.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-133"><paramref name="localEP" /> パラメーターは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-133">The  <paramref name="localEP" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family"><span data-ttu-id="b5386-134">IP プロトコルの <see cref="P:System.Net.IPAddress.AddressFamily" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-134">The <see cref="P:System.Net.IPAddress.AddressFamily" /> of the IP protocol.</span></span></param>
        <summary><span data-ttu-id="b5386-135">ファミリを指定して、<see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b5386-135">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class with the specified family.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="b5386-136">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-136">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-137">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-137">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-138">次のコード例は、のインスタンスを作成する方法を示します、<xref:System.Net.Sockets.TcpClient>クラス。</span><span class="sxs-lookup"><span data-stu-id="b5386-138">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5386-139"><paramref name="family" /> パラメーターが AddressFamily.InterNetwork ではありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-139">The <paramref name="family" /> parameter is not equal to AddressFamily.InterNetwork</span></span> 
<span data-ttu-id="b5386-140">または</span><span class="sxs-lookup"><span data-stu-id="b5386-140">-or-</span></span> 
<span data-ttu-id="b5386-141"><paramref name="family" /> パラメーターが AddressFamily.InterNetworkV6 ではありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-141">The <paramref name="family" /> parameter is not equal to AddressFamily.InterNetworkV6</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpClient : string * int -&gt; System.Net.Sockets.TcpClient" Usage="new System.Net.Sockets.TcpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="b5386-142">接続先のリモート ホストの DNS 名。</span><span class="sxs-lookup"><span data-stu-id="b5386-142">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-143">接続先のリモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-143">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="b5386-144"><see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化し、指定したホストの指定したポートに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-144">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and connects to the specified port on the specified host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-145">このコンス トラクターを作成する新しい<xref:System.Net.Sockets.TcpClient>同期接続しようと指定されたホスト名とポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-145">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number.</span></span> <span data-ttu-id="b5386-146">基になるサービス プロバイダーでは、最も適切なローカル IP アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="b5386-146">The underlying service provider will assign the most appropriate local IP address and port number.</span></span> <span data-ttu-id="b5386-147">`TcpClient` 接続するか失敗するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b5386-147">`TcpClient` will block until it either connects or fails.</span></span> <span data-ttu-id="b5386-148">このコンス トラクターの初期化、DNS ホスト名を解決および 1 つの便利な手順で接続することができます。</span><span class="sxs-lookup"><span data-stu-id="b5386-148">This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.</span></span>  
  
 <span data-ttu-id="b5386-149">IPv6 が有効になっている場合、<xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>メソッドが呼び出され、IPv6 の両方に解決されるホストに接続し、IPv4 アドレス、IPv6 のアドレスへの接続試行の IPv4 アドレスに実行する前。</span><span class="sxs-lookup"><span data-stu-id="b5386-149">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="b5386-150">これには、ホストが IPv6 アドレスでリッスンしていない場合、接続の確立に時間が遅延の影響があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-150">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-151">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-151">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-152">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-152">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-153">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-153">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-154">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-154">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-155">次のコード例は、のインスタンスを作成する方法を示します、<xref:System.Net.Sockets.TcpClient>クラスのホスト名を使用して、ポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-155">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a host name and port number.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-156"><paramref name="hostname" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-156">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-157"><paramref name="port" /> パラメーターが <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間にありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-157">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-158">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-158">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="Overload:System.Net.Sockets.TcpClient.#ctor" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.TcpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-159">接続されたかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-159">Gets or sets a value that indicates whether a connection has been made.</span></span></summary>
        <value><span data-ttu-id="b5386-160">接続されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-160"><see langword="true" /> if the connection has been made; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-161">派生したクラス<xref:System.Net.Sockets.TcpClient>接続試行が成功したかどうかを判断するこのプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="b5386-161">Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded.</span></span> <span data-ttu-id="b5386-162">継続的な接続の状態を監視しません`TcpClient`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-162">It does not monitor the ongoing connection state of `TcpClient`.</span></span> <span data-ttu-id="b5386-163">リモート ホストは、接続を閉じた場合`Active`は更新されません。</span><span class="sxs-lookup"><span data-stu-id="b5386-163">If the remote host closes the connection, `Active` will not be updated.</span></span> <span data-ttu-id="b5386-164">派生する場合`TcpClient`使用して、接続状態に近い注意が必要な<xref:System.Net.Sockets.Socket.Connected%2A>のプロパティ、<xref:System.Net.Sockets.Socket>によって返される、<xref:System.Net.Sockets.TcpClient.Client%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-164">If you are deriving from `TcpClient` and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.Connected" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.TcpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-165">ネットワークから受信した、読み取り可能なデータ量を取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-165">Gets the amount of data that has been received from the network and is available to be read.</span></span></summary>
        <value><span data-ttu-id="b5386-166">ネットワークから受信した、読み取り可能なデータのバイト数。</span><span class="sxs-lookup"><span data-stu-id="b5386-166">The number of bytes of data received from the network and available to be read.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="b5386-167">`Available`プロパティが読み取り用のデータがキューに置かれたかどうかを決定する方法。</span><span class="sxs-lookup"><span data-stu-id="b5386-167">The `Available` property is a way to determine whether data is queued for reading.</span></span> <span data-ttu-id="b5386-168">データが使用可能な場合は、呼び出す<xref:System.Net.Sockets.NetworkStream.Read%2A>データを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-168">If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data.</span></span> <span data-ttu-id="b5386-169">使用可能なデータは、読み取り用のネットワーク バッファーにデータの総量がキューに登録します。</span><span class="sxs-lookup"><span data-stu-id="b5386-169">The available data is the total amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="b5386-170">場合は、ネットワーク バッファーにデータがキューにありません。 `Available` 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="b5386-170">If no data is queued in the network buffer, `Available` returns 0.</span></span>  
  
 <span data-ttu-id="b5386-171">リモート ホストがシャット ダウンまたは、接続を閉じる場合`Available`スローする可能性が、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-171">If the remote host shuts down or closes the connection, `Available` may throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="b5386-172">表示された場合、`SocketException`を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-172">If you receive a `SocketException`, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-173">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-173">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-174">次のコード例の使用を示しています、`Available`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-174">The following code example shows the use of the `Available` property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-175">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-175">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-176"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="b5386-176">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5386-177">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="b5386-177">Begins an asynchronous request for a remote host connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (address, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="b5386-178">リモート ホストの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-178">The <see cref="T:System.Net.IPAddress" /> of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-179">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-179">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="b5386-180">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b5386-180">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="b5386-181">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-181">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="b5386-182">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-182">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="b5386-183">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="b5386-183">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="b5386-184">リモート ホストは、<see cref="T:System.Net.IPAddress" /> とポート番号 (<see cref="T:System.Int32" />) で指定されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-184">The remote host is specified by an <see cref="T:System.Net.IPAddress" /> and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="b5386-185">非同期接続を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-185">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-186">非同期の`BeginConnect`操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.TcpClient.EndConnect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-186">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="b5386-187">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="b5386-187">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="b5386-188">操作が完了するまで、このメソッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="b5386-188">This method does not block until the operation completes.</span></span> <span data-ttu-id="b5386-189">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b5386-189">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="b5386-190">詳細については、非同期プログラミング モデルを使用して、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-190">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-191">次のコード例を作成、<xref:System.Net.Sockets.TcpClient>し、リモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-191">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-192"><paramref name="address" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-192">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-193">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-193">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-194"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="b5386-194">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="b5386-195">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="b5386-195">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-196">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="b5386-196">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : System.Net.IPAddress[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (addresses, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="b5386-197">リモート ホストを指定する 1 つ以上の <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-197">At least one <see cref="T:System.Net.IPAddress" /> that designates the remote hosts.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-198">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-198">The port number of the remote hosts.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="b5386-199">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b5386-199">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="b5386-200">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-200">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="b5386-201">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-201">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="b5386-202">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="b5386-202">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="b5386-203">リモート ホストは、<see cref="T:System.Net.IPAddress" /> 配列とポート番号 (<see cref="T:System.Int32" />) で指定されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-203">The remote host is specified by an <see cref="T:System.Net.IPAddress" /> array and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="b5386-204">非同期接続を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-204">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-205">非同期の`BeginConnect`操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.TcpClient.EndConnect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-205">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="b5386-206">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="b5386-206">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="b5386-207">操作が完了するまで、このメソッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="b5386-207">This method does not block until the operation completes.</span></span> <span data-ttu-id="b5386-208">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b5386-208">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="b5386-209">詳細については、非同期プログラミング モデルを使用して、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-209">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="b5386-210">このメソッドは通常の呼び出し後すぐに使用、<xref:System.Net.Dns.BeginGetHostAddresses%2A>メソッドで、複数の IP アドレスを 1 つのホストに戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="b5386-210">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-211">次のコード例を作成、<xref:System.Net.Sockets.TcpClient>し、リモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-211">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-212"><paramref name="addresses" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-212">The <paramref name="addresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-213">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-213">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-214"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="b5386-214">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="b5386-215">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="b5386-215">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-216">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="b5386-216">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginConnect : string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpClient.BeginConnect (host, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="b5386-217">リモート ホストの名前。</span><span class="sxs-lookup"><span data-stu-id="b5386-217">The name of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-218">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-218">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="b5386-219">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="b5386-219">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="b5386-220">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-220">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="b5386-221">このオブジェクトは、操作の完了時に <paramref name="requestCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-221">This object is passed to the <paramref name="requestCallback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="b5386-222">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="b5386-222">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="b5386-223">リモート ホストは、ホスト名 (<see cref="T:System.String" />) とポート番号 (<see cref="T:System.Int32" />) で指定されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-223">The remote host is specified by a host name (<see cref="T:System.String" />) and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="b5386-224">非同期接続を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-224">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-225">非同期の`BeginConnect`操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.TcpClient.EndConnect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-225">The asynchronous `BeginConnect` operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="b5386-226">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="b5386-226">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="b5386-227">操作が完了するまで、このメソッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="b5386-227">This method does not block until the operation completes.</span></span> <span data-ttu-id="b5386-228">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="b5386-228">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="b5386-229">詳細については、非同期プログラミング モデルを使用して、次を参照してください。 [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-229">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-230">次のコード例を作成、<xref:System.Net.Sockets.TcpClient>し、リモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-230">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-231"><paramref name="host" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-231">The <paramref name="host" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-232">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-232">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-233"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="b5386-233">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="b5386-234">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="b5386-234">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-235">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="b5386-235">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.TcpClient.Client" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-236">基になる <see cref="T:System.Net.Sockets.Socket" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-236">Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="b5386-237">基になるネットワーク <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-237">The underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-238"><xref:System.Net.Sockets.TcpClient> 作成、<xref:System.Net.Sockets.Socket>をネットワーク経由でデータを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-238"><xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network.</span></span> <span data-ttu-id="b5386-239">派生したクラス`TcpClient`このプロパティを取得または設定を使用できます`Socket`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-239">Classes deriving from `TcpClient` can use this property to get or set this `Socket`.</span></span> <span data-ttu-id="b5386-240">使用して、基になる`Socket`から返された`Client`が必要な場合にアクセスされる`TcpClient`を提供します。</span><span class="sxs-lookup"><span data-stu-id="b5386-240">Use the underlying `Socket` returned from `Client` if you require access beyond that which `TcpClient` provides.</span></span> <span data-ttu-id="b5386-241">使用することもできます`Client`を基になるかを設定する`Socket`既存`Socket`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-241">You can also use `Client` to set the underlying `Socket` to an existing `Socket`.</span></span> <span data-ttu-id="b5386-242">簡潔さを活用するために必要な場合に便利ですが考えられます`TcpClient`既存を使用して`Socket`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-242">This might be useful if you want to take advantage of the simplicity of `TcpClient` using a pre-existing `Socket`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-243">次のコード例は、の使用を示します、`Client`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-243">The following code example demonstrates the use of the `Client` property.</span></span> <span data-ttu-id="b5386-244">この例では、基になるの受信バッファー サイズで<xref:System.Net.Sockets.Socket>が変更されました。</span><span class="sxs-lookup"><span data-stu-id="b5386-244">In this example, the receive buffer size of the underlying <xref:System.Net.Sockets.Socket> is changed.</span></span>  
  
 [!code-csharp[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="tcpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5386-245">この <see cref="T:System.Net.Sockets.TcpClient" /> インスタンスを破棄し、基になる TCP 接続を終了するように要求します。</span><span class="sxs-lookup"><span data-stu-id="b5386-245">Disposes this <see cref="T:System.Net.Sockets.TcpClient" /> instance and requests that the underlying TCP connection be closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-246">`Close`メソッドが破棄済みのインスタンスをマークし、要求を関連付けられている<xref:System.Net.Sockets.Socket>TCP 接続を閉じます。</span><span class="sxs-lookup"><span data-stu-id="b5386-246">The `Close` method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection.</span></span> <span data-ttu-id="b5386-247">に基づいて、<xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティ、TCP 接続が開いたまましばらく後に、`Close`送信するデータが残っている場合、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-247">Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the `Close` method is called when data remains to be sent.</span></span> <span data-ttu-id="b5386-248">基になる接続の終了が完了したときに、通知はありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-248">There is no notification provided when the underlying connection has completed closing.</span></span>  
  
 <span data-ttu-id="b5386-249">このメソッドを呼び出すことが最終的に、関連付けられている終了`Socket`と関連付けられているも閉じられます<xref:System.Net.Sockets.NetworkStream>いずれかが作成された場合、データの送受信に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-249">Calling this method will eventually result in the close of the associated `Socket` and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-250">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-250">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-251">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-251">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-252">次のコード例は、終了を示します、<xref:System.Net.Sockets.TcpClient>呼び出すことによって、`Close`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-252">The following code example demonstrates closing a <xref:System.Net.Sockets.TcpClient> by calling the `Close` method.</span></span>  
  
 [!code-cpp[NCLTCPClientSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLTcpClientSync/CPP/tcpclient.cpp#1)]
 [!code-csharp[NCLTCPClientSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5386-253">指定されたホスト名とポート番号を使用してクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-253">Connects the client to a remote TCP host using the specified host name and port number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="tcpClient.Connect remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="b5386-254">接続先の <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-254">The <see cref="T:System.Net.IPEndPoint" /> to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="b5386-255">指定されたリモート ネットワーク エンドポイントを使用してリモート TCP ホストにクライアントを接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-255">Connects the client to a remote TCP host using the specified remote network endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-256">指定した同期のリモート ホスト接続を確立するには、このメソッドを呼び出す<xref:System.Net.IPEndPoint>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-256">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="b5386-257">呼び出す前に`Connect`のインスタンスを作成する必要があります、`IPEndPoint`クラス、IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="b5386-257">Before you call `Connect`, you must create an instance of the `IPEndPoint` class using an IP address and a port number.</span></span> <span data-ttu-id="b5386-258">これを使用して、`IPEndPoint`として、`remoteEP`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b5386-258">Use this `IPEndPoint` as the `remoteEP` parameter.</span></span> <span data-ttu-id="b5386-259">`Connect`メソッドが接続するか失敗するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b5386-259">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="b5386-260">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-260">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="b5386-261">これを使用して、`NetworkStream`データを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-261">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-262">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-262">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-263">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-263">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-264">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-264">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-265">詳細については、次を参照してください[.NET Framework のネットワークのトレース。](~/docs/framework/network-programming/network-tracing.md)</span><span class="sxs-lookup"><span data-stu-id="b5386-265">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-266">次のコード例では、<xref:System.Net.IPEndPoint>リモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-266">The following code example uses an <xref:System.Net.IPEndPoint> to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-267"><paramref name="remoteEp" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-267">The <paramref name="remoteEp" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-268">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-268">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-269"><see cref="T:System.Net.Sockets.TcpClient" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="b5386-269">The <see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="tcpClient.Connect (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="b5386-270">接続先ホストの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-270">The <see cref="T:System.Net.IPAddress" /> of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-271">接続先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-271">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="b5386-272">指定された IP アドレスとポート番号を使用してクライアントをリモート TCP ホストと接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-272">Connects the client to a remote TCP host using the specified IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-273">指定した同期のリモート ホスト接続を確立するには、このメソッドを呼び出す<xref:System.Net.IPAddress>とポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-273">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number.</span></span> <span data-ttu-id="b5386-274"><xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドが接続するか失敗するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b5386-274">The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails.</span></span> <span data-ttu-id="b5386-275">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-275">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="b5386-276">これを使用して、`NetworkStream`データを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-276">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-277">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-277">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-278">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-278">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-279">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-279">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-280">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-280">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-281">次のコード例では、リモート ホストに接続する IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="b5386-281">The following code example uses an IP Address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-282"><paramref name="address" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-282">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-283"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-283">The <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-284">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-284">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-285"><see cref="T:System.Net.Sockets.TcpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="b5386-285"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] ipAddresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] ipAddresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (ipAddresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ ipAddresses, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress[] * int -&gt; unit" Usage="tcpClient.Connect (ipAddresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipAddresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="ipAddresses"><span data-ttu-id="b5386-286">接続先ホストの <see cref="T:System.Net.IPAddress" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="b5386-286">The <see cref="T:System.Net.IPAddress" /> array of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-287">接続先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-287">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="b5386-288">指定された IP アドレスとポート番号を使用してクライアントをリモート TCP ホストと接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-288">Connects the client to a remote TCP host using the specified IP addresses and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-289">このメソッドは通常の呼び出し後すぐに使用、<xref:System.Net.Dns.BeginGetHostAddresses%2A>メソッドで、複数の IP アドレスを 1 つのホストに戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="b5386-289">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="b5386-290">呼び出す、`Connect`メソッドの配列で指定されたホストとの同期リモート ホスト接続を確立するために<xref:System.Net.IPAddress>要素とポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-290">Call the `Connect` method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number.</span></span> <span data-ttu-id="b5386-291">`Connect`メソッドが接続するか失敗するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b5386-291">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="b5386-292">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-292">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="b5386-293">これを使用して、`NetworkStream`データを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-293">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-294">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-294">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-295">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-295">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-296">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-296">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-297">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-297">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-298">次のコード例では、リモート ホストに接続する IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="b5386-298">The following code example uses an IP Address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#8)]
 [!code-csharp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-299"><paramref name="ipAddresses" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-299">The <paramref name="ipAddresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-300">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="b5386-300">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-301">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-301">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-302"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="b5386-302">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="b5386-303">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="b5386-303">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b5386-304">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> フラグまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> フラグを使用するソケットで有効です。</span><span class="sxs-lookup"><span data-stu-id="b5386-304">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="tcpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="b5386-305">接続先のリモート ホストの DNS 名。</span><span class="sxs-lookup"><span data-stu-id="b5386-305">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-306">接続先のリモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-306">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="b5386-307">指定されたホストの指定されたポートにクライアントを接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-307">Connects the client to the specified port on the specified host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-308">指定されたホスト名への同期のリモート ホスト接続を確立し、ポート番号には、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b5386-308">Call this method to establish a synchronous remote host connection to the specified host name and port number.</span></span> <span data-ttu-id="b5386-309">`Connect`メソッドが接続するか失敗するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b5386-309">The `Connect` method will block until it either connects or fails.</span></span> <span data-ttu-id="b5386-310">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-310">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="b5386-311">これを使用して、`NetworkStream`データを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-311">Use this  `NetworkStream` to send and receive data.</span></span>  
  
 <span data-ttu-id="b5386-312">IPv6 が有効になっている場合、`Connect(String, Int32)`メソッドが呼び出され、IPv6 の両方に解決されるホストに接続し、IPv4 アドレス、IPv6 のアドレスへの接続試行の IPv4 アドレスに実行する前。</span><span class="sxs-lookup"><span data-stu-id="b5386-312">If IPv6 is enabled and the `Connect(String, Int32)` method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="b5386-313">これには、ホストが IPv6 アドレスでリッスンしていない場合、接続の確立に時間が遅延の影響があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-313">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-314">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-314">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-315">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-315">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-316">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-316">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-317">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-317">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-318">次のコード例は、ホスト名とポート番号をリモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-318">The following code example uses the host name and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-319"><paramref name="hostname" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-319">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-320"><paramref name="port" /> パラメーターが <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間にありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-320">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-321">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-321">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-322"><see cref="T:System.Net.Sockets.TcpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="b5386-322"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b5386-323">指定されたホスト名とポート番号を使用して、非同期操作としてクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-323">Connects the client to a remote TCP host using the specified host name and port number as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (address As IPAddress, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::Net::IPAddress ^ address, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (address, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="b5386-324">接続先ホストの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-324">The <see cref="T:System.Net.IPAddress" /> of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-325">接続先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-325">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="b5386-326">指定された IP アドレスとポート番号を使用して、非同期操作としてクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-326">Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b5386-327">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-327">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-328">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="b5386-328">This operation will not block.</span></span> <span data-ttu-id="b5386-329">返されるを返します。<xref:System.Threading.Tasks.Task>オブジェクトは、TCP 接続が確立された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="b5386-329">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="b5386-330">このメソッドは、接続要求が進行中ですが、呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b5386-330">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="b5386-331">指定した同期のリモート ホスト接続を確立するには、このメソッドを呼び出す<xref:System.Net.IPAddress>と非同期操作として、ポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-331">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation.</span></span> <span data-ttu-id="b5386-332">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-332">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="b5386-333">これを使用して、`NetworkStream`データを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-333">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-334">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-334">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-335">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-335">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-336">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-336">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-337">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-337">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-338"><paramref name="address" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-338">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-339"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-339">The <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-340">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-340">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-341"><see cref="T:System.Net.Sockets.TcpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="b5386-341"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (addresses As IPAddress(), port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : System.Net.IPAddress[] * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (addresses, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="b5386-342">接続先ホストの <see cref="T:System.Net.IPAddress" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="b5386-342">The <see cref="T:System.Net.IPAddress" /> array of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-343">接続先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-343">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="b5386-344">指定された IP アドレスとポート番号を使用して、非同期操作としてクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-344">Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b5386-345">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-345">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-346">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="b5386-346">This operation will not block.</span></span> <span data-ttu-id="b5386-347">返されるを返します。<xref:System.Threading.Tasks.Task>オブジェクトは、TCP 接続が確立された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="b5386-347">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="b5386-348">このメソッドは、接続要求が進行中ですが、呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b5386-348">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="b5386-349">このメソッドは通常の呼び出し後すぐに使用、<xref:System.Net.Dns.BeginGetHostAddresses%2A>メソッドで、複数の IP アドレスを 1 つのホストに戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="b5386-349">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="b5386-350">配列で指定されたホストに同期のリモート ホスト接続を確立するには、このメソッドを呼び出す<xref:System.Net.IPAddress>要素と非同期操作として、ポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-350">Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation.</span></span> <span data-ttu-id="b5386-351">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-351">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="b5386-352">これを使用して、`NetworkStream`データを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-352">Use this `NetworkStream` to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-353">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-353">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-354">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-354">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-355">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-355">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-356">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-356">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-357"><paramref name="ipAddresses" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-357">The <paramref name="ipAddresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-358">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="b5386-358">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-359">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-359">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-360"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="b5386-360">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="b5386-361">コール スタックの上位にある呼び出し元が、要求された操作のアクセス許可を保持していません。</span><span class="sxs-lookup"><span data-stu-id="b5386-361">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b5386-362">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> フラグまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> フラグを使用するソケットで有効です。</span><span class="sxs-lookup"><span data-stu-id="b5386-362">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (host As String, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::String ^ host, int port);" />
      <MemberSignature Language="F#" Value="member this.ConnectAsync : string * int -&gt; System.Threading.Tasks.Task" Usage="tcpClient.ConnectAsync (host, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="port" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="b5386-363">接続先のリモート ホストの DNS 名。</span><span class="sxs-lookup"><span data-stu-id="b5386-363">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="b5386-364">接続先のリモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="b5386-364">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="b5386-365">非同期操作として、クライアントを、指定したホストの指定したポートに接続します。</span><span class="sxs-lookup"><span data-stu-id="b5386-365">Connects the client to the specified TCP port on the specified host as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="b5386-366">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-366">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-367">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="b5386-367">This operation will not block.</span></span> <span data-ttu-id="b5386-368">返されるを返します。<xref:System.Threading.Tasks.Task>オブジェクトは、TCP 接続が確立された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="b5386-368">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="b5386-369">このメソッドは、接続要求が進行中ですが、呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="b5386-369">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="b5386-370">指定されたホスト名への同期のリモート ホスト接続を確立し、ポート番号を非同期操作としては、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b5386-370">Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation.</span></span> <span data-ttu-id="b5386-371">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-371">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="b5386-372">これを使用して、`NetworkStream`データを送受信します。</span><span class="sxs-lookup"><span data-stu-id="b5386-372">Use this `NetworkStream` to send and receive data.</span></span>  
  
 <span data-ttu-id="b5386-373">IPv6 が有効になっている場合、<xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29>メソッドが呼び出され、IPv6 の両方に解決されるホストに接続し、IPv4 アドレス、IPv6 のアドレスへの接続試行の IPv4 アドレスに実行する前。</span><span class="sxs-lookup"><span data-stu-id="b5386-373">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="b5386-374">これには、ホストが IPv6 アドレスでリッスンしていない場合、接続の確立に時間が遅延の影響があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-374">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-375">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-375">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-376">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-376">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-377">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-377">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-378">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-378">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-379"><paramref name="hostname" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-379">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b5386-380"><paramref name="port" /> パラメーターが <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間にありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-380">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-381">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-381">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-382"><see cref="T:System.Net.Sockets.TcpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="b5386-382"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Connected : bool" Usage="System.Net.Sockets.TcpClient.Connected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-383"><see cref="T:System.Net.Sockets.Socket" /> の基になる <see cref="T:System.Net.Sockets.TcpClient" /> がリモート ホストに接続されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-383">Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket" /> for a <see cref="T:System.Net.Sockets.TcpClient" /> is connected to a remote host.</span></span></summary>
        <value><span data-ttu-id="b5386-384">最後に実行された操作の時点で、<see cref="P:System.Net.Sockets.TcpClient.Client" /> ソケットがリモート リソースに接続されていた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-384"><see langword="true" /> if the <see cref="P:System.Net.Sockets.TcpClient.Client" /> socket was connected to a remote resource as of the most recent operation; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-385">`Connected`プロパティの接続の状態の取得、<xref:System.Net.Sockets.TcpClient.Client%2A>最後の I/O 操作の時点でソケット。</span><span class="sxs-lookup"><span data-stu-id="b5386-385">The `Connected` property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation.</span></span> <span data-ttu-id="b5386-386">返す場合`false`、`Client`ソケットされたか、接続していない、または接続されていません。</span><span class="sxs-lookup"><span data-stu-id="b5386-386">When it returns `false`, the `Client` socket was either never connected, or is no longer connected.</span></span>  
  
 <span data-ttu-id="b5386-387">`Connected`プロパティには、最新の操作の時点で接続の状態のみが反映されます、送信または現在の状態を確認するメッセージを受信しようとする必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-387">Because the `Connected` property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state.</span></span> <span data-ttu-id="b5386-388">メッセージの送信が失敗した、このプロパティが返されなく`true`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-388">After the message send fails, this property no longer returns `true`.</span></span> <span data-ttu-id="b5386-389">この動作は仕様ことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="b5386-389">Note that this behavior is by design.</span></span> <span data-ttu-id="b5386-390">失われている可能性があります、接続のテスト送信/受信までの時間、接続の状態を確実にテストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="b5386-390">You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost.</span></span> <span data-ttu-id="b5386-391">コードは、ソケットが接続されているし、正常に送信の失敗のハンドルに想定してください。</span><span class="sxs-lookup"><span data-stu-id="b5386-391">Your code should assume the socket is connected, and gracefully handle failed transmissions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-392">次のコード例では、リモート エンドポイントに接続して、接続を検証します。</span><span class="sxs-lookup"><span data-stu-id="b5386-392">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="tcpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5386-393"><see cref="T:System.Net.Sockets.TcpClient" /> によって使用されているマネージド リソースおよびアンマネージド リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="b5386-393">Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="tcpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="b5386-394">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" /> に設定し、アンマネージド リソースだけを解放する場合は <see langword="false" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-394">Set to <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="b5386-395"><see cref="T:System.Net.Sockets.TcpClient" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="b5386-395">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-396">このメソッドは、パブリック`Dispose()`メソッドと<xref:System.Object.Finalize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-396">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="b5386-397">`Dispose()` このメソッドを呼び出す、`disposing`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-397">`Dispose()` invokes this method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="b5386-398">`Finalize` このメソッドを呼び出す`disposing`に設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-398">`Finalize` invokes this method with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="b5386-399">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Net.Sockets.TcpClient> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="b5386-399">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references.</span></span> <span data-ttu-id="b5386-400">これは呼び出すことによって、`Dispose()`参照される各オブジェクトのメソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-400">It does this by invoking the `Dispose()` method of each referenced object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-401">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-401">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-402">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-402">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="b5386-403">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="b5386-403">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="b5386-404"><see langword="Dispose(Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-404">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="b5386-405">実装する方法についての詳細は<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-405">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="b5386-406">詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))します。</span><span class="sxs-lookup"><span data-stu-id="b5386-406">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndConnect : IAsyncResult -&gt; unit" Usage="tcpClient.EndConnect asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="b5386-407"><see cref="T:System.IAsyncResult" /> の呼び出しによって返される <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="b5386-407">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" />.</span></span></param>
        <summary><span data-ttu-id="b5386-408">保留中の非同期接続の試行を終了します。</span><span class="sxs-lookup"><span data-stu-id="b5386-408">Ends a pending asynchronous connection attempt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-409">このメソッドはブロックするまで、操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="b5386-409">This method blocks until the operation is complete.</span></span> <span data-ttu-id="b5386-410">この操作を同期的に実行するには、使用、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-410">To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-411">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-411">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-412">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-412">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-413">次のコード例では、非同期接続の試行を終了します。</span><span class="sxs-lookup"><span data-stu-id="b5386-413">The following code example ends the asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b5386-414"><paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-414">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b5386-415"><see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> メソッドへの呼び出しで <paramref name="asyncResult" /> パラメーターが返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="b5386-415">The <paramref name="asyncResult" /> parameter was not returned by a call to a <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5386-416"><see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> メソッドは、非同期接続のために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="b5386-416">The <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> method was previously called for the asynchronous connection.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-417"><see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-417">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-418">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="b5386-418">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-419"><see cref="T:System.Boolean" /> で 1 つのクライアントだけがポートを使用できるかどうかを指定する <see cref="T:System.Net.Sockets.TcpClient" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-419">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpClient" /> allows only one client to use a port.</span></span></summary>
        <value><span data-ttu-id="b5386-420"><see cref="T:System.Net.Sockets.TcpClient" /> で、1 つのクライアントだけが特定のポートを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-420"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpClient" /> allows only one client to use a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b5386-421">既定値は、Windows Server 2003 および Windows XP Service Pack 2 以降では <see langword="true" /> で、その他のすべてのバージョンでは <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-421">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-422">既定では、複数のクライアントが特定のポートを使用できます。ただし、クライアントの 1 つだけでは、ポートに送信されるネットワーク トラフィックの操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="b5386-422">By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="b5386-423">使用することができます、`ExclusiveAddressUse`プロパティを複数のクライアントが特定のポートを使用するを防ぐためにします。</span><span class="sxs-lookup"><span data-stu-id="b5386-423">You can use the `ExclusiveAddressUse` property to prevent multiple clients from using a specific port.</span></span>  
  
 <span data-ttu-id="b5386-424">基になるソケット クライアント ポートにバインドする前に、このプロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-424">This property must be set before the underlying socket is bound to a client port.</span></span> <span data-ttu-id="b5386-425">呼び出す場合<xref:System.Net.Sockets.TcpClient.Connect%2A>、 <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>、 <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>、または<xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>、メソッドの副作用として、クライアントのポートがバインドされているし、後で設定することはできません、`ExclusiveAddressUse`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-425">If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the `ExclusiveAddressUse` property.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="b5386-426">次のコード例を作成、<xref:System.Net.Sockets.TcpClient>取得しの値を設定し、`ExclusiveAddressUse`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-426">The following code example creates a <xref:System.Net.Sockets.TcpClient> and gets and sets the value of the `ExclusiveAddressUse` property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-427">基になるソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-427">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-428">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="b5386-428">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5386-429"><see cref="T:System.Net.Sockets.TcpClient" /> クラスによって使用されていたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="b5386-429">Frees resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-430">このメソッドは、<xref:System.Object.Finalize%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="b5386-430">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b5386-431">アプリケーション コードは、このメソッドを呼び出さないでください。オブジェクトの`Finalize`への呼び出しによって、ガベージ コレクターによって終了処理が無効になっている場合を除き、ガベージ コレクション中にメソッドが自動的に起動、<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-431">Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b5386-432"><xref:System.Net.Sockets.TcpClient>クラスのファイナライザーが TCP 接続を閉じるし、に関連付けられているすべてのマネージ リソースも解放、`TcpClient`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-432">The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the `TcpClient`.</span></span> <span data-ttu-id="b5386-433">これらのリソースは、基になる<xref:System.Net.Sockets.Socket>、リモート ホストへの接続に使用される、<xref:System.Net.Sockets.NetworkStream>データを送受信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="b5386-433">These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data.</span></span> <span data-ttu-id="b5386-434">ファイナライザーは、すべてのアンマネージ リソースを解放しません。</span><span class="sxs-lookup"><span data-stu-id="b5386-434">The finalizer does not release any unmanaged resources.</span></span>  
  
 <span data-ttu-id="b5386-435">詳細については、次を参照してください。 [Finalize メソッドおよびデストラクター](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100))、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)、および[Finalize メソッドをオーバーライドする](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))します。</span><span class="sxs-lookup"><span data-stu-id="b5386-435">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
        <related type="Article" href="~/docs/standard/garbage-collection/index.md"><span data-ttu-id="b5386-436">ガベージ コレクション</span><span class="sxs-lookup"><span data-stu-id="b5386-436">Garbage Collection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.NetworkStream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.NetworkStream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As NetworkStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::NetworkStream ^ GetStream();" />
      <MemberSignature Language="F#" Value="member this.GetStream : unit -&gt; System.Net.Sockets.NetworkStream" Usage="tcpClient.GetStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.NetworkStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5386-437">データの送受信に使用する <see cref="T:System.Net.Sockets.NetworkStream" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="b5386-437">Returns the <see cref="T:System.Net.Sockets.NetworkStream" /> used to send and receive data.</span></span></summary>
        <returns><span data-ttu-id="b5386-438">基になる <see cref="T:System.Net.Sockets.NetworkStream" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-438">The underlying <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="b5386-439">`GetStream`メソッドを返します。 を<xref:System.Net.Sockets.NetworkStream>データの送受信に使用することできます。</span><span class="sxs-lookup"><span data-stu-id="b5386-439">The `GetStream` method returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data.</span></span> <span data-ttu-id="b5386-440">`NetworkStream`クラスから継承、<xref:System.IO.Stream>クラス、メソッドとネットワーク通信を容易にするためのプロパティの豊富なコレクションを提供します。</span><span class="sxs-lookup"><span data-stu-id="b5386-440">The `NetworkStream` class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.</span></span>  
  
 <span data-ttu-id="b5386-441">呼び出す必要があります、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッド、または<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドがスローされます、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-441">You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="b5386-442">取得した後、`NetworkStream`を呼び出し、<xref:System.Net.Sockets.NetworkStream.Write%2A>リモート ホストにデータを送信する方法。</span><span class="sxs-lookup"><span data-stu-id="b5386-442">After you have obtained the `NetworkStream`, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host.</span></span> <span data-ttu-id="b5386-443">呼び出す、<xref:System.Net.Sockets.NetworkStream.Read%2A>リモート ホストから着信するデータを受信するメソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-443">Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host.</span></span> <span data-ttu-id="b5386-444">これら両方のメソッドは、指定された操作が実行されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="b5386-444">Both of these methods block until the specified operation is performed.</span></span> <span data-ttu-id="b5386-445">チェックして、読み取り操作でのブロッキングを回避できます、<xref:System.Net.Sockets.NetworkStream.DataAvailable%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-445">You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property.</span></span> <span data-ttu-id="b5386-446">A`true`値は、データがリモート ホストからのお知らせし、は読み取り可能なことを意味します。</span><span class="sxs-lookup"><span data-stu-id="b5386-446">A `true` value means that data has arrived from the remote host and is available for reading.</span></span> <span data-ttu-id="b5386-447">この場合、<xref:System.Net.Sockets.NetworkStream.Read%2A>すぐに完了することが保証されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-447">In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately.</span></span> <span data-ttu-id="b5386-448">リモート ホストがシャット ダウン、接続<xref:System.Net.Sockets.NetworkStream.Read%2A>ですぐに 0 バイトが返されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-448">If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-449">閉じる必要があります、`NetworkStream`を介してデータを送受信することができます。</span><span class="sxs-lookup"><span data-stu-id="b5386-449">You must close the `NetworkStream` when you are through sending and receiving data.</span></span> <span data-ttu-id="b5386-450">閉じる<xref:System.Net.Sockets.TcpClient>によって解放されない、`NetworkStream`します。</span><span class="sxs-lookup"><span data-stu-id="b5386-450">Closing <xref:System.Net.Sockets.TcpClient> does not release the `NetworkStream`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-451">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-451">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="b5386-452">このコードを取得した後を参照することができます、 [Windows Sockets version 2 API エラー コード](/windows/desktop/winsock/windows-sockets-error-codes-2)エラーの詳細な説明のドキュメント。</span><span class="sxs-lookup"><span data-stu-id="b5386-452">After you have obtained this code, you can refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b5386-453">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="b5386-453">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="b5386-454">詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。</span><span class="sxs-lookup"><span data-stu-id="b5386-454">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-455">次のコード例では`GetStream`、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-455">The following code example uses `GetStream` to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="b5386-456">取得した後、<xref:System.Net.Sockets.NetworkStream>を使用して送受信してその<xref:System.Net.Sockets.NetworkStream.Write%2A>と<xref:System.Net.Sockets.NetworkStream.Read%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-456">After obtaining the <xref:System.Net.Sockets.NetworkStream>, it sends and receives using its <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#14)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#14)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b5386-457"><see cref="T:System.Net.Sockets.TcpClient" /> がリモート ホストに接続されていません。</span><span class="sxs-lookup"><span data-stu-id="b5386-457">The <see cref="T:System.Net.Sockets.TcpClient" /> is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b5386-458"><see cref="T:System.Net.Sockets.TcpClient" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="b5386-458">The <see cref="T:System.Net.Sockets.TcpClient" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LingerState : System.Net.Sockets.LingerOption with get, set" Usage="System.Net.Sockets.TcpClient.LingerState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-459">関連付けられているソケットの待機状態に関する情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-459">Gets or sets information about the linger state of the associated socket.</span></span></summary>
        <value><span data-ttu-id="b5386-460"><see cref="T:System.Net.Sockets.LingerOption" />。</span><span class="sxs-lookup"><span data-stu-id="b5386-460">A <see cref="T:System.Net.Sockets.LingerOption" />.</span></span> <span data-ttu-id="b5386-461">既定では、接続の待機は無効です。</span><span class="sxs-lookup"><span data-stu-id="b5386-461">By default, lingering is disabled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-462">`LingerState`プロパティの変更方法<xref:System.Net.Sockets.Socket.Close%2A>メソッドの動作はします。</span><span class="sxs-lookup"><span data-stu-id="b5386-462">The `LingerState` property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves.</span></span> <span data-ttu-id="b5386-463">このプロパティ セットを接続をリセットして Winsock によって条件を変更するとします。</span><span class="sxs-lookup"><span data-stu-id="b5386-463">This property when set modifies the conditions under which the connection can be reset by Winsock.</span></span> <span data-ttu-id="b5386-464">接続のリセットは、IP プロトコルの動作に基づいて引き続き発生します。</span><span class="sxs-lookup"><span data-stu-id="b5386-464">Connection resets can still occur based on the IP protocol behavior.</span></span>  
  
 <span data-ttu-id="b5386-465">このプロパティは、TCP 接続を開いたまま呼び出しの後に時間の長さを制御<xref:System.Net.Sockets.TcpClient.Close%2A>データが送信するのには残ります。</span><span class="sxs-lookup"><span data-stu-id="b5386-465">This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent.</span></span> <span data-ttu-id="b5386-466">呼び出すと、<xref:System.Net.Sockets.NetworkStream.Write%2A>メソッド、データは送信のネットワーク バッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-466">When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer.</span></span> <span data-ttu-id="b5386-467">このプロパティは、前に、リモート ホストにこのデータを送信することを使用できます、<xref:System.Net.Sockets.TcpClient.Close%2A>メソッドは、接続を切断します。</span><span class="sxs-lookup"><span data-stu-id="b5386-467">This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.</span></span>  
  
 <span data-ttu-id="b5386-468">接続を維持できるように、作成、 <xref:System.Net.Sockets.LingerOption> 、目的の値を格納しているインスタンスし、設定、`LingerState`プロパティをこのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="b5386-468">To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the `LingerState` property to this instance.</span></span>  
  
 <span data-ttu-id="b5386-469">次の表の動作、<xref:System.Net.Sockets.TcpClient.Close%2A>メソッドの使用できる値について、<xref:System.Net.Sockets.LingerOption.Enabled%2A>プロパティと<xref:System.Net.Sockets.LingerOption.LingerTime%2A>にプロパティが格納されている、`LingerState`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-469">The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the `LingerState` property.</span></span>  
  
|<span data-ttu-id="b5386-470">LingerState.Enabled</span><span class="sxs-lookup"><span data-stu-id="b5386-470">LingerState.Enabled</span></span>|<span data-ttu-id="b5386-471">LingerState.LingerTime</span><span class="sxs-lookup"><span data-stu-id="b5386-471">LingerState.LingerTime</span></span>|<span data-ttu-id="b5386-472">動作</span><span class="sxs-lookup"><span data-stu-id="b5386-472">Behavior</span></span>|  
|-------------------------|----------------------------|--------------|  
|<span data-ttu-id="b5386-473">`false` (無効)、既定値</span><span class="sxs-lookup"><span data-stu-id="b5386-473">`false` (disabled), the default value</span></span>|<span data-ttu-id="b5386-474">タイムアウトが適用可能で、ない (既定値)。</span><span class="sxs-lookup"><span data-stu-id="b5386-474">The time-out is not applicable, (default).</span></span>|<span data-ttu-id="b5386-475">既定の IP プロトコル タイムアウトの期限が切れるまで、保留中のデータ送信を試みます。</span><span class="sxs-lookup"><span data-stu-id="b5386-475">Attempts to send pending data until the default IP protocol time-out expires.</span></span>|  
|<span data-ttu-id="b5386-476">`true` (有効)</span><span class="sxs-lookup"><span data-stu-id="b5386-476">`true` (enabled)</span></span>|<span data-ttu-id="b5386-477">0 以外のタイムアウト</span><span class="sxs-lookup"><span data-stu-id="b5386-477">A nonzero time-out</span></span>|<span data-ttu-id="b5386-478">指定したタイムアウトが経過すると、失敗した場合、Winsock 接続をリセットするまで、保留中のデータ送信を試行します。</span><span class="sxs-lookup"><span data-stu-id="b5386-478">Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.</span></span>|  
|<span data-ttu-id="b5386-479">`true` (有効)</span><span class="sxs-lookup"><span data-stu-id="b5386-479">`true` (enabled)</span></span>|<span data-ttu-id="b5386-480">0 のタイムアウト。</span><span class="sxs-lookup"><span data-stu-id="b5386-480">A zero timeout.</span></span>|<span data-ttu-id="b5386-481">保留中のデータと Winsock のリセットの接続を破棄します。</span><span class="sxs-lookup"><span data-stu-id="b5386-481">Discards any pending data and Winsock resets the connection.</span></span>|  
  
 <span data-ttu-id="b5386-482">IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。</span><span class="sxs-lookup"><span data-stu-id="b5386-482">The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.</span></span> <span data-ttu-id="b5386-483">ほとんどの場合は、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上です。</span><span class="sxs-lookup"><span data-stu-id="b5386-483">In most cases, the time-out computed by the stack is more relevant than one defined by an application.</span></span> <span data-ttu-id="b5386-484">これは、ソケットの既定の動作と、`LingerState`プロパティは設定されません。</span><span class="sxs-lookup"><span data-stu-id="b5386-484">This is the default behavior for a socket when the `LingerState` property is not set.</span></span>  
  
 <span data-ttu-id="b5386-485">ときに、<xref:System.Net.Sockets.LingerOption.LingerTime%2A>にプロパティが格納されている、`LingerState`プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定は、既定の IP プロトコル タイムアウトの表示およびオーバーライドはまだ適用されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-485">When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the `LingerState` property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-486">次のコード例のセットを取得しますが、ソケットの待機時間。</span><span class="sxs-lookup"><span data-stu-id="b5386-486">The following code example sets and gets the sockets linger time.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#12)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#12)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.LingerOption" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NoDelay : bool with get, set" Usage="System.Net.Sockets.TcpClient.NoDelay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-487">送信バッファーまたは受信バッファーが設定されているサイズを超えていない場合に、遅延を無効にする値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-487">Gets or sets a value that disables a delay when send or receive buffers are not full.</span></span></summary>
        <value><span data-ttu-id="b5386-488"><see langword="true" /> 場合は、遅延が無効にします。それ以外の場合、<see langword="false" />します。</span><span class="sxs-lookup"><span data-stu-id="b5386-488"><see langword="true" /> if the delay is disabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b5386-489">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="b5386-489">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-490">ときに`NoDelay`は`false`、<xref:System.Net.Sockets.TcpClient>までを送信しませんパケット、ネットワーク経由で大量の送信データを収集しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-490">When `NoDelay` is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data.</span></span> <span data-ttu-id="b5386-491">により TCP セグメントのオーバーヘッドの量、少量のデータを送信する効果がありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-491">Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient.</span></span> <span data-ttu-id="b5386-492">ただし、状況は非常に少量のデータを送信、または送信する各パケットからの迅速な応答を期待する必要がある存在します。</span><span class="sxs-lookup"><span data-stu-id="b5386-492">However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send.</span></span> <span data-ttu-id="b5386-493">決定は、ネットワーク効率は、アプリケーションの要件との相対的な重要度を比較検討する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-493">Your decision should weigh the relative importance of network efficiency versus application requirements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-494">次のコード例には、遅延が無効にします。</span><span class="sxs-lookup"><span data-stu-id="b5386-494">The following code example disables the delay.</span></span> <span data-ttu-id="b5386-495">値をチェックし、`NoDelay`プロパティが正常に設定されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="b5386-495">It then checks the value of `NoDelay` to verify that the property was successfully set.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveBufferSize : int with get, set" Usage="System.Net.Sockets.TcpClient.ReceiveBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-496">受信バッファーのサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-496">Gets or sets the size of the receive buffer.</span></span></summary>
        <value><span data-ttu-id="b5386-497">受信バッファー サイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="b5386-497">The size of the receive buffer, in bytes.</span></span> <span data-ttu-id="b5386-498">既定値は 8192 バイトです。</span><span class="sxs-lookup"><span data-stu-id="b5386-498">The default value is 8192 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-499">`ReceiveBufferSize`プロパティを取得または設定のそれぞれの読み取り操作の受信バッファーに格納することを予期しているバイト数。</span><span class="sxs-lookup"><span data-stu-id="b5386-499">The `ReceiveBufferSize` property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation.</span></span> <span data-ttu-id="b5386-500">このプロパティは、実際には、受信データに割り当てられたネットワーク バッファー領域を操作します。</span><span class="sxs-lookup"><span data-stu-id="b5386-500">This property actually manipulates the network buffer space allocated for receiving incoming data.</span></span>  
  
 <span data-ttu-id="b5386-501">ネットワークのバッファーを呼び出すときに必要なデータが使用可能なをするアプリケーション バッファーと少なくとも同にする必要があります、<xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-501">Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b5386-502">使用して、<xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A>このサイズを設定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-502">Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size.</span></span> <span data-ttu-id="b5386-503">アプリケーションが大量のデータを受信する場合、`Read`メソッド非常に大規模なアプリケーション バッファー。</span><span class="sxs-lookup"><span data-stu-id="b5386-503">If your application will be receiving bulk data, you should pass the `Read` method a very large application buffer.</span></span>  
  
 <span data-ttu-id="b5386-504">要求のネットワーク バッファーがデータの量よりも小さい場合、`Read`メソッド、データを 1 つの読み取り操作の必要な量を取得できません。</span><span class="sxs-lookup"><span data-stu-id="b5386-504">If the network buffer is smaller than the amount of data you request in the `Read` method, you will not be able to retrieve the desired amount of data in one read operation.</span></span> <span data-ttu-id="b5386-505">追加の呼び出しのオーバーヘッドが発生これ、`Read`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-505">This incurs the overhead of additional calls to the `Read` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-506">次のコード例では、設定し、受信バッファー サイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-506">The following code example sets and gets the receive buffer size.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="b5386-507">バッファー サイズの設定中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b5386-507">An error occurred when setting the buffer size.</span></span>  
  
<span data-ttu-id="b5386-508">または</span><span class="sxs-lookup"><span data-stu-id="b5386-508">-or-</span></span> 
<span data-ttu-id="b5386-509">.NET Compact Framework アプリケーションでは、このプロパティは設定できません。</span><span class="sxs-lookup"><span data-stu-id="b5386-509">In .NET Compact Framework applications, you cannot set this property.</span></span> <span data-ttu-id="b5386-510">代替手段については、「解説」の「プラットフォームメモ」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b5386-510">For a workaround, see the Platform Note in Remarks.</span></span></exception>
        <altmember cref="P:System.Net.Sockets.TcpClient.SendBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReceiveTimeout : int with get, set" Usage="System.Net.Sockets.TcpClient.ReceiveTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-511">読み取り操作が開始された後に <see cref="T:System.Net.Sockets.TcpClient" /> がデータの受信を待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-511">Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait to receive data once a read operation is initiated.</span></span></summary>
        <value><span data-ttu-id="b5386-512">接続のタイムアウト値 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="b5386-512">The time-out value of the connection in milliseconds.</span></span> <span data-ttu-id="b5386-513">既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="b5386-513">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-514">`ReceiveTimeout`プロパティは、時間の量を決定する、<xref:System.Net.Sockets.NetworkStream.Read%2A>メソッドがデータを受信できるまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b5386-514">The `ReceiveTimeout` property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data.</span></span> <span data-ttu-id="b5386-515">この時間はミリ秒単位で測定されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-515">This time is measured in milliseconds.</span></span> <span data-ttu-id="b5386-516">前にタイムアウトに達すると`Read`が正常に完了すると、<xref:System.Net.Sockets.TcpClient>スロー、<xref:System.IO.IOException>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-516">If the time-out expires before `Read` successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>.</span></span> <span data-ttu-id="b5386-517">既定では、タイムアウトはありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-517">There is no time-out by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-518">次のコード例では、設定し、受信のタイムアウトを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-518">The following code example sets and gets the receive time out.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.SendTimeout" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendBufferSize : int with get, set" Usage="System.Net.Sockets.TcpClient.SendBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-519">送信バッファーのサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-519">Gets or sets the size of the send buffer.</span></span></summary>
        <value><span data-ttu-id="b5386-520">送信バッファー サイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="b5386-520">The size of the send buffer, in bytes.</span></span> <span data-ttu-id="b5386-521">既定値は 8192 バイトです。</span><span class="sxs-lookup"><span data-stu-id="b5386-521">The default value is 8192 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-522">`SendBufferSize`プロパティを取得または設定への各呼び出しの送信を想定しているバイト数、<xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-522">The `SendBufferSize` property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="b5386-523">このプロパティは、実際には、送信操作に割り当てられたネットワーク バッファー領域を操作します。</span><span class="sxs-lookup"><span data-stu-id="b5386-523">This property actually manipulates the network buffer space allocated for send operation.</span></span>  
  
 <span data-ttu-id="b5386-524">必要なデータが格納され 1 つの操作で送信されることを確認するアプリケーション バッファー サイズ以上で、ネットワーク バッファー必要があります。</span><span class="sxs-lookup"><span data-stu-id="b5386-524">Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation.</span></span> <span data-ttu-id="b5386-525">使用して、<xref:System.Net.Sockets.TcpClient.SendBufferSize%2A>このサイズを設定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="b5386-525">Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size.</span></span> <span data-ttu-id="b5386-526">アプリケーションが大量のデータを送信する場合、`Write`メソッド非常に大規模なアプリケーション バッファー。</span><span class="sxs-lookup"><span data-stu-id="b5386-526">If your application will be sending bulk data, you should pass the `Write` method a very large application buffer.</span></span>  
  
 <span data-ttu-id="b5386-527">指定したネットワークのバッファーがデータの量よりも小さい場合、`Write`メソッドをいくつかのネットワークに加えたすべての呼び出しの操作が実行されますが送信、`Write`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-527">If the network buffer is smaller than the amount of data you provide the `Write` method, several network send operations will be performed for every call you make to the `Write` method.</span></span> <span data-ttu-id="b5386-528">ネットワークのバッファーがアプリケーション バッファー サイズ以上であることを確認して、データ スループットを実現できます。</span><span class="sxs-lookup"><span data-stu-id="b5386-528">You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-529">次のコード例では、設定し、送信バッファーのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="b5386-529">The following code example sets and gets the send buffer size.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.SendTimeout : int with get, set" Usage="System.Net.Sockets.TcpClient.SendTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b5386-530">送信操作が正常に完了するのを <see cref="T:System.Net.Sockets.TcpClient" /> が待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="b5386-530">Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait for a send operation to complete successfully.</span></span></summary>
        <value><span data-ttu-id="b5386-531">ミリ秒単位の送信タイムアウト値。</span><span class="sxs-lookup"><span data-stu-id="b5386-531">The send time-out value, in milliseconds.</span></span> <span data-ttu-id="b5386-532">既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="b5386-532">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b5386-533">`SendTimeout`プロパティは、時間の量を決定する、<xref:System.Net.Sockets.Socket.Send%2A>が正常に完了することになるまで、メソッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="b5386-533">The `SendTimeout` property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully.</span></span> <span data-ttu-id="b5386-534">この時間はミリ秒単位で測定されます。</span><span class="sxs-lookup"><span data-stu-id="b5386-534">This time is measured in milliseconds.</span></span>  
  
 <span data-ttu-id="b5386-535">呼び出した後、<xref:System.Net.Sockets.NetworkStream.Write%2A>メソッドは、基になる<xref:System.Net.Sockets.Socket>実際には、ホストに送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="b5386-535">After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host.</span></span> <span data-ttu-id="b5386-536">`SendTimeout`プロパティは、時間数を決定します。、<xref:System.Net.Sockets.TcpClient>返されるバイト数を受け取る前に待機します。</span><span class="sxs-lookup"><span data-stu-id="b5386-536">The `SendTimeout` property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned.</span></span> <span data-ttu-id="b5386-537">前にタイムアウトに達すると、`Send`メソッドが正常に完了すると、`TcpClient`がスローされます、<xref:System.Net.Sockets.SocketException>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-537">If the time-out expires before the `Send` method successfully completes, `TcpClient` will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="b5386-538">既定では、タイムアウトはありません。</span><span class="sxs-lookup"><span data-stu-id="b5386-538">There is no time-out by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b5386-539">設定および取得する次のコード例、`SendTimeout`値。</span><span class="sxs-lookup"><span data-stu-id="b5386-539">The following code example sets and gets the `SendTimeout` value.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b5386-540"><see cref="T:System.Net.Sockets.TcpClient" /> によって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="b5386-540">Releases all resources used by the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="b5386-541">完了したら IDisposable.Dispose の呼び出しを使用して、<xref:System.Net.Sockets.TcpClient>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-541">Call IDisposable.Dispose when you are finished using the <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="b5386-542">IDisposable.Dispose メソッドのまま、<xref:System.Net.Sockets.TcpClient>を使用できない状態です。</span><span class="sxs-lookup"><span data-stu-id="b5386-542">The IDisposable.Dispose method leaves the <xref:System.Net.Sockets.TcpClient> in an unusable state.</span></span> <span data-ttu-id="b5386-543">IDisposable.Dispose を呼び出して後ですべての参照を解放する必要があります、<xref:System.Net.Sockets.TcpClient>ガベージ コレクターがメモリをクリアできるようにする、<xref:System.Net.Sockets.TcpClient>によって占有されていた。</span><span class="sxs-lookup"><span data-stu-id="b5386-543">After calling IDisposable.Dispose, you must release all references to the <xref:System.Net.Sockets.TcpClient> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.TcpClient> was occupying.</span></span> <span data-ttu-id="b5386-544">詳細については、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)および[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b5386-544">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE] 
> <span data-ttu-id="b5386-545">最後の参照を解放する前に常に IDisposable.Dispose を呼び出して、<xref:System.Net.Sockets.TcpClient>します。</span><span class="sxs-lookup"><span data-stu-id="b5386-545">Always call IDisposable.Dispose before you release your last reference to the <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="b5386-546">ガベージ コレクター呼び出すまではそれ以外の場合、するを使用しているリソースが解放されません、<xref:System.Net.Sockets.TcpClient>オブジェクトの**Finalize**メソッド。</span><span class="sxs-lookup"><span data-stu-id="b5386-546">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.TcpClient> object's **Finalize** method.</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>