<Type Name="TcpClient" FullName="System.Net.Sockets.TcpClient">
  <TypeSignature Language="C#" Value="public class TcpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpClient : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="5df75-101">TCP ネットワーク サービス用のクライアント接続を提供します。</span><span class="sxs-lookup"><span data-stu-id="5df75-101">Provides client connections for TCP network services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-102"><xref:System.Net.Sockets.TcpClient>クラスは、送信する、接続するための簡単な方法を提供し、受信同期ブロッキング モードでネットワーク経由でデータをストリーム配信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-102">The <xref:System.Net.Sockets.TcpClient> class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.</span></span>  
  
 <span data-ttu-id="5df75-103">順序で<xref:System.Net.Sockets.TcpClient>接続、データを交換して、<xref:System.Net.Sockets.TcpListener>または<xref:System.Net.Sockets.Socket>、TCP で作成された<xref:System.Net.Sockets.ProtocolType>受信接続要求をリッスンしている必要があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-103">In order for <xref:System.Net.Sockets.TcpClient> to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests.</span></span> <span data-ttu-id="5df75-104">次の 2 つの方法のいずれかで、このリスナーに接続できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-104">You can connect to this listener in one of the following two ways:</span></span>  
  
-   <span data-ttu-id="5df75-105">作成、<xref:System.Net.Sockets.TcpClient>使用可能な 3 つの 1 つを呼び出すと<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-105">Create a <xref:System.Net.Sockets.TcpClient> and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods.</span></span>  
  
-   <span data-ttu-id="5df75-106">作成、<xref:System.Net.Sockets.TcpClient>ホスト名を使用して、リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-106">Create a <xref:System.Net.Sockets.TcpClient> using the host name and port number of the remote host.</span></span> <span data-ttu-id="5df75-107">このコンス トラクターは、接続を自動的に試行します。</span><span class="sxs-lookup"><span data-stu-id="5df75-107">This constructor will automatically attempt a connection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-108">同期ブロック モードでコネクションレス データグラムを送信する場合を使用して、<xref:System.Net.Sockets.UdpClient>クラスです。</span><span class="sxs-lookup"><span data-stu-id="5df75-108">If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-109">次のコード例では確立、<xref:System.Net.Sockets.TcpClient>接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-109">The following code example establishes a <xref:System.Net.Sockets.TcpClient> connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CPP/tcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CS/tcpclient.cs#1)]
 [!code-vb[System.Net.Sockets.TcpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/VB/tcpclient.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="5df75-110">発信接続を確立するか、受信要求を受け入れる権限です。</span><span class="sxs-lookup"><span data-stu-id="5df75-110">Permission to establish an outgoing connection or accept an incoming request.</span></span></permission>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="5df75-111">データを送受信するを使用して、<see cref="M:System.Net.Sockets.TcpClient.GetStream" />を取得するメソッド、<see cref="T:System.Net.Sockets.NetworkStream" />です。</span><span class="sxs-lookup"><span data-stu-id="5df75-111">To send and receive data, use the <see cref="M:System.Net.Sockets.TcpClient.GetStream" /> method to obtain a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span> <span data-ttu-id="5df75-112">呼び出す、<see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />と<see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />のメソッド、<see cref="T:System.Net.Sockets.NetworkStream" />を送信し、リモート ホストでデータを受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-112">Call the <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" /> methods of the <see cref="T:System.Net.Sockets.NetworkStream" /> to send and receive data with the remote host.</span></span> <span data-ttu-id="5df75-113">使用して、<see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />に関連付けられているすべてのリソースを解放するメソッド、<see cref="T:System.Net.Sockets.TcpClient" />です。</span><span class="sxs-lookup"><span data-stu-id="5df75-113">Use the <see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" /> method to release all resources associated with the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></para>
    </block>
    <altmember cref="T:System.Net.Sockets.TcpListener" />
    <altmember cref="T:System.Net.Sockets.NetworkStream" />
    <altmember cref="T:System.Net.Sockets.Socket" />
    <altmember cref="T:System.Net.Sockets.ProtocolType" />
    <altmember cref="T:System.Net.IPEndPoint" />
    <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5df75-114"><see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5df75-114">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5df75-115"><see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5df75-115">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-116">このコンス トラクターが新たに作成<xref:System.Net.Sockets.TcpClient>し、基になるサービス プロバイダーが、最も適切なローカル IP アドレスとポート番号を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="5df75-116">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number.</span></span> <span data-ttu-id="5df75-117">最初に呼び出す必要があります、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッド データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="5df75-117">You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-118">このコンス トラクターは、IPv4 アドレスの種類でのみ動作します。</span><span class="sxs-lookup"><span data-stu-id="5df75-118">This constructor works only with IPv4 address types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-119">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-119">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-120">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-120">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-121">次のコード例は、既定のコンス トラクターを使用して新しいを作成する方法を示します<xref:System.Net.Sockets.TcpClient>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-121">The following code example demonstrates how to use the default constructor to create a new <xref:System.Net.Sockets.TcpClient>.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="5df75-122">TCP <see cref="T:System.Net.Sockets.Socket" /> のバインド先の <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-122">The <see cref="T:System.Net.IPEndPoint" /> to which you bind the TCP <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="5df75-123"><see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化し、指定したローカル エンドポイントにバインドします。</span><span class="sxs-lookup"><span data-stu-id="5df75-123">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and binds it to the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-124">このコンス トラクターが新たに作成<xref:System.Net.Sockets.TcpClient>にバインドし、<xref:System.Net.IPEndPoint>によって指定された、`localEP`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5df75-124">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter.</span></span> <span data-ttu-id="5df75-125">このコンス トラクターを呼び出す前に作成する必要があります、<xref:System.Net.IPEndPoint>データを送受信する IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="5df75-125">Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data.</span></span> <span data-ttu-id="5df75-126">接続および通信する前にローカル IP アドレスとポート番号を指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-126">You do not need to specify a local IP address and port number before connecting and communicating.</span></span> <span data-ttu-id="5df75-127">作成する場合、<xref:System.Net.Sockets.TcpClient>他の任意のコンス トラクターを使用して、基になるサービス プロバイダーは、最も適切なローカル IP アドレスとポート番号を割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="5df75-127">If you create a <xref:System.Net.Sockets.TcpClient> using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.</span></span>  
  
 <span data-ttu-id="5df75-128">呼び出す必要があります、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッド データを送受信する前にします。</span><span class="sxs-lookup"><span data-stu-id="5df75-128">You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-129">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-129">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-130">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-130">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-131">次のコード例は、のインスタンスを作成する方法を示します、<xref:System.Net.Sockets.TcpClient>クラス ローカル エンドポイントを使用します。</span><span class="sxs-lookup"><span data-stu-id="5df75-131">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a local endpoint.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-132"><paramref name="localEP" /> パラメーターは <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-132">The  <paramref name="localEP" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family"><span data-ttu-id="5df75-133">IP プロトコルの <see cref="P:System.Net.IPAddress.AddressFamily" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-133">The <see cref="P:System.Net.IPAddress.AddressFamily" /> of the IP protocol.</span></span></param>
        <summary><span data-ttu-id="5df75-134">ファミリを指定して、<see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="5df75-134">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class with the specified family.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="5df75-135">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-135">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-136">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-136">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-137">次のコード例は、のインスタンスを作成する方法を示します、<xref:System.Net.Sockets.TcpClient>クラスです。</span><span class="sxs-lookup"><span data-stu-id="5df75-137">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5df75-138"><paramref name="family" /> パラメーターが AddressFamily.InterNetwork ではありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-138">The <paramref name="family" /> parameter is not equal to AddressFamily.InterNetwork</span></span>  
  
 <span data-ttu-id="5df75-139">- または -</span><span class="sxs-lookup"><span data-stu-id="5df75-139">-or-</span></span>  
  
 <span data-ttu-id="5df75-140"><paramref name="family" /> パラメーターが AddressFamily.InterNetworkV6 ではありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-140">The <paramref name="family" /> parameter is not equal to AddressFamily.InterNetworkV6</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::String ^ hostname, int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="5df75-141">接続先のリモート ホストの DNS 名。</span><span class="sxs-lookup"><span data-stu-id="5df75-141">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-142">接続先のリモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-142">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="5df75-143"><see cref="T:System.Net.Sockets.TcpClient" /> クラスの新しいインスタンスを初期化し、指定したホストの指定したポートに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-143">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpClient" /> class and connects to the specified port on the specified host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-144">このコンス トラクターが新たに作成<xref:System.Net.Sockets.TcpClient>同期接続しようと指定されたホスト名とポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-144">This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number.</span></span> <span data-ttu-id="5df75-145">基になるサービス プロバイダーでは、最も適切なローカル IP アドレスとポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="5df75-145">The underlying service provider will assign the most appropriate local IP address and port number.</span></span> <span data-ttu-id="5df75-146"><xref:System.Net.Sockets.TcpClient> 接続するか失敗するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="5df75-146"><xref:System.Net.Sockets.TcpClient> will block until it either connects or fails.</span></span> <span data-ttu-id="5df75-147">このコンス トラクターを使用すると、初期化、DNS ホスト名を解決するには、1 つの便利な手順に接続できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-147">This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.</span></span>  
  
 <span data-ttu-id="5df75-148">IPv6 が有効になっている場合、<xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>メソッドは両方とも IPv6 に解決されるホストに接続して IPv4 アドレス、IPv4 アドレスの前に最初に、IPv6 アドレスに接続試行します。</span><span class="sxs-lookup"><span data-stu-id="5df75-148">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="5df75-149">これには、ホストが、IPv6 アドレスでリッスンしていない場合、接続の確立に時間が遅延の影響があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-149">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-150">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-150">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-151">このコードを取得した後は、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-151">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-152">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-152">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-153">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-153">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-154">次のコード例は、のインスタンスを作成する方法を示します、<xref:System.Net.Sockets.TcpClient>クラスのホスト名を使用して、ポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-154">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a host name and port number.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-155"><paramref name="hostname" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-155">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-156"><paramref name="port" /> パラメーターが <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間にありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-156">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-157">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-157">An error occurred when accessing the socket.</span></span></exception>
        <altmember cref="Overload:System.Net.Sockets.TcpClient.#ctor" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-158">接続されたかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-158">Gets or set a value that indicates whether a connection has been made.</span></span></summary>
        <value>
          <span data-ttu-id="5df75-159">接続されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-159"><see langword="true" /> if the connection has been made; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-160">派生するクラス<xref:System.Net.Sockets.TcpClient>接続試行が成功したかどうかを決定する、このプロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-160">Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded.</span></span> <span data-ttu-id="5df75-161">継続的な接続の状態は監視されません<xref:System.Net.Sockets.TcpClient>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-161">It does not monitor the ongoing connection state of <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="5df75-162">リモート ホストは、接続を閉じた場合<xref:System.Net.Sockets.TcpClient.Active%2A>は更新されません。</span><span class="sxs-lookup"><span data-stu-id="5df75-162">If the remote host closes the connection, <xref:System.Net.Sockets.TcpClient.Active%2A> will not be updated.</span></span> <span data-ttu-id="5df75-163">派生する場合<xref:System.Net.Sockets.TcpClient>を使用して、接続状態に十分注意する必要があります、<xref:System.Net.Sockets.Socket.Connected%2A>のプロパティ、<xref:System.Net.Sockets.Socket>によって返される、<xref:System.Net.Sockets.TcpClient.Client%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-163">If you are deriving from <xref:System.Net.Sockets.TcpClient> and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.Connected" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-164">ネットワークから受信した、読み取り可能なデータ量を取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-164">Gets the amount of data that has been received from the network and is available to be read.</span></span></summary>
        <value><span data-ttu-id="5df75-165">ネットワークから受信した、読み取り可能なデータのバイト数。</span><span class="sxs-lookup"><span data-stu-id="5df75-165">The number of bytes of data received from the network and available to be read.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-166"><xref:System.Net.Sockets.TcpClient.Available%2A> 読み取り用のデータがキューに置かれたかどうかを決定する方法です。</span><span class="sxs-lookup"><span data-stu-id="5df75-166"><xref:System.Net.Sockets.TcpClient.Available%2A> is a way to determine whether data is queued for reading.</span></span> <span data-ttu-id="5df75-167">データが使用可能な場合は、呼び出す<xref:System.Net.Sockets.NetworkStream.Read%2A>データを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-167">If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data.</span></span> <span data-ttu-id="5df75-168">使用可能なデータは、読み取り用のネットワーク バッファーにキューに置かれたデータの合計サイズです。</span><span class="sxs-lookup"><span data-stu-id="5df75-168">The available data is the total amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="5df75-169">ネットワーク バッファーにデータがキューにない場合<xref:System.Net.Sockets.TcpClient.Available%2A>0 を返します。</span><span class="sxs-lookup"><span data-stu-id="5df75-169">If no data is queued in the network buffer, <xref:System.Net.Sockets.TcpClient.Available%2A> returns 0.</span></span>  
  
 <span data-ttu-id="5df75-170">リモート ホストがシャット ダウン、または、接続を閉じる場合<xref:System.Net.Sockets.TcpClient.Available%2A>スローする可能性があります、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-170">If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.TcpClient.Available%2A> may throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="5df75-171">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-171">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-172">このコードを取得した後、マニュアルを参照して、Windows ソケット バージョン 2 API エラー コード MSDN ライブラリで[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)エラーの詳細な説明をします。</span><span class="sxs-lookup"><span data-stu-id="5df75-172">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-173">次のコード例の使用を示しています、<xref:System.Net.Sockets.TcpClient.Available%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5df75-173">The following code example shows the use of the <xref:System.Net.Sockets.TcpClient.Available%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-174">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-174">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-175"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="5df75-175">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5df75-176">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="5df75-176">Begins an asynchronous request for a remote host connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="5df75-177">リモート ホストの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-177">The <see cref="T:System.Net.IPAddress" /> of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-178">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-178">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="5df75-179">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="5df75-179">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="5df75-180">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-180">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="5df75-181">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-181">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="5df75-182">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="5df75-182">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="5df75-183">リモート ホストは、<see cref="T:System.Net.IPAddress" /> とポート番号 (<see cref="T:System.Int32" />) で指定されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-183">The remote host is specified by an <see cref="T:System.Net.IPAddress" /> and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="5df75-184">非同期接続を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-184">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-185">非同期の<xref:System.Net.Sockets.TcpClient.BeginConnect%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.TcpClient.EndConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-185">The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="5df75-186">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="5df75-186">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="5df75-187">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="5df75-187">This method does not block until the operation completes.</span></span> <span data-ttu-id="5df75-188">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="5df75-188">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="5df75-189">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-189">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-190">次のコード例を作成、<xref:System.Net.Sockets.TcpClient>し、リモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-190">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-191"><paramref name="address" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-191">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-192">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-192">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-193"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="5df75-193">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="5df75-194">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-194">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-195">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="5df75-195">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="5df75-196">リモート ホストを指定する 1 つ以上の <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-196">At least one <see cref="T:System.Net.IPAddress" /> that designates the remote hosts.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-197">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-197">The port number of the remote hosts.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="5df75-198">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="5df75-198">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="5df75-199">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-199">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="5df75-200">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-200">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="5df75-201">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="5df75-201">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="5df75-202">リモート ホストは、<see cref="T:System.Net.IPAddress" /> 配列とポート番号 (<see cref="T:System.Int32" />) で指定されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-202">The remote host is specified by an <see cref="T:System.Net.IPAddress" /> array and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="5df75-203">非同期接続を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-203">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-204">非同期の<xref:System.Net.Sockets.TcpClient.BeginConnect%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.TcpClient.EndConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-204">The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="5df75-205">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="5df75-205">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="5df75-206">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="5df75-206">This method does not block until the operation completes.</span></span> <span data-ttu-id="5df75-207">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="5df75-207">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="5df75-208">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-208">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="5df75-209">このメソッドはすぐに呼び出しの後に通常使用、<xref:System.Net.Dns.BeginGetHostAddresses%2A>メソッドで、1 つのホストの複数の IP アドレスを返すことができます。</span><span class="sxs-lookup"><span data-stu-id="5df75-209">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-210">次のコード例を作成、<xref:System.Net.Sockets.TcpClient>し、リモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-210">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-211"><paramref name="addresses" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-211">The <paramref name="addresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-212">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-212">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-213"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="5df75-213">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="5df75-214">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-214">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-215">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="5df75-215">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="5df75-216">リモート ホストの名前。</span><span class="sxs-lookup"><span data-stu-id="5df75-216">The name of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-217">リモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-217">The port number of the remote host.</span></span></param>
        <param name="requestCallback"><span data-ttu-id="5df75-218">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="5df75-218">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="5df75-219">接続操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-219">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="5df75-220">このオブジェクトは、操作の完了時に <c>requestCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-220">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="5df75-221">リモート ホスト接続への非同期要求を開始します。</span><span class="sxs-lookup"><span data-stu-id="5df75-221">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="5df75-222">リモート ホストは、ホスト名 (<see cref="T:System.String" />) とポート番号 (<see cref="T:System.Int32" />) で指定されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-222">The remote host is specified by a host name (<see cref="T:System.String" />) and a port number (<see cref="T:System.Int32" />).</span></span></summary>
        <returns><span data-ttu-id="5df75-223">非同期接続を参照する <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-223">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-224">非同期の<xref:System.Net.Sockets.TcpClient.BeginConnect%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.TcpClient.EndConnect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-224">The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method.</span></span> <span data-ttu-id="5df75-225">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="5df75-225">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="5df75-226">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="5df75-226">This method does not block until the operation completes.</span></span> <span data-ttu-id="5df75-227">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="5df75-227">To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="5df75-228">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-228">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-229">次のコード例を作成、<xref:System.Net.Sockets.TcpClient>し、リモート ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-229">The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-230"><paramref name="host" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-230">The <paramref name="host" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-231">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-231">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-232"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="5df75-232">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="5df75-233">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-233">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-234">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="5df75-234">The port number is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-235">基になる <see cref="T:System.Net.Sockets.Socket" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-235">Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="5df75-236">基になるネットワーク <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-236">The underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-237"><xref:System.Net.Sockets.TcpClient> 作成、<xref:System.Net.Sockets.Socket>をネットワーク経由でデータを送受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-237"><xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network.</span></span> <span data-ttu-id="5df75-238">派生するクラス<xref:System.Net.Sockets.TcpClient>このプロパティを取得または設定を使用して<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-238">Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="5df75-239">使用して、基になる<xref:System.Net.Sockets.Socket>から返された<xref:System.Net.Sockets.TcpClient.Client%2A>が必要な場合にアクセスされる範囲を超えてを<xref:System.Net.Sockets.TcpClient>を提供します。</span><span class="sxs-lookup"><span data-stu-id="5df75-239">Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.TcpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.TcpClient> provides.</span></span> <span data-ttu-id="5df75-240">使用することも<xref:System.Net.Sockets.TcpClient.Client%2A>を基になるを設定する<xref:System.Net.Sockets.Socket>既存<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-240">You can also use <xref:System.Net.Sockets.TcpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="5df75-241">シンプルさを活用する場合に役立ちます。 この場合があります<xref:System.Net.Sockets.TcpClient>既存を使用して<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-241">This might be useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.TcpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-242">使用を次のコード例に示します、<xref:System.Net.Sockets.TcpClient.Client%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5df75-242">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpClient.Client%2A> property.</span></span> <span data-ttu-id="5df75-243">この例では、基になるの受信バッファー サイズで<xref:System.Net.Sockets.Socket>を変更します。</span><span class="sxs-lookup"><span data-stu-id="5df75-243">In this example, the receive buffer size of the underlying <xref:System.Net.Sockets.Socket> is changed.</span></span>  
  
 [!code-csharp[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5df75-244">この <see cref="T:System.Net.Sockets.TcpClient" /> インスタンスを破棄し、基になる TCP 接続を終了するように要求します。</span><span class="sxs-lookup"><span data-stu-id="5df75-244">Disposes this <see cref="T:System.Net.Sockets.TcpClient" /> instance and requests that the underlying TCP connection be closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-245"><xref:System.Net.Sockets.TcpClient.Close%2A>メソッドが破棄されたものとして、インスタンスをマークし、要求を関連付けられている<xref:System.Net.Sockets.Socket>TCP 接続を閉じます。</span><span class="sxs-lookup"><span data-stu-id="5df75-245">The <xref:System.Net.Sockets.TcpClient.Close%2A> method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection.</span></span> <span data-ttu-id="5df75-246">に基づいて、<xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティ、TCP 接続が開いたまま後しばらくの間、<xref:System.Net.Sockets.TcpClient.Close%2A>メソッドが呼び出されて送信されるデータが残ります。</span><span class="sxs-lookup"><span data-stu-id="5df75-246">Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the <xref:System.Net.Sockets.TcpClient.Close%2A> method is called when data remains to be sent.</span></span> <span data-ttu-id="5df75-247">基になる接続の終了が完了したときに、通知はありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-247">There is no notification provided when the underlying connection has completed closing.</span></span>  
  
 <span data-ttu-id="5df75-248">このメソッドを呼び出すと、最終的に、関連付けられている終了<xref:System.Net.Sockets.Socket>も、関連付けられている終了と<xref:System.Net.Sockets.NetworkStream>作成された場合は、データの送受信に使用されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-248">Calling this method will eventually result in the close of the associated <xref:System.Net.Sockets.Socket> and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-249">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-249">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-250">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-250">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-251">次のコード例は、終了を示します、<xref:System.Net.Sockets.TcpClient>を呼び出して、<xref:System.Net.Sockets.TcpClient.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-251">The following code example demonstrates closing a <xref:System.Net.Sockets.TcpClient> by calling the <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span>  
  
 [!code-cpp[NCLTCPClientSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLTcpClientSync/CPP/tcpclient.cpp#1)]
 [!code-csharp[NCLTCPClientSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5df75-252">指定されたホスト名とポート番号を使用してクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-252">Connects the client to a remote TCP host using the specified host name and port number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="5df75-253">接続先の <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-253">The <see cref="T:System.Net.IPEndPoint" /> to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="5df75-254">指定されたリモート ネットワーク エンドポイントを使用してリモート TCP ホストにクライアントを接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-254">Connects the client to a remote TCP host using the specified remote network endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-255">指定した同期のリモート ホスト接続を確立するには、このメソッドを呼び出す<xref:System.Net.IPEndPoint>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-255">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="5df75-256">呼び出す前に<xref:System.Net.Sockets.TcpClient.Connect%2A>のインスタンスを作成する必要があります、<xref:System.Net.IPEndPoint>クラス IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="5df75-256">Before you call <xref:System.Net.Sockets.TcpClient.Connect%2A> you must create an instance of the <xref:System.Net.IPEndPoint> class using an IP address and a port number.</span></span> <span data-ttu-id="5df75-257">これを使用して<xref:System.Net.IPEndPoint>として、`remoteEP`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="5df75-257">Use this <xref:System.Net.IPEndPoint> as the `remoteEP` parameter.</span></span> <span data-ttu-id="5df75-258"><xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドは接続するか失敗するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="5df75-258">The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails.</span></span> <span data-ttu-id="5df75-259">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-259">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="5df75-260">これを使用して<xref:System.Net.Sockets.NetworkStream>を送信し、データを受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-260">Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-261">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-261">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-262">このコードを取得した後は、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-262">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-263">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-263">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-264">詳細については、次を参照してください[.NET Framework のネットワークのトレース。](~/docs/framework/network-programming/network-tracing.md)</span><span class="sxs-lookup"><span data-stu-id="5df75-264">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-265">次のコード例では、<xref:System.Net.IPEndPoint>リモート ホストと接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-265">The following code example uses an <xref:System.Net.IPEndPoint> to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-266"><paramref name="remoteEp" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-266">The <paramref name="remoteEp" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-267">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-267">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-268"><see cref="T:System.Net.Sockets.TcpClient" /> が閉じています。</span><span class="sxs-lookup"><span data-stu-id="5df75-268">The <see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="5df75-269">接続先ホストの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-269">The <see cref="T:System.Net.IPAddress" /> of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-270">接続先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-270">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="5df75-271">指定された IP アドレスとポート番号を使用してクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-271">Connects the client to a remote TCP host using the specified IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-272">指定した同期のリモート ホスト接続を確立するには、このメソッドを呼び出す<xref:System.Net.IPAddress>とポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-272">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number.</span></span> <span data-ttu-id="5df75-273"><xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドは接続するか失敗するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="5df75-273">The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails.</span></span> <span data-ttu-id="5df75-274">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-274">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="5df75-275">これを使用して<xref:System.Net.Sockets.NetworkStream>を送信し、データを受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-275">Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-276">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-276">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-277">このコードを取得した後は、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-277">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-278">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-278">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-279">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-279">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-280">次のコード例は、リモート ホストと接続する IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="5df75-280">The following code example uses an IP Address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-281"><paramref name="address" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-281">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-282"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-282">The <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-283">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-283">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="5df75-284"><see cref="T:System.Net.Sockets.TcpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="5df75-284"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] ipAddresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] ipAddresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (ipAddresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ ipAddresses, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipAddresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ipAddresses"><span data-ttu-id="5df75-285">接続先ホストの <see cref="T:System.Net.IPAddress" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="5df75-285">The <see cref="T:System.Net.IPAddress" /> array of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-286">接続先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-286">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="5df75-287">指定された IP アドレスとポート番号を使用してクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-287">Connects the client to a remote TCP host using the specified IP addresses and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-288">このメソッドはすぐに呼び出しの後に通常使用、<xref:System.Net.Dns.BeginGetHostAddresses%2A>メソッドで、1 つのホストの複数の IP アドレスを返すことができます。</span><span class="sxs-lookup"><span data-stu-id="5df75-288">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="5df75-289">呼び出す、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドの配列で指定されたホストへの同期リモート ホスト接続を確立するために<xref:System.Net.IPAddress>要素およびポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-289">Call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number.</span></span> <span data-ttu-id="5df75-290"><xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドは接続するか失敗するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="5df75-290">The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails.</span></span> <span data-ttu-id="5df75-291">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-291">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="5df75-292">これを使用して<xref:System.Net.Sockets.NetworkStream>を送信し、データを受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-292">Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-293">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-293">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-294">このコードを取得した後、マニュアルを参照して、Windows ソケット バージョン 2 API エラー コード MSDN ライブラリで[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)エラーの詳細な説明をします。</span><span class="sxs-lookup"><span data-stu-id="5df75-294">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-295">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-295">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-296">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-296">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-297">次のコード例は、リモート ホストと接続する IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="5df75-297">The following code example uses an IP Address and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#8)]
 [!code-csharp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-298"><paramref name="ipAddresses" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-298">The <paramref name="ipAddresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-299">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="5df75-299">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-300">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-300">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-301"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="5df75-301">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="5df75-302">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-302">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5df75-303">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> フラグまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> フラグを使用するソケットで有効です。</span><span class="sxs-lookup"><span data-stu-id="5df75-303">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname"><span data-ttu-id="5df75-304">接続先のリモート ホストの DNS 名。</span><span class="sxs-lookup"><span data-stu-id="5df75-304">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-305">接続先のリモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-305">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="5df75-306">指定されたホストの指定されたポートにクライアントを接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-306">Connects the client to the specified port on the specified host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-307">このメソッドを呼び出してとポート番号を指定したホスト名への同期リモート ホスト接続を確立します。</span><span class="sxs-lookup"><span data-stu-id="5df75-307">Call this method to establish a synchronous remote host connection to the specified host name and port number.</span></span> <span data-ttu-id="5df75-308"><xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドは接続するか失敗するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="5df75-308">The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails.</span></span> <span data-ttu-id="5df75-309">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-309">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="5df75-310">これを使用して<xref:System.Net.Sockets.NetworkStream>を送信し、データを受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-310">Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.</span></span>  
  
 <span data-ttu-id="5df75-311">IPv6 が有効になっている場合、<xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29>メソッドは両方とも IPv6 に解決されるホストに接続して IPv4 アドレス、IPv4 アドレスの前に最初に、IPv6 アドレスに接続試行します。</span><span class="sxs-lookup"><span data-stu-id="5df75-311">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="5df75-312">これには、ホストが、IPv6 アドレスでリッスンしていない場合、接続の確立に時間が遅延の影響があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-312">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-313">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-313">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-314">このコードを取得した後は、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-314">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-315">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-315">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-316">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-316">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-317">次のコード例リモート ホストと接続するホスト名とポート番号します。</span><span class="sxs-lookup"><span data-stu-id="5df75-317">The following code example uses the host name and port number to connect with a remote host.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-318"><paramref name="hostname" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-318">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-319"><paramref name="port" /> パラメーターが <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間にありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-319">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-320">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-320">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="5df75-321"><see cref="T:System.Net.Sockets.TcpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="5df75-321"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5df75-322">指定されたホスト名とポート番号を使用して、非同期操作としてクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-322">Connects the client to a remote TCP host using the specified host name and port number as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (address As IPAddress, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::Net::IPAddress ^ address, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="5df75-323">接続先ホストの <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-323">The <see cref="T:System.Net.IPAddress" /> of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-324">接続先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-324">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="5df75-325">指定された IP アドレスとポート番号を使用して、非同期操作としてクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-325">Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5df75-326"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="5df75-326">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="5df75-327">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-327">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-328">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="5df75-328">This operation will not block.</span></span> <span data-ttu-id="5df75-329">返されるを返します<xref:System.Threading.Tasks.Task>オブジェクトは、TCP 接続が確立された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="5df75-329">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="5df75-330">このメソッドは、接続要求は進行中に、呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="5df75-330">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="5df75-331">指定した同期のリモート ホスト接続を確立するには、このメソッドを呼び出す<xref:System.Net.IPAddress>と非同期操作としてのポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-331">Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation.</span></span> <span data-ttu-id="5df75-332">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-332">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="5df75-333">これを使用して<xref:System.Net.Sockets.NetworkStream>を送信し、データを受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-333">Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-334">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-334">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-335">このコードを取得した後は、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-335">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-336">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-336">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-337">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-337">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-338"><paramref name="address" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-338">The <paramref name="address" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-339"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-339">The <paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-340">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-340">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="5df75-341"><see cref="T:System.Net.Sockets.TcpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="5df75-341"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (addresses As IPAddress(), port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="5df75-342">接続先ホストの <see cref="T:System.Net.IPAddress" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="5df75-342">The <see cref="T:System.Net.IPAddress" /> array of the host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-343">接続先のポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-343">The port number to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="5df75-344">指定された IP アドレスとポート番号を使用して、非同期操作としてクライアントをリモート TCP ホストに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-344">Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5df75-345"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="5df75-345">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="5df75-346">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-346">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-347">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="5df75-347">This operation will not block.</span></span> <span data-ttu-id="5df75-348">返されるを返します<xref:System.Threading.Tasks.Task>オブジェクトは、TCP 接続が確立された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="5df75-348">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="5df75-349">このメソッドは、接続要求は進行中に、呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="5df75-349">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="5df75-350">このメソッドはすぐに呼び出しの後に通常使用、<xref:System.Net.Dns.BeginGetHostAddresses%2A>メソッドで、1 つのホストの複数の IP アドレスを返すことができます。</span><span class="sxs-lookup"><span data-stu-id="5df75-350">This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="5df75-351">配列で指定されたホストへの同期リモート ホスト接続を確立するためにこのメソッドを呼び出す<xref:System.Net.IPAddress>要素と、非同期操作として、ポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-351">Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation.</span></span> <span data-ttu-id="5df75-352">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-352">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="5df75-353">これを使用して<xref:System.Net.Sockets.NetworkStream>を送信し、データを受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-353">Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-354">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-354">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-355">このコードを取得した後、マニュアルを参照して、Windows ソケット バージョン 2 API エラー コード MSDN ライブラリで[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)エラーの詳細な説明をします。</span><span class="sxs-lookup"><span data-stu-id="5df75-355">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-356">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-356">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-357">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-357">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-358"><paramref name="ipAddresses" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-358">The <paramref name="ipAddresses" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-359">ポート番号が無効です。</span><span class="sxs-lookup"><span data-stu-id="5df75-359">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-360">ソケットへのアクセスを試行しているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-360">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-361"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="5df75-361">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="5df75-362">呼び出し履歴の上位にある呼び出し元には、要求された操作に対するアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-362">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="5df75-363">このメソッドは、<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> フラグまたは <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> フラグを使用するソケットで有効です。</span><span class="sxs-lookup"><span data-stu-id="5df75-363">This method is valid for sockets that use the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> flag or the <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> flag.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (host As String, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::String ^ host, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="5df75-364">接続先のリモート ホストの DNS 名。</span><span class="sxs-lookup"><span data-stu-id="5df75-364">The DNS name of the remote host to which you intend to connect.</span></span></param>
        <param name="port"><span data-ttu-id="5df75-365">接続先のリモート ホストのポート番号。</span><span class="sxs-lookup"><span data-stu-id="5df75-365">The port number of the remote host to which you intend to connect.</span></span></param>
        <summary><span data-ttu-id="5df75-366">非同期操作として、クライアントを、指定したホストの指定した TCP ポートに接続します。</span><span class="sxs-lookup"><span data-stu-id="5df75-366">Connects the client to the specified TCP port on the specified host as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="5df75-367"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="5df75-367">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="5df75-368">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-368">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-369">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="5df75-369">This operation will not block.</span></span> <span data-ttu-id="5df75-370">返されるを返します<xref:System.Threading.Tasks.Task>オブジェクトは、TCP 接続が確立された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="5df75-370">The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established.</span></span> <span data-ttu-id="5df75-371">このメソッドは、接続要求は進行中に、呼び出し元のスレッドをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="5df75-371">This method does not block the calling thread while the connection request is underway.</span></span>  
  
 <span data-ttu-id="5df75-372">指定されたホスト名への同期リモート ホスト接続を確立し、ポート番号を非同期操作としては、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="5df75-372">Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation.</span></span> <span data-ttu-id="5df75-373">リモート ホストに接続すると、使用、<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-373">After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="5df75-374">これを使用して<xref:System.Net.Sockets.NetworkStream>を送信し、データを受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-374">Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.</span></span>  
  
 <span data-ttu-id="5df75-375">IPv6 が有効になっている場合、<xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29>メソッドは両方とも IPv6 に解決されるホストに接続して IPv4 アドレス、IPv4 アドレスの前に最初に、IPv6 アドレスに接続試行します。</span><span class="sxs-lookup"><span data-stu-id="5df75-375">If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="5df75-376">これには、ホストが、IPv6 アドレスでリッスンしていない場合、接続の確立に時間が遅延の影響があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-376">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-377">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-377">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-378">このコードを取得した後は、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-378">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-379">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-379">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-380">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-380">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-381"><paramref name="hostname" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-381">The <paramref name="hostname" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="5df75-382"><paramref name="port" /> パラメーターが <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間にありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-382">The <paramref name="port" /> parameter is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-383">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-383">An error occurred when accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="5df75-384"><see cref="T:System.Net.Sockets.TcpClient" /> は閉じています。</span><span class="sxs-lookup"><span data-stu-id="5df75-384"><see cref="T:System.Net.Sockets.TcpClient" /> is closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-385"><see cref="T:System.Net.Sockets.Socket" /> の基になる <see cref="T:System.Net.Sockets.TcpClient" /> がリモート ホストに接続されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-385">Gets a value indicating whether the underlying <see cref="T:System.Net.Sockets.Socket" /> for a <see cref="T:System.Net.Sockets.TcpClient" /> is connected to a remote host.</span></span></summary>
        <value>
          <span data-ttu-id="5df75-386">最後に実行された操作の時点で、<see cref="P:System.Net.Sockets.TcpClient.Client" /> ソケットがリモート リソースに接続されていた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-386"><see langword="true" /> if the <see cref="P:System.Net.Sockets.TcpClient.Client" /> socket was connected to a remote resource as of the most recent operation; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-387"><xref:System.Net.Sockets.TcpClient.Connected%2A>プロパティ、接続の状態を取得、<xref:System.Net.Sockets.TcpClient.Client%2A>最後の I/O 操作の時点でのソケットします。</span><span class="sxs-lookup"><span data-stu-id="5df75-387">The <xref:System.Net.Sockets.TcpClient.Connected%2A> property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation.</span></span> <span data-ttu-id="5df75-388">返す場合`false`、<xref:System.Net.Sockets.TcpClient.Client%2A>ソケットがされたか、接続されていない、または接続されていません。</span><span class="sxs-lookup"><span data-stu-id="5df75-388">When it returns `false`, the <xref:System.Net.Sockets.TcpClient.Client%2A> socket was either never connected, or is no longer connected.</span></span>  
  
 <span data-ttu-id="5df75-389"><xref:System.Net.Sockets.TcpClient.Connected%2A>プロパティでは、最新の操作の時点で接続の状態のみ反映して、送信または現在の状態を確認するメッセージを受信しようとする必要があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-389">Because the <xref:System.Net.Sockets.TcpClient.Connected%2A> property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state.</span></span> <span data-ttu-id="5df75-390">メッセージ送信が失敗すると、このプロパティが返されなく`true`です。</span><span class="sxs-lookup"><span data-stu-id="5df75-390">After the message send fails, this property no longer returns `true`.</span></span> <span data-ttu-id="5df75-391">この動作は仕様に注意してください。</span><span class="sxs-lookup"><span data-stu-id="5df75-391">Note that this behavior is by design.</span></span> <span data-ttu-id="5df75-392">確実に、テストおよび送信/受信の間に、接続が失われているため、接続の状態をテストすることはできません。</span><span class="sxs-lookup"><span data-stu-id="5df75-392">You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost.</span></span> <span data-ttu-id="5df75-393">コードは、ソケット接続されていて、正常に送信の失敗のハンドルに想定してください。</span><span class="sxs-lookup"><span data-stu-id="5df75-393">Your code should assume the socket is connected, and gracefully handle failed transmissions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-394">次のコード例では、リモート エンドポイントに接続し、接続を検証します。</span><span class="sxs-lookup"><span data-stu-id="5df75-394">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5df75-395"><see cref="T:System.Net.Sockets.TcpClient" /> によって使用されているマネージ リソースおよびアンマネージ リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5df75-395">Releases the managed and unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="5df75-396">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" /> に設定し、アンマネージ リソースだけを解放する場合は <see langword="false" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-396">Set to <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="5df75-397"><see cref="T:System.Net.Sockets.TcpClient" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="5df75-397">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-398">このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-398">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="5df75-399">`Dispose()` このメソッドを呼び出して、`disposing`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="5df75-399">`Dispose()` invokes this method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="5df75-400"><xref:System.Object.Finalize%2A> このメソッドを呼び出して`disposing`'éý'`false`です。</span><span class="sxs-lookup"><span data-stu-id="5df75-400"><xref:System.Object.Finalize%2A> invokes this method with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="5df75-401">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Net.Sockets.TcpClient> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="5df75-401">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references.</span></span> <span data-ttu-id="5df75-402">これは呼び出すことで、`Dispose()`参照される各オブジェクトのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-402">It does this by invoking the `Dispose()` method of each referenced object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-403">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-403">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-404">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-404">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="5df75-405"><see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="5df75-405"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="5df75-406"><see langword="Dispose(Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-406">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="5df75-407">実装する方法の詳細についての<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-407">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="5df75-408">詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-408">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="5df75-409"><see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="5df75-409">An <see cref="T:System.IAsyncResult" /> object returned by a call to <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" />.</span></span></param>
        <summary><span data-ttu-id="5df75-410">保留中の非同期接続の試行を終了します。</span><span class="sxs-lookup"><span data-stu-id="5df75-410">Ends a pending asynchronous connection attempt.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-411">このメソッドは、操作するまでブロックを完了します。</span><span class="sxs-lookup"><span data-stu-id="5df75-411">This method blocks until the operation is complete.</span></span> <span data-ttu-id="5df75-412">この操作を同期的に実行するを使用して、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-412">To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-413">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-413">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-414">このコードを取得した後、マニュアルを参照して、Windows ソケット バージョン 2 API エラー コード MSDN ライブラリで[ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)エラーの詳細な説明をします。</span><span class="sxs-lookup"><span data-stu-id="5df75-414">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-415">次のコード例では、非同期接続の試行を終了します。</span><span class="sxs-lookup"><span data-stu-id="5df75-415">The following code example ends the asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5df75-416"><paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-416">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5df75-417"><see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> メソッドへの呼び出しで <paramref name="asyncResult" /> パラメーターが返されませんでした。</span><span class="sxs-lookup"><span data-stu-id="5df75-417">The <paramref name="asyncResult" /> parameter was not returned by a call to a <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5df75-418"><see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> メソッドは、非同期接続のために以前に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="5df75-418">The <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> method was previously called for the asynchronous connection.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-419"><see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-419">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-420">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="5df75-420">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-421"><see cref="T:System.Net.Sockets.TcpClient" /> で 1 つのクライアントだけがポートを使用できるかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-421">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpClient" /> allows only one client to use a port.</span></span></summary>
        <value>
          <span data-ttu-id="5df75-422"><see cref="T:System.Net.Sockets.TcpClient" /> で、1 つのクライアントだけが特定のポートを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-422"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpClient" /> allows only one client to use a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="5df75-423">既定値は、Windows Server 2003 および Windows XP Service Pack 2 以降では <see langword="true" /> で、その他のすべてのバージョンでは <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-423">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-424">既定では、複数のクライアントが特定のポートを使用できます。ただし、クライアントの 1 つだけでは、ポートに送信されるネットワーク トラフィックの操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-424">By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="5df75-425">使用することができます、<xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A>複数のクライアントを使用できるように、特定のポートのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="5df75-425">You can use the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.</span></span>  
  
 <span data-ttu-id="5df75-426">基になるソケットは、クライアントのポートにバインドされる前に、このプロパティを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-426">This property must be set before the underlying socket is bound to a client port.</span></span> <span data-ttu-id="5df75-427">呼び出す場合<xref:System.Net.Sockets.TcpClient.Connect%2A>、 <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>、 <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>、または<xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>、クライアントのポートは、メソッドの副作用としてバインドし、後で設定することはできません、<xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A>プロパティ</span><span class="sxs-lookup"><span data-stu-id="5df75-427">If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-428">次のコード例を作成、<xref:System.Net.Sockets.TcpClient>を取得しの値を設定し、<xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5df75-428">The following code example creates a <xref:System.Net.Sockets.TcpClient> and gets and sets the value of the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-429">基になるソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-429">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-430">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="5df75-430">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpClient ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5df75-431"><see cref="T:System.Net.Sockets.TcpClient" /> クラスによって使用されていたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="5df75-431">Frees resources used by the <see cref="T:System.Net.Sockets.TcpClient" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-432">このメソッドは、<xref:System.Object.Finalize%2A?displayProperty=nameWithType> をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="5df75-432">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5df75-433">アプリケーション コードではこのメソッドを呼び出す必要がありますいません。オブジェクトの<xref:System.Object.Finalize%2A>への呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限り、ガベージ コレクション中にメソッドが自動的に起動、<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-433">Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5df75-434"><xref:System.Net.Sockets.TcpClient>クラスのファイナライザーが TCP 接続を閉じるしに関連付けられているすべてのマネージ リソースを解放、<xref:System.Net.Sockets.TcpClient>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-434">The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="5df75-435">これらのリソースは、基になる<xref:System.Net.Sockets.Socket>、リモート ホストへの接続に使用して、<xref:System.Net.Sockets.NetworkStream>データを送受信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="5df75-435">These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data.</span></span> <span data-ttu-id="5df75-436">ファイナライザーでは、アンマネージ リソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="5df75-436">The finalizer does not release any unmanaged resources.</span></span>  
  
 <span data-ttu-id="5df75-437">詳細については、次を参照してください。 [Finalize メソッドおよびデストラクター](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)、および[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-437">For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.NetworkStream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.NetworkStream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As NetworkStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::NetworkStream ^ GetStream();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.NetworkStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5df75-438">データの送受信に使用する <see cref="T:System.Net.Sockets.NetworkStream" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="5df75-438">Returns the <see cref="T:System.Net.Sockets.NetworkStream" /> used to send and receive data.</span></span></summary>
        <returns><span data-ttu-id="5df75-439">基になる <see cref="T:System.Net.Sockets.NetworkStream" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-439">The underlying <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-440"><xref:System.Net.Sockets.TcpClient.GetStream%2A> 返します、<xref:System.Net.Sockets.NetworkStream>データの送受信を行えます。</span><span class="sxs-lookup"><span data-stu-id="5df75-440"><xref:System.Net.Sockets.TcpClient.GetStream%2A> returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data.</span></span> <span data-ttu-id="5df75-441"><xref:System.Net.Sockets.NetworkStream>クラスから継承、<xref:System.IO.Stream>メソッドとネットワーク通信を容易にするために使用されるプロパティの豊富なコレクションを提供するクラス。</span><span class="sxs-lookup"><span data-stu-id="5df75-441">The <xref:System.Net.Sockets.NetworkStream> class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.</span></span>  
  
 <span data-ttu-id="5df75-442">呼び出す必要があります、<xref:System.Net.Sockets.TcpClient.Connect%2A>メソッド、または<xref:System.Net.Sockets.TcpClient.GetStream%2A>メソッドがスローされます、<xref:System.InvalidOperationException>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-442">You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="5df75-443">取得した後、<xref:System.Net.Sockets.NetworkStream>を呼び出し、<xref:System.Net.Sockets.NetworkStream.Write%2A>リモート ホストにデータを送信する方法です。</span><span class="sxs-lookup"><span data-stu-id="5df75-443">After you have obtained the <xref:System.Net.Sockets.NetworkStream>, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host.</span></span> <span data-ttu-id="5df75-444">呼び出す、<xref:System.Net.Sockets.NetworkStream.Read%2A>リモート ホストから着信するデータを受信するメソッド。</span><span class="sxs-lookup"><span data-stu-id="5df75-444">Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host.</span></span> <span data-ttu-id="5df75-445">これら両方のメソッドは、指定された操作が実行されるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="5df75-445">Both of these methods block until the specified operation is performed.</span></span> <span data-ttu-id="5df75-446">チェックして、読み取り操作でのブロックを回避することができます、<xref:System.Net.Sockets.NetworkStream.DataAvailable%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5df75-446">You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property.</span></span> <span data-ttu-id="5df75-447">A`true`値にするとデータがリモート ホストから到着したが読み取り可能です。</span><span class="sxs-lookup"><span data-stu-id="5df75-447">A `true` value means that data has arrived from the remote host and is available for reading.</span></span> <span data-ttu-id="5df75-448">この場合、<xref:System.Net.Sockets.NetworkStream.Read%2A>をすぐに完了することが保証されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-448">In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately.</span></span> <span data-ttu-id="5df75-449">リモート ホストがシャット ダウンをその接続である場合<xref:System.Net.Sockets.NetworkStream.Read%2A>すぐには 0 バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="5df75-449">If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-450">閉じる必要があります、<xref:System.Net.Sockets.NetworkStream>を介してデータを送受信します。</span><span class="sxs-lookup"><span data-stu-id="5df75-450">You must close the <xref:System.Net.Sockets.NetworkStream> when you are through sending and receiving data.</span></span> <span data-ttu-id="5df75-451">閉じる<xref:System.Net.Sockets.TcpClient>によって解放されない、<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-451">Closing <xref:System.Net.Sockets.TcpClient> does not release the <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-452">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-452">If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="5df75-453">このコードを取得した後は、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。</span><span class="sxs-lookup"><span data-stu-id="5df75-453">After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5df75-454">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="5df75-454">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="5df75-455">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="5df75-455">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-456">次のコード例では<xref:System.Net.Sockets.TcpClient.GetStream%2A>させることが、基になる<xref:System.Net.Sockets.NetworkStream>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-456">The following code example uses <xref:System.Net.Sockets.TcpClient.GetStream%2A> to obtain the underlying <xref:System.Net.Sockets.NetworkStream>.</span></span> <span data-ttu-id="5df75-457">取得した後に、<xref:System.Net.Sockets.NetworkStream>を使用して送受信してその<xref:System.Net.Sockets.NetworkStream.Write%2A>と<xref:System.Net.Sockets.NetworkStream.Read%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-457">After obtaining the <xref:System.Net.Sockets.NetworkStream>, it sends and receives using its <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#14)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#14)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5df75-458"><see cref="T:System.Net.Sockets.TcpClient" /> がリモート ホストに接続されていません。</span><span class="sxs-lookup"><span data-stu-id="5df75-458">The <see cref="T:System.Net.Sockets.TcpClient" /> is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="5df75-459"><see cref="T:System.Net.Sockets.TcpClient" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="5df75-459">The <see cref="T:System.Net.Sockets.TcpClient" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-460">関連付けられているソケットの待機状態に関する情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-460">Gets or sets information about the linger state of the associated socket.</span></span></summary>
        <value><span data-ttu-id="5df75-461"><see cref="T:System.Net.Sockets.LingerOption" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-461">A <see cref="T:System.Net.Sockets.LingerOption" />.</span></span> <span data-ttu-id="5df75-462">既定では、接続の待機は無効です。</span><span class="sxs-lookup"><span data-stu-id="5df75-462">By default, lingering is disabled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-463"><xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティ方法を変更<xref:System.Net.Sockets.Socket.Close%2A>メソッドは動作します。</span><span class="sxs-lookup"><span data-stu-id="5df75-463">The <xref:System.Net.Sockets.TcpClient.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves.</span></span> <span data-ttu-id="5df75-464">このプロパティ セットが Winsock によってする接続をリセットすることができます、条件を変更する場合。</span><span class="sxs-lookup"><span data-stu-id="5df75-464">This property when set modifies the conditions under which the connection can be reset by Winsock.</span></span> <span data-ttu-id="5df75-465">接続のリセットに IP プロトコルの動作に基づいて引き続き発生します。</span><span class="sxs-lookup"><span data-stu-id="5df75-465">Connection resets can still occur based on the IP protocol behavior.</span></span>  
  
 <span data-ttu-id="5df75-466">このプロパティは、TCP 接続を開いたまま呼び出しの後に時間の長さを制御<xref:System.Net.Sockets.TcpClient.Close%2A>データが送信するのには残ります。</span><span class="sxs-lookup"><span data-stu-id="5df75-466">This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent.</span></span> <span data-ttu-id="5df75-467">呼び出すと、<xref:System.Net.Sockets.NetworkStream.Write%2A>メソッド、データが出力方向のネットワーク バッファーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-467">When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer.</span></span> <span data-ttu-id="5df75-468">このプロパティは、前に、リモート ホストにこのデータが送信されるように使用できる、<xref:System.Net.Sockets.TcpClient.Close%2A>メソッドは、接続を切断します。</span><span class="sxs-lookup"><span data-stu-id="5df75-468">This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.</span></span>  
  
 <span data-ttu-id="5df75-469">接続を維持できるように、作成、 <xref:System.Net.Sockets.LingerOption> 、目的の値を含むをインスタンス化し、設定、<xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティをこのインスタンスにします。</span><span class="sxs-lookup"><span data-stu-id="5df75-469">To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property to this instance.</span></span>  
  
 <span data-ttu-id="5df75-470">次の表の動作、<xref:System.Net.Sockets.TcpClient.Close%2A>メソッドの有効な値を<xref:System.Net.Sockets.LingerOption.Enabled%2A>プロパティおよび<xref:System.Net.Sockets.LingerOption.LingerTime%2A>に格納されているプロパティ、<xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="5df75-470">The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property.</span></span>  
  
|<span data-ttu-id="5df75-471">LingerState.Enabled</span><span class="sxs-lookup"><span data-stu-id="5df75-471">LingerState.Enabled</span></span>|<span data-ttu-id="5df75-472">LingerState.LingerTime</span><span class="sxs-lookup"><span data-stu-id="5df75-472">LingerState.LingerTime</span></span>|<span data-ttu-id="5df75-473">動作</span><span class="sxs-lookup"><span data-stu-id="5df75-473">Behavior</span></span>|  
|-------------------------|----------------------------|--------------|  
|<span data-ttu-id="5df75-474">`false` (無効)、既定値</span><span class="sxs-lookup"><span data-stu-id="5df75-474">`false` (disabled), the default value</span></span>|<span data-ttu-id="5df75-475">タイムアウトは適用、されません (既定値)。</span><span class="sxs-lookup"><span data-stu-id="5df75-475">The time-out is not applicable, (default).</span></span>|<span data-ttu-id="5df75-476">既定の IP プロトコル タイムアウトの期限が切れるまで、保留中のデータ送信を試みます。</span><span class="sxs-lookup"><span data-stu-id="5df75-476">Attempts to send pending data until the default IP protocol time-out expires.</span></span>|  
|<span data-ttu-id="5df75-477">`true` (有効)</span><span class="sxs-lookup"><span data-stu-id="5df75-477">`true` (enabled)</span></span>|<span data-ttu-id="5df75-478">0 以外のタイムアウト</span><span class="sxs-lookup"><span data-stu-id="5df75-478">A nonzero time-out</span></span>|<span data-ttu-id="5df75-479">指定したタイムアウトが経過するまでの試行が失敗した場合は、Winsock 接続がリセット保留中のデータ送信を試みます。</span><span class="sxs-lookup"><span data-stu-id="5df75-479">Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.</span></span>|  
|<span data-ttu-id="5df75-480">`true` (有効)</span><span class="sxs-lookup"><span data-stu-id="5df75-480">`true` (enabled)</span></span>|<span data-ttu-id="5df75-481">0 のタイムアウト</span><span class="sxs-lookup"><span data-stu-id="5df75-481">A zero timeout.</span></span>|<span data-ttu-id="5df75-482">保留中のデータと Winsock のリセットの接続を破棄します。</span><span class="sxs-lookup"><span data-stu-id="5df75-482">Discards any pending data and Winsock resets the connection.</span></span>|  
  
 <span data-ttu-id="5df75-483">IP スタックは、接続のラウンド トリップ時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。</span><span class="sxs-lookup"><span data-stu-id="5df75-483">The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.</span></span> <span data-ttu-id="5df75-484">ほとんどの場合、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 より関連性が高いです。</span><span class="sxs-lookup"><span data-stu-id="5df75-484">In most cases, the time-out computed by the stack is more relevant than one defined by an application.</span></span> <span data-ttu-id="5df75-485">ソケットの既定の動作は、このとき、<xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティが設定されていません。</span><span class="sxs-lookup"><span data-stu-id="5df75-485">This is the default behavior for a socket when the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is not set.</span></span>  
  
 <span data-ttu-id="5df75-486">ときに、<xref:System.Net.Sockets.LingerOption.LingerTime%2A>に格納されているプロパティ、<xref:System.Net.Sockets.TcpClient.LingerState%2A>プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定、既定の IP プロトコル タイムアウトを引き続き適用を上書きします。</span><span class="sxs-lookup"><span data-stu-id="5df75-486">When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-487">次のコード例のセットを取得しますが、ソケットの待機時間。</span><span class="sxs-lookup"><span data-stu-id="5df75-487">The following code example sets and gets the sockets linger time.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#12)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#12)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.LingerOption" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-488">送信バッファーまたは受信バッファーが設定されているサイズを超えていない場合に、遅延を無効にする値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-488">Gets or sets a value that disables a delay when send or receive buffers are not full.</span></span></summary>
        <value>
          <span data-ttu-id="5df75-489">遅延が無効になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="5df75-489"><see langword="true" /> if the delay is disabled, otherwise <see langword="false" />.</span></span> <span data-ttu-id="5df75-490">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="5df75-490">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-491">ときに<xref:System.Net.Sockets.TcpClient.NoDelay%2A>は`false`、<xref:System.Net.Sockets.TcpClient>まで送信しませんパケット、ネットワーク経由で大量の送信データを収集しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-491">When <xref:System.Net.Sockets.TcpClient.NoDelay%2A> is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data.</span></span> <span data-ttu-id="5df75-492">TCP セグメントのオーバーヘッドの量、ため少量のデータを送信する効果がありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-492">Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient.</span></span> <span data-ttu-id="5df75-493">ただし、状況は非常に少量のデータを送信、またはすぐに送信した各パケット応答を期待する必要がある存在します。</span><span class="sxs-lookup"><span data-stu-id="5df75-493">However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send.</span></span> <span data-ttu-id="5df75-494">決定は、ネットワーク効率は、アプリケーションの要件との相対的な重要度を比較検討する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-494">Your decision should weigh the relative importance of network efficiency versus application requirements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-495">次のコード例では、遅延が無効にします。</span><span class="sxs-lookup"><span data-stu-id="5df75-495">The following code example disables the delay.</span></span> <span data-ttu-id="5df75-496">値をチェックし、<xref:System.Net.Sockets.TcpClient.NoDelay%2A>プロパティが正常に設定されていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="5df75-496">It then checks the value of <xref:System.Net.Sockets.TcpClient.NoDelay%2A> to verify that the property was successfully set.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-497">受信バッファーのサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-497">Gets or sets the size of the receive buffer.</span></span></summary>
        <value><span data-ttu-id="5df75-498">受信バッファー サイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5df75-498">The size of the receive buffer, in bytes.</span></span> <span data-ttu-id="5df75-499">既定値は 8192 バイトです。</span><span class="sxs-lookup"><span data-stu-id="5df75-499">The default value is 8192 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-500"><xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A>プロパティを取得またはそれぞれの読み取り操作の受信バッファーに格納するを必要とするバイト数を設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-500">The <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation.</span></span> <span data-ttu-id="5df75-501">このプロパティは、受信データに割り当てられたネットワーク バッファー領域を実際に操作します。</span><span class="sxs-lookup"><span data-stu-id="5df75-501">This property actually manipulates the network buffer space allocated for receiving incoming data.</span></span>  
  
 <span data-ttu-id="5df75-502">ネットワーク バッファーは、少なくとも、必要なデータが使用できることを呼び出すと、アプリケーション バッファーと同じ大きさにする必要があります、<xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-502">Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5df75-503">使用して、<xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A>プロパティをこのサイズを設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-503">Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size.</span></span> <span data-ttu-id="5df75-504">アプリケーションが大量のデータを受信する場合を渡す必要があります、<xref:System.Net.Sockets.NetworkStream.Read%2A>メソッド非常に大規模なアプリケーション バッファー。</span><span class="sxs-lookup"><span data-stu-id="5df75-504">If your application will be receiving bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Read%2A> method a very large application buffer.</span></span>  
  
 <span data-ttu-id="5df75-505">要求のネットワーク バッファーのデータの量よりも小さい場合、<xref:System.Net.Sockets.NetworkStream.Read%2A>メソッド、必要な 1 つの読み取り操作のデータ量を取得できません。</span><span class="sxs-lookup"><span data-stu-id="5df75-505">If the network buffer is smaller than the amount of data you request in the <xref:System.Net.Sockets.NetworkStream.Read%2A> method, you will not be able to retrieve the desired amount of data in one read operation.</span></span> <span data-ttu-id="5df75-506">これは、ため、追加の呼び出しの<xref:System.Net.Sockets.NetworkStream.Read%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-506">This incurs the overhead of additional calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-507">次のコード例では、設定を受信バッファー サイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-507">The following code example sets and gets the receive buffer size.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="5df75-508">バッファー サイズの設定中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="5df75-508">An error occurred when setting the buffer size.</span></span>  
  
 <span data-ttu-id="5df75-509">- または -</span><span class="sxs-lookup"><span data-stu-id="5df75-509">-or-</span></span>  
  
 <span data-ttu-id="5df75-510">.NET Compact Framework アプリケーションでは、このプロパティは設定できません。</span><span class="sxs-lookup"><span data-stu-id="5df75-510">In .NET Compact Framework applications, you cannot set this property.</span></span> <span data-ttu-id="5df75-511">代替手段については、「解説」の「プラットフォームメモ」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="5df75-511">For a workaround, see the Platform Note in Remarks.</span></span></exception>
        <altmember cref="P:System.Net.Sockets.TcpClient.SendBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-512">読み取り操作が開始された後に <see cref="T:System.Net.Sockets.TcpClient" /> がデータの受信を待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-512">Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait to receive data once a read operation is initiated.</span></span></summary>
        <value><span data-ttu-id="5df75-513">接続のタイムアウト値 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="5df75-513">The time-out value of the connection in milliseconds.</span></span> <span data-ttu-id="5df75-514">既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="5df75-514">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-515"><xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A>プロパティは、時間を決定する、<xref:System.Net.Sockets.NetworkStream.Read%2A>メソッドはデータを受信することがあるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="5df75-515">The <xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data.</span></span> <span data-ttu-id="5df75-516">この時間がミリ秒単位で測定されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-516">This time is measured in milliseconds.</span></span> <span data-ttu-id="5df75-517">前にタイムアウトに達すると<xref:System.Net.Sockets.NetworkStream.Read%2A>が正常に完了すると、<xref:System.Net.Sockets.TcpClient>スロー、<xref:System.IO.IOException>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-517">If the time-out expires before <xref:System.Net.Sockets.NetworkStream.Read%2A> successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>.</span></span> <span data-ttu-id="5df75-518">既定では、タイムアウトはありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-518">There is no time-out by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-519">次のコード例では、設定を受信のタイムアウトを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-519">The following code example sets and gets the receive time out.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.SendTimeout" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-520">送信バッファーのサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-520">Gets or sets the size of the send buffer.</span></span></summary>
        <value><span data-ttu-id="5df75-521">送信バッファー サイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="5df75-521">The size of the send buffer, in bytes.</span></span> <span data-ttu-id="5df75-522">既定値は 8192 バイトです。</span><span class="sxs-lookup"><span data-stu-id="5df75-522">The default value is 8192 bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-523"><xref:System.Net.Sockets.TcpClient.SendBufferSize%2A>プロパティを取得または設定への各呼び出しで送信するを必要とするバイト数、<xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-523">The <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="5df75-524">このプロパティは、送信操作に割り当てられたネットワーク バッファー領域を実際に操作します。</span><span class="sxs-lookup"><span data-stu-id="5df75-524">This property actually manipulates the network buffer space allocated for send operation.</span></span>  
  
 <span data-ttu-id="5df75-525">ネットワーク バッファーは、少なくともアプリケーション バッファーを必要なデータが格納され、1 つの操作で送信されることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="5df75-525">Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation.</span></span> <span data-ttu-id="5df75-526">使用して、<xref:System.Net.Sockets.TcpClient.SendBufferSize%2A>プロパティをこのサイズを設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-526">Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size.</span></span> <span data-ttu-id="5df75-527">アプリケーションが大量のデータを送信する場合を渡す必要があります、<xref:System.Net.Sockets.NetworkStream.Write%2A>メソッド非常に大規模なアプリケーション バッファー。</span><span class="sxs-lookup"><span data-stu-id="5df75-527">If your application will be sending bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Write%2A> method a very large application buffer.</span></span>  
  
 <span data-ttu-id="5df75-528">指定したネットワーク バッファーのデータの量よりも小さい場合、<xref:System.Net.Sockets.NetworkStream.Write%2A>メソッド、いくつかのネットワークに加えたすべての呼び出しの操作を実行する、送信、<xref:System.Net.Sockets.NetworkStream.Write%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="5df75-528">If the network buffer is smaller than the amount of data you provide the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, several network send operations will be performed for every call you make to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method.</span></span> <span data-ttu-id="5df75-529">データ スループットを行うには、ネットワーク バッファーがアプリケーション バッファー サイズ以上であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="5df75-529">You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-530">次のコード例では、設定を送信バッファーのサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="5df75-530">The following code example sets and gets the send buffer size.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5df75-531">送信操作が正常に完了するのを <see cref="T:System.Net.Sockets.TcpClient" /> が待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="5df75-531">Gets or sets the amount of time a <see cref="T:System.Net.Sockets.TcpClient" /> will wait for a send operation to complete successfully.</span></span></summary>
        <value><span data-ttu-id="5df75-532">送信のタイムアウト値 (ミリ秒単位)。</span><span class="sxs-lookup"><span data-stu-id="5df75-532">The send time-out value, in milliseconds.</span></span> <span data-ttu-id="5df75-533">既定値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="5df75-533">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5df75-534"><xref:System.Net.Sockets.TcpClient.SendTimeout%2A>プロパティは、時間を決定する、<xref:System.Net.Sockets.Socket.Send%2A>メソッドは正常に戻ることがあるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="5df75-534">The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully.</span></span> <span data-ttu-id="5df75-535">この時間がミリ秒単位で測定されます。</span><span class="sxs-lookup"><span data-stu-id="5df75-535">This time is measured in milliseconds.</span></span>  
  
 <span data-ttu-id="5df75-536">呼び出した後、<xref:System.Net.Sockets.NetworkStream.Write%2A>メソッドを基になる<xref:System.Net.Sockets.Socket>実際には、ホストに送信されたバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="5df75-536">After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host.</span></span> <span data-ttu-id="5df75-537"><xref:System.Net.Sockets.TcpClient.SendTimeout%2A>プロパティの時間を決定する、<xref:System.Net.Sockets.TcpClient>が返されるバイト数を受け取る前に待機します。</span><span class="sxs-lookup"><span data-stu-id="5df75-537">The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned.</span></span> <span data-ttu-id="5df75-538">前にタイムアウトに達すると、<xref:System.Net.Sockets.Socket.Send%2A>メソッドが正常に完了すると、<xref:System.Net.Sockets.TcpClient>がスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="5df75-538">If the time-out expires before the <xref:System.Net.Sockets.Socket.Send%2A> method successfully completes, <xref:System.Net.Sockets.TcpClient> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="5df75-539">既定では、タイムアウトはありません。</span><span class="sxs-lookup"><span data-stu-id="5df75-539">There is no time-out by default.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5df75-540">次のコード例を設定および取得、<xref:System.Net.Sockets.TcpClient.SendTimeout%2A>値。</span><span class="sxs-lookup"><span data-stu-id="5df75-540">The following code example sets and gets the <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> value.</span></span>  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>