<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d1906-101">TCP ネットワーク クライアントからの接続をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="d1906-101">Listens for connections from TCP network clients.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-102"><xref:System.Net.Sockets.TcpListener>クラスをリッスンし、同期モードのブロックでの接続要求を受け付けるための簡単な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="d1906-102">The <xref:System.Net.Sockets.TcpListener> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</span></span> <span data-ttu-id="d1906-103">使用するか、<xref:System.Net.Sockets.TcpClient>または<xref:System.Net.Sockets.Socket>に接続する、<xref:System.Net.Sockets.TcpListener>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-103">You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a <xref:System.Net.Sockets.TcpListener>.</span></span> <span data-ttu-id="d1906-104">作成、<xref:System.Net.Sockets.TcpListener>を使用して、 <xref:System.Net.IPEndPoint>、ローカル IP アドレスとポート番号、またはポート番号だけです。</span><span class="sxs-lookup"><span data-stu-id="d1906-104">Create a <xref:System.Net.Sockets.TcpListener> using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number.</span></span> <span data-ttu-id="d1906-105">指定<xref:System.Net.IPAddress.Any>ローカル IP アドレスおよび基になるサービス プロバイダーは、それらの値を割り当てる場合は、ローカル ポート番号を 0 にします。</span><span class="sxs-lookup"><span data-stu-id="d1906-105">Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</span></span> <span data-ttu-id="d1906-106">この方法を選択する場合を使用できます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>ソケットが接続した後に、割り当てられている情報を識別するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="d1906-106">If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.</span></span>  
  
 <span data-ttu-id="d1906-107">使用して、<xref:System.Net.Sockets.TcpListener.Start%2A>接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-107">Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests.</span></span> <span data-ttu-id="d1906-108"><xref:System.Net.Sockets.TcpListener.Start%2A> キューに着信接続するかを呼び出すまで、<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッドまたはそれがキューに登録<xref:System.Net.Sockets.SocketOptionName.MaxConnections>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-108"><xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span></span> <span data-ttu-id="d1906-109">いずれかの方法<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>または<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>を着信接続要求のキューからの接続を取得します。</span><span class="sxs-lookup"><span data-stu-id="d1906-109">Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue.</span></span> <span data-ttu-id="d1906-110">これら 2 つの方法がブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d1906-110">These two methods will block.</span></span> <span data-ttu-id="d1906-111">使用することができますがブロックされないようにする場合、<xref:System.Net.Sockets.TcpListener.Pending%2A>接続要求がキューで利用可能なかどうかを判断するには、最初のメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-111">If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.</span></span>  
  
 <span data-ttu-id="d1906-112">呼び出す、<xref:System.Net.Sockets.TcpListener.Stop%2A>を終了するメソッド、<xref:System.Net.Sockets.TcpListener>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-112">Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-113"><xref:System.Net.Sockets.TcpListener.Stop%2A>承認済みのすべての接続は閉じられません。</span><span class="sxs-lookup"><span data-stu-id="d1906-113">The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections.</span></span> <span data-ttu-id="d1906-114">ユーザーは、これらを個別に閉じる担当します。</span><span class="sxs-lookup"><span data-stu-id="d1906-114">You are responsible for closing these separately.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-115">次のコード例を作成、<xref:System.Net.Sockets.TcpListener>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-115">The following code example creates a <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 <span data-ttu-id="d1906-116">参照してください<xref:System.Net.Sockets.TcpClient>クライアントなどです。</span><span class="sxs-lookup"><span data-stu-id="d1906-116">See <xref:System.Net.Sockets.TcpClient> for a client example.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="d1906-117">発信接続を確立するか、受信要求を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="d1906-117">to establish an outgoing connection or accept an incoming request.</span></span></permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d1906-118"><see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d1906-118">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="d1906-119">受信接続の試行を待機するポート。</span><span class="sxs-lookup"><span data-stu-id="d1906-119">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="d1906-120">指定したポートを待機する <see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d1906-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens on the specified port.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-121">このコンストラクターは今後は使用しません。</span><span class="sxs-lookup"><span data-stu-id="d1906-121">This constructor is obsolete.</span></span> <span data-ttu-id="d1906-122">使用して、<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType>または<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="d1906-122">Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> constructors.</span></span>  
  
 <span data-ttu-id="d1906-123">このコンス トラクターでは、受信試行の接続をリッスンするポート番号を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="d1906-123">This constructor allows you to specify the port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="d1906-124">このコンス トラクターでは、基になるサービス プロバイダーは、最も適切なネットワーク アドレスを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d1906-124">With this constructor, the underlying service provider assigns the most appropriate network address.</span></span> <span data-ttu-id="d1906-125">使用されているローカル ポートを限定しない場合は、ポート番号の場合は 0 を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-125">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="d1906-126">この場合、サービス プロバイダーは、使用可能な一時的なポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d1906-126">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="d1906-127">このアプローチを使用する場合を使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出することができます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d1906-127">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="d1906-128">呼び出す、<xref:System.Net.Sockets.TcpListener.Start%2A>着信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-128">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-129">次のコード例を作成、<xref:System.Net.Sockets.TcpListener>ローカル ポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-129">The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d1906-130"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d1906-130"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="d1906-131">リスナー <see cref="T:System.Net.Sockets.Socket" /> のバインド先のローカル エンドポイントを表す <see cref="T:System.Net.IPEndPoint" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-131">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="d1906-132">指定したローカル エンドポイントを使用して、<see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d1906-132">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class with the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-133">このコンス トラクターでは、ローカル IP アドレスを指定することができ、着信接続をリッスンするポート番号がしようとします。</span><span class="sxs-lookup"><span data-stu-id="d1906-133">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="d1906-134">このコンス トラクターを使用して、前に作成する必要があります、<xref:System.Net.IPEndPoint>必要なローカル IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-134">Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number.</span></span> <span data-ttu-id="d1906-135">これを渡す<xref:System.Net.IPEndPoint>としてコンス トラクターに、`localEP`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d1906-135">Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.</span></span>  
  
 <span data-ttu-id="d1906-136">ローカル アドレスの割り当てを限定しない場合は、作成、<xref:System.Net.IPEndPoint>を使用して<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>アドレス パラメーターと、基になるサービス プロバイダーは、最も適切なネットワーク アドレスを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d1906-136">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="d1906-137">これにより、複数のネットワーク インターフェイスがある場合に、アプリケーションを簡略化のに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="d1906-137">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="d1906-138">使用されているローカル ポートを限定しない場合は、作成、<xref:System.Net.IPEndPoint>ポート番号として 0 を使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-138">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="d1906-139">この場合、サービス プロバイダーは、使用可能な一時的なポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d1906-139">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="d1906-140">このアプローチを使用する場合を使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出することができます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d1906-140">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="d1906-141">呼び出す、<xref:System.Net.Sockets.TcpListener.Start%2A>着信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-141">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-142">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-142">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-143">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-143">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-144">次のコード例は、のインスタンスを作成、<xref:System.Net.Sockets.TcpListener>クラス ローカル エンドポイントを使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-144">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d1906-145"><paramref name="localEP" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d1906-145"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr"><span data-ttu-id="d1906-146">ローカル IP アドレスを表す <see cref="T:System.Net.IPAddress" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-146">An <see cref="T:System.Net.IPAddress" /> that represents the local IP address.</span></span></param>
        <param name="port"><span data-ttu-id="d1906-147">受信接続の試行を待機するポート。</span><span class="sxs-lookup"><span data-stu-id="d1906-147">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="d1906-148">指定したローカル IP アドレスとポート番号で受信接続の試行を待機する、<see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d1906-148">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens for incoming connection attempts on the specified local IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-149">このコンス トラクターでは、ローカル IP アドレスを指定することができ、着信接続をリッスンするポート番号がしようとします。</span><span class="sxs-lookup"><span data-stu-id="d1906-149">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="d1906-150">このコンス トラクターを呼び出す前に作成する必要が最初、<xref:System.Net.IPAddress>必要なローカル アドレスを使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-150">Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address.</span></span> <span data-ttu-id="d1906-151">これを渡す<xref:System.Net.IPAddress>としてコンス トラクターに、`localaddr`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="d1906-151">Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter.</span></span> <span data-ttu-id="d1906-152">ローカル アドレスの割り当てを限定しない場合は、指定<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>の`localaddr`パラメーター、および基になるサービス プロバイダーは最も適切なネットワーク アドレスを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d1906-152">If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="d1906-153">これにより、複数のネットワーク インターフェイスがある場合に、アプリケーションを簡略化のに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="d1906-153">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="d1906-154">使用されているローカル ポートを限定しない場合は、ポート番号の場合は 0 を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-154">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="d1906-155">この場合、サービス プロバイダーは 1024 ~ 5000 で、使用可能なポート番号を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d1906-155">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span> <span data-ttu-id="d1906-156">このアプローチを使用する場合を使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出することができます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d1906-156">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="d1906-157">呼び出す、<xref:System.Net.Sockets.TcpListener.Start%2A>着信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-157">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-158">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-158">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-159">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-159">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-160">次のコード例は、のインスタンスを作成、<xref:System.Net.Sockets.TcpListener>クラス ローカル IP アドレスとポート番号を使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-160">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d1906-161"><paramref name="localaddr" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d1906-161"><paramref name="localaddr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d1906-162"><paramref name="port" /> が <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" /> の間の値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d1906-162"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1906-163">保留中の接続要求を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="d1906-163">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="d1906-164">データの送受信に使用する <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-164">A <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> ブロッキング メソッドを返す、<xref:System.Net.Sockets.Socket>データの送受信を行えます。</span><span class="sxs-lookup"><span data-stu-id="d1906-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data.</span></span> <span data-ttu-id="d1906-166">ブロックされないようにする場合は、使用、<xref:System.Net.Sockets.TcpListener.Pending%2A>接続要求が着信接続のキューで利用可能なかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d1906-166">If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.</span></span>  
  
 <span data-ttu-id="d1906-167"><xref:System.Net.Sockets.Socket>返されたリモート ホストの IP アドレスとポート番号で初期化されます。</span><span class="sxs-lookup"><span data-stu-id="d1906-167">The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="d1906-168">いずれかを使用することができます、<xref:System.Net.Sockets.Socket.Send%2A>と<xref:System.Net.Sockets.Socket.Receive%2A>で使用できるメソッド、<xref:System.Net.Sockets.Socket>リモート ホストと通信するクラス。</span><span class="sxs-lookup"><span data-stu-id="d1906-168">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="d1906-169">終了したらを使用して、 <xref:System.Net.Sockets.Socket>、必ずその<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-169">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="d1906-170">アプリケーションが比較的単純な場合は、使用を検討して、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドではなく、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-170">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="d1906-171"><xref:System.Net.Sockets.TcpClient> 簡単な方法の同期モードのブロックのネットワーク経由でデータを送受信できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-171"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-172">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-172">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-173">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-173">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-174">次のコード例では、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>を返すメソッドを使用する<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-174">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method is used to return a <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="d1906-175">これは、<xref:System.Net.Sockets.Socket>新しく接続したクライアントと通信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-175">This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-176">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="d1906-176">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1906-177">保留中の接続要求を非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="d1906-177">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="d1906-178"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d1906-178">Returns <see cref="T:System.Threading.Tasks.Task`1" /></span></span>  
  
 <span data-ttu-id="d1906-179">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d1906-179">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="d1906-180">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、データの送受信に使用される <see cref="T:System.Net.Sockets.Socket" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d1906-180">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-181">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d1906-181">This operation will not block.</span></span> <span data-ttu-id="d1906-182">返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、ソケット接続が許可された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="d1906-182">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.</span></span>  
  
 <span data-ttu-id="d1906-183"><xref:System.Net.Sockets.Socket>で返される<xref:System.Threading.Tasks.Task%601>はリモート ホストの IP アドレスとポート番号で初期化します。</span><span class="sxs-lookup"><span data-stu-id="d1906-183">The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="d1906-184">いずれかを使用することができます、<xref:System.Net.Sockets.Socket.Send%2A>と<xref:System.Net.Sockets.Socket.Receive%2A>で使用できるメソッド、<xref:System.Net.Sockets.Socket>リモート ホストと通信するクラス。</span><span class="sxs-lookup"><span data-stu-id="d1906-184">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="d1906-185">終了したらを使用して、 <xref:System.Net.Sockets.Socket>、必ずその<xref:System.Net.Sockets.Socket.Close%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-185">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="d1906-186">アプリケーションが比較的単純な場合は、使用を検討して、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドではなく、<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-186">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> method.</span></span> <span data-ttu-id="d1906-187"><xref:System.Net.Sockets.TcpClient> 簡単な方法の同期モードのブロックのネットワーク経由でデータを送受信できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-187"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-188">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-188">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-189">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-189">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-190">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="d1906-190">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1906-191">保留中の接続要求を受け入れます。</span><span class="sxs-lookup"><span data-stu-id="d1906-191">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="d1906-192">データの送受信に使用する <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-192">A <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-193"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> ブロッキング メソッドを返す、<xref:System.Net.Sockets.TcpClient>データの送受信を行えます。</span><span class="sxs-lookup"><span data-stu-id="d1906-193"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="d1906-194">使用して、<xref:System.Net.Sockets.TcpListener.Pending%2A>がブロックされないようにする場合は、接続要求が着信接続のキューで利用可能なかどうかを調べます。</span><span class="sxs-lookup"><span data-stu-id="d1906-194">Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</span></span>  
  
 <span data-ttu-id="d1906-195">使用して、<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>、返された<xref:System.Net.Sockets.TcpClient>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-195">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="d1906-196"><xref:System.Net.Sockets.NetworkStream>くれますメソッドでのリモート ホストと送受信します。</span><span class="sxs-lookup"><span data-stu-id="d1906-196">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="d1906-197">経由は、 <xref:System.Net.Sockets.TcpClient>、必ずその<xref:System.Net.Sockets.TcpClient.Close%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d1906-197">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="d1906-198">も柔軟性が向上する場合、<xref:System.Net.Sockets.TcpClient>のオファーは、使用を検討して<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-198">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-199">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-199">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-200">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-200">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-201">次のコード例では、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>を返すメソッドを使用する<xref:System.Net.Sockets.TcpClient>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-201">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is used to return a <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="d1906-202">これは、<xref:System.Net.Sockets.TcpClient>新しく接続したクライアントと通信するために使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-202">This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-203">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="d1906-203">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-204"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> プロパティを使用して特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="d1906-204">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="d1906-205">このコードを取得したら、Windows Socket Version 2 API エラー コードのマニュアルからエラーの詳細情報を確認できます。これは MSDN から入手できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-205">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1906-206">保留中の接続要求を非同期操作として受け入れます。</span><span class="sxs-lookup"><span data-stu-id="d1906-206">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="d1906-207"><see cref="T:System.Threading.Tasks.Task`1" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d1906-207">Returns <see cref="T:System.Threading.Tasks.Task`1" /></span></span>  
  
 <span data-ttu-id="d1906-208">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d1906-208">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="d1906-209">タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、データの送受信に使用される <see cref="T:System.Net.Sockets.TcpClient" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d1906-209">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-210">この操作はブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d1906-210">This operation will not block.</span></span> <span data-ttu-id="d1906-211">返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、TCP 接続が許可された後に完了します。</span><span class="sxs-lookup"><span data-stu-id="d1906-211">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.</span></span>  
  
 <span data-ttu-id="d1906-212">使用して、<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>メソッドは、基になるかを取得する<xref:System.Net.Sockets.NetworkStream>、返された<xref:System.Net.Sockets.TcpClient>で、<xref:System.Threading.Tasks.Task%601>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-212">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="d1906-213"><xref:System.Net.Sockets.NetworkStream>くれますメソッドでのリモート ホストと送受信します。</span><span class="sxs-lookup"><span data-stu-id="d1906-213">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="d1906-214">経由は、 <xref:System.Net.Sockets.TcpClient>、必ずその<xref:System.Net.Sockets.TcpClient.Close%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="d1906-214">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="d1906-215">も柔軟性が向上する場合、<xref:System.Net.Sockets.TcpClient>のオファーは、使用を検討して<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>または<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-215">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-216">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-216">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-217">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-217">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-218">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="d1906-218">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-219"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> プロパティを使用して特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="d1906-219">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="d1906-220">このコードを取得したら、Windows Socket Version 2 API エラー コードのマニュアルからエラーの詳細情報を確認できます。これは MSDN から入手できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-220">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d1906-221"><see cref="T:System.Net.Sockets.TcpListener" /> がクライアント接続をアクティブに待機しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d1906-221">Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening for client connections.</span></span></summary>
        <value>
          <span data-ttu-id="d1906-222"><see cref="T:System.Net.Sockets.TcpListener" /> がアクティブに待機している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-222"><see langword="true" /> if <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-223">派生するクラス<xref:System.Net.Sockets.TcpListener>かどうかをこのプロパティを使用することができます、<xref:System.Net.Sockets.Socket>受信接続が試行リッスンします。</span><span class="sxs-lookup"><span data-stu-id="d1906-223">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts.</span></span> <span data-ttu-id="d1906-224"><xref:System.Net.Sockets.TcpClient.Active%2A>プロパティは、冗長を避けるために使用できます<xref:System.Net.Sockets.TcpListener.Start%2A>しようとします。</span><span class="sxs-lookup"><span data-stu-id="d1906-224">The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed"><span data-ttu-id="d1906-225">NAT トラバーサルを有効にするか無効にするかを指定するブール値。</span><span class="sxs-lookup"><span data-stu-id="d1906-225">A Boolean value that specifies whether to enable or disable NAT traversal.</span></span></param>
        <summary><span data-ttu-id="d1906-226"><see cref="T:System.Net.Sockets.TcpListener" /> インスタンスのネットワーク アドレス変換 (NAT: Network Address Translation) トラバーサルを有効または無効にします。</span><span class="sxs-lookup"><span data-stu-id="d1906-226">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.TcpListener" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-227"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>メソッドを使用を有効にするにまたは NAT トラバーサルを無効にする、<xref:System.Net.Sockets.TcpListener>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="d1906-227">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span> <span data-ttu-id="d1906-228">NAT トラバーサルを指定するには、Teredo、6to4、または ISATAP トンネルを使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-228">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="d1906-229">ときに、`allowed`パラメーターが false の場合、<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>に関連付けられているソケットでオプションが設定されている<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-229">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="d1906-230">NAT トラバーサルが明示的に無効になります、<xref:System.Net.Sockets.TcpListener>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="d1906-230">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span>  
  
 <span data-ttu-id="d1906-231">ときに、`allowed`パラメーターが true の場合、<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>に関連付けられているソケットでオプションが設定されている<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-231">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="d1906-232">これは、NAT トラバーサルを許可することがあります、<xref:System.Net.Sockets.TcpListener>システム上でファイアウォール規則によって異なります。</span><span class="sxs-lookup"><span data-stu-id="d1906-232">This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="d1906-233"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>メソッドを呼び出す前に呼び出す必要があります、<xref:System.Net.Sockets.TcpListener.Start%2A>メソッド (前に、ソケットをバインドすると)、接続要求のリッスンが開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-233">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound).</span></span> <span data-ttu-id="d1906-234">場合<xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>メソッドは、<xref:System.Net.Sockets.TcpListener.Start%2A>メソッド、<xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d1906-234">If <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
 <span data-ttu-id="d1906-235">Teredo アドレスは、IPv6 アドレス プレフィックスが 2001年::/32 です。</span><span class="sxs-lookup"><span data-stu-id="d1906-235">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="d1906-236">Teredo アドレスは、通常の DNS 名解決によって返されるまたはローカル インターフェイスに割り当てられている IPv6 アドレスとして列挙できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-236">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-237"><see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> メソッドが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> メソッドの呼び出し後に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="d1906-237">The <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> method was called after calling the <see cref="M:System.Net.Sockets.TcpListener.Start" /> method</span></span></exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="d1906-238">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="d1906-238">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="d1906-239">受け入れ操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d1906-239">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="d1906-240">このオブジェクトは、操作の完了時に<c>コールバック</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="d1906-240">This object is passed to the <c>callback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="d1906-241">受信接続の試行を受け入れる非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-241">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="d1906-242"><see cref="T:System.IAsyncResult" /> の非同期の作成を参照する <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-242">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-243">非同期の<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-243">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method.</span></span> <span data-ttu-id="d1906-244">通常、このメソッドはによって、`callback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="d1906-244">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="d1906-245">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d1906-245">This method does not block until the operation completes.</span></span> <span data-ttu-id="d1906-246">操作が完了するまでをブロックするを使用して、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-246">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
 <span data-ttu-id="d1906-247">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-247">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-248">呼び出すことができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 、返されたプロパティ<xref:System.Net.Sockets.Socket>をリモート ホストのネットワーク アドレスとポート番号を識別します。</span><span class="sxs-lookup"><span data-stu-id="d1906-248">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-249">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)の詳細なエラーの説明です。</span><span class="sxs-lookup"><span data-stu-id="d1906-249">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-250">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-250">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-251">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-251">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-252">使用を次のコード例に示します、<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>メソッドを作成し、ソケットを接続します。</span><span class="sxs-lookup"><span data-stu-id="d1906-252">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="d1906-253">コールバック デリゲートの呼び出し、<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>メソッドの非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="d1906-253">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-254">ソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="d1906-254">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1906-255"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="d1906-255">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="d1906-256">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="d1906-256">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="d1906-257">受け入れ操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d1906-257">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="d1906-258">このオブジェクトは、操作の完了時に<c>コールバック</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="d1906-258">This object is passed to the <c>callback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="d1906-259">受信接続の試行を受け入れる非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-259">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="d1906-260"><see cref="T:System.IAsyncResult" /> の非同期の作成を参照する <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-260">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-261">非同期の<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>操作を呼び出すことによって完了する必要があります、<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-261">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method.</span></span> <span data-ttu-id="d1906-262">通常、このメソッドはによって、`callback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="d1906-262">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="d1906-263">このメソッドは、操作が完了するまでにはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d1906-263">This method does not block until the operation completes.</span></span> <span data-ttu-id="d1906-264">操作が完了するまでをブロックするを使用して、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-264">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
 <span data-ttu-id="d1906-265">詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-265">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-266">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)の詳細なエラーの説明です。</span><span class="sxs-lookup"><span data-stu-id="d1906-266">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-267">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-267">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-268">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-268">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-269">使用を次のコード例に示します、<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>メソッドを作成し、ソケットを接続します。</span><span class="sxs-lookup"><span data-stu-id="d1906-269">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="d1906-270">コールバック デリゲートの呼び出し、<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>メソッドの非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="d1906-270">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-271">ソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="d1906-271">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1906-272"><see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</span><span class="sxs-lookup"><span data-stu-id="d1906-272">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="d1906-273">受信接続の試行を待機するポート。</span><span class="sxs-lookup"><span data-stu-id="d1906-273">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="d1906-274">指定したポートをリッスンする新しい <see cref="T:System.Net.Sockets.TcpListener" /> インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="d1906-274">Creates a new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></summary>
        <returns><span data-ttu-id="d1906-275"><see cref="T:System.Net.Sockets.TcpListener" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d1906-275">Returns <see cref="T:System.Net.Sockets.TcpListener" />.</span></span>  
  
 <span data-ttu-id="d1906-276">指定されたポートをリッスンする <see cref="T:System.Net.Sockets.TcpListener" /> の新しいインスタンス。</span><span class="sxs-lookup"><span data-stu-id="d1906-276">A new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="d1906-277"><see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-277">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="d1906-278">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.Socket" /> を作成してリモート ホスト通信を処理します。</span><span class="sxs-lookup"><span data-stu-id="d1906-278">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="d1906-279"><see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-279">A <see cref="T:System.Net.Sockets.Socket" />.</span></span>  
  
 <span data-ttu-id="d1906-280">データの送受信に使用する <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-280">The <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-281">このメソッドは、操作するまでブロックを完了します。</span><span class="sxs-lookup"><span data-stu-id="d1906-281">This method blocks until the operation is complete.</span></span> <span data-ttu-id="d1906-282">この操作を同期的に実行するを使用して、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-282">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-283">呼び出すことができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 、返されたプロパティ<xref:System.Net.Sockets.Socket>をリモート ホストのネットワーク アドレスとポート番号を識別します。</span><span class="sxs-lookup"><span data-stu-id="d1906-283">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-284">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)の詳細なエラーの説明です。</span><span class="sxs-lookup"><span data-stu-id="d1906-284">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-285">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-285">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-286">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-286">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-287">使用を次のコード例に示します、<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>メソッドを作成し、ソケットを接続します。</span><span class="sxs-lookup"><span data-stu-id="d1906-287">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="d1906-288">コールバック デリゲートの呼び出し、<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>メソッドの非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="d1906-288">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1906-289">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="d1906-289">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d1906-290"><paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d1906-290">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d1906-291"><see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで <paramref name="asyncResult" /> パラメーターが作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="d1906-291">The <paramref name="asyncResult" /> parameter was not created by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-292"><see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> メソッドは既に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="d1906-292">The <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-293"><see cref="T:System.Net.Sockets.Socket" /> へのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="d1906-293">An error occurred while attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="d1906-294"><see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-294">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="d1906-295">受信接続の試行を非同期的に受け入れ、新しい <see cref="T:System.Net.Sockets.TcpClient" /> を作成してリモート ホスト通信を処理します。</span><span class="sxs-lookup"><span data-stu-id="d1906-295">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.TcpClient" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="d1906-296"><see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-296">A <see cref="T:System.Net.Sockets.TcpClient" />.</span></span>  
  
 <span data-ttu-id="d1906-297">データの送受信に使用する <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-297">The <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-298">このメソッドは、操作するまでブロックを完了します。</span><span class="sxs-lookup"><span data-stu-id="d1906-298">This method blocks until the operation is complete.</span></span> <span data-ttu-id="d1906-299">この操作を同期的に実行するを使用して、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-299">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-300">呼び出すことができます、<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>基になるソケットのプロパティ (<xref:System.Net.Sockets.TcpClient.Client%2A>) をリモート ホストのネットワーク アドレスとポート番号を識別します。</span><span class="sxs-lookup"><span data-stu-id="d1906-300">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-301">表示された場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)の詳細なエラーの説明です。</span><span class="sxs-lookup"><span data-stu-id="d1906-301">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-302">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-302">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-303">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-303">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-304">使用を次のコード例に示します、<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>メソッドを作成し、ソケットを接続します。</span><span class="sxs-lookup"><span data-stu-id="d1906-304">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="d1906-305">コールバック デリゲートの呼び出し、<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>メソッドの非同期要求を終了します。</span><span class="sxs-lookup"><span data-stu-id="d1906-305">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d1906-306"><see cref="T:System.Net.Sockets.TcpListener" /> で、1 つの基になるソケットだけに特定のポートの待機を許可するかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="d1906-306">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one underlying socket to listen to a specific port.</span></span></summary>
        <value>
          <span data-ttu-id="d1906-307"><see cref="T:System.Net.Sockets.TcpListener" /> で、1 つの <see cref="T:System.Net.Sockets.TcpListener" /> だけに特定のポートの待機を許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-307"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one <see cref="T:System.Net.Sockets.TcpListener" /> to listen to a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="d1906-308">である必要があります。</span><span class="sxs-lookup"><span data-stu-id="d1906-308">.</span></span> <span data-ttu-id="d1906-309">既定値は、Windows Server 2003 および Windows XP Service Pack 2 以降では <see langword="true" /> で、その他のすべてのバージョンでは <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="d1906-309">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-310">既定では、複数のリスナーは、特定のポートを聴くことができます。</span><span class="sxs-lookup"><span data-stu-id="d1906-310">By default, multiple listeners can listen to a specific port.</span></span> <span data-ttu-id="d1906-311">ただし、リスナーの 1 つだけでは、ポートに送信されるネットワーク トラフィックの操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-311">However, only one of the listeners can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="d1906-312">複数のリスナーが特定のポートにバインドしようとすると、特定の IP アドレスを持つ 1 つはそのポートに送信されるネットワーク トラフィックを処理します。</span><span class="sxs-lookup"><span data-stu-id="d1906-312">If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</span></span> <span data-ttu-id="d1906-313">使用することができます、<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>プロパティを複数のリスナーが特定のポートをリッスンしていることを防ぐためにします。</span><span class="sxs-lookup"><span data-stu-id="d1906-313">You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.</span></span>  
  
 <span data-ttu-id="d1906-314">呼び出しの前に、このプロパティ設定<xref:System.Net.Sockets.TcpListener.Start%2A>を呼び出したり、<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッドし、このプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="d1906-314">Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-315">次のコード例を取得および設定、<xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d1906-315">The following code example gets and sets the <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-316"><see cref="T:System.Net.Sockets.TcpListener" />が開始されました。</span><span class="sxs-lookup"><span data-stu-id="d1906-316">The <see cref="T:System.Net.Sockets.TcpListener" /> has been started.</span></span> <span data-ttu-id="d1906-317"><see cref="M:System.Net.Sockets.TcpListener.Stop" /> メソッドを呼び出して、<see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> プロパティを設定してください。</span><span class="sxs-lookup"><span data-stu-id="d1906-317">Call the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method and then set the <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> property.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-318">基になるソケットへのアクセスを試みているときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="d1906-318">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d1906-319">基になる <see cref="T:System.Net.Sockets.Socket" /> は閉じられています。</span><span class="sxs-lookup"><span data-stu-id="d1906-319">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d1906-320">現在の <see cref="T:System.Net.Sockets.TcpListener" /> の基になる <see cref="T:System.Net.EndPoint" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="d1906-320">Gets the underlying <see cref="T:System.Net.EndPoint" /> of the current <see cref="T:System.Net.Sockets.TcpListener" />.</span></span></summary>
        <value><span data-ttu-id="d1906-321"><see cref="T:System.Net.EndPoint" /> をバインドする対象の <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-321">The <see cref="T:System.Net.EndPoint" /> to which the <see cref="T:System.Net.Sockets.Socket" /> is bound.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-322">使用することができます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>ソケット接続が確立した後で着信クライアント接続要求をリッスンするように使用されているローカル ネットワーク インターフェイスとポート番号を識別するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="d1906-322">You can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</span></span> <span data-ttu-id="d1906-323">これをキャストする必要がありますまず<xref:System.Net.EndPoint>を<xref:System.Net.IPEndPoint>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-323">You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="d1906-324">呼び出すことができます、 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> 、ローカル IP アドレスを取得するプロパティと<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>ローカル ポート番号を取得するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="d1906-324">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> property to retrieve the local port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-325">次のコード例では、ローカル IP アドレスとポート番号を表示する、<xref:System.Net.Sockets.TcpListener>が接続要求をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="d1906-325">The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1906-326">保留中の接続要求があるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="d1906-326">Determines if there are pending connection requests.</span></span></summary>
        <returns>
          <span data-ttu-id="d1906-327">接続が保留中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-327"><see langword="true" /> if connections are pending; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-328">この非ブロッキング メソッドは、保留中の接続要求があるかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d1906-328">This non-blocking method determines if there are any pending connection requests.</span></span> <span data-ttu-id="d1906-329"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>と<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドまで実行をブロックする、<xref:System.Net.Sockets.TcpListener.Start%2A>メソッドには、受信接続要求がキューに格納した、<xref:System.Net.Sockets.TcpListener.Pending%2A>メソッドは、ライセンス条項に同意する前に、接続が利用可能なかどうかを判断するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-329">Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the <xref:System.Net.Sockets.TcpListener.Pending%2A> method can be used to determine if connections are available before attempting to accept them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-330">次のコード例のチェック、<xref:System.Net.Sockets.TcpListener.Pending%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-330">The following code example checks the <xref:System.Net.Sockets.TcpListener.Pending%2A> method.</span></span> <span data-ttu-id="d1906-331">接続要求が受け入れられるを待機している場合への呼び出し、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドが行われます。</span><span class="sxs-lookup"><span data-stu-id="d1906-331">If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-332">リスナーが、<see cref="M:System.Net.Sockets.TcpListener.Start" /> への呼び出しで開始されていません。</span><span class="sxs-lookup"><span data-stu-id="d1906-332">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d1906-333">基になるネットワーク <see cref="T:System.Net.Sockets.Socket" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="d1906-333">Gets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="d1906-334">基になる <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="d1906-334">The underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-335"><xref:System.Net.Sockets.TcpListener> 作成、<xref:System.Net.Sockets.Socket>着信クライアント接続要求をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="d1906-335"><xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests.</span></span> <span data-ttu-id="d1906-336">派生するクラス<xref:System.Net.Sockets.TcpListener>このプロパティを使用してこの<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-336">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="d1906-337">使用して、基になる<xref:System.Net.Sockets.Socket>によって返される、<xref:System.Net.Sockets.TcpListener.Server%2A>をさらにアクセスが必要な場合は、プロパティ<xref:System.Net.Sockets.TcpListener>を提供します。</span><span class="sxs-lookup"><span data-stu-id="d1906-337">Use the underlying <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpListener.Server%2A> property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-338"><xref:System.Net.Sockets.TcpListener.Server%2A>プロパティだけを返します、<xref:System.Net.Sockets.Socket>着信クライアント接続要求をリッスンするために使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-338">The <xref:System.Net.Sockets.TcpListener.Server%2A> property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests.</span></span> <span data-ttu-id="d1906-339">使用して、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 、保留中の接続要求を受け入れるし、取得する方法、<xref:System.Net.Sockets.Socket>のデータを送受信します。</span><span class="sxs-lookup"><span data-stu-id="d1906-339">Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data.</span></span> <span data-ttu-id="d1906-340">使用することも、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 、保留中の接続要求を受け入れるし、取得する方法、<xref:System.Net.Sockets.TcpClient>データを送受信するためです。</span><span class="sxs-lookup"><span data-stu-id="d1906-340">You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-341">使用を次のコード例に示します、<xref:System.Net.Sockets.TcpListener.Server%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d1906-341">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.Server%2A> property.</span></span> <span data-ttu-id="d1906-342">基になる<xref:System.Net.Sockets.Socket>が取得されると、 <xref:System.Net.Sockets.SocketOptionName.Linger> <xref:System.Net.Sockets.Socket>オプションが構成されているタイムアウトを 10 秒後に、接続が閉じられた後、このデータは、まだネットワーク バッファーに残っている場合。</span><span class="sxs-lookup"><span data-stu-id="d1906-342">The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</span></span>  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d1906-343">受信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-343">Starts listening for incoming connection requests.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1906-344">受信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-344">Starts listening for incoming connection requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-345"><xref:System.Net.Sockets.TcpListener.Start%2A>メソッドは、基になる、初期化<xref:System.Net.Sockets.Socket>、ローカル エンドポイントにバインドされ、受信接続が試行をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="d1906-345">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="d1906-346">接続要求を受信する場合、<xref:System.Net.Sockets.TcpListener.Start%2A>要求はキューに、継続が呼び出されるまで、追加の要求をリッスンしているメソッドを<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-346">If a connection request is received, the <xref:System.Net.Sockets.TcpListener.Start%2A> method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="d1906-347">場合<xref:System.Net.Sockets.TcpListener>接続要求を受信スローすることにより、接続の最大数が既にキューに、後に、<xref:System.Net.Sockets.SocketException>クライアントにします。</span><span class="sxs-lookup"><span data-stu-id="d1906-347">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="d1906-348">着信接続のキューからの接続を削除するには、いずれかを使用、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドまたは<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-348">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="d1906-349"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドは、キューからの接続を削除し、返す、<xref:System.Net.Sockets.TcpClient>データの送受信を行えます。</span><span class="sxs-lookup"><span data-stu-id="d1906-349">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="d1906-350"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドは、<xref:System.Net.Sockets.Socket>同じ操作を実行に使用することできます。</span><span class="sxs-lookup"><span data-stu-id="d1906-350">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="d1906-351">使用して、アプリケーションには、同期 I/O だけが必要な場合<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-351">If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="d1906-352">詳細な動作上のコントロールは、使用して<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-352">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span> <span data-ttu-id="d1906-353">これら両方のメソッドは、接続要求が、キューで使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="d1906-353">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="d1906-354">使用して、<xref:System.Net.Sockets.TcpListener.Stop%2A>を終了するメソッド、<xref:System.Net.Sockets.TcpListener>リッスンし、停止します。</span><span class="sxs-lookup"><span data-stu-id="d1906-354">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="d1906-355">別に、承認済みの接続の終了を担当しています。</span><span class="sxs-lookup"><span data-stu-id="d1906-355">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-356">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-356">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-357">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-357">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-358">次のコード例でどのように<xref:System.Net.Sockets.TcpListener.Start%2A>着信クライアント接続要求をリッスンするために使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-358">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-359"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> プロパティを使用して特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="d1906-359">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="d1906-360">このコードを取得したら、Windows Socket Version 2 API エラー コードのマニュアルからエラーの詳細情報を確認できます。これは MSDN から入手できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-360">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog"><span data-ttu-id="d1906-361">保留中の接続のキューの最大長。</span><span class="sxs-lookup"><span data-stu-id="d1906-361">The maximum length of the pending connections queue.</span></span></param>
        <summary><span data-ttu-id="d1906-362">最大数の保留中の接続がある状態で、受信接続要求のリッスンを開始します。</span><span class="sxs-lookup"><span data-stu-id="d1906-362">Starts listening for incoming connection requests with a maximum number of pending connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-363"><xref:System.Net.Sockets.TcpListener.Start%2A>メソッドは、基になる、初期化<xref:System.Net.Sockets.Socket>、ローカル エンドポイントにバインドされ、受信接続が試行をリッスンします。</span><span class="sxs-lookup"><span data-stu-id="d1906-363">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="d1906-364">接続要求が受信した場合、<xref:System.Net.Sockets.TcpListener.Start%2A>は要求はキューにし、呼び出すまで、追加の要求のリッスンを続行、<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-364">If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="d1906-365">場合<xref:System.Net.Sockets.TcpListener>が、スローする接続の最大数は、キューに登録した後、接続要求を受信する<xref:System.Net.Sockets.SocketException>クライアントにします。</span><span class="sxs-lookup"><span data-stu-id="d1906-365">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="d1906-366">着信接続のキューからの接続を削除するには、いずれかを使用、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドまたは<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-366">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="d1906-367"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドは、キューからの接続を削除し、返す、<xref:System.Net.Sockets.TcpClient>データの送受信を行えます。</span><span class="sxs-lookup"><span data-stu-id="d1906-367">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="d1906-368"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドは、<xref:System.Net.Sockets.Socket>同じ操作を実行に使用することできます。</span><span class="sxs-lookup"><span data-stu-id="d1906-368">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="d1906-369">アプリケーションには、同期 I/O しか必要とする場合を使用して、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-369">If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="d1906-370">詳細な動作上のコントロールは、使用して<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d1906-370">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="d1906-371">これら両方のメソッドは、接続要求が、キューで使用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="d1906-371">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="d1906-372">使用して、<xref:System.Net.Sockets.TcpListener.Stop%2A>を終了するメソッド、<xref:System.Net.Sockets.TcpListener>リッスンし、停止します。</span><span class="sxs-lookup"><span data-stu-id="d1906-372">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="d1906-373">別に、承認済みの接続の終了を担当しています。</span><span class="sxs-lookup"><span data-stu-id="d1906-373">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-374">使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)エラーの詳細な説明をします。</span><span class="sxs-lookup"><span data-stu-id="d1906-374">Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/) for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-375">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-375">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-376">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-376">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-377">次のコード例でどのように<xref:System.Net.Sockets.TcpListener.Start%2A>着信クライアント接続要求をリッスンするために使用します。</span><span class="sxs-lookup"><span data-stu-id="d1906-377">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-378">ソケットへのアクセス中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="d1906-378">An error occurred while accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d1906-379"><paramref name="backlog" /> パラメーターが 0 未満か、または使用できる接続の最大数を超えています。</span><span class="sxs-lookup"><span data-stu-id="d1906-379">The <paramref name="backlog" /> parameter is less than zero or exceeds the maximum number of permitted connections.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d1906-380">基になる <see cref="T:System.Net.Sockets.Socket" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="d1906-380">The underlying <see cref="T:System.Net.Sockets.Socket" /> is null.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d1906-381">リスナーを閉じます。</span><span class="sxs-lookup"><span data-stu-id="d1906-381">Closes the listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1906-382"><xref:System.Net.Sockets.TcpListener.Stop%2A> リスナーを閉じます。</span><span class="sxs-lookup"><span data-stu-id="d1906-382"><xref:System.Net.Sockets.TcpListener.Stop%2A> closes the listener.</span></span> <span data-ttu-id="d1906-383">キュー内の任意の未承認の接続要求はすべて失われます。</span><span class="sxs-lookup"><span data-stu-id="d1906-383">Any unaccepted connection requests in the queue will be lost.</span></span> <span data-ttu-id="d1906-384">許容されるためにリモート ホスト接続を待機しているがスローされます、<xref:System.Net.Sockets.SocketException>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-384">Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="d1906-385">別に、承認済みの接続の終了を担当しています。</span><span class="sxs-lookup"><span data-stu-id="d1906-385">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1906-386">このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。</span><span class="sxs-lookup"><span data-stu-id="d1906-386">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="d1906-387">詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</span><span class="sxs-lookup"><span data-stu-id="d1906-387">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1906-388">次のコード例では、使用方法を示します、<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッドを基になる閉じる<xref:System.Net.Sockets.Socket>です。</span><span class="sxs-lookup"><span data-stu-id="d1906-388">The following code example demonstrates using the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="d1906-389"><see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> プロパティを使用して特定のエラー コードを取得します。</span><span class="sxs-lookup"><span data-stu-id="d1906-389">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="d1906-390">このコードを取得したら、Windows Socket Version 2 API エラー コードのマニュアルからエラーの詳細情報を確認できます。これは MSDN から入手できます。</span><span class="sxs-lookup"><span data-stu-id="d1906-390">When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="d1906-391"><see cref="M:System.Net.Sockets.TcpListener.Stop" />メソッドも閉じられます、基になる<see cref="T:System.Net.Sockets.Socket" />、新たに作成および<see cref="T:System.Net.Sockets.Socket" />の<see cref="T:System.Net.Sockets.TcpListener" />です。</span><span class="sxs-lookup"><span data-stu-id="d1906-391">The <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method also closes the underlying <see cref="T:System.Net.Sockets.Socket" />, and creates a new <see cref="T:System.Net.Sockets.Socket" /> for the <see cref="T:System.Net.Sockets.TcpListener" />.</span></span> <span data-ttu-id="d1906-392">基になるに任意のプロパティを設定した場合<see cref="T:System.Net.Sockets.Socket" />呼び出しの前に、<see cref="M:System.Net.Sockets.TcpListener.Stop" />メソッド、それらのプロパティに引き継がれない新しい<see cref="T:System.Net.Sockets.Socket" />です。</span><span class="sxs-lookup"><span data-stu-id="d1906-392">If you set any properties on the underlying <see cref="T:System.Net.Sockets.Socket" /> prior to calling the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method, those properties will not carry over to the new <see cref="T:System.Net.Sockets.Socket" />.</span></span></para>
        </block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>