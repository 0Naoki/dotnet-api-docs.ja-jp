<Type Name="ArrayPool&lt;T&gt;" FullName="System.Buffers.ArrayPool&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c365ab2f2412036b41ba89388ab6a1187f6696d2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36647250" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ArrayPool&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ArrayPool`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.ArrayPool`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ArrayPool(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ArrayPool abstract" />
  <TypeSignature Language="F#" Value="type ArrayPool&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Buffers</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">リソース プールに含まれるオブジェクトの型。</typeparam>
    <summary>
      <see cref="T:T[]" /> 型のインスタンスを再利用できるようにするリソース プールを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 使用して、<xref:System.Buffers.ArrayPool%601>レンタルしてバッファーを返すクラス (を使用して、<xref:System.Buffers.ArrayPool%601.Rent%2A>と<xref:System.Buffers.ArrayPool%601.Return%2A>メソッド) の配列が作成され、頻繁に破棄される場所の状況でパフォーマンスを向上させることができます、その結果、ガベージの大量のメモリ不足しています。コレクターです。
  
 ]]></format>
    </remarks>
    <threadsafe>このクラスは、スレッド セーフです。 すべてのメンバーは複数のスレッドで同時に使用することがあります。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ArrayPool ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.ArrayPool`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ArrayPool();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Buffers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Buffers.ArrayPool`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
このコンス トラクターが保護されることに注意してください。派生したクラスによってのみ呼び出すことができます、<xref:System.Buffers.ArrayPool%601>クラスです。 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Buffers.ArrayPool&lt;T&gt; Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Buffers.ArrayPool`1&lt;!T&gt; Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.ArrayPool`1.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As ArrayPool(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::ArrayPool&lt;T&gt; ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Buffers.ArrayPool&lt;'T&gt;" Usage="System.Buffers.ArrayPool&lt;'T&gt;.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Buffers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.ArrayPool&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Buffers.ArrayPool`1" /> クラスの新しいインスタンスを作成します。</summary>
        <returns>
          <see cref="T:System.Buffers.ArrayPool`1" /> クラスの新しいインスタンス。</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Buffers.ArrayPool&lt;T&gt; Create (int maxArrayLength, int maxArraysPerBucket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Buffers.ArrayPool`1&lt;!T&gt; Create(int32 maxArrayLength, int32 maxArraysPerBucket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (maxArrayLength As Integer, maxArraysPerBucket As Integer) As ArrayPool(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Buffers::ArrayPool&lt;T&gt; ^ Create(int maxArrayLength, int maxArraysPerBucket);" />
      <MemberSignature Language="F#" Value="static member Create : int * int -&gt; System.Buffers.ArrayPool&lt;'T&gt;" Usage="System.Buffers.ArrayPool&lt;'T&gt;.Create (maxArrayLength, maxArraysPerBucket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Buffers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.ArrayPool&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxArrayLength" Type="System.Int32" />
        <Parameter Name="maxArraysPerBucket" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxArrayLength">プールに格納できる配列インスタンスの最大長。</param>
        <param name="maxArraysPerBucket">プール内の各バケットに格納できる配列インスタンスの最大数。 プールは、アクセスを高速化するため、類似する長さの配列をバケットにグループ化します。</param>
        <summary>指定した構成を使って、<see cref="T:System.Buffers.ArrayPool`1" /> クラスの新しいインスタンスを作成します。</summary>
        <returns>指定した構成を備えた <see cref="T:System.Buffers.ArrayPool`1" /> クラスの新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
インスタンス、<xref:System.Buffers.ArrayPool%601>このメソッドによって作成されたクラスは、配列をグループ化なしのバケットには複数の`maxArraysPerBucket`を超えていないこれらの配列を使用して、各バケットで`maxArrayLength`の長さ。
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rent">
      <MemberSignature Language="C#" Value="public abstract T[] Rent (int minimumLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T[] Rent(int32 minimumLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Rent (minimumLength As Integer) As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;T&gt; ^ Rent(int minimumLength);" />
      <MemberSignature Language="F#" Value="abstract member Rent : int -&gt; 'T[]" Usage="arrayPool.Rent minimumLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Buffers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minimumLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minimumLength">配列の最小長。</param>
        <summary>要求した長さ以上のバッファーを取得します。</summary>
        <returns>長さが <paramref name="minimumLength" /> 以上である <see cref="T:T[]" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

このバッファーは、呼び出し元に貸与し、を使用して同じプールに返される必要があります、<xref:System.Buffers.ArrayPool%601.Return%2A>メソッド、ことへの後続の呼び出しで再利用できるように、<xref:System.Buffers.ArrayPool%601.Rent%2A>メソッドです。 借りたバッファーが返されないとは、致命的なエラーではありません。 ただしになる可能性がある低下アプリケーションのパフォーマンスにプールが失われるものを置き換える新しいバッファーを作成する必要があります。
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public abstract void Return (T[] array, bool clearArray = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Return(!T[] array, bool clearArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Return (array As T(), Optional clearArray As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member Return : 'T[] * bool -&gt; unit" Usage="arrayPool.Return (array, clearArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Buffers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="clearArray" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="array">前に <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /> メソッドを使って取得した、プールに戻す必要があるバッファー。</param>
        <param name="clearArray">再利用する前にバッファーの内容を消去する必要があるかどうかを示します。 <paramref name="clearArray" /> が <see langword="true" /> に設定されている場合、プールを後で再利用できるようにバッファーを格納するときに、<see cref="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)" /> メソッドはその内容の <paramref name="array" /> をクリアして、後で <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /> メソッドを使う呼び出し元に以前の呼び出し元の内容が見えないようにします。 <paramref name="clearArray" /> が <see langword="false" /> に設定されている場合、またはプールがバッファーを解放する場合は、配列の内容は変更されないままになります。</param>
        <summary>同じ <see cref="T:System.Buffers.ArrayPool`1" /> インスタンスで前に <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)" /> メソッドを使って取得した配列を、プールに戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

バッファーがプールに返された、呼び出し元はバッファーのすべての所有権を放棄し、使用しないでください。 特定の呼び出しから返される、参照、<xref:System.Buffers.ArrayPool%601.Rent%2A>メソッドを使用して返されるだけ必要があります、<xref:System.Buffers.ArrayPool%601.Return%2A>メソッドを 1 回です。 既定値<xref:System.Buffers.ArrayPool%601>可能性があります保持返されたバッファーをレンタルするために、プールが既に格納されているための十分なバッファーを持っていると判断された場合は、もう一度、またはこれから返されたバッファーに解放することがあります。
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shared">
      <MemberSignature Language="C#" Value="public static System.Buffers.ArrayPool&lt;T&gt; Shared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Buffers.ArrayPool`1&lt;!T&gt; Shared" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.ArrayPool`1.Shared" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Shared As ArrayPool(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Buffers::ArrayPool&lt;T&gt; ^ Shared { System::Buffers::ArrayPool&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Shared : System.Buffers.ArrayPool&lt;'T&gt;" Usage="System.Buffers.ArrayPool&lt;'T&gt;.Shared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Buffers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.ArrayPool&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>共有されている <see cref="T:System.Buffers.ArrayPool`1" /> インスタンスを取得します。</summary>
        <value>共有<see cref="T:System.Buffers.ArrayPool`1" />インスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

共有プールの既定の実装を提供する、<xref:System.Buffers.ArrayPool%601>一般的な適用性のためのものでは、クラスです。 共有クラスは、複数のサイズの配列を保持し、実際に要求しましたより大きな配列を送り返す場合がありますには決して送り返すが要求されたよりも小さい配列。 共有クラスを使用して、元のバッファーをレンタル、<xref:System.Buffers.ArrayPool%601.Rent%2A>メソッドか、適切なバッファーが使用可能な新しいバッファーの場合は 1 つに割り当てられることはできません、プールから取得されている既存のバッファーになります。
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>