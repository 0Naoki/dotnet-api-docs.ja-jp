<Type Name="ButtonBase" FullName="System.Windows.Controls.Primitives.ButtonBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13e555cd2ed8ffe1e34cbc976d8ddc082c6bce0a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ButtonBase : System.Windows.Controls.ContentControl, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ButtonBase extends System.Windows.Controls.ContentControl implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ButtonBase&#xA;Inherits ContentControl&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class ButtonBase abstract : System::Windows::Controls::ContentControl, System::Windows::Input::ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Button)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="77c61-101">すべての <see cref="T:System.Windows.Controls.Button" /> コントロールの基本クラスを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="77c61-101">Represents the base class for all <see cref="T:System.Windows.Controls.Button" /> controls.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-102">処理、 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 、ユーザーがクリックしたときに応答するイベント、<xref:System.Windows.Controls.Primitives.ButtonBase>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-102">Handle the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event to respond when the user clicks a <xref:System.Windows.Controls.Primitives.ButtonBase>.</span></span> <span data-ttu-id="77c61-103">ユーザーを発生させることができます、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベントを使用して、<xref:System.Windows.Controls.AccessText>またはコントロールにフォーカスがあるときに、ENTER キーまたは space キーを押して、します。</span><span class="sxs-lookup"><span data-stu-id="77c61-103">The user can raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by using an <xref:System.Windows.Controls.AccessText> or by pressing ENTER or the SPACEBAR when the control has focus.</span></span>  <span data-ttu-id="77c61-104">ユーザーがコントロールのセット、space キーを押したとき<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>に`true`し、マウスをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="77c61-104">When the user presses the SPACEBAR, the control sets <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> to `true` and captures the mouse.</span></span>  <span data-ttu-id="77c61-105">その結果、コントロール イベントを発生させるマウスなど<xref:System.Windows.UIElement.MouseEnter>と<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-105">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="77c61-106">使用して、 <xref:System.Windows.Controls.AccessText> ENTER が変わらないまたは<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>または、マウスをキャプチャが大きく、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="77c61-106">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but it does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="77c61-107"><xref:System.Windows.Controls.Primitives.ButtonBase>設定、<xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A>添付プロパティ`true`です。</span><span class="sxs-lookup"><span data-stu-id="77c61-107">The <xref:System.Windows.Controls.Primitives.ButtonBase> sets the <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> attached property to `true`.</span></span>  
  
 <span data-ttu-id="77c61-108"><xref:System.Windows.Controls.Primitives.ButtonBase>設定、<xref:System.Windows.UIElement.IsInputMethodEnabled%2A>プロパティを`false`です。</span><span class="sxs-lookup"><span data-stu-id="77c61-108">The <xref:System.Windows.Controls.Primitives.ButtonBase> sets the <xref:System.Windows.UIElement.IsInputMethodEnabled%2A> property to `false`.</span></span>  
  
 <span data-ttu-id="77c61-109">A<xref:System.Windows.Controls.Primitives.ButtonBase>は、 <xref:System.Windows.Controls.ContentControl>、任意の型 (文字列、画像、パネルなど) の 1 つのオブジェクトに含めることを意味します。</span><span class="sxs-lookup"><span data-stu-id="77c61-109">A <xref:System.Windows.Controls.Primitives.ButtonBase> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="77c61-110">詳細については、<xref:System.Windows.Controls.ContentControl> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="77c61-110">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ButtonBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ButtonBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="77c61-111">
            <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-111">Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Primitives.ButtonBase.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-112">
            <see cref="T:System.Windows.Controls.Button" /> がクリックされたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-112">Occurs when a <see cref="T:System.Windows.Controls.Button" /> is clicked.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-113">ユーザーを発生させることができます、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベントを使用して、<xref:System.Windows.Controls.AccessText>またはコントロールにフォーカスがあるときに、ENTER キーまたは space キーを押して、します。</span><span class="sxs-lookup"><span data-stu-id="77c61-113">The user can raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by using an <xref:System.Windows.Controls.AccessText> or by pressing ENTER or the SPACEBAR when the control has focus.</span></span>  <span data-ttu-id="77c61-114">ユーザーがコントロールのセット、space キーを押したとき<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>に`true`し、マウスをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="77c61-114">When the user presses the SPACEBAR, the control sets <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> to `true` and captures the mouse.</span></span>  <span data-ttu-id="77c61-115">その結果、コントロール イベントを発生させるマウスなど<xref:System.Windows.UIElement.MouseEnter>と<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-115">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="77c61-116">使用して、 <xref:System.Windows.Controls.AccessText> ENTER が変わらないまたは<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>または、マウスをキャプチャが大きく、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="77c61-116">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but it does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="77c61-117"><xref:System.Windows.Controls.Primitives.ButtonBase>マーク、<xref:System.Windows.UIElement.MouseLeftButtonDown>イベントの処理済みとして、<xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A>メソッドとが発生し、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="77c61-117">The <xref:System.Windows.Controls.Primitives.ButtonBase> marks the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled in the <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> method and raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span> <span data-ttu-id="77c61-118">したがって、<xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A>から継承されるコントロールのイベントが発生することはありません<xref:System.Windows.Controls.Primitives.ButtonBase>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-118">Hence, the <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> event will never occur for a control that inherits from <xref:System.Windows.Controls.Primitives.ButtonBase>.</span></span> <span data-ttu-id="77c61-119">代わりに、イベント ハンドラーをアタッチ、<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>イベント、または呼び出し<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo`'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="77c61-119">Instead, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
<a name="routedEventInfo_Click"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="77c61-120">ルーティングされたイベント情報</span><span class="sxs-lookup"><span data-stu-id="77c61-120">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="77c61-121">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="77c61-121">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.ClickEvent>|  
|<span data-ttu-id="77c61-122">ルーティング方法</span><span class="sxs-lookup"><span data-stu-id="77c61-122">Routing strategy</span></span>|<span data-ttu-id="77c61-123">バブル</span><span class="sxs-lookup"><span data-stu-id="77c61-123">Bubbling</span></span>|  
|<span data-ttu-id="77c61-124">Delegate</span><span class="sxs-lookup"><span data-stu-id="77c61-124">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
   
  
## Examples  
 <span data-ttu-id="77c61-125">次の例では、次の 3 つの異なる方法でクリックに応答する 3 つのボタンを示します。</span><span class="sxs-lookup"><span data-stu-id="77c61-125">The following example shows three buttons that respond to clicks in three different ways.</span></span>  
  
-   <span data-ttu-id="77c61-126">ホバー時の最初のボタンの色に変更を置いたときにマウス ボタンの上</span><span class="sxs-lookup"><span data-stu-id="77c61-126">Hover - the first button changes colors when the user hovers with the mouse over the button</span></span>  
  
-   <span data-ttu-id="77c61-127">キーを押して、2 番目のボタンは、ボタンにマウス ポインターが、マウスを押すことが必要です。</span><span class="sxs-lookup"><span data-stu-id="77c61-127">Press - the second button requires that the mouse be pressed while the mouse pointer is in the button.</span></span>  
  
-   <span data-ttu-id="77c61-128">Release の 3 番目がリセット ボタンの背景色、マウスが押され、ボタンにリリースされるまでです。</span><span class="sxs-lookup"><span data-stu-id="77c61-128">Release - the third does not reset the background color of the buttons until the mouse is pressed and released in the button.</span></span>  
  
 [!code-xaml[ClickModes_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml#1)]  
  
 [!code-csharp[ClickModes_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml.cs#2)]
 [!code-vb[ClickModes_snip#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClickModes_snip/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ClickEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ClickEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.ClickEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClickEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ClickEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-129">
            <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> ルーティング イベントを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-129">Identifies the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-130">このイベントは、マウスの左ボタン クリックに対応します。</span><span class="sxs-lookup"><span data-stu-id="77c61-130">This event corresponds to a left mouse button click.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ClickMode ClickMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ClickMode ClickMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ClickMode As ClickMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ClickMode ClickMode { System::Windows::Controls::ClickMode get(); void set(System::Windows::Controls::ClickMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ClickMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-131">
            <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> イベントが発生するタイミングを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-131">Gets or sets when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="77c61-132">
            <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> イベントが発生するタイミング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-132">When the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event occurs.</span>
          </span>
          <span data-ttu-id="77c61-133">既定値は <see cref="F:System.Windows.Controls.ClickMode.Release" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-133">The default value is <see cref="F:System.Windows.Controls.ClickMode.Release" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_ClickMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="77c61-134">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="77c61-134">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="77c61-135">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="77c61-135">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty>|  
|<span data-ttu-id="77c61-136">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="77c61-136">Metadata properties set to `true`</span></span>|<span data-ttu-id="77c61-137">なし</span><span class="sxs-lookup"><span data-stu-id="77c61-137">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClickModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClickModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClickModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClickModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-138">
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-138">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-139">このボタンが押されたときに呼び出すコマンドを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-139">Gets or sets the command to invoke when this button is pressed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="77c61-140">このボタンが押されたときに呼び出すコマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-140">A command to invoke when this button is pressed.</span>
          </span>
          <span data-ttu-id="77c61-141">既定値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-141">The default value is <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-142">このプロパティは、インスタンスに関連付けるコマンド、特定のボタンは使用されます。</span><span class="sxs-lookup"><span data-stu-id="77c61-142">This property is used to associate a command with a particular button instance.</span></span>  
  
 <span data-ttu-id="77c61-143">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]など、既存のコマンドのライブラリのいずれかの静的なコマンド値にするのにはこのプロパティが設定よく<xref:System.Windows.Input.ApplicationCommands>または<xref:System.Windows.Input.NavigationCommands>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-143">In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property is most often set to be a static command value from one of the existing command libraries, such as <xref:System.Windows.Input.ApplicationCommands> or <xref:System.Windows.Input.NavigationCommands>.</span></span> <span data-ttu-id="77c61-144">詳細については、「[コマンド実行の概要](~/docs/framework/wpf/advanced/commanding-overview.md)または<xref:System.Windows.Input.ICommand>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-144">For details, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md) or <xref:System.Windows.Input.ICommand>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="77c61-145">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="77c61-145">XAML Attribute Usage</span></span>  
  
```  
<object Command="commandName"/>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="77c61-146">XAML 値</span><span class="sxs-lookup"><span data-stu-id="77c61-146">XAML Values</span></span>  
 <span data-ttu-id="77c61-147">*commandName*</span><span class="sxs-lookup"><span data-stu-id="77c61-147">*commandName*</span></span>  
 <span data-ttu-id="77c61-148">このボタンが押されたときに呼び出されるコマンド。</span><span class="sxs-lookup"><span data-stu-id="77c61-148">The command to invoke when this button is pressed.</span></span>  
  
<a name="dependencyPropertyInfo_Command"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="77c61-149">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="77c61-149">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="77c61-150">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="77c61-150">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandProperty>|  
|<span data-ttu-id="77c61-151">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="77c61-151">Metadata properties set to `true`</span></span>|<span data-ttu-id="77c61-152">なし</span><span class="sxs-lookup"><span data-stu-id="77c61-152">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-153">
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> プロパティに渡すパラメーターを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-153">Gets or sets the parameter to pass to the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="77c61-154">
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> プロパティに渡すパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-154">Parameter to pass to the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> property.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-155">コマンドのライブラリから既存のほとんどのコマンドは、コマンド パラメーターを使用できません。</span><span class="sxs-lookup"><span data-stu-id="77c61-155">Most existing commands from the command libraries do not use a command parameter.</span></span> <span data-ttu-id="77c61-156">コマンド パラメーターを使用して、コマンドは、これらのほとんどは、整数や文字列などの何らかのプリミティブ型の値がパラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="77c61-156">Of the commands that do use a command parameter, most of these take a parameter with some primitive type value, such as an integer or a string.</span></span> <span data-ttu-id="77c61-157">ただし、これはカスタム コマンドを作成することを想定するコマンド パラメーターとしてプリミティブ型です。</span><span class="sxs-lookup"><span data-stu-id="77c61-157">However, it is possible to create a custom command where that command expects a nonprimitive type as its command parameter.</span></span> <span data-ttu-id="77c61-158">この設定のような場合はカスタム コマンドの<xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A>コードが必要です。 新規または既存のオブジェクト インスタンス。</span><span class="sxs-lookup"><span data-stu-id="77c61-158">For a custom command case like this, setting <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> in code might require a new or existing object instance.</span></span> <span data-ttu-id="77c61-159">設定<xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A>マークアップでそのコマンドが予期される型の新しい要素をプロパティ要素構文を入力オブジェクトの要素がここでは、プロパティ要素構文を必要があります。</span><span class="sxs-lookup"><span data-stu-id="77c61-159">Setting <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> in markup might require property element syntax, where the object element filling the property element syntax is a new element of the type expected by that command.</span></span> <span data-ttu-id="77c61-160">代わりに、マークアップで設定がマークアップ拡張機能によって、既存のオブジェクトへの参照を必要可能性があります (これらの参照が通常で行われます[マークアップ拡張機能のバインド](~/docs/framework/wpf/advanced/binding-markup-extension.md)または[StaticResource マークアップ拡張機能](~/docs/framework/wpf/advanced/staticresource-markup-extension.md))。</span><span class="sxs-lookup"><span data-stu-id="77c61-160">Alternatively, setting in markup might require a reference through a markup extension to an existing object (typically these references are made with [Binding Markup Extension](~/docs/framework/wpf/advanced/binding-markup-extension.md) or [StaticResource Markup Extension](~/docs/framework/wpf/advanced/staticresource-markup-extension.md)).</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="77c61-161">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="77c61-161">XAML Attribute Usage</span></span>  
  
```  
<object CommandParameter="commandParameter" />  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="77c61-162">XAML 値</span><span class="sxs-lookup"><span data-stu-id="77c61-162">XAML Values</span></span>  
 <span data-ttu-id="77c61-163">*commandParameter*</span><span class="sxs-lookup"><span data-stu-id="77c61-163">*commandParameter*</span></span>  
 <span data-ttu-id="77c61-164">指定された特定のコマンドと同じ型の値、<xref:System.Windows.Controls.Primitives.ButtonBase.Command%2A>プロパティが必要です。</span><span class="sxs-lookup"><span data-stu-id="77c61-164">A value of the same type as the particular command specified in the <xref:System.Windows.Controls.Primitives.ButtonBase.Command%2A> property expects.</span></span> <span data-ttu-id="77c61-165">既存のコマンド ライブラリ コマンドを使用する場合は、そのコマンドのライブラリのドキュメントを参照して[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用法については、どの種類の含む<xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A>コマンドが必要です。</span><span class="sxs-lookup"><span data-stu-id="77c61-165">If you use an existing command library command, see that command library's documentation for [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage information, including which type of <xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameter%2A> the command expects.</span></span> <span data-ttu-id="77c61-166">カスタム コマンドを使用する場合は、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="77c61-166">If you use a custom command, see Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_CommandParameter"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="77c61-167">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="77c61-167">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="77c61-168">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="77c61-168">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty>|  
|<span data-ttu-id="77c61-169">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="77c61-169">Metadata properties set to `true`</span></span>|<span data-ttu-id="77c61-170">なし</span><span class="sxs-lookup"><span data-stu-id="77c61-170">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-171">
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-171">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandParameter" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-172">ルーティング <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-172">Identifies the routed <see cref="P:System.Windows.Controls.Primitives.ButtonBase.Command" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-173">指定したコマンドの発生元の要素を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-173">Gets or sets the element on which to raise the specified command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="77c61-174">コマンドが実行される要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-174">Element on which to raise a command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-175"><xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A>を定義するプロパティを使用することはできません、<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-175">The <xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> property cannot be used to define a <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="77c61-176"><xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A>プロパティは既に定義されている場所に、アプリケーションの要素への参照を提供します。</span><span class="sxs-lookup"><span data-stu-id="77c61-176">The <xref:System.Windows.Controls.Primitives.ButtonBase.CommandTarget%2A> property provides a reference to an element that is already defined somewhere in your application.</span></span>  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="77c61-177">XAML 属性の使用方法</span><span class="sxs-lookup"><span data-stu-id="77c61-177">XAML Attribute Usage</span></span>  
  
```  
<ButtonBase CommandTarget="{Binding ElementName= elementName }"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="77c61-178">XAML 値</span><span class="sxs-lookup"><span data-stu-id="77c61-178">XAML Values</span></span>  
 <span data-ttu-id="77c61-179">*elementName*</span><span class="sxs-lookup"><span data-stu-id="77c61-179">*elementName*</span></span>  
 <span data-ttu-id="77c61-180">名前<xref:System.Windows.IInputElement>するコマンドを受信します。</span><span class="sxs-lookup"><span data-stu-id="77c61-180">The name of <xref:System.Windows.IInputElement> that receives the command.</span></span>  
  
<a name="dependencyPropertyInfo_CommandTarget"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="77c61-181">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="77c61-181">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="77c61-182">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="77c61-182">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty>|  
|<span data-ttu-id="77c61-183">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="77c61-183">Metadata properties set to `true`</span></span>|<span data-ttu-id="77c61-184">なし</span><span class="sxs-lookup"><span data-stu-id="77c61-184">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-185">
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-185">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.CommandTarget" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected override bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-186">
            <see cref="P:System.Windows.ContentElement.IsEnabled" /> プロパティの値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-186">Gets the value of the <see cref="P:System.Windows.ContentElement.IsEnabled" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="77c61-187">コントロールが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-187">
              <see langword="true" /> if the control is enabled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-188">この実装をオーバーライドすることを確認する場合は、基本メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="77c61-188">If you choose to override this implementation, make certain that you call the base method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPressed">
      <MemberSignature Language="C#" Value="public bool IsPressed { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPressed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPressed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:  property bool IsPressed {  public:&#xA;bool get(); protected:&#xA; void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-189">
            <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> が現在アクティブになっているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-189">Gets a value that indicates whether a <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is currently activated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="77c61-190">
            <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> がアクティブになっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-190">
              <see langword="true" /> if the <see cref="T:System.Windows.Controls.Primitives.ButtonBase" /> is activated; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="77c61-191">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-191">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-192"><xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> マウスの左ボタンを示すボタンの状態、または space キーが押されたボタンの上です。</span><span class="sxs-lookup"><span data-stu-id="77c61-192"><xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is the state of a button that indicates the left mouse button or SPACEBAR is pressed over the button.</span></span> <span data-ttu-id="77c61-193">ときに<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>は`true`コントロールがマウスをキャプチャします。</span><span class="sxs-lookup"><span data-stu-id="77c61-193">When <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`, the control captures the mouse.</span></span>  <span data-ttu-id="77c61-194">その結果、コントロール イベントを発生させるマウスなど<xref:System.Windows.UIElement.MouseEnter>と<xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-194">As a result, the control will raise mouse events such as <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</span></span> <span data-ttu-id="77c61-195">使用して、<xref:System.Windows.Controls.AccessText>または ENTER は変化しません<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>またはマウスのキャプチャは raise、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="77c61-195">Note that using the <xref:System.Windows.Controls.AccessText> or ENTER does not change <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> or capture the mouse, but is does raise the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 <span data-ttu-id="77c61-196">.NET Framework のバージョン 3.0 Service Pack 1 以降<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>保護されている set アクセス操作子を持ちます。</span><span class="sxs-lookup"><span data-stu-id="77c61-196">Starting with the .NET Framework version 3.0 Service Pack 1, <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> has a protected setter.</span></span> <span data-ttu-id="77c61-197">この機能を使用するのには、アプリケーションが .NET Framework version 3.5 を対象する必要があります。</span><span class="sxs-lookup"><span data-stu-id="77c61-197">To use this functionality, your application should target the .NET Framework version 3.5.</span></span>  <span data-ttu-id="77c61-198">詳細については、「[.NET Framework のバージョンおよび依存関係](~/docs/framework/migration-guide/versions-and-dependencies.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="77c61-198">For more information, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
<a name="dependencyPropertyInfo_IsPressed"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="77c61-199">依存プロパティ情報</span><span class="sxs-lookup"><span data-stu-id="77c61-199">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="77c61-200">識別子のフィールド</span><span class="sxs-lookup"><span data-stu-id="77c61-200">Identifier field</span></span>|<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty>|  
|<span data-ttu-id="77c61-201">メタデータ プロパティに設定します。 `true`</span><span class="sxs-lookup"><span data-stu-id="77c61-201">Metadata properties set to `true`</span></span>|<span data-ttu-id="77c61-202">なし</span><span class="sxs-lookup"><span data-stu-id="77c61-202">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="77c61-203">この例を使用する方法を示しています、<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>トリガー スタイルのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="77c61-203">This example shows how to use the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property in a trigger style.</span></span>  
  
 [!code-xaml[BtnColor#9](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnColor/CSharp/Pane1.xaml#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPressedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsPressedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsPressedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsPressedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsPressedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="77c61-204">
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> 依存関係プロパティを識別します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-204">Identifies the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected override void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-205">
            <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> イベントのイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-205">The event data for the <see cref="E:System.Windows.Input.AccessKeyManager.AccessKeyPressed" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-206">このコントロールの <see cref="P:System.Windows.Controls.AccessText.AccessKey" /> が呼び出された場合に応答します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-206">Responds when the <see cref="P:System.Windows.Controls.AccessText.AccessKey" /> for this control is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-207">場合<xref:System.Windows.Input.AccessKeyEventArgs.IsMultiple%2A>は`true`、このメソッドは基底の実装は、このコントロールにフォーカスが移動します。</span><span class="sxs-lookup"><span data-stu-id="77c61-207">If <xref:System.Windows.Input.AccessKeyEventArgs.IsMultiple%2A> is `true`, this method calls the base implementation, which gives this control focus.</span></span>  <span data-ttu-id="77c61-208">それ以外の場合、このメソッドを発生させる、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="77c61-208">Otherwise, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="77c61-209">
            <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> ルーティング イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-209">Raises the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> routed event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-210">コントロールで発生し、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>を呼び出してイベント<xref:System.Windows.UIElement.RaiseEvent%2A>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-210">The control raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event by calling <xref:System.Windows.UIElement.RaiseEvent%2A>.</span></span> <span data-ttu-id="77c61-211">詳細については、次を参照してください。[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。</span><span class="sxs-lookup"><span data-stu-id="77c61-211">For more information, see [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-212">オーバーライドする場合<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" />デリゲートを登録するためのメソッドがイベントを受信します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-212">When overriding <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnClick" /> method so that registered delegates receive the event.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsPressedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsPressedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsPressedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsPressedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsPressedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-213">
            <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> のデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-213">The data for <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-214">
            <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> プロパティが変更されたときに呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-214">Called when the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.IsPressed" /> property changes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-215">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-215">The event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-216">このコントロールにフォーカスがある状態でユーザーがキーを押したときに発生する <see cref="E:System.Windows.UIElement.KeyDown" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-216">Provides class handling for the <see cref="E:System.Windows.UIElement.KeyDown" /> routed event that occurs when the user presses a key while this control has focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-217">この実装を示します、<xref:System.Windows.UIElement.KeyDown>イベントを処理するには、<xref:System.Windows.RoutedEventArgs.Handled%2A>にイベント データのプロパティ`true`とき<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A>に設定されていない<xref:System.Windows.Controls.ClickMode.Hover>ケースの次のいずれかが true の場合。</span><span class="sxs-lookup"><span data-stu-id="77c61-217">This implementation marks the <xref:System.Windows.UIElement.KeyDown> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover> and one of the following cases are true:</span></span>  
  
-   <span data-ttu-id="77c61-218">Space キーを押します。</span><span class="sxs-lookup"><span data-stu-id="77c61-218">The user presses the SPACEBAR.</span></span>  
  
-   <span data-ttu-id="77c61-219">ENTER を押すと<xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A>は`true`このコントロール。</span><span class="sxs-lookup"><span data-stu-id="77c61-219">The user presses ENTER and <xref:System.Windows.Input.KeyboardNavigation.AcceptsReturn%2A> is `true` for this control.</span></span>  
  
 <span data-ttu-id="77c61-220">その他の場合は、この実装は変わりません処理済みの状態 (、<xref:System.Windows.RoutedEventArgs.Handled%2A>プロパティ) の<xref:System.Windows.UIElement.KeyDown>イベント データ。</span><span class="sxs-lookup"><span data-stu-id="77c61-220">In all other cases, this implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.KeyDown> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-221">オーバーライドする場合は<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-221">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown(System.Windows.Input.KeyEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="77c61-222">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性があります、クラスのハンドラーでイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-222">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="77c61-223">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-223">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-224">
            <see cref="E:System.Windows.UIElement.KeyUp" /> イベントのイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-224">The event data for the <see cref="E:System.Windows.UIElement.KeyUp" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-225">このコントロールにフォーカスがある状態でユーザーがキーを離したときに発生する <see cref="E:System.Windows.UIElement.KeyUp" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-225">Provides class handling for the <see cref="E:System.Windows.UIElement.KeyUp" /> routed event that occurs when the user releases a key while this control has focus.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-226">この実装を示します、<xref:System.Windows.UIElement.KeyUp>イベントを処理するには、<xref:System.Windows.RoutedEventArgs.Handled%2A>にイベント データのプロパティ`true`space キーを離したときにします。</span><span class="sxs-lookup"><span data-stu-id="77c61-226">This implementation marks the <xref:System.Windows.UIElement.KeyUp> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when the user releases the SPACEBAR.</span></span> <span data-ttu-id="77c61-227">それ以外の場合、この実装には、処理済みの状態は変わりません (、<xref:System.Windows.RoutedEventArgs.Handled%2A>プロパティ) の<xref:System.Windows.UIElement.KeyUp>イベント データ。</span><span class="sxs-lookup"><span data-stu-id="77c61-227">Otherwise, this implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.KeyUp> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-228">オーバーライドする場合は<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-228">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnKeyUp(System.Windows.Input.KeyEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="77c61-229">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性があります、クラスのハンドラーでイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-229">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="77c61-230">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-230">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected override void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-231">
            <see cref="E:System.Windows.IInputElement.LostKeyboardFocus" /> イベントのイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-231">The event data for the <see cref="E:System.Windows.IInputElement.LostKeyboardFocus" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-232">要素がキーボード フォーカスを失うと呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-232">Called when an element loses keyboard focus.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected override void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-233">
            <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> イベントのイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-233">The event data for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-234">このコントロールがマウス イベント メッセージを受信しなくなったときに発生する <see cref="E:System.Windows.UIElement.LostMouseCapture" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-234">Provides class handling for the <see cref="E:System.Windows.UIElement.LostMouseCapture" /> routed event that occurs when this control is no longer receiving mouse event messages.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-235">この実装では、処理済みの状態は変更されません (、<xref:System.Windows.RoutedEventArgs.Handled%2A>プロパティ) の<xref:System.Windows.UIElement.LostMouseCapture>イベント データ。</span><span class="sxs-lookup"><span data-stu-id="77c61-235">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.LostMouseCapture> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-236">オーバーライドする場合は<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-236">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="77c61-237">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性があります、クラスのハンドラーでイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-237">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="77c61-238">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-238">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected override void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-239">
            <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> イベントのイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-239">The event data for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-240">マウスがこのコントロールに入ったときに発生する <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-240">Provides class handling for the <see cref="P:System.Windows.Controls.Primitives.ButtonBase.ClickMode" /> routed event that occurs when the mouse enters this control.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-241">ときに<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A>に設定されている<xref:System.Windows.Controls.ClickMode.Hover>、この実装を示します、<xref:System.Windows.UIElement.MouseEnter>イベントを処理するには、<xref:System.Windows.RoutedEventArgs.Handled%2A>にイベント データのプロパティ`true`を発生させると、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="77c61-241">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Hover>, this implementation marks the <xref:System.Windows.UIElement.MouseEnter> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` and raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-242">オーバーライドする場合は<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-242">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseEnter(System.Windows.Input.MouseEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="77c61-243">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性があります、クラスのハンドラーでイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-243">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="77c61-244">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-244">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-245">
            <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> イベントのイベント データ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-245">The event data for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-246">マウスが要素から離れたときに発生する <see cref="E:System.Windows.UIElement.MouseLeave" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-246">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeave" /> routed event that occurs when the mouse leaves an element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-247">この実装を示します、<xref:System.Windows.UIElement.MouseLeave>イベントを処理するには、<xref:System.Windows.RoutedEventArgs.Handled%2A>にイベント データのプロパティ`true`とき<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A>に設定されている<xref:System.Windows.Controls.ClickMode.Hover>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-247">This implementation marks the <xref:System.Windows.UIElement.MouseLeave> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-248">オーバーライドする場合は<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-248">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeave(System.Windows.Input.MouseEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="77c61-249">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性があります、クラスのハンドラーでイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-249">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="77c61-250">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-250">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-251">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-251">The event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-252">このコントロールの上にマウス ポインターがある間に、マウスの左ボタンが押されたときに発生する <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-252">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event that occurs when the left mouse button is pressed while the mouse pointer is over this control.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-253">この実装を示します、<xref:System.Windows.UIElement.MouseLeftButtonDown>イベントを処理するには、<xref:System.Windows.RoutedEventArgs.Handled%2A>にイベント データのプロパティ`true`とき<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A>に設定されていない<xref:System.Windows.Controls.ClickMode.Hover>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-253">This implementation marks the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span> <span data-ttu-id="77c61-254">応答する、<xref:System.Windows.UIElement.MouseLeftButtonDown>イベント、イベント ハンドラーをアタッチ、<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>イベント、または呼び出し<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo`'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="77c61-254">To respond to the <xref:System.Windows.UIElement.MouseLeftButtonDown> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 <span data-ttu-id="77c61-255">ときに<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A>に設定されている<xref:System.Windows.Controls.ClickMode.Press>、このメソッドを発生させる、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="77c61-255">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Press>, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-256">オーバーライドする場合は<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-256">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="77c61-257">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性があります、クラスのハンドラーでイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-257">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="77c61-258">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-258">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-259">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-259">The event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-260">このコントロールの上にマウス ポインターがある間に、マウスの左ボタンが離されたときに発生する <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-260">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event that occurs when the left mouse button is released while the mouse pointer is over this control.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-261">この実装を示します、<xref:System.Windows.UIElement.MouseLeftButtonUp>イベントを処理するには、<xref:System.Windows.RoutedEventArgs.Handled%2A>にイベント データのプロパティ`true`とき<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A>に設定されていない<xref:System.Windows.Controls.ClickMode.Hover>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-261">This implementation marks the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover>.</span></span> <span data-ttu-id="77c61-262">応答する、<xref:System.Windows.UIElement.MouseLeftButtonUp>イベント、イベント ハンドラーをアタッチ、<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>イベント、または呼び出し<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo`'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="77c61-262">To respond to the <xref:System.Windows.UIElement.MouseLeftButtonUp> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 <span data-ttu-id="77c61-263">ときに<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A>に設定されている<xref:System.Windows.Controls.ClickMode.Release>は<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>は`true`、このメソッドを発生させる、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベント。</span><span class="sxs-lookup"><span data-stu-id="77c61-263">When <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is set to <xref:System.Windows.Controls.ClickMode.Release> is <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`, this method raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-264">オーバーライドする場合は<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-264">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="77c61-265">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性があります、クラスのハンドラーでイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-265">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="77c61-266">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-266">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected override void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="77c61-267">イベントのデータ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-267">The event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-268">この要素の上にマウス ポインターがある間に、マウス ポインターが移動すると発生する <see cref="E:System.Windows.UIElement.MouseMove" /> ルーティング イベントのクラス処理を提供します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-268">Provides class handling for the <see cref="E:System.Windows.UIElement.MouseMove" /> routed event that occurs when the mouse pointer moves while over this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-269">この実装を示します、<xref:System.Windows.UIElement.MouseMove>イベントを処理するには、<xref:System.Windows.RoutedEventArgs.Handled%2A>にイベント データのプロパティ`true`とき<xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A>に設定されていない<xref:System.Windows.Controls.ClickMode.Hover>と<xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="77c61-269">This implementation marks the <xref:System.Windows.UIElement.MouseMove> event as handled by setting the <xref:System.Windows.RoutedEventArgs.Handled%2A> property of the event data to `true` when <xref:System.Windows.Controls.Primitives.ButtonBase.ClickMode%2A> is not set to <xref:System.Windows.Controls.ClickMode.Hover> and <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> is `true`.</span></span> <span data-ttu-id="77c61-270">応答する、<xref:System.Windows.UIElement.MouseMove>イベント、イベント ハンドラーをアタッチ、<xref:System.Windows.ContentElement.PreviewMouseMove>イベント、または呼び出し<xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>で`handledEventsToo`'éý'`true`です。</span><span class="sxs-lookup"><span data-stu-id="77c61-270">To respond to the <xref:System.Windows.UIElement.MouseMove> event, attach an event handler to the <xref:System.Windows.ContentElement.PreviewMouseMove> event, or call <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="77c61-271">オーバーライドする場合は<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />、常の基本実装を呼び出す、<see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />実装します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-271">If you override <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Primitives.ButtonBase.OnMouseMove(System.Windows.Input.MouseEventArgs)" /> implementation.</span>
            </span>
            <span data-ttu-id="77c61-272">基底の実装の呼び出しに失敗すると、基本クラスが、最終的なクラスの実行時の動作を変更する可能性があります、クラスのハンドラーでイベントを処理できなくなります。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-272">Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class.</span>
            </span>
            <span data-ttu-id="77c61-273">要件に応じて、特別な処理の前後の基本実装を呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="77c61-273">You can call the base implementation either before or after your special handling, depending on your requirements.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo">
          <span data-ttu-id="77c61-274">サイズの変更を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-274">Specifies the size changes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="77c61-275">レンダリングされるコントロールのサイズが変更されると呼び出されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="77c61-275">Called when the rendered size of a control changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="77c61-276">上書き、<xref:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged%2A>のメソッド、<xref:System.Windows.UIElement>です。</span><span class="sxs-lookup"><span data-stu-id="77c61-276">Overrides the <xref:System.Windows.Controls.Primitives.ButtonBase.OnRenderSizeChanged%2A> method of the <xref:System.Windows.UIElement>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>