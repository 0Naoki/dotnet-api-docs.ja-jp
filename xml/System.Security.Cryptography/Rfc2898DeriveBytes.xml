<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fb88d38ba71eab51c03b25070016871c9628d94b" />
    <Meta Name="ms.sourcegitcommit" Value="254e16ae65e82f4aa59360cd8572b36b6b5b2f80" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/05/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class Rfc2898DeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class Rfc2898DeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d3412-101">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> に基づく擬似乱数ジェネレーターを使用して、パスワード ベースのキー派生機能 (PBKDF2) を実装します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d3412-101">Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <see cref="T:System.Security.Cryptography.HMACSHA1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> パスワード、salt、および、反復カウントを呼び出すことでキーを生成、<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d3412-102"><xref:System.Security.Cryptography.Rfc2898DeriveBytes> takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span>  
  
 <span data-ttu-id="d3412-103">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d3412-103">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="d3412-104">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-104">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="d3412-105"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-105">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="d3412-106">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</span><span class="sxs-lookup"><span data-stu-id="d3412-106">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="d3412-107">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。</span><span class="sxs-lookup"><span data-stu-id="d3412-107">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="d3412-108">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d3412-108">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3412-109">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="d3412-109">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="d3412-110">使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="d3412-110">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3412-111">次のコード例では、<xref:System.Security.Cryptography.Rfc2898DeriveBytes>に対するキーの同じ 2 つ作成するクラス、<xref:System.Security.Cryptography.TripleDES>クラスです。</span><span class="sxs-lookup"><span data-stu-id="d3412-111">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="d3412-112">暗号化し、キーを使用して一部のデータを復号化します。</span><span class="sxs-lookup"><span data-stu-id="d3412-112">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d3412-113">
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-113">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="d3412-114">キーを派生させるために使用するパスワード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-114">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="d3412-115">キーを派生させるために使用するキー salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-115">The key salt used to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3412-116">キーを派生させるために使用するパスワードおよび salt を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password and salt to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-117">Salt のサイズは 8 バイトである必要がありますか大きいです。</span><span class="sxs-lookup"><span data-stu-id="d3412-117">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="d3412-118">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d3412-118">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="d3412-119">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-119">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="d3412-120"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-120">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="d3412-121">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</span><span class="sxs-lookup"><span data-stu-id="d3412-121">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="d3412-122">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。</span><span class="sxs-lookup"><span data-stu-id="d3412-122">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="d3412-123">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d3412-123">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3412-124">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="d3412-124">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="d3412-125">使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="d3412-125">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3412-126">次のコード例では、<xref:System.Security.Cryptography.Rfc2898DeriveBytes>に対するキーの同じ 2 つ作成するクラス、<xref:System.Security.Cryptography.TripleDES>クラスです。</span><span class="sxs-lookup"><span data-stu-id="d3412-126">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="d3412-127">暗号化し、キーを使用して一部のデータを復号化します。</span><span class="sxs-lookup"><span data-stu-id="d3412-127">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d3412-128">指定された salt のサイズが 8 バイト未満であるか、反復回数が 1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-128">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d3412-129">パスワードまたは salt は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-129">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="d3412-130">キーを派生させるために使用するパスワード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-130">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="d3412-131">クラスで生成するランダム salt のサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-131">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3412-132">キーを派生させるために使用するパスワードおよび salt サイズを指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-132">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using the password and salt size to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-133">Salt のサイズは 8 バイトである必要がありますか大きいです。</span><span class="sxs-lookup"><span data-stu-id="d3412-133">The salt size must be 8 bytes or larger.</span></span>  
  
 <span data-ttu-id="d3412-134">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d3412-134">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="d3412-135">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-135">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="d3412-136"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-136">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="d3412-137">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</span><span class="sxs-lookup"><span data-stu-id="d3412-137">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="d3412-138">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。</span><span class="sxs-lookup"><span data-stu-id="d3412-138">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="d3412-139">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d3412-139">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3412-140">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="d3412-140">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="d3412-141">使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="d3412-141">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d3412-142">指定された salt のサイズが 8 バイト未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-142">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d3412-143">パスワードまたは salt は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-143">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="d3412-144">キーを派生させるために使用するパスワード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-144">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="d3412-145">キーを派生させるために使用するキー salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-145">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="d3412-146">演算の反復処理回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-146">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3412-147">キーを派生させるために使用するパスワード、salt、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-147">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-148">Salt のサイズは 8 バイトである必要がありますか、大きい反復回数を 0 より大きい値にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d3412-148">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="d3412-149">イテレーションの推奨される最小数は 1000 です。</span><span class="sxs-lookup"><span data-stu-id="d3412-149">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="d3412-150">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d3412-150">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="d3412-151">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-151">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="d3412-152"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-152">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="d3412-153">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</span><span class="sxs-lookup"><span data-stu-id="d3412-153">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="d3412-154">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。</span><span class="sxs-lookup"><span data-stu-id="d3412-154">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="d3412-155">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d3412-155">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3412-156">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="d3412-156">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="d3412-157">使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="d3412-157">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d3412-158">指定された salt のサイズが 8 バイト未満であるか、反復回数が 1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-158">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d3412-159">パスワードまたは salt は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-159">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="d3412-160">キーを派生させるために使用するパスワード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-160">The password used to derive the key.</span>
          </span>
        </param>
        <param name="salt">
          <span data-ttu-id="d3412-161">キーを派生させるために使用するキー salt。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-161">The key salt used to derive the key.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="d3412-162">演算の反復処理回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-162">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3412-163">キーを派生させるために使用するパスワード、salt、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-163">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-164">Salt のサイズは 8 バイトである必要がありますか、大きい反復回数を 0 より大きい値にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d3412-164">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="d3412-165">イテレーションの推奨される最小数は 1000 です。</span><span class="sxs-lookup"><span data-stu-id="d3412-165">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="d3412-166">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d3412-166">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="d3412-167">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-167">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="d3412-168"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-168">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="d3412-169">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</span><span class="sxs-lookup"><span data-stu-id="d3412-169">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="d3412-170">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。</span><span class="sxs-lookup"><span data-stu-id="d3412-170">For more information about PBKDF2, see RFC 2898, "PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="d3412-171">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d3412-171">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3412-172">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="d3412-172">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="d3412-173">使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="d3412-173">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3412-174">次のコード例では、<xref:System.Security.Cryptography.Rfc2898DeriveBytes>に対するキーの同じ 2 つ作成するクラス、<xref:System.Security.Cryptography.TripleDES>クラスです。</span><span class="sxs-lookup"><span data-stu-id="d3412-174">The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.</span></span>  <span data-ttu-id="d3412-175">暗号化し、キーを使用して一部のデータを復号化します。</span><span class="sxs-lookup"><span data-stu-id="d3412-175">It then encrypts and decrypts some data using the keys.</span></span>  
  
 [!code-cpp[rfc28981#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d3412-176">指定された salt のサイズが 8 バイト未満であるか、反復回数が 1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-176">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d3412-177">パスワードまたは salt は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-177">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">
          <span data-ttu-id="d3412-178">キーを派生させるために使用するパスワード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-178">The password used to derive the key.</span>
          </span>
        </param>
        <param name="saltSize">
          <span data-ttu-id="d3412-179">クラスで生成するランダム salt のサイズ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-179">The size of the random salt that you want the class to generate.</span>
          </span>
        </param>
        <param name="iterations">
          <span data-ttu-id="d3412-180">演算の反復処理回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-180">The number of iterations for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3412-181">キーを派生させるために使用するパスワード、salt サイズ、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-181">Initializes a new instance of the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class using a password, a salt size, and number of iterations to derive the key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-182">Salt のサイズは 8 バイトである必要がありますか、大きい反復回数を 0 より大きい値にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d3412-182">The salt size must be 8 bytes or larger and the iteration count must be greater than zero.</span></span> <span data-ttu-id="d3412-183">イテレーションの推奨される最小数は 1000 です。</span><span class="sxs-lookup"><span data-stu-id="d3412-183">The minimum recommended number of iterations is 1000.</span></span>  
  
 <span data-ttu-id="d3412-184">RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d3412-184">RFC 2898 includes methods for creating a key and initialization vector (IV) from a password and salt.</span></span> <span data-ttu-id="d3412-185">擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-185">You can use PBKDF2, a password-based key derivation function, to derive keys using a pseudo-random function that allows keys of virtually unlimited length to be generated.</span></span> <span data-ttu-id="d3412-186"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="d3412-186">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters.</span></span> <span data-ttu-id="d3412-187">関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。</span><span class="sxs-lookup"><span data-stu-id="d3412-187">In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.</span></span>  
  
 <span data-ttu-id="d3412-188">PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS #5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。</span><span class="sxs-lookup"><span data-stu-id="d3412-188">For more information on PBKDF2, see RFC 2898,"PKCS #5: Password-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119).</span></span> <span data-ttu-id="d3412-189">詳細については、セクション 5.2、"PBKDF2、"を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d3412-189">See section 5.2, "PBKDF2," for complete details.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d3412-190">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="d3412-190">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="d3412-191">使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="d3412-191">Hard-coded passwords can be retrieved from an assembly by using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d3412-192">指定された salt のサイズが 8 バイト未満であるか、反復回数が 1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-192">The specified salt size is smaller than 8 bytes or the iteration count is less than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d3412-193">パスワードまたは salt は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-193">The password or salt is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d3412-194">
            <paramref name="iterations" /> が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-194">
              <paramref name="iterations" /> is out of range.</span>
          </span>
          <span data-ttu-id="d3412-195">このパラメーターには、負数以外を指定する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-195">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="salt">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, salt As Byte(), iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, cli::array &lt;System::Byte&gt; ^ salt, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="salt">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As String, saltSize As Integer, iterations As Integer, hashAlgorithm As HashAlgorithmName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rfc2898DeriveBytes(System::String ^ password, int saltSize, int iterations, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="saltSize">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">
          <span data-ttu-id="d3412-196">キーを派生させる対象となるアルゴリズム名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-196">The algorithm name for which to derive the key.</span>
          </span>
        </param>
        <param name="alghashname">
          <span data-ttu-id="d3412-197">キーを派生させるために使用するハッシュ アルゴリズム名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-197">The hash algorithm name to use to derive the key.</span>
          </span>
        </param>
        <param name="keySize">
          <span data-ttu-id="d3412-198">派生させるキーのサイズ (ビット単位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-198">The size of the key, in bits, to derive.</span>
          </span>
        </param>
        <param name="rgbIV">
          <span data-ttu-id="d3412-199">キーを派生させるために使用する初期化ベクター (IV: Initialization Vector)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-199">The initialization vector (IV) to use to derive the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3412-200">
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> オブジェクトから暗号キーを派生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-200">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3412-201">派生させたキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-201">The derived key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-202">この関数は、CryptDeriveKey() Crypto API 関数のラッパーであり、Crypto API を使用するアプリケーションとの相互運用性を提供するためのものでは、します。</span><span class="sxs-lookup"><span data-stu-id="d3412-202">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="d3412-203">場合、`keySize`パラメーターが 0 のビットに設定されている、指定したアルゴリズムの既定のキー サイズが使用されます。</span><span class="sxs-lookup"><span data-stu-id="d3412-203">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="d3412-204">
            <paramref name="keySize" /> パラメーターが正しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-204">The <paramref name="keySize" /> parameter is incorrect.</span>
          </span>
          <span data-ttu-id="d3412-205">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-205">-or-</span>
          </span>
          <span data-ttu-id="d3412-206">暗号化サービス プロバイダー (CSP) を取得できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-206">The cryptographic service provider (CSP) cannot be acquired.</span>
          </span>
          <span data-ttu-id="d3412-207">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-207">-or-</span>
          </span>
          <span data-ttu-id="d3412-208">
            <paramref name="algname" /> パラメーターが有効なアルゴリズム名ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-208">The <paramref name="algname" /> parameter is not a valid algorithm name.</span>
          </span>
          <span data-ttu-id="d3412-209">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-209">-or-</span>
          </span>
          <span data-ttu-id="d3412-210">
            <paramref name="alghashname" /> パラメーターが有効なハッシュ アルゴリズム名ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-210">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="d3412-211">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-211">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3412-212">
            <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-212">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> class and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-213">このメソッドは、パブリック`Dispose()`メソッドおよび`Finalize`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d3412-213">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="d3412-214">`Dispose()` プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="d3412-214">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="d3412-215">`Finalize` 呼び出す`Dispose`で`disposing`'éý'`false`です。</span><span class="sxs-lookup"><span data-stu-id="d3412-215">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="d3412-216">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Security.Cryptography.Rfc2898DeriveBytes> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="d3412-216">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.Rfc2898DeriveBytes> references.</span></span> <span data-ttu-id="d3412-217">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d3412-217">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d3412-218">
              <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d3412-218">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="d3412-219">オーバーライドする場合<see langword="Dispose(Boolean)" />を以前の呼び出しで既に破棄されているオブジェクトを参照しないように注意、<see langword="Dispose" />です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d3412-219">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="d3412-220">実装する方法の詳細についての<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d3412-220">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="d3412-221">詳細については<see langword="Dispose" />と<see langword="Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)です。</span>
            <span class="sxs-lookup">
              <span data-stu-id="d3412-221">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">
          <span data-ttu-id="d3412-222">生成する擬似ランダム キー バイトの数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-222">The number of pseudo-random key bytes to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d3412-223">このオブジェクトの擬似ランダム キーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-223">Returns the pseudo-random key for this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d3412-224">擬似ランダム キー バイトを格納したバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-224">A byte array filled with pseudo-random key bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-225"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスに基づく擬似乱数ジェネレーターを使用して、PBKDF2 機能を実装して<xref:System.Security.Cryptography.HMACSHA1>です。</span><span class="sxs-lookup"><span data-stu-id="d3412-225">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class implements PBKDF2 functionality by using a pseudorandom number generator based on <xref:System.Security.Cryptography.HMACSHA1>.</span></span> <span data-ttu-id="d3412-226"><xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスは、パスワード、salt、および、反復カウントを受け取るしを呼び出すことでキーを生成、<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d3412-226">The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.</span></span> <span data-ttu-id="d3412-227">このメソッドを繰り返し呼び出すは同じキーを生成しません代わりに、追加の 2 つの呼び出し、<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>メソッドを`cb`パラメーターの値`20`は呼び出すことと同等、<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>が 1 回のメソッド、`cb`のパラメーター値`40`です。</span><span class="sxs-lookup"><span data-stu-id="d3412-227">Repeated calls to this method will not generate the same key; instead, appending two calls of the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method with a `cb` parameter value of `20` is the equivalent of calling the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method once with a `cb` parameter value of `40`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3412-228">次の例を使用する方法を示しています、<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>のインスタンスのキーを取得するメソッド<xref:System.Security.Cryptography.Rfc2898DeriveBytes>です。</span><span class="sxs-lookup"><span data-stu-id="d3412-228">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>.</span></span> <span data-ttu-id="d3412-229">このコード例に示されている例の一部である、<xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスです。</span><span class="sxs-lookup"><span data-stu-id="d3412-229">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d3412-230">
            <paramref name="cb" /> が範囲外です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-230">
              <paramref name="cb" /> is out of range.</span>
          </span>
          <span data-ttu-id="d3412-231">このパラメーターには、負数以外を指定する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-231">This parameter requires a non-negative number.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HashAlgorithm As HashAlgorithmName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::HashAlgorithmName HashAlgorithm { System::Security::Cryptography::HashAlgorithmName get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d3412-232">演算の反復処理回数を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-232">Gets or sets the number of iterations for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d3412-233">演算の反復処理回数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-233">The number of iterations for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-234">イテレーションのカウントが何回の操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d3412-234">Iteration count is the number of times an operation is performed.</span></span> <span data-ttu-id="d3412-235">このメソッドのカウントは 0 より大きい値にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d3412-235">For this method, the count should be greater than zero.</span></span> <span data-ttu-id="d3412-236">イテレーションの推奨される最小数は 1000 です。</span><span class="sxs-lookup"><span data-stu-id="d3412-236">The minimum recommended number of iterations is 1000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3412-237">次の例を使用する方法を示しています、<xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A>プロパティをキーの生成に使用するイテレーションの数を表示します。</span><span class="sxs-lookup"><span data-stu-id="d3412-237">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> property to display the number of iterations used in the generation of the key.</span></span> <span data-ttu-id="d3412-238">このコード例に示されている例の一部である、<xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスです。</span><span class="sxs-lookup"><span data-stu-id="d3412-238">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d3412-239">反復数が 1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-239">The number of iterations is less than 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d3412-240">演算の状態をリセットします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-240">Resets the state of the operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-241">Salt またはイテレーションの数が変更された場合、このメソッドは自動的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d3412-241">This method is automatically called if the salt or iteration count is modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d3412-242"><xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> メソッドを使用する方法の例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d3412-242">The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> method.</span></span> <span data-ttu-id="d3412-243">このコード例に示されている例の一部である、<xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスです。</span><span class="sxs-lookup"><span data-stu-id="d3412-243">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.</span></span>  
  
 [!code-cpp[rfc28981#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d3412-244">演算で使用するキー salt 値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-244">Gets or sets the key salt value for the operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d3412-245">演算で使用するキー salt 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-245">The key salt value for the operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d3412-246">Salt、ランダムなデータセット (バイト単位) より難しいメッセージの承認されていない復号化するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d3412-246">Salt, a random set of bytes, is used to make unauthorized decrypting of a message more difficult.</span></span> <span data-ttu-id="d3412-247">辞書攻撃は、攻撃者が事前に計算された暗号化キーの値を最も可能性の高いで暗号化された値を比較することで、暗号化されたメッセージを復号化しようと攻撃です。</span><span class="sxs-lookup"><span data-stu-id="d3412-247">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="d3412-248">このような攻撃は salt、またはランダム (バイト単位)、キーの派生前に、パスワードの最後の導入によって非常に困難になります。</span><span class="sxs-lookup"><span data-stu-id="d3412-248">This attack is made much more difficult by the introduction of salt, or random bytes, at the end of the password before the key derivation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d3412-249">指定された salt のサイズが 8 バイト未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-249">The specified salt size is smaller than 8 bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d3412-250">salt が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d3412-250">The salt is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>