<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HMACSHA512.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ae00326e4429099b284fc2153477467d5ae2701e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae00326e4429099b284fc2153477467d5ae2701e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>Computes a Hash-based Message Authentication Code (HMAC) using the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA512" /&gt;</ph> hash function.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA512" /&gt;</ph> ハッシュ関数を使用して、ハッシュ メッセージ認証コード (HMAC) を計算します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> sha-512 ハッシュ関数から作成され、としてするハッシュ ベース メッセージ認証コード (HMAC) を使用するキー付きハッシュ アルゴリズムの型です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The HMAC process mixes a secret key with the message data and hashes the result.</source>
          <target state="translated">HMAC プロセスでは、秘密キーと、メッセージ データを合成し、結果をハッシュします。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The hash value is mixed with the secret key again, and then hashed a second time.</source>
          <target state="translated">ハッシュ値は、秘密キーを使用してもう一度、混在し、2 番目の時間をハッシュします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The output hash is 512 bits in length.</source>
          <target state="translated">出力ハッシュは、512 ビットの長さです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC を使用して、送信者と受信者に、共有シークレット キーを共有すると、安全でないチャネル経由で送信されたメッセージが改ざんされているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</source>
          <target state="translated">送信者は、元のデータのハッシュ値を計算し、単一のメッセージとして、元のデータとハッシュ値を送信します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">受信者は、受信メッセージのハッシュ値を再計算され、計算の HMAC に送信された HMAC が一致することを確認します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>If the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">元と計算されたハッシュ値が一致した場合、メッセージが認証されます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>If they do not match, either the data or the hash value has been changed.</source>
          <target state="translated">これらが一致しない場合、データまたはハッシュ値のいずれかが変更されました。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">Hmac は、改ざん、メッセージを変更し、正しいハッシュ値を再現する秘密キーの知識が必要なためのセキュリティを提供します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> accepts keys of any size, and produces a hash sequence of length 512 bits.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> 任意のサイズ、キーを確定し、512 ビットの長さの一連のハッシュを生成します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The following example shows how to sign a file by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> object and then how to verify the file.</source>
          <target state="translated">次の例を使用して、ファイルに署名する方法を示しています、<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph>オブジェクトと、そのファイルを確認します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> class with a randomly generated key.</source>
          <target state="translated">ランダムに生成されたキーを指定して、<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA512.#ctor">
          <source>With this constructor, a 64-byte, randomly generated key is used.</source>
          <target state="translated">このコンス トラクターでは 64 バイト、ランダムに生成されたキーが使用されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> encryption.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> 暗号化の共有キー。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>The key can be any length.</source>
          <target state="translated">キーは任意の長さにできます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>However, the recommended size is 128 bytes.</source>
          <target state="translated">ただし、推奨されるサイズは 128 バイトです。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>If the key is more than 128 bytes long, it is hashed (using SHA-512) to derive a 128-byte key.</source>
          <target state="translated">キーの長さが 128 バイトを超えた場合は、SHA-512 を使用してハッシュされ、128 バイトのキーが生成されます。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>If it is less than 128 bytes long, it is padded to 128 bytes.</source>
          <target state="translated">128 バイトよりも短い場合は、128 バイトまで埋められます。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> class with the specified key data.</source>
          <target state="translated">キー データを指定して、<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>For an example of how to use this constructor, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> class.</source>
          <target state="translated">このコンス トラクターを使用する方法の例は、次を参照してください。、<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="key" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>Provides a workaround for the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> implementation of the <ph id="ph2">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> algorithm, which is inconsistent with the <ph id="ph3">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> implementation.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> 実装と整合しない <ph id="ph2">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> アルゴリズムの <ph id="ph3">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> 実装の代替手段を提供します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to enable <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> アプリケーションを有効にして <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> アプリケーションとの対話を実現するには <ph id="ph1">&lt;see langword="true" /&gt;</ph>、それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>The purpose of the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A&gt;</ph> Boolean property is to enable <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications.</source>
          <target state="translated">目的、<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A&gt;</ph>を有効にするのには、ブール型プロパティ<ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>アプリケーションと対話<ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>アプリケーションです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>When you set this property to <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> object produces values that match the values produced by the <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>.</source>
          <target state="translated">このプロパティを設定すると<ph id="ph1">`true`</ph>、<ph id="ph2">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph>オブジェクトによって生成される値に一致する値を生成する、<ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>You should set this property only once after you create your HMAC object.</source>
          <target state="translated">HMAC オブジェクトを作成した後は、このプロパティを 1 回だけ設定する必要があります。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>You will need to reset your key afterwards, as shown in the following example.</source>
          <target state="translated">次の例で示すように、その後、キーを再設定する必要があります。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>