<Type Name="PasswordDeriveBytes" FullName="System.Security.Cryptography.PasswordDeriveBytes">
  <TypeSignature Language="C#" Value="public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PasswordDeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PasswordDeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class PasswordDeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class PasswordDeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1bb9c-101">PBKDF1 アルゴリズムの拡張機能を使用してパスワードからキーを派生させます。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-101">Derives a key from a password using an extension of the PBKDF1 algorithm.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1bb9c-102">このクラスは、パスワードからキー マテリアルとして使用するのに適したバイトの取得を PKCS #5 v2.0 標準で定義されている PBKDF1 アルゴリズムの拡張機能を使用します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-102">This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</span></span> <span data-ttu-id="1bb9c-103">標準は、IETF RRC 2898 に記載されています。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-103">The standard is documented in IETF RRC 2898.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-104">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-104">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-105">ハード コーディングされたパスワードを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進数のエディター、または単に notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-105">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1bb9c-106">次のコード例を使用してパスワードからキーを作成、<xref:System.Security.Cryptography.PasswordDeriveBytes>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-106">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1bb9c-107"><see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-107">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="1bb9c-108">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-108">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="1bb9c-109">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-109">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="1bb9c-110">キーを派生させるために使用するパスワードおよびキー salt を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-110">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-111">ハードコードしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-111">Never hard code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-112">パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-112">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1bb9c-113">次のコード例を使用してパスワードからキーを作成、<xref:System.Security.Cryptography.PasswordDeriveBytes>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-113">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="1bb9c-114">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-114">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="1bb9c-115">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-115">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="1bb9c-116">キーを派生させるために使用するパスワードおよびキー salt を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-117">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-117">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-118">ハード コーディングされたパスワードを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進数のエディター、または単に notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-118">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="1bb9c-119">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-119">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="1bb9c-120">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-120">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="1bb9c-121">この演算を行うための暗号化サービス プロバイダー (CSP) パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-121">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="1bb9c-122">キーを派生させるために使用するパスワード、キー salt、および暗号化サービス プロバイダー (CSP: Cryptographic Service Provider) を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-122">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-123">ハードコードしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-123">Never hard code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-124">使用してアセンブリからパスワードをハードコーディングを取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l、16 進数のエディター、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-124">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1bb9c-125">次のコード例を使用してパスワードからキーを作成、<xref:System.Security.Cryptography.PasswordDeriveBytes>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-125">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="1bb9c-126">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-126">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="1bb9c-127">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-127">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="1bb9c-128">演算で使用する CSP パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-128">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="1bb9c-129">キーを派生させるために使用するパスワード、キー salt、および暗号サービス プロバイダー (CSP : Cryptographic Service Provider) の各パラメーターを指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-129">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-130">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-130">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-131">ハード コーディングされたパスワードを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進数のエディター、または単に notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-131">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="1bb9c-132">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-132">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="1bb9c-133">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-133">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="1bb9c-134">キーを派生させるために使用するハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-134">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="1bb9c-135">キーを派生させるために使用する反復処理の回数。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-135">The iteration count to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="1bb9c-136">キーを派生させるために使用するパスワード、キー salt、ハッシュ名、および反復処理回数を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, and iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-137">ハードコードしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-137">Never hard code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-138">パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-138">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="1bb9c-139">ハッシュ アルゴリズム名の一覧は、次を参照してください。、<xref:System.Security.Cryptography.CryptoConfig>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-139">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="1bb9c-140">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-140">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="1bb9c-141">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-141">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="1bb9c-142">演算で使用するハッシュ アルゴリズムの名前。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-142">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="1bb9c-143">演算の反復処理回数。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-143">The number of iterations for the operation.</span></span></param>
        <summary><span data-ttu-id="1bb9c-144">キーを派生させるために使用するパスワード、キー salt、ハッシュ名、および反復処理の回数を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-144">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, and number of iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-145">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-145">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-146">ハード コーディングされたパスワードを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進数のエディター、または単に notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-146">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="1bb9c-147">ハッシュ アルゴリズム名の一覧は、次を参照してください。、<xref:System.Security.Cryptography.CryptoConfig>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-147">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="1bb9c-148">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-148">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="1bb9c-149">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-149">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="1bb9c-150">キーを派生させるために使用するハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-150">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="1bb9c-151">キーを派生させるために使用する反復処理の回数。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-151">The iteration count to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="1bb9c-152">この演算を行うための暗号化サービス プロバイダー (CSP) パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-152">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="1bb9c-153">キーを派生させるために使用するパスワード、キー salt、ハッシュ名、反復処理回数、および暗号化サービス プロバイダー (CSP: Cryptographic Service Provider) を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-153">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-154">ハードコードしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-154">Never hard code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-155">パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、16 進数のエディターまたは Notepad.exe などのテキスト エディターでアセンブリを開くだけでします。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-155">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="1bb9c-156">ハッシュ アルゴリズム名の一覧は、次を参照してください。、<xref:System.Security.Cryptography.CryptoConfig>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-156">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="1bb9c-157">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-157">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="1bb9c-158">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-158">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="1bb9c-159">演算で使用するハッシュ アルゴリズムの名前。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-159">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="1bb9c-160">演算の反復処理回数。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-160">The number of iterations for the operation.</span></span></param>
        <param name="cspParams"><span data-ttu-id="1bb9c-161">演算で使用する CSP パラメーター。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-161">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="1bb9c-162">キーを派生するために使用するパスワード、キー salt、ハッシュ名、反復処理の回数、および暗号サービス プロバイダー (CSP) の各パラメーターを指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-162">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="1bb9c-163">ハードコーディングしないでをソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-163">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="1bb9c-164">ハード コーディングされたパスワードを使用してアセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進数のエディター、または単に notepad.exe などのテキスト エディターでアセンブリを開いて、します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-164">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="1bb9c-165">ハッシュ アルゴリズム名の一覧は、次を参照してください。、<xref:System.Security.Cryptography.CryptoConfig>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-165">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname"><span data-ttu-id="1bb9c-166">キーを派生させる対象となるアルゴリズム名。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-166">The algorithm name for which to derive the key.</span></span></param>
        <param name="alghashname"><span data-ttu-id="1bb9c-167">キーを派生させるために使用するハッシュ アルゴリズム名。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-167">The hash algorithm name to use to derive the key.</span></span></param>
        <param name="keySize"><span data-ttu-id="1bb9c-168">派生させるキーのサイズ (ビット単位)。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-168">The size of the key, in bits, to derive.</span></span></param>
        <param name="rgbIV"><span data-ttu-id="1bb9c-169">キーを派生させるために使用する初期化ベクター (IV: Initialization Vector)。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-169">The initialization vector (IV) to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="1bb9c-170"><see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> オブジェクトから暗号キーを派生させます。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-170">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</span></span></summary>
        <returns><span data-ttu-id="1bb9c-171">派生させたキー。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-171">The derived key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1bb9c-172">この関数は、CryptDeriveKey() Crypto API 関数のラッパーであり、Crypto API を使用するアプリケーションとの相互運用性を提供するためのものでは、します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-172">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="1bb9c-173">場合、`keySize`パラメーターが 0 のビットに設定されている、指定したアルゴリズムの既定のキー サイズが使用されます。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-173">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1bb9c-174">このコード例に示されている例の一部である、<xref:System.Security.Cryptography.PasswordDeriveBytes>クラスです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-174">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#2)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#2)]
 [!code-vb[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="1bb9c-175"><paramref name="keySize" /> パラメーターが正しくありません。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-175">The <paramref name="keySize" /> parameter is incorrect.</span></span>  
  
 <span data-ttu-id="1bb9c-176">- または -</span><span class="sxs-lookup"><span data-stu-id="1bb9c-176">-or-</span></span>  
  
 <span data-ttu-id="1bb9c-177">暗号化サービス プロバイダー (CSP) を取得できません。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-177">The cryptographic service provider (CSP) cannot be acquired.</span></span>  
  
 <span data-ttu-id="1bb9c-178">- または -</span><span class="sxs-lookup"><span data-stu-id="1bb9c-178">-or-</span></span>  
  
 <span data-ttu-id="1bb9c-179"><paramref name="algname" /> パラメーターが有効なアルゴリズム名ではありません。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-179">The <paramref name="algname" /> parameter is not a valid algorithm name.</span></span>  
  
 <span data-ttu-id="1bb9c-180">- または -</span><span class="sxs-lookup"><span data-stu-id="1bb9c-180">-or-</span></span>  
  
 <span data-ttu-id="1bb9c-181"><paramref name="alghashname" /> パラメーターが有効なハッシュ アルゴリズム名ではありません。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-181">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="1bb9c-182">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-182"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="1bb9c-183"><see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-183">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1bb9c-184">このメソッドは、パブリック`Dispose()`メソッドおよび`Finalize`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-184">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="1bb9c-185">`Dispose()` プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-185">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="1bb9c-186">`Finalize` 呼び出す`Dispose`で`disposing`'éý'`false`です。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-186">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="1bb9c-187">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Security.Cryptography.PasswordDeriveBytes> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-187">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references.</span></span> <span data-ttu-id="1bb9c-188">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-188">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1bb9c-189"><see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-189"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="1bb9c-190">オーバーライドする場合<see langword="Dispose(Boolean)" />を以前の呼び出しで既に破棄されているオブジェクトを参照しないように注意、<see langword="Dispose" />です。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-190">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="1bb9c-191">実装する方法の詳細についての<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-191">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="1bb9c-192">詳細については<see langword="Dispose" />と<see langword="Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)です。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-192">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Rfc2898DeriveBytes replaces PasswordDeriveBytes for deriving key material from a password and is preferred in new applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="1bb9c-193">生成する擬似ランダム キー バイトの数。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-193">The number of pseudo-random key bytes to generate.</span></span></param>
        <summary><span data-ttu-id="1bb9c-194">擬似ランダム キー バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-194">Returns pseudo-random key bytes.</span></span></summary>
        <returns><span data-ttu-id="1bb9c-195">擬似ランダム キー バイトを格納したバイト配列。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-195">A byte array filled with pseudo-random key bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1bb9c-196">このメソッドは、任意の数の擬似ランダム バイトを作成できます。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-196">This method can create any number of pseudo-random bytes.</span></span> <span data-ttu-id="1bb9c-197">ただし、バイト シーケンスの強度は、ハッシュ出力内のバイトの数によって制限されます。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-197">However, the strength of the byte sequence is limited by the number of bytes in the hash output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1bb9c-198">演算で使用するハッシュ アルゴリズムの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-198">Gets or sets the name of the hash algorithm for the operation.</span></span></summary>
        <value><span data-ttu-id="1bb9c-199">演算で使用するハッシュ アルゴリズムの名前。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-199">The name of the hash algorithm for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="1bb9c-200">ハッシュ値の名前が固定されているのに、この値を変更しようとしました。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-200">The name of the hash value is fixed and an attempt is made to change this value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1bb9c-201">演算の反復処理回数を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-201">Gets or sets the number of iterations for the operation.</span></span></summary>
        <value><span data-ttu-id="1bb9c-202">演算の反復処理回数。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-202">The number of iterations for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="1bb9c-203">反復処理の回数が固定されているのに、この値を変更しようとしました。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-203">The number of iterations is fixed and an attempt is made to change this value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="1bb9c-204">プロパティの値が範囲を超えているため設定できません。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-204">The property cannot be set because its value is out of range.</span></span> <span data-ttu-id="1bb9c-205">このプロパティには、負でない数が必要です。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-205">This property requires a non-negative number.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1bb9c-206">演算の状態をリセットします。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-206">Resets the state of the operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1bb9c-207">演算で使用するキー salt 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-207">Gets or sets the key salt value for the operation.</span></span></summary>
        <value><span data-ttu-id="1bb9c-208">演算で使用するキー salt 値。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-208">The key salt value for the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1bb9c-209">辞書攻撃は、攻撃者が事前に計算された暗号化キーの値を最も可能性の高いで暗号化された値を比較することで、暗号化されたメッセージを復号化しようと攻撃です。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-209">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="1bb9c-210">このような攻撃は、キーの派生前に、パスワードの最後のランダム バイトの導入によって非常に困難になります。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-210">This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</span></span> <span data-ttu-id="1bb9c-211">これらのランダム バイトは salt と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-211">These random bytes are known as salt.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="1bb9c-212">キー salt 値が固定されているのに、この値を変更しようとしました。</span><span class="sxs-lookup"><span data-stu-id="1bb9c-212">The key salt value is fixed and an attempt is made to change this value.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>