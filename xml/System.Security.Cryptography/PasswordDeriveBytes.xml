<Type Name="PasswordDeriveBytes" FullName="System.Security.Cryptography.PasswordDeriveBytes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9795be765ade7f874396f7b18615a2c85669a490" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52248023" /></Metadata><TypeSignature Language="C#" Value="public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PasswordDeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PasswordDeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class PasswordDeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class PasswordDeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <TypeSignature Language="F#" Value="type PasswordDeriveBytes = class&#xA;    inherit DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dfb43-101">PBKDF1 アルゴリズムの拡張機能を使用してパスワードからキーを派生させます。</span><span class="sxs-lookup"><span data-stu-id="dfb43-101">Derives a key from a password using an extension of the PBKDF1 algorithm.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfb43-102">このクラスは、パスワードからキー マテリアルとして使用するための適切なバイトを派生するのに PKCS #5 v2.0 標準で定義されている PBKDF1 アルゴリズムの拡張機能を使用します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-102">This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</span></span> <span data-ttu-id="dfb43-103">標準は、IETF RRC 2898 に記載されています。</span><span class="sxs-lookup"><span data-stu-id="dfb43-103">The standard is documented in IETF RRC 2898.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-104">ハードコードしないでください、ソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-104">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="dfb43-105">ハード コーディングされたパスワードを使用してアセンブリから取得できます、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進エディターでは、notepad.exe などのテキスト エディターでアセンブリを開くだけで、または。</span><span class="sxs-lookup"><span data-stu-id="dfb43-105">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfb43-106">次のコード例を使用してパスワードからキーを作成、<xref:System.Security.Cryptography.PasswordDeriveBytes>クラス。</span><span class="sxs-lookup"><span data-stu-id="dfb43-106">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-107">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-107">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dfb43-108"><see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-108">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : byte[] * byte[] -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (password, salt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="dfb43-109">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-109">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="dfb43-110">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="dfb43-110">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="dfb43-111">キーを派生させるために使用するパスワードおよびキー salt を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-111">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-112">ソース コード内でのパスワードをハードコーディング コードします。</span><span class="sxs-lookup"><span data-stu-id="dfb43-112">Never hard code a password within your source code.</span></span>  <span data-ttu-id="dfb43-113">ハード コーディングされたパスワードを使用してアセンブリから取得できます、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、16 進エディター、または Notepad.exe などのテキスト エディターでアセンブリを開くだけで。</span><span class="sxs-lookup"><span data-stu-id="dfb43-113">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfb43-114">次のコード例を使用してパスワードからキーを作成、<xref:System.Security.Cryptography.PasswordDeriveBytes>クラス。</span><span class="sxs-lookup"><span data-stu-id="dfb43-114">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-115">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-115">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : string * byte[] -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (strPassword, rgbSalt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="dfb43-116">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-116">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="dfb43-117">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="dfb43-117">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="dfb43-118">キーを派生させるために使用するパスワードおよびキー salt を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-118">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-119">ハードコードしないでください、ソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-119">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="dfb43-120">ハード コーディングされたパスワードを使用してアセンブリから取得できます、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進エディターでは、notepad.exe などのテキスト エディターでアセンブリを開くだけで、または。</span><span class="sxs-lookup"><span data-stu-id="dfb43-120">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-121">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-121">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : byte[] * byte[] * System.Security.Cryptography.CspParameters -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (password, salt, cspParams)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="dfb43-122">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-122">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="dfb43-123">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="dfb43-123">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="dfb43-124">この操作を行うための暗号化サービス プロバイダー (CSP) パラメーター。</span><span class="sxs-lookup"><span data-stu-id="dfb43-124">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="dfb43-125">キーを派生させるために使用するパスワード、キー salt、および暗号化サービス プロバイダー (CSP: Cryptographic Service Provider) を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-126">ソース コード内でのパスワードをハードコーディング コードします。</span><span class="sxs-lookup"><span data-stu-id="dfb43-126">Never hard code a password within your source code.</span></span>  <span data-ttu-id="dfb43-127">パスワードをハードコーディングを使用してアセンブリから取得できる、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l、16 進エディターでは、Notepad.exe などのテキスト エディターでアセンブリを開くだけで、または。</span><span class="sxs-lookup"><span data-stu-id="dfb43-127">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfb43-128">次のコード例を使用してパスワードからキーを作成、<xref:System.Security.Cryptography.PasswordDeriveBytes>クラス。</span><span class="sxs-lookup"><span data-stu-id="dfb43-128">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-129">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-129">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : string * byte[] * System.Security.Cryptography.CspParameters -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (strPassword, rgbSalt, cspParams)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="dfb43-130">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-130">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="dfb43-131">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="dfb43-131">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="dfb43-132">演算で使用する CSP パラメーター。</span><span class="sxs-lookup"><span data-stu-id="dfb43-132">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="dfb43-133">キーを派生させるために使用するパスワード、キー salt、および暗号サービス プロバイダー (CSP : Cryptographic Service Provider) のパラメーターを指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-133">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-134">ハードコードしないでください、ソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-134">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="dfb43-135">ハード コーディングされたパスワードを使用してアセンブリから取得できます、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進エディターでは、notepad.exe などのテキスト エディターでアセンブリを開くだけで、または。</span><span class="sxs-lookup"><span data-stu-id="dfb43-135">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-136">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-136">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : byte[] * byte[] * string * int -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (password, salt, hashName, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="dfb43-137">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-137">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="dfb43-138">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="dfb43-138">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="dfb43-139">キーを派生させるために使用するハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="dfb43-139">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="dfb43-140">キーを派生させるために使用する反復処理の回数。</span><span class="sxs-lookup"><span data-stu-id="dfb43-140">The iteration count to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="dfb43-141">キーを派生させるために使用するパスワード、キー salt、ハッシュ名、および反復処理を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-141">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, and iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-142">ソース コード内でのパスワードをハードコーディング コードします。</span><span class="sxs-lookup"><span data-stu-id="dfb43-142">Never hard code a password within your source code.</span></span>  <span data-ttu-id="dfb43-143">ハード コーディングされたパスワードを使用してアセンブリから取得できます、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、16 進エディター、または Notepad.exe などのテキスト エディターでアセンブリを開くだけで。</span><span class="sxs-lookup"><span data-stu-id="dfb43-143">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="dfb43-144">ハッシュ アルゴリズム名の一覧は、次を参照してください。、<xref:System.Security.Cryptography.CryptoConfig>クラス。</span><span class="sxs-lookup"><span data-stu-id="dfb43-144">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-145">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-145">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : string * byte[] * string * int -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (strPassword, rgbSalt, strHashName, iterations)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="dfb43-146">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-146">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="dfb43-147">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="dfb43-147">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="dfb43-148">演算で使用するハッシュ アルゴリズムの名前。</span><span class="sxs-lookup"><span data-stu-id="dfb43-148">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="dfb43-149">演算の反復処理回数。</span><span class="sxs-lookup"><span data-stu-id="dfb43-149">The number of iterations for the operation.</span></span></param>
        <summary><span data-ttu-id="dfb43-150">キーを派生させるために使用するパスワード、キー salt、ハッシュ名、および反復処理の回数を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-150">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, and number of iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-151">ハードコードしないでください、ソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-151">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="dfb43-152">ハード コーディングされたパスワードを使用してアセンブリから取得できます、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進エディターでは、notepad.exe などのテキスト エディターでアセンブリを開くだけで、または。</span><span class="sxs-lookup"><span data-stu-id="dfb43-152">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="dfb43-153">ハッシュ アルゴリズム名の一覧は、次を参照してください。、<xref:System.Security.Cryptography.CryptoConfig>クラス。</span><span class="sxs-lookup"><span data-stu-id="dfb43-153">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-154">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-154">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : byte[] * byte[] * string * int * System.Security.Cryptography.CspParameters -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (password, salt, hashName, iterations, cspParams)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="dfb43-155">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-155">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="dfb43-156">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="dfb43-156">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="dfb43-157">キーを派生させるために使用するハッシュ アルゴリズム。</span><span class="sxs-lookup"><span data-stu-id="dfb43-157">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="dfb43-158">キーを派生させるために使用する反復処理の回数。</span><span class="sxs-lookup"><span data-stu-id="dfb43-158">The iteration count to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="dfb43-159">この操作を行うための暗号化サービス プロバイダー (CSP) パラメーター。</span><span class="sxs-lookup"><span data-stu-id="dfb43-159">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="dfb43-160">キーを派生させるために使用するパスワード、キー salt、ハッシュ名、反復処理、および暗号化サービス プロバイダー (CSP: Cryptographic Service Provider) を指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-160">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-161">ソース コード内でのパスワードをハードコーディング コードします。</span><span class="sxs-lookup"><span data-stu-id="dfb43-161">Never hard code a password within your source code.</span></span>  <span data-ttu-id="dfb43-162">ハード コーディングされたパスワードを使用してアセンブリから取得できます、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)、16 進エディター、または Notepad.exe などのテキスト エディターでアセンブリを開くだけで。</span><span class="sxs-lookup"><span data-stu-id="dfb43-162">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="dfb43-163">ハッシュ アルゴリズム名の一覧は、次を参照してください。、<xref:System.Security.Cryptography.CryptoConfig>クラス。</span><span class="sxs-lookup"><span data-stu-id="dfb43-163">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-164">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-164">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.PasswordDeriveBytes : string * byte[] * string * int * System.Security.Cryptography.CspParameters -&gt; System.Security.Cryptography.PasswordDeriveBytes" Usage="new System.Security.Cryptography.PasswordDeriveBytes (strPassword, rgbSalt, strHashName, iterations, cspParams)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="dfb43-165">キーを派生させる対象のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-165">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="dfb43-166">キーを派生させるために使用するキー salt。</span><span class="sxs-lookup"><span data-stu-id="dfb43-166">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="dfb43-167">演算で使用するハッシュ アルゴリズムの名前。</span><span class="sxs-lookup"><span data-stu-id="dfb43-167">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="dfb43-168">演算の反復処理回数。</span><span class="sxs-lookup"><span data-stu-id="dfb43-168">The number of iterations for the operation.</span></span></param>
        <param name="cspParams"><span data-ttu-id="dfb43-169">演算で使用する CSP パラメーター。</span><span class="sxs-lookup"><span data-stu-id="dfb43-169">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="dfb43-170">キーを派生するために使用するパスワード、キー salt、ハッシュ名、反復処理の回数、および暗号サービス プロバイダー (CSP) のパラメーターを指定して、<see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-170">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfb43-171">ハードコードしないでください、ソース コード内のパスワード。</span><span class="sxs-lookup"><span data-stu-id="dfb43-171">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="dfb43-172">ハード コーディングされたパスワードを使用してアセンブリから取得できます、 [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md)ツール、16 進エディターでは、notepad.exe などのテキスト エディターでアセンブリを開くだけで、または。</span><span class="sxs-lookup"><span data-stu-id="dfb43-172">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="dfb43-173">ハッシュ アルゴリズム名の一覧は、次を参照してください。、<xref:System.Security.Cryptography.CryptoConfig>クラス。</span><span class="sxs-lookup"><span data-stu-id="dfb43-173">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-174">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-174">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberSignature Language="F#" Value="member this.CryptDeriveKey : string * string * int * byte[] -&gt; byte[]" Usage="passwordDeriveBytes.CryptDeriveKey (algname, alghashname, keySize, rgbIV)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname"><span data-ttu-id="dfb43-175">キーを派生させる対象となるアルゴリズム名。</span><span class="sxs-lookup"><span data-stu-id="dfb43-175">The algorithm name for which to derive the key.</span></span></param>
        <param name="alghashname"><span data-ttu-id="dfb43-176">キーを派生させるために使用するハッシュ アルゴリズム名。</span><span class="sxs-lookup"><span data-stu-id="dfb43-176">The hash algorithm name to use to derive the key.</span></span></param>
        <param name="keySize"><span data-ttu-id="dfb43-177">派生させるキーのサイズ (ビット単位)。</span><span class="sxs-lookup"><span data-stu-id="dfb43-177">The size of the key, in bits, to derive.</span></span></param>
        <param name="rgbIV"><span data-ttu-id="dfb43-178">キーを派生させるために使用する初期化ベクター (IV : Initialization Vector)。</span><span class="sxs-lookup"><span data-stu-id="dfb43-178">The initialization vector (IV) to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="dfb43-179"><see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> オブジェクトから暗号キーを派生させます。</span><span class="sxs-lookup"><span data-stu-id="dfb43-179">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</span></span></summary>
        <returns><span data-ttu-id="dfb43-180">派生させたキー。</span><span class="sxs-lookup"><span data-stu-id="dfb43-180">The derived key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfb43-181">この関数は CryptDeriveKey()、Crypto API 関数のラッパーであり、Crypto API を使用するアプリケーションとの相互運用性を提供するためのものです。</span><span class="sxs-lookup"><span data-stu-id="dfb43-181">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="dfb43-182">場合、`keySize`パラメーターが 0 のビットに設定されている、指定したアルゴリズムの既定のキー サイズが使用されます。</span><span class="sxs-lookup"><span data-stu-id="dfb43-182">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfb43-183">このコード例が示されている例の一部、<xref:System.Security.Cryptography.PasswordDeriveBytes>クラス。</span><span class="sxs-lookup"><span data-stu-id="dfb43-183">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#2)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#2)]
 [!code-vb[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="dfb43-184"><paramref name="keySize" /> パラメーターが正しくありません。</span><span class="sxs-lookup"><span data-stu-id="dfb43-184">The <paramref name="keySize" /> parameter is incorrect.</span></span>  
  
<span data-ttu-id="dfb43-185">または</span><span class="sxs-lookup"><span data-stu-id="dfb43-185">-or-</span></span> 
<span data-ttu-id="dfb43-186">暗号化サービス プロバイダー (CSP) を取得できません。</span><span class="sxs-lookup"><span data-stu-id="dfb43-186">The cryptographic service provider (CSP) cannot be acquired.</span></span>  
  
<span data-ttu-id="dfb43-187">または</span><span class="sxs-lookup"><span data-stu-id="dfb43-187">-or-</span></span> 
<span data-ttu-id="dfb43-188"><paramref name="algname" /> パラメーターが有効なアルゴリズム名ではありません。</span><span class="sxs-lookup"><span data-stu-id="dfb43-188">The <paramref name="algname" /> parameter is not a valid algorithm name.</span></span>  
  
<span data-ttu-id="dfb43-189">または</span><span class="sxs-lookup"><span data-stu-id="dfb43-189">-or-</span></span> 
<span data-ttu-id="dfb43-190"><paramref name="alghashname" /> パラメーターが有効なハッシュ アルゴリズム名ではありません。</span><span class="sxs-lookup"><span data-stu-id="dfb43-190">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-191">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-191">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="passwordDeriveBytes.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="dfb43-192">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dfb43-192"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="dfb43-193"><see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> クラスが使用しているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-193">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfb43-194">このメソッドは、パブリック`Dispose()`メソッドと`Finalize`メソッド。</span><span class="sxs-lookup"><span data-stu-id="dfb43-194">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="dfb43-195">`Dispose()` 保護された起動`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-195">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="dfb43-196">`Finalize` 呼び出す`Dispose`で`disposing`に設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-196">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="dfb43-197">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Security.Cryptography.PasswordDeriveBytes> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-197">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references.</span></span> <span data-ttu-id="dfb43-198">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-198">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="dfb43-199">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="dfb43-199">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="dfb43-200">オーバーライドするときに<see langword="Dispose(Boolean)" />を以前の呼び出しで破棄されたオブジェクトを参照しないように注意、<see langword="Dispose" />します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-200">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="dfb43-201">実装する方法についての詳細は<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-201">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="dfb43-202">詳細については<see langword="Dispose" />と<see langword="Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-202">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~PasswordDeriveBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!PasswordDeriveBytes ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="passwordDeriveBytes.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberSignature Language="F#" Value="override this.GetBytes : int -&gt; byte[]" Usage="passwordDeriveBytes.GetBytes cb" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("Rfc2898DeriveBytes replaces PasswordDeriveBytes for deriving key material from a password and is preferred in new applications.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="dfb43-203">生成する擬似ランダム キー バイトの数。</span><span class="sxs-lookup"><span data-stu-id="dfb43-203">The number of pseudo-random key bytes to generate.</span></span></param>
        <summary><span data-ttu-id="dfb43-204">擬似ランダム キー バイトを返します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-204">Returns pseudo-random key bytes.</span></span></summary>
        <returns><span data-ttu-id="dfb43-205">擬似ランダム キー バイトを格納したバイト配列。</span><span class="sxs-lookup"><span data-stu-id="dfb43-205">A byte array filled with pseudo-random key bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfb43-206">このメソッドは、任意の数の擬似ランダム バイトを作成できます。</span><span class="sxs-lookup"><span data-stu-id="dfb43-206">This method can create any number of pseudo-random bytes.</span></span> <span data-ttu-id="dfb43-207">ただし、バイト シーケンスの強度は、ハッシュの出力内のバイトの数によって制限されます。</span><span class="sxs-lookup"><span data-stu-id="dfb43-207">However, the strength of the byte sequence is limited by the number of bytes in the hash output.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-208">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-208">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HashName : string with get, set" Usage="System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dfb43-209">演算で使用するハッシュ アルゴリズムの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-209">Gets or sets the name of the hash algorithm for the operation.</span></span></summary>
        <value><span data-ttu-id="dfb43-210">演算で使用するハッシュ アルゴリズムの名前。</span><span class="sxs-lookup"><span data-stu-id="dfb43-210">The name of the hash algorithm for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="dfb43-211">ハッシュ値の名前が固定されているのに、この値を変更しようとしました。</span><span class="sxs-lookup"><span data-stu-id="dfb43-211">The name of the hash value is fixed and an attempt is made to change this value.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-212">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-212">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IterationCount : int with get, set" Usage="System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dfb43-213">演算の反復処理回数を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-213">Gets or sets the number of iterations for the operation.</span></span></summary>
        <value><span data-ttu-id="dfb43-214">演算の反復処理回数。</span><span class="sxs-lookup"><span data-stu-id="dfb43-214">The number of iterations for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="dfb43-215">反復処理の回数が固定されているのに、この値を変更しようとしました。</span><span class="sxs-lookup"><span data-stu-id="dfb43-215">The number of iterations is fixed and an attempt is made to change this value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="dfb43-216">プロパティの値が範囲を超えているため設定できません。</span><span class="sxs-lookup"><span data-stu-id="dfb43-216">The property cannot be set because its value is out of range.</span></span> <span data-ttu-id="dfb43-217">このプロパティには、負でない数が必要です。</span><span class="sxs-lookup"><span data-stu-id="dfb43-217">This property requires a non-negative number.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-218">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-218">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="passwordDeriveBytes.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dfb43-219">演算の状態をリセットします。</span><span class="sxs-lookup"><span data-stu-id="dfb43-219">Resets the state of the operation.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-220">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-220">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Salt : byte[] with get, set" Usage="System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dfb43-221">演算で使用するキー salt 値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dfb43-221">Gets or sets the key salt value for the operation.</span></span></summary>
        <value><span data-ttu-id="dfb43-222">演算で使用するキー salt 値。</span><span class="sxs-lookup"><span data-stu-id="dfb43-222">The key salt value for the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfb43-223">辞書攻撃とは攻撃で最も可能性の高いキーの暗号化された値を事前に計算された、暗号化された値を比較することで、暗号化されたメッセージを復号化する、攻撃者がしようとします。</span><span class="sxs-lookup"><span data-stu-id="dfb43-223">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="dfb43-224">この攻撃はキーの派生前に、パスワードの最後にランダムなバイトの導入によって非常に困難になります。</span><span class="sxs-lookup"><span data-stu-id="dfb43-224">This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</span></span> <span data-ttu-id="dfb43-225">これらのランダム バイトは、salt と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="dfb43-225">These random bytes are known as salt.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="dfb43-226">キー salt 値が固定されているのに、この値を変更しようとしました。</span><span class="sxs-lookup"><span data-stu-id="dfb43-226">The key salt value is fixed and an attempt is made to change this value.</span></span></exception>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="dfb43-227">暗号化サービス</span><span class="sxs-lookup"><span data-stu-id="dfb43-227">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>