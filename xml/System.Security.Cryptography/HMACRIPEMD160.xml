<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HMACRIPEMD160.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58dbae615f73b276d9a73b731a30e0587151fc9c1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8dbae615f73b276d9a73b731a30e0587151fc9c1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>Computes a Hash-based Message Authentication Code (HMAC) by using the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RIPEMD160" /&gt;</ph> hash function.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RIPEMD160" /&gt;</ph> ハッシュ関数を使用して、ハッシュ メッセージ認証コード (HMAC) を計算します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> ripemd-160 ハッシュ関数から作成され、としてするハッシュ ベース メッセージ認証コード (HMAC) を使用するキー付きハッシュ アルゴリズムの型です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、秘密キーを使用してそのハッシュ値をもう一度、ミックスし、ハッシュ関数をもう一度します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The output hash is 160 bits in length.</source>
          <target state="translated">出力ハッシュは、160 ビットの長さです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">HMAC を使用して、送信者と受信者に、共有シークレット キーを共有すると、安全でないチャネル経由で送信されたメッセージが改ざんされているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</source>
          <target state="translated">送信者は、元のデータのハッシュ値を計算し、単一のメッセージとしてのハッシュ値と、元のデータの両方を送信します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">受信者は、受信メッセージのハッシュ値を再計算され、計算の HMAC に送信された HMAC が一致することを確認します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">データや、ハッシュ値を変更をメッセージを変更し、正しいハッシュ値を再現する秘密キーの知識が必要なため、不一致が発生します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>Therefore, if the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">そのため、元と計算されたハッシュ値が一致した場合、メッセージが認証されます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> accepts keys of any size, and produces a hash sequence that is 160 bits long.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> 任意のサイズ、キーを確定し、160 ビット長であるハッシュを生成します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</source>
          <target state="translated">RIPEMD ハッシュ アルゴリズムとその後続タスクは、ヨーロッパ成熟プロジェクトによって開発されました。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</source>
          <target state="translated">元の RIPEMD アルゴリズムでは、MD4、MD5 を置き換えるために設計された、その後し、および ripemd-160 の名前を変更します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The RIPEMD-160 hash algorithm produces a 160-bit hash value.</source>
          <target state="translated">Ripemd-160 ハッシュ アルゴリズムは、160 ビットのハッシュ値を生成します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The algorithm's designers have placed it in the public domain.</source>
          <target state="translated">アルゴリズムのデザイナーをパブリック ドメインに配置がします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>The following example shows how to sign a file by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> object and then how to verify the file.</source>
          <target state="translated">次の例を使用して、ファイルに署名する方法を示しています、<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph>オブジェクトと、そのファイルを確認します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACRIPEMD160">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACRIPEMD160" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACRIPEMD160" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACRIPEMD160" /&gt;</ph> class with a randomly generated 64-byte key.</source>
          <target state="translated">ランダムに生成された 64 バイトのキーを指定して、<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACRIPEMD160" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> ripemd-160 ハッシュ関数から作成され、としてするハッシュ ベース メッセージ認証コード (HMAC) を使用するキー付きハッシュ アルゴリズムの型です。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、秘密キーを使用してそのハッシュ値をもう一度、ミックスし、ハッシュ関数をもう一度します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor">
          <source>The output hash is 160 bytes in length.</source>
          <target state="translated">出力ハッシュは、160 バイトの長さです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor">
          <source>This constructor uses a 64-byte, randomly generated key.</source>
          <target state="translated">このコンス トラクターは、64 バイト、ランダムに生成されたキーを使用します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACRIPEMD160" /&gt;</ph> encryption.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACRIPEMD160" /&gt;</ph> 暗号化の共有キー。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source>The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</source>
          <target state="translated">キーは任意の長さにできますが、64 バイトを超えた場合は、SHA-1 を使用してハッシュされ、最終的には 64 バイトのキーが生成されます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source>Therefore, the recommended size of the secret key is 64 bytes.</source>
          <target state="translated">したがって、共有キーの推奨サイズは 64 バイトです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACRIPEMD160" /&gt;</ph> class with the specified key data.</source>
          <target state="translated">キー データを指定して、<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACRIPEMD160" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> ripemd-160 ハッシュ関数から作成され、としてするハッシュ ベース メッセージ認証コード (HMAC) を使用するキー付きハッシュ アルゴリズムの型です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source>The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</source>
          <target state="translated">HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、秘密キーを使用してそのハッシュ値をもう一度、ミックスし、ハッシュ関数をもう一度します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source>The output hash is 160 bytes in length.</source>
          <target state="translated">出力ハッシュは、160 バイトの長さです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source>For an example of how to use this constructor, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph> class.</source>
          <target state="translated">このコンス トラクターを使用する方法の例は、次を参照してください。、<ph id="ph1">&lt;xref:System.Security.Cryptography.HMACRIPEMD160&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="key" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>