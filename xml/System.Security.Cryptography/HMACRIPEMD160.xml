<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e0915be18b8c1f8512a72dc9a1f0f642e7d7ee6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37624173" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <TypeSignature Language="F#" Value="type HMACRIPEMD160 = class&#xA;    inherit HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e92d4-101">
        <see cref="T:System.Security.Cryptography.RIPEMD160" /> ハッシュ関数を使用して、ハッシュ メッセージ認証コード (HMAC) を計算します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e92d4-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-102"><xref:System.Security.Cryptography.HMACRIPEMD160> ripemd-160 のハッシュ関数から構築され、として、ハッシュ ベース メッセージ認証コード (HMAC) が使用されるキー付きハッシュ アルゴリズムの一種です。</span><span class="sxs-lookup"><span data-stu-id="e92d4-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="e92d4-103">HMAC プロセスとメッセージ データの秘密キーを合成、ハッシュ関数を使用した結果のハッシュを計算、秘密キーとそのハッシュ値をもう一度、合成し、ハッシュ関数をもう一度します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="e92d4-104">出力ハッシュは、160 ビットの長さです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="e92d4-105">HMAC を使用して、送信者と受信者が共有シークレット キーを共有に使用すると、安全でないチャネル経由で送信されたメッセージを改ざんするかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="e92d4-106">送信者は、元のデータのハッシュ値を計算し、1 つのメッセージとして、元のデータと値のハッシュの両方を送信します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="e92d4-107">受信アダプターは、受信メッセージのハッシュ値を再計算し、計算の HMAC が送信された HMAC と一致することを確認します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="e92d4-108">メッセージを変更し、適切なハッシュ値を再現する秘密キーの知識が必要なために、データや、ハッシュ値を変更の結果は一致しません場合。</span><span class="sxs-lookup"><span data-stu-id="e92d4-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="e92d4-109">そのため、元と計算されたハッシュ値が一致したメッセージが認証されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="e92d4-110"><xref:System.Security.Cryptography.HMACRIPEMD160> 任意のサイズのキーを受け取り、160 ビット長であるハッシュを生成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="e92d4-111">RIPEMD のハッシュ アルゴリズムとその後続タスクは、ヨーロッパの関連プロジェクトによって開発されました。</span><span class="sxs-lookup"><span data-stu-id="e92d4-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="e92d4-112">元の RIPEMD アルゴリズムでは、MD4、MD5 に置き換えてに設計されていますが、その後と ripemd-160 の名前を変更します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="e92d4-113">Ripemd-160 のハッシュ アルゴリズムでは、160 ビットのハッシュ値を生成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="e92d4-114">アルゴリズムのデザイナーをパブリック ドメインで配置があります。</span><span class="sxs-lookup"><span data-stu-id="e92d4-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-115">次の例を使用してファイルに署名する方法を示しています、<xref:System.Security.Cryptography.HMACRIPEMD160>オブジェクトとし、ファイルを確認する方法。</span><span class="sxs-lookup"><span data-stu-id="e92d4-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e92d4-116">
            <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e92d4-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e92d4-117">ランダムに生成された 64 バイトのキーを指定して、<see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e92d4-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-118"><xref:System.Security.Cryptography.HMACRIPEMD160> ripemd-160 のハッシュ関数から構築され、として、ハッシュ ベース メッセージ認証コード (HMAC) が使用されるキー付きハッシュ アルゴリズムの一種です。</span><span class="sxs-lookup"><span data-stu-id="e92d4-118"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="e92d4-119">HMAC プロセスとメッセージ データの秘密キーを合成、ハッシュ関数を使用した結果のハッシュを計算、秘密キーとそのハッシュ値をもう一度、合成し、ハッシュ関数をもう一度します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-119">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="e92d4-120">出力ハッシュは、160 バイトの長さです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-120">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="e92d4-121">このコンス トラクターは、64 バイトのランダムに生成されたキーを使用します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-121">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberSignature Language="F#" Value="new System.Security.Cryptography.HMACRIPEMD160 : byte[] -&gt; System.Security.Cryptography.HMACRIPEMD160" Usage="new System.Security.Cryptography.HMACRIPEMD160 key" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="e92d4-122">
            <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 暗号化の共有キー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e92d4-122">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span>
          </span>
          <span data-ttu-id="e92d4-123">キーは任意の長さにできますが、64 バイトを超えた場合は、SHA-1 を使用してハッシュされ、最終的には 64 バイトのキーが生成されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e92d4-123">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span>
          </span>
          <span data-ttu-id="e92d4-124">したがって、共有キーの推奨サイズは 64 バイトです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e92d4-124">Therefore, the recommended size of the secret key is 64 bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e92d4-125">キー データを指定して、<see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e92d4-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-126"><xref:System.Security.Cryptography.HMACRIPEMD160> ripemd-160 のハッシュ関数から構築され、として、ハッシュ ベース メッセージ認証コード (HMAC) が使用されるキー付きハッシュ アルゴリズムの一種です。</span><span class="sxs-lookup"><span data-stu-id="e92d4-126"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="e92d4-127">HMAC プロセスとメッセージ データの秘密キーを合成、ハッシュ関数を使用した結果のハッシュを計算、秘密キーとそのハッシュ値をもう一度、合成し、ハッシュ関数をもう一度します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-127">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="e92d4-128">出力ハッシュは、160 バイトの長さです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-128">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-129">このコンス トラクターを使用する方法の例は、次を参照してください。、<xref:System.Security.Cryptography.HMACRIPEMD160>クラス。</span><span class="sxs-lookup"><span data-stu-id="e92d4-129">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e92d4-130">
            <paramref name="key" /> パラメーターが <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e92d4-130">The <paramref name="key" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>