<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="85e54dc476e794ce3dfa58d1f9845ffdc532fe55" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48685133" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>非同期メソッドの呼び出しをサポートするクラスのコンカレンシーの管理を提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスがに従って非同期動作を提供する必要があるかどうか、 [- イベント ベースの非同期パターンの概要](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)多数の同時実行管理の問題が発生します。 これは特に、スレッドまたは、アプリケーション モデルの適切なコンテキストでイベント ハンドラーを呼び出すことを確認するための要件 (たとえば、Windows フォーム アプリケーション、[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]アプリケーションやコンソール アプリケーション、)。 <xref:System.ComponentModel.AsyncOperationManager>でサポートされているすべてのアプリケーション モデルが正しく動作するクラスを作成する便利な手段を提供します、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]します。  
  
 <xref:System.ComponentModel.AsyncOperationManager>クラスが 1 つのメソッド、 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>、返された、<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>特定の非同期タスクの実行時間を追跡するために使用できます。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>のタスクが完了すると、タスクを使用して、クライアントに通知することができます。 操作を終了せず、進行状況の更新およびインクリメンタル結果を投稿することにも使用できます。  
  
 非同期クラスの実装の詳細については、次を参照してください。[イベント ベースの非同期パターンを実装する](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)します。  
  
   
  
## Examples  
 次のコード例に示しますを使用して、<xref:System.ComponentModel.AsyncOperationManager>任意のアプリケーション モデルの非同期操作をサポートするクラスを作成するクラス。 素数があるかどうかを判断する数をテストするクラスを実装する方法を示します。 別のスレッドでは、そのため、この計算は時間がかかり、できます。 進行状況レポート、インクリメンタル結果、および完了通知によって処理されます、<xref:System.ComponentModel.AsyncOperation>クラスにより、適切なスレッドまたはコンテキストで、クライアントのイベント ハンドラーが呼び出されます。  
  
 完全なコード一覧については、次を参照してください。[方法: イベント ベースの非同期パターンをサポートするコンポーネントを実装する](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)します。 クライアントの完全なコード一覧については、次を参照してください。[方法: イベント ベースの非同期パターンのクライアントを実装する](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)します。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
    <related type="Article" href="http://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">イベントベースの非同期パターンの実装</related>
    <related type="Article" href="http://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">マネージド スレッド処理の実施</related>
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">クライアント状態の一部 (タスク ID など) を特定の非同期操作に関連付けるために使用されるオブジェクト。</param>
        <summary>特定の非同期操作の存続期間を追跡するために使用する <see cref="T:System.ComponentModel.AsyncOperation" /> を返します。</summary>
        <returns>非同期メソッド呼び出しの存続期間を追跡するために使用できる <see cref="T:System.ComponentModel.AsyncOperation" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>メソッドを返します、<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>を特定の非同期操作の期間を追跡して、操作が完了した場合にアラートをアプリケーション モデルを使用できます。 操作を終了せず、進行状況の更新およびインクリメンタル結果を投稿するのにことにも使用できます。 <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>を適切なスレッドまたはコンテキスト アプリケーション モデルにこれらの呼び出しを正しくマーシャ リングされます。  
  
 イベント ベースの非同期パターンをサポートするクラスを実装する場合、クラスを呼び出す必要があります<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>たびに、 *MethodName* `Async`メソッドが呼び出されます。 メソッドを呼び出すクライアント アプリケーションで使用できる、`userSuppliedState`非同期操作の実行中に発生するイベントを区別するため、呼び出しごとに一意に識別するパラメーター。  
  
> [!CAUTION]
>  クライアント コードは、一意の値を提供する必要があります、`userSuppliedState`パラメーター。 一意でないタスク Id、その実装を進行状況とその他のイベントを正しくレポートがあります。 コードを一意でないタスク ID を確認し、スロー、<xref:System.ArgumentException?displayProperty=nameWithType>いずれかが検出された場合。  
  
 コードを追跡する必要がありますすべて<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>によって返される<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>対応する基になる非同期操作でオブジェクトを使用して更新を投稿し、操作を終了します。 この追跡は、渡す簡単な<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>デリゲートの間でのパラメーターとして。 クラスより高度なデザインでのコレクションを保持できます<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>オブジェクト、タスクが開始されると、オブジェクトを追加し、タスクが完了またはキャンセル時にそれらを削除します。 このアプローチを使用するを確認する一意`userSuppliedState`パラメーター値、およびメソッドの複数の同時呼び出しをサポートするクラスを使用する場合に使用する必要があります。  
  
 非同期クラスの実装の詳細については、次を参照してください。[イベント ベースの非同期パターンを実装する](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)します。  
  
   
  
## Examples  
 コード例を次に示しますを使用して、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>を作成する方法、<xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType>の非同期操作の期間を追跡します。 このコード例が示されている例の一部、<xref:System.ComponentModel.AsyncOperationManager>クラス。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
        <related type="Article" href="http://msdn.microsoft.com/library/43402d19-8d30-426d-8785-1a4478233bfa">イベントベースの非同期パターンの実装</related>
        <related type="Article" href="http://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">マネージド スレッド処理の実施</related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作の同期コンテキストを取得または設定します。</summary>
        <value>非同期操作の同期コンテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の実装は、フリー スレッドの実装です。  
  
 スレッドを設定する必要があります、<xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A>プロパティを`null`をそのファクトリが破棄されることはありません。 そうしないことを完了すると、フリー スレッドのファクトリを解放します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">同期コンテキストを設定します。 要求値:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />します。 関連付けられた状態。</permission>
      </Docs>
    </Member>
  </Members>
</Type>