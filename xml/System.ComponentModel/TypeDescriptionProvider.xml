<Type Name="TypeDescriptionProvider" FullName="System.ComponentModel.TypeDescriptionProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="23912b55bce31e7aec4da3c275f573b11b991f8d" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57931234" /></Metadata><TypeSignature Language="C#" Value="public abstract class TypeDescriptionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TypeDescriptionProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.TypeDescriptionProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TypeDescriptionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeDescriptionProvider abstract" />
  <TypeSignature Language="F#" Value="type TypeDescriptionProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3f4a7-101"><see cref="T:System.ComponentModel.TypeDescriptor" /> に追加メタデータを提供します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-101">Provides supplemental metadata to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-102"><xref:System.ComponentModel.TypeDescriptionProvider>クラスは、追加、変更、または属性、プロパティ、およびイベントなどの特性を非表示では、型またはオブジェクトに関連付けられている型の情報を動的に拡張します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-102">The <xref:System.ComponentModel.TypeDescriptionProvider> class dynamically extends the type information associated with a type or object by adding, modifying, or hiding characteristics such as attributes, properties, and events.</span></span> <span data-ttu-id="3f4a7-103">1 つのメタデータを提供する複数の型説明プロバイダー クラスがあります<xref:System.ComponentModel.TypeDescriptor>します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-103">There can be multiple type description provider classes that offer metadata to a single <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="3f4a7-104">2 つの方法で関連付けることがある、<xref:System.ComponentModel.TypeDescriptionProvider>で、 <xref:System.ComponentModel.TypeDescriptor>:</span><span class="sxs-lookup"><span data-stu-id="3f4a7-104">There are two ways to associate a <xref:System.ComponentModel.TypeDescriptionProvider> with a <xref:System.ComponentModel.TypeDescriptor>:</span></span>  
  
-   <span data-ttu-id="3f4a7-105">ときに、ターゲット クラス割り当てることができます、適切なデザイン時に<xref:System.ComponentModel.TypeDescriptionProviderAttribute>タグ。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-105">At design time, when the target class can be assigned the appropriate <xref:System.ComponentModel.TypeDescriptionProviderAttribute> tag.</span></span>  
  
-   <span data-ttu-id="3f4a7-106">実行時に、1 つの<xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>のメソッド、<xref:System.ComponentModel.TypeDescriptor>クラスを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-106">At run time, when one of the <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> methods of the <xref:System.ComponentModel.TypeDescriptor> class can be called.</span></span> <span data-ttu-id="3f4a7-107">これらのオーバー ロードされたメソッドでは、ターゲット オブジェクトまたはそのクラス型のいずれかが必要です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-107">These overloaded methods require either the target object or its class type.</span></span>  
  
 <span data-ttu-id="3f4a7-108"><xref:System.ComponentModel.TypeDescriptionProvider>クラスは構築時に指定された、同じ型の親オブジェクトに依存します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-108">The <xref:System.ComponentModel.TypeDescriptionProvider> class relies on a parent object of the same type, supplied during construction.</span></span> <span data-ttu-id="3f4a7-109">これにより、クラスから派生した<xref:System.ComponentModel.CustomTypeDescriptor>選択的にメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-109">This allows classes that derive from <xref:System.ComponentModel.CustomTypeDescriptor> to selectively override methods.</span></span>  
  
 <span data-ttu-id="3f4a7-110">インスタンス<xref:System.ComponentModel.TypeDescriptionProvider>はパフォーマンスについては、カスタム型の影響を最小限に抑え、要求時にのみ構築されています。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-110">Instances of <xref:System.ComponentModel.TypeDescriptionProvider> are only built upon demand, minimizing the impact of custom type information on performance.</span></span>  
  
 <span data-ttu-id="3f4a7-111">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-111">This class cannot be inherited.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="3f4a7-112">派生型としてマーク<see langword="internal" />または<see langword="private" />で、型のインスタンスを作成できますが、<see cref="T:System.ComponentModel.TypeDescriptor" />クラス。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-112">Your derived type might be marked as <see langword="internal" /> or <see langword="private" />, but an instance of your type can be created with the <see cref="T:System.ComponentModel.TypeDescriptor" /> class.</span></span> <span data-ttu-id="3f4a7-113">呼び出し元を想定して、安全でないコードが信頼されているとは書き込みません。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-113">Do not write insecure code by assuming the caller is trusted.</span></span> <span data-ttu-id="3f4a7-114">代わりに呼び出し元が部分信頼で型のインスタンスを作成が前提としています。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-114">Assume instead that callers might create instances of your type in partial trust.</span></span></para></block>
    <altmember cref="Overload:System.ComponentModel.TypeDescriptor.AddProvider" />
    <altmember cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" />
    <altmember cref="T:System.ComponentModel.ICustomTypeDescriptor" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f4a7-115"><see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-115">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDescriptionProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDescriptionProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3f4a7-116"><see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-116">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-117">このコンス トラクターは、その他の呼び出しに相当<xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29>パラメーター値を持つコンス トラクター`null`します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-117">This constructor is equivalent to calling the other <xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29> constructor with a parameter value that is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TypeDescriptionProvider (System.ComponentModel.TypeDescriptionProvider parent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.TypeDescriptionProvider parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (parent As TypeDescriptionProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TypeDescriptionProvider(System::ComponentModel::TypeDescriptionProvider ^ parent);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.TypeDescriptionProvider : System.ComponentModel.TypeDescriptionProvider -&gt; System.ComponentModel.TypeDescriptionProvider" Usage="new System.ComponentModel.TypeDescriptionProvider parent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="parent" Type="System.ComponentModel.TypeDescriptionProvider" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="3f4a7-118">親の型説明のプロバイダー。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-118">The parent type description provider.</span></span></param>
        <summary><span data-ttu-id="3f4a7-119">親の型説明のプロバイダーを使用して、<see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-119">Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class using a parent type description provider.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-120">場合、`parent`パラメーターが`null`すべて、<xref:System.ComponentModel.TypeDescriptionProvider>メソッドには、既定値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-120">If the `parent` parameter is `null`, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will return default values.</span></span> <span data-ttu-id="3f4a7-121">それ以外の場合、すべて<xref:System.ComponentModel.TypeDescriptionProvider>のメソッドのメソッドは委任`parent`します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-121">Otherwise, all <xref:System.ComponentModel.TypeDescriptionProvider> methods will delegate to the methods of `parent`.</span></span>  
  
 <span data-ttu-id="3f4a7-122">次の表は、既定の戻り値の<xref:System.ComponentModel.TypeDescriptionProvider>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-122">The following table shows the default return values for <xref:System.ComponentModel.TypeDescriptionProvider> methods.</span></span>  
  
|<span data-ttu-id="3f4a7-123">メソッド</span><span class="sxs-lookup"><span data-stu-id="3f4a7-123">Method</span></span>|<span data-ttu-id="3f4a7-124">既定の戻り値</span><span class="sxs-lookup"><span data-stu-id="3f4a7-124">Default return value</span></span>|  
|------------|--------------------------|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>|`null`|  
|<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>|<span data-ttu-id="3f4a7-125">新しく作成されたオブジェクトを呼び出すことによって、<xref:System.Activator.CreateInstance%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-125">A newly created object through a call to the <xref:System.Activator.CreateInstance%2A> method.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>|<span data-ttu-id="3f4a7-126">既定のインスタンスを<xref:System.ComponentModel.CustomTypeDescriptor>クラス。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-126">A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>|<span data-ttu-id="3f4a7-127">既定のインスタンスを<xref:System.ComponentModel.CustomTypeDescriptor>クラス。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-127">A default instance of a <xref:System.ComponentModel.CustomTypeDescriptor> class.</span></span>|  
|<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>|<span data-ttu-id="3f4a7-128">`objectType`最初のパラメーター。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-128">The `objectType` first parameter.</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.CustomTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(class System.IServiceProvider provider, class System.Type objectType, class System.Type[] argTypes, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (provider As IServiceProvider, objectType As Type, argTypes As Type(), args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(IServiceProvider ^ provider, Type ^ objectType, cli::array &lt;Type ^&gt; ^ argTypes, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : IServiceProvider * Type * Type[] * obj[] -&gt; obj&#xA;override this.CreateInstance : IServiceProvider * Type * Type[] * obj[] -&gt; obj" Usage="typeDescriptionProvider.CreateInstance (provider, objectType, argTypes, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="argTypes" Type="System.Type[]" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="3f4a7-129">省略可能なサービス プロバイダー。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-129">An optional service provider.</span></span></param>
        <param name="objectType"><span data-ttu-id="3f4a7-130">作成するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-130">The type of object to create.</span></span> <span data-ttu-id="3f4a7-131">このパラメーターは、<see langword="null" /> にはできません。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-131">This parameter is never <see langword="null" />.</span></span></param>
        <param name="argTypes"><span data-ttu-id="3f4a7-132">オブジェクトのコンストラクターに渡されるパラメーター型を表す型の配列 (省略可能)。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-132">An optional array of types that represent the parameter types to be passed to the object's constructor.</span></span> <span data-ttu-id="3f4a7-133">この配列は、<see langword="null" /> にすることも、長さ 0 にすることもできます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-133">This array can be <see langword="null" /> or of zero length.</span></span></param>
        <param name="args"><span data-ttu-id="3f4a7-134">オブジェクトのコンストラクターに渡すパラメーターの値の省略可能な配列。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-134">An optional array of parameter values to pass to the object's constructor.</span></span></param>
        <summary><span data-ttu-id="3f4a7-135">別のデータ型の代わりに使用できるオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-135">Creates an object that can substitute for another data type.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-136">代替の <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-136">The substitute <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-137"><xref:System.IServiceProvider>で指定された、`provider`パラメーターによって渡される、<xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType>のメソッド、<xref:System.ComponentModel.TypeDescriptor>クラス。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-137">The <xref:System.IServiceProvider> specified by the `provider` parameter is passed in by the <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=nameWithType> method of the <xref:System.ComponentModel.TypeDescriptor> class.</span></span> <span data-ttu-id="3f4a7-138">場合`provider`ない`null`、サービス プロバイダーは、作成の呼び出しに関する追加のコンテキストを取得する型説明プロバイダーを使用できます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-138">If `provider` is not `null`, the service provider can be used by the type description provider to obtain additional context about the creation call.</span></span>  
  
 <span data-ttu-id="3f4a7-139"><xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>メソッドは`virtual`し、既定では、結果を返します、<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>メソッド場合`provider`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-139">The <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> method is `virtual` and, by default, returns the result of the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method if `provider` is `null`.</span></span> <span data-ttu-id="3f4a7-140">場合`provider`は`null`、このメソッドを呼び出しますが、<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>親プロバイダーのメソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-140">If `provider` is `null`, this method will invoke the <xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> method of the parent provider.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="3f4a7-141">代替インスタンスを提供するために、派生クラスがない場合、基本実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-141">If the derived class is not interested in providing a substitute instance, it should just call the base implementation.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="GetCache">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary GetCache (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionary GetCache(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCache (instance As Object) As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionary ^ GetCache(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetCache : obj -&gt; System.Collections.IDictionary&#xA;override this.GetCache : obj -&gt; System.Collections.IDictionary" Usage="typeDescriptionProvider.GetCache instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3f4a7-142">キャッシュの取得対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-142">The object for which to get the cache.</span></span></param>
        <summary><span data-ttu-id="3f4a7-143">キーと値のペアの <see cref="T:System.Collections.IDictionary" /> としてアクセスされる、オブジェクトごとのキャッシュを取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-143">Gets a per-object cache, accessed as an <see cref="T:System.Collections.IDictionary" /> of key/value pairs.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-144">提供されるオブジェクトがキャッシュをサポートしている場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-144">An <see cref="T:System.Collections.IDictionary" /> if the provided object supports caching; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-145">A<xref:System.ComponentModel.TypeDescriptor>メタデータのコレクションに複雑な操作を実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-145">A <xref:System.ComponentModel.TypeDescriptor> may need to perform complex operations on collections of metadata.</span></span> <span data-ttu-id="3f4a7-146">型は、ドメインのアンロードされないため、<xref:System.ComponentModel.TypeDescriptor>クラスの型に基づくこれらの操作の結果が自動的にキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-146">Because types are not unloaded for the life of a domain, the <xref:System.ComponentModel.TypeDescriptor> class will automatically cache the results of these operations based on type.</span></span> <span data-ttu-id="3f4a7-147">ただし、一部の操作は、ライブ オブジェクトのインスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-147">However, some operations use live object instances.</span></span> <span data-ttu-id="3f4a7-148">内でこれらの操作をキャッシュすることはできません、<xref:System.ComponentModel.TypeDescriptor>にキャッシュされないため、オブジェクトからガベージ コレクションの対象のクラスします。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-148">These operations cannot be cached within the <xref:System.ComponentModel.TypeDescriptor> class because caching them would prevent the object from being garbage collected.</span></span> <span data-ttu-id="3f4a7-149">代わりに、<xref:System.ComponentModel.TypeDescriptor>としてアクセスされる、オブジェクトごとのキャッシュのクラスを使用できます、<xref:System.Collections.IDictionary>のキー/値のペア オブジェクト上に存在します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-149">Instead, the <xref:System.ComponentModel.TypeDescriptor> class allows for a per-object cache, accessed as an <xref:System.Collections.IDictionary> of key/value pairs, to exist on an object.</span></span> <span data-ttu-id="3f4a7-150"><xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>メソッドは、このキャッシュのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-150">The <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> method returns an instance of this cache.</span></span> <span data-ttu-id="3f4a7-151"><xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>メソッドが返す`null`サポートされているキャッシュ オブジェクトが存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-151">The <xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A> method will return `null` if there is no supported cache for an object.</span></span>  
  
 <span data-ttu-id="3f4a7-152">既定の<xref:System.ComponentModel.TypeDescriptionProvider>で使用される<xref:System.ComponentModel.TypeDescriptor>して、配置のコンポーネントを実装するかどうかは、オブジェクトを調べて、<xref:System.ComponentModel.Design.IDictionaryService>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-152">The default <xref:System.ComponentModel.TypeDescriptionProvider> used by <xref:System.ComponentModel.TypeDescriptor> examines the object to see if it is a sited component that implements the <xref:System.ComponentModel.Design.IDictionaryService> interface.</span></span> <span data-ttu-id="3f4a7-153">オブジェクトの場合、オブジェクトのキャッシュを格納するディクショナリ サービスを使用します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-153">If the object is, it uses the dictionary service to store the object's cache.</span></span> <span data-ttu-id="3f4a7-154">それ以外の場合、オブジェクトを返します`null`します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-154">Otherwise, the object it returns `null`.</span></span> <span data-ttu-id="3f4a7-155">その他の型説明のプロバイダーは、ここで、独自の実装を提供できます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-155">Other type description providers may provide their own implementation here.</span></span> <span data-ttu-id="3f4a7-156">たとえば、依存関係オブジェクトには型のプロパティがアタッチできますだけ<xref:System.Collections.IDictionary>です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-156">For example, dependency objects can just attach a property of type <xref:System.Collections.IDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.ComponentModel.Design.IDictionaryService" />
      </Docs>
    </Member>
    <Member MemberName="GetExtendedTypeDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtendedTypeDescriptor (instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::ICustomTypeDescriptor ^ GetExtendedTypeDescriptor(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetExtendedTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor&#xA;override this.GetExtendedTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetExtendedTypeDescriptor instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3f4a7-157">拡張された型記述子の取得対象となるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-157">The object for which to get the extended type descriptor.</span></span></param>
        <summary><span data-ttu-id="3f4a7-158">指定されたオブジェクトの拡張されたカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-158">Gets an extended custom type descriptor for the given object.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-159">オブジェクトの拡張されたメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-159">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide extended metadata for the object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-160">拡張型記述子は、プランの他のオブジェクトが、このオブジェクトに追加のプロパティが、オブジェクトが実際に定義されているカスタム型記述子です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-160">An extended type descriptor is a custom type descriptor that offers properties that other objects have added to this object, but that are not actually defined on the object.</span></span> <span data-ttu-id="3f4a7-161">たとえば、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]コンポーネント モデル オブジェクトを実装する、<xref:System.ComponentModel.IExtenderProvider>インターフェイスは、同じ論理的なコンテナー内に存在する他のオブジェクトにプロパティをアタッチすることができます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-161">For example, in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] component model, objects that implement the <xref:System.ComponentModel.IExtenderProvider> interface can attach properties to other objects that reside in the same logical container.</span></span> <span data-ttu-id="3f4a7-162">オーバー ロードされた<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>メソッドはこれらの余分な拡張プロパティを提供する型記述子を返しません。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-162">The overloaded <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> methods do not return a type descriptor that provides these extra extended properties.</span></span> <span data-ttu-id="3f4a7-163"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>メソッドは、これらの拡張プロパティのセットを返します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-163">The <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> method returns the set of these extended properties.</span></span> <span data-ttu-id="3f4a7-164"><xref:System.ComponentModel.TypeDescriptor>これら 2 つのプロパティのコレクションの結果を自動的にマージされます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-164">The <xref:System.ComponentModel.TypeDescriptor> will automatically merge the results of these two property collections.</span></span> <span data-ttu-id="3f4a7-165">中に、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]コンポーネント モデルは、拡張プロパティのみがサポートされます。<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>型説明プロバイダーをサポートしている場合、拡張属性としてイベントを使用できます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-165">While the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] component model supports only extended properties, <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> can be used for extended attributes as well as events, if the type description provider supports it.</span></span>  
  
 <span data-ttu-id="3f4a7-166"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> `virtual`し、既定では、親プロバイダーが渡されなかった場合は、空の結果を返すカスタム型記述子を返します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-166"><xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> is `virtual` and, by default, returns a custom type descriptor that returns empty results if no parent provider was passed.</span></span> <span data-ttu-id="3f4a7-167">このメソッドが親プロバイダーを呼び出す親プロバイダーが渡された場合<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-167">If a parent provider was passed, this method will invoke the parent provider's <xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeDescriptor" />
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetExtenderProviders">
      <MemberSignature Language="C#" Value="protected internal virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.IExtenderProvider[] GetExtenderProviders(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetExtenderProviders (instance As Object) As IExtenderProvider()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::ComponentModel::IExtenderProvider ^&gt; ^ GetExtenderProviders(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetExtenderProviders : obj -&gt; System.ComponentModel.IExtenderProvider[]&#xA;override this.GetExtenderProviders : obj -&gt; System.ComponentModel.IExtenderProvider[]" Usage="typeDescriptionProvider.GetExtenderProviders instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IExtenderProvider[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3f4a7-168">拡張プロバイダーを取得する対象のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-168">The object to get extender providers for.</span></span></param>
        <summary><span data-ttu-id="3f4a7-169">指定したオブジェクトの拡張プロバイダーを取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-169">Gets the extender providers for the specified object.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-170"><paramref name="instance" /> の拡張プロバイダーの配列。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-170">An array of extender providers for <paramref name="instance" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3f4a7-171"><paramref name="instance" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-171"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetFullComponentName">
      <MemberSignature Language="C#" Value="public virtual string GetFullComponentName (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFullComponentName(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFullComponentName (component As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFullComponentName(System::Object ^ component);" />
      <MemberSignature Language="F#" Value="abstract member GetFullComponentName : obj -&gt; string&#xA;override this.GetFullComponentName : obj -&gt; string" Usage="typeDescriptionProvider.GetFullComponentName component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="3f4a7-172">指定したコンポーネント。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-172">The specified component.</span></span></param>
        <summary><span data-ttu-id="3f4a7-173">指定したコンポーネントの名前を取得します。コンポーネントに名前がない場合は <see langword="null" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-173">Gets the name of the specified component, or <see langword="null" /> if the component has no name.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-174">指定したコンポーネントの名前。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-174">The name of the specified component.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3f4a7-175"><paramref name="component" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-175"><paramref name="component" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetReflectionType">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f4a7-176">オブジェクトに対して通常のリフレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-176">Performs normal reflection against an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public Type GetReflectionType (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetReflectionType(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionType (instance As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReflectionType(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="member this.GetReflectionType : obj -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3f4a7-177">型のインスタンス (<see langword="null" /> にはできません)。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-177">An instance of the type (should not be <see langword="null" />).</span></span></param>
        <summary><span data-ttu-id="3f4a7-178">指定されたオブジェクトに対して通常のリフレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-178">Performs normal reflection against the given object.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-179">この <paramref name="instance" /> のリフレクションの型です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-179">The type of reflection for this <paramref name="instance" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-180"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>メソッドは、下位のバージョンの<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-180">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="3f4a7-181">カスタム型記述子が見つからない、オブジェクトの場合<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>オブジェクトに対して通常のリフレクションを実行すると呼びます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-181">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 <span data-ttu-id="3f4a7-182">型の代わりにインスタンスを使用する型記述子のメンバーを呼び出した場合は、このメソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-182">Use this method overload if you have called a type descriptor member that uses an instance instead of a type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3f4a7-183"><paramref name="instance" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-183"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public Type GetReflectionType (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetReflectionType(class System.Type objectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReflectionType (objectType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetReflectionType(Type ^ objectType);" />
      <MemberSignature Language="F#" Value="member this.GetReflectionType : Type -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType objectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="3f4a7-184"><see cref="T:System.Reflection.IReflect" /> の取得対象となるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-184">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect" />.</span></span></param>
        <summary><span data-ttu-id="3f4a7-185">型に対して通常のリフレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-185">Performs normal reflection against a type.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-186">この <paramref name="objectType" /> のリフレクションの型です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-186">The type of reflection for this <paramref name="objectType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-187"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>メソッドは、下位のバージョンの<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-187">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="3f4a7-188">カスタム型記述子が見つからない、オブジェクトの場合<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>オブジェクトに対して通常のリフレクションを実行すると呼びます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-188">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 <span data-ttu-id="3f4a7-189">インスタンスではなく型を使用する型記述子のメンバーを呼び出した場合は、このメソッドのオーバー ロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-189">Use this method overload if you have called a type descriptor member that uses a type instead of an instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3f4a7-190"><paramref name="objectType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-190"><paramref name="objectType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetReflectionType">
      <MemberSignature Language="C#" Value="public virtual Type GetReflectionType (Type objectType, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetReflectionType(class System.Type objectType, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReflectionType (objectType As Type, instance As Object) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetReflectionType(Type ^ objectType, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetReflectionType : Type * obj -&gt; Type&#xA;override this.GetReflectionType : Type * obj -&gt; Type" Usage="typeDescriptionProvider.GetReflectionType (objectType, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="3f4a7-191"><see cref="T:System.Reflection.IReflect" /> の取得対象となるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-191">The type of object for which to retrieve the <see cref="T:System.Reflection.IReflect" />.</span></span></param>
        <param name="instance"><span data-ttu-id="3f4a7-192">型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-192">An instance of the type.</span></span> <span data-ttu-id="3f4a7-193">
  <see langword="null" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-193">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="3f4a7-194">指定された型の指定されたオブジェクトに対して通常のリフレクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-194">Performs normal reflection against the given object with the given type.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-195">この <paramref name="objectType" /> のリフレクションの型です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-195">The type of reflection for this <paramref name="objectType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-196"><xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>メソッドは、下位のバージョンの<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-196">The <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method is a lower-level version of the <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span> <span data-ttu-id="3f4a7-197">カスタム型記述子が見つからない、オブジェクトの場合<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>オブジェクトに対して通常のリフレクションを実行すると呼びます。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-197">If no custom type descriptor can be located for an object, <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> is called to perform normal reflection against the object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="3f4a7-198">このメソッドは、プロトタイプは<see langword="virtual" />、および既定値を返します。<paramref name="objectType" />親プロバイダーが渡されなかった場合。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-198">This method is prototyped as <see langword="virtual" />, and by default returns <paramref name="objectType" /> if no parent provider was passed.</span></span> <span data-ttu-id="3f4a7-199">このメソッドが親プロバイダーを呼び出す親プロバイダーが渡された場合<see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-199">If a parent provider was passed, this method will invoke the parent provider's <see cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType" /> method.</span></span></para></block>
        <altmember cref="Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public virtual Type GetRuntimeType (Type reflectionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetRuntimeType(class System.Type reflectionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRuntimeType (reflectionType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetRuntimeType(Type ^ reflectionType);" />
      <MemberSignature Language="F#" Value="abstract member GetRuntimeType : Type -&gt; Type&#xA;override this.GetRuntimeType : Type -&gt; Type" Usage="typeDescriptionProvider.GetRuntimeType reflectionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reflectionType" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reflectionType"><span data-ttu-id="3f4a7-200">等価のランタイム型に変換する型。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-200">The type to convert to its runtime equivalent.</span></span></param>
        <summary><span data-ttu-id="3f4a7-201">リフレクション型をランタイム型に変換します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-201">Converts a reflection type into a runtime type.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-202"><paramref name="reflectionType" /> に等価のランタイム型を表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-202">A <see cref="T:System.Type" /> that represents the runtime equivalent of <paramref name="reflectionType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-203"><xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A>メソッド反転、<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>ランタイム型にリフレクション型に変換します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-203">The <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> method reverses the <xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> method to convert a reflection type back into a runtime type.</span></span> <span data-ttu-id="3f4a7-204">使用して、<xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A>を使用する方法は勧め、<xref:System.Type.UnderlyingSystemType%2A>プロパティで、ランタイム型を取得する以前のバージョンで使用されました。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-204">Using the <xref:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType%2A> method is preferred over using the <xref:System.Type.UnderlyingSystemType%2A> property, which was used in earlier versions to return the runtime type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3f4a7-205"><paramref name="reflectionType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-205"><paramref name="reflectionType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeDescriptor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3f4a7-206">指定された型またはオブジェクトのカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-206">Gets a custom type descriptor for the given type or object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDescriptor (instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="member this.GetTypeDescriptor : obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="3f4a7-207">型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-207">An instance of the type.</span></span> <span data-ttu-id="3f4a7-208"><see cref="T:System.ComponentModel.TypeDescriptor" /> にインスタンスが渡されなかった場合、<see langword="null" /> でもかまいません。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-208">Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></param>
        <summary><span data-ttu-id="3f4a7-209">指定されたオブジェクトのカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-209">Gets a custom type descriptor for the given object.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-210">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-210">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3f4a7-211"><paramref name="instance" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-211"><paramref name="instance" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(class System.Type objectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeDescriptor (objectType As Type) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(Type ^ objectType);" />
      <MemberSignature Language="F#" Value="member this.GetTypeDescriptor : Type -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor objectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="3f4a7-212">型記述子の取得対象となるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-212">The type of object for which to retrieve the type descriptor.</span></span></param>
        <summary><span data-ttu-id="3f4a7-213">指定された型のカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-213">Gets a custom type descriptor for the given type.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-214">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-214">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(class System.Type objectType, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeDescriptor (objectType As Type, instance As Object) As ICustomTypeDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::ICustomTypeDescriptor ^ GetTypeDescriptor(Type ^ objectType, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeDescriptor : Type * obj -&gt; System.ComponentModel.ICustomTypeDescriptor&#xA;override this.GetTypeDescriptor : Type * obj -&gt; System.ComponentModel.ICustomTypeDescriptor" Usage="typeDescriptionProvider.GetTypeDescriptor (objectType, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ICustomTypeDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objectType"><span data-ttu-id="3f4a7-215">型記述子の取得対象となるオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-215">The type of object for which to retrieve the type descriptor.</span></span></param>
        <param name="instance"><span data-ttu-id="3f4a7-216">型のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-216">An instance of the type.</span></span> <span data-ttu-id="3f4a7-217"><see cref="T:System.ComponentModel.TypeDescriptor" /> にインスタンスが渡されなかった場合、<see langword="null" /> でもかまいません。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-217">Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</span></span></param>
        <summary><span data-ttu-id="3f4a7-218">指定された型およびオブジェクトのカスタムの型記述子を取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-218">Gets a custom type descriptor for the given type and object.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-219">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-219">An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3f4a7-220">このメソッドは、プロトタイプは`virtual`し、既定では、親プロバイダーが渡されなかった場合に空の記述子を返します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-220">This method is prototyped as `virtual` and, by default, returns an empty descriptor if no parent provider was passed.</span></span> <span data-ttu-id="3f4a7-221">このメソッドが親プロバイダーを呼び出す親プロバイダーが渡された場合<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-221">If a parent provider was passed, this method will invoke the parent provider's <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="3f4a7-222"><see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" />メソッドは、オブジェクトのカスタム型記述子を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-222">The <see cref="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)" /> method should return a custom type descriptor for the object.</span></span> <span data-ttu-id="3f4a7-223">返すかかどうか、メソッドは、オブジェクトの型情報を提供しない、<see langword="null" />します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-223">If the method does not provide type information for the object, it should return <see langword="null" />.</span></span></para></block>
        <altmember cref="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsSupportedType">
      <MemberSignature Language="C#" Value="public virtual bool IsSupportedType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupportedType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSupportedType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedType : Type -&gt; bool&#xA;override this.IsSupportedType : Type -&gt; bool" Usage="typeDescriptionProvider.IsSupportedType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="3f4a7-224">互換性をテストする型。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-224">The type to test for compatibility.</span></span></param>
        <summary><span data-ttu-id="3f4a7-225">指定した型が型説明および型説明のプロバイダーのチェーンと互換性があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-225">Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.</span></span></summary>
        <returns><span data-ttu-id="3f4a7-226"><paramref name="type" /> が型説明および型説明のプロバイダーのチェーンと互換性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-226"><see langword="true" /> if <paramref name="type" /> is compatible with the type description and its chain of type description providers; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3f4a7-227"><paramref name="type" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="3f4a7-227"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>