<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BackgroundWorker.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e3100d5df8f298b733355b4ac8b472c23b7f225f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3100d5df8f298b733355b4ac8b472c23b7f225f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Executes an operation on a separate thread.</source>
          <target state="translated">別個のスレッドに対する操作を実行します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class allows you to run an operation on a separate, dedicated thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスでは、別々 の専用スレッドで操作を実行することができます。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</source>
          <target state="translated">ダウンロードやデータベースのトランザクションのように時間のかかる操作には、ユーザー インターフェイス (UI) を実行中の応答を停止したかのように見える可能性があります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>When you want a responsive UI and you are faced with long delays associated with such operations, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class provides a convenient solution.</source>
          <target state="translated">UI 応答性と、このような操作に関連付けられている長い遅延に直面した場合に、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスには、便利なソリューションが用意されています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To execute a time-consuming operation in the background, create a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> and listen for events that report the progress of your operation and signal when your operation is finished.</source>
          <target state="translated">バック グラウンドで、時間のかかる操作を実行するには、作成、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>の操作が完了すると、操作と信号の進行状況を報告するイベントのリッスンとします。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>You can create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> programmatically or you can drag it onto your form from the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Toolbox<ept id="p2">**</ept>.</source>
          <target state="translated">作成することができます、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>プログラムからフォームにドラッグすることができますか、<bpt id="p1">**</bpt>コンポーネント<ept id="p1">**</ept>のタブ、<bpt id="p2">**</bpt>ツールボックス<ept id="p2">**</ept>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>If you create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</source>
          <target state="translated">作成する場合、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>コンポーネント トレイに表示される、Windows フォーム デザイナーで、およびそのプロパティがプロパティ ウィンドウに表示されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To set up for a background operation, add an event handler for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event.</source>
          <target state="translated">バック グラウンド操作の設定のイベント ハンドラーを追加、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Call your time-consuming operation in this event handler.</source>
          <target state="translated">このイベント ハンドラーで、時間のかかる操作を呼び出します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To start the operation, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">操作を開始するには、呼び出す<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To receive notifications of progress updates, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">更新の進行状況の通知を受信するには、処理、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To receive a notification when the operation is completed, handle the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event.</source>
          <target state="translated">操作が完了したときに、通知を受信、処理、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">すべてのユーザー インターフェイス オブジェクトを操作しないように注意する必要があります、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events.</source>
          <target state="translated">代わりに、ユーザー インターフェイスを介しての通信、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>と<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events are not marshaled across <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> boundaries.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> イベント間でマーシャ リングされない<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>境界です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Do not use a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to perform multithreaded operations in more than one <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">使用しないで、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>コンポーネントを 1 つ以上でマルチ スレッド操作を実行<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>If your background operation requires a parameter, call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> with your parameter.</source>
          <target state="translated">バック グラウンド操作では、パラメーターが必要とする場合は、呼び出す<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>パラメーターを使用します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Inside the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can extract the parameter from the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">内部、 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> 、イベント ハンドラーからパラメーターを抽出することができます、<ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>For more information about <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, see <bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> の詳細については、「<bpt id="p1">[</bpt>方法: バックグラウンドで操作を実行する<ept id="p1">](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>」を参照してください。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following code example demonstrates the basics of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for executing a time-consuming operation asynchronously.</source>
          <target state="translated">次のコード例に示しますの基本、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>時間のかかる操作を非同期的に実行するためのクラスです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following illustration shows an example of the output.</source>
          <target state="translated">次の図は、出力の例を示します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><bpt id="p1">![</bpt>BackgroundWorker simple example<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-simple.png "</bpt>BackgroundWorker simple example<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>BackgroundWorker の簡単な例<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-simple.png "</bpt>BackgroundWorker の簡単な例<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>To try this code, create a Windows Forms application.</source>
          <target state="translated">このコードを実行するには、Windows フォーム アプリケーションを作成します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Add a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control named <ph id="ph2">`resultLabel`</ph> and add two <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls named <ph id="ph4">`startAsyncButton`</ph> and <ph id="ph5">`cancelAsyncButton`</ph>.</source>
          <target state="translated">追加、<ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph>という名前のコントロール<ph id="ph2">`resultLabel`</ph>2 つの追加と<ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph>という名前のコントロール<ph id="ph4">`startAsyncButton`</ph>と<ph id="ph5">`cancelAsyncButton`</ph>です。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Create <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handlers for both buttons.</source>
          <target state="translated">作成<ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph>両方のボタンのイベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>From the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the Toolbox, add a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component named <ph id="ph2">`backgroundWorker1`</ph>.</source>
          <target state="translated"><bpt id="p1">**</bpt>コンポーネント<ept id="p1">**</ept> タブ、ツールボックスの追加、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>という名前のコンポーネント<ph id="ph2">`backgroundWorker1`</ph>です。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Create <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>, and <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handlers for the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">作成<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>、 <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>、および<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>のイベント ハンドラー、<ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>In the code for the form, replace the existing code with the following code.</source>
          <target state="translated">フォームのコードでは、次のコードで、既存のコードを置き換えます。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class for executing a time-consuming operation asynchronously.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>時間のかかる操作を非同期的に実行するためのクラスです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The following illustration shows an example of the output.</source>
          <target state="translated">次の図は、出力の例を示します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source><bpt id="p1">![</bpt>BackgroundWorker Fibonacci example<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-fibonacci.png "</bpt>BackgroundWorker Fibonacci example<ept id="p2">")</ept></source>
          <target state="translated"><bpt id="p1">![</bpt>BackgroundWorker フィボナッチの例<ept id="p1">]</ept><bpt id="p2">(~/add/media/backgroundworker-fibonacci.png "</bpt>BackgroundWorker フィボナッチの例<ept id="p2">")</ept></target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.BackgroundWorker">
          <source>The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</source>
          <target state="translated">操作は、選択のフィボナッチ数を計算、計算の進行に伴う、進行状況の更新を報告し、キャンセルする保留中の計算を許可します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.#ctor">
          <source>This constructor initializes a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">このコンス トラクター、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>Requests cancellation of a pending background operation.</source>
          <target state="translated">保留中のバックグラウンド操作のキャンセルを要求します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> submits a request to terminate the pending background operation and sets the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> 保留中のバック グラウンド操作を終了する要求を送信し、設定、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>プロパティを<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>When you call <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>, your worker method has an opportunity to stop its execution and exit.</source>
          <target state="translated">呼び出すと<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>、ワーカー メソッドにその実行と終了を停止する機会がします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>The worker code should periodically check the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to see if it has been set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">ワーカーのコードを定期的にチェックする必要があります、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>プロパティ設定されていることを確認して<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">注意してくださいをコードに、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>キャンセル要求が作成されると、ポーリング ループを見逃す可能性があります、イベント ハンドラーがその作業を完了可能性があります<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>に設定されている<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">ここでは、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>フラグ<ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>で、<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>イベント ハンドラーに設定されていない<ph id="ph4">`true`</ph>キャンセル要求が行われた場合でも、します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">このような状況が呼び出された、<bpt id="p1">*</bpt>競合状態<ept id="p1">*</ept>マルチ スレッド プログラミングの一般的な問題になるとします。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">マルチ スレッド デザインの詳細については、問題を参照してください<bpt id="p1">[</bpt>マネージ スレッド処理の実施<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to cancel an asynchronous ("background") operation.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>非同期 (""バック グラウンド) 操作をキャンセルするメソッド。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.CancelAsync">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /&gt;</ph> は <ph id="ph2">&lt;see langword="false" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>Gets a value indicating whether the application has requested cancellation of a background operation.</source>
          <target state="translated">アプリケーションがバックグラウンド操作のキャンセルを要求したかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the application has requested cancellation of a background operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">アプリケーションがバックグラウンド操作のキャンセルを要求した場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> is <ph id="ph2">`true`</ph>, then the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method has been called on the <ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>は<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>でメソッドが呼び出されて、<ph id="ph4">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>This property is meant for use by the worker thread, which should periodically check <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> and abort the background operation when it is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">このプロパティは定期的に確認する必要があります、ワーカー スレッドで使用するもの<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>に設定されているときに、バック グラウンド操作を中止し、<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property to query a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> about its cancellation state.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>プロパティ クエリを<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>キャンセル状態に関するします。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.CancellationPending">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /&gt;</ph> が呼び出されたときに発生します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method.</source>
          <target state="translated">このイベントを呼び出すとき、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This is where you start the operation that performs the potentially time-consuming work.</source>
          <target state="translated">これは、可能性のある時間のかかる操作を実行する操作を開始する場所です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler should periodically check the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> property value and abort the operation if it is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">コードに、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベント ハンドラーを定期的に確認する必要があります、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>とプロパティ値の場合は、操作の中止<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>When this occurs, you can set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> to <ph id="ph3">`true`</ph>, and the <ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will be set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated">これが発生したときに設定できます、<ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph>フラグ<ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph>に<ph id="ph3">`true`</ph>、および<ph id="ph4">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>のフラグ<ph id="ph5">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>で、<ph id="ph6">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>イベント ハンドラーに設定されます<ph id="ph7">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">注意してくださいをコードに、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>キャンセル要求が作成されると、ポーリング ループを見逃す可能性があります、イベント ハンドラーがその作業を完了可能性があります<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>に設定されている<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">ここでは、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>フラグ<ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>で、<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>イベント ハンドラーに設定されていない<ph id="ph4">`true`</ph>キャンセル要求が行われた場合でも、します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">このような状況が呼び出された、<bpt id="p1">*</bpt>競合状態<ept id="p1">*</ept>マルチ スレッド プログラミングの一般的な問題になるとします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">マルチ スレッド デザインの詳細については、問題を参照してください<bpt id="p1">[</bpt>マネージ スレッド処理の実施<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If your operation produces a result, you can assign the result to the <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">場合は、演算結果が、結果を割り当てることができます、<ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This will be available to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler in the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">これが利用できる、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>内のイベント ハンドラー、<ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If the operation raises an exception that your code does not handle, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> catches the exception and passes it into the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler, where it is exposed as the <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">操作コードを処理しません、例外が発生した場合、 <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> 、例外をキャッチし、これに、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>として公開される場所、イベント ハンドラー、<ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>プロパティの<ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If you are running under the Visual Studio debugger, the debugger will break at the point in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler where the unhandled exception was raised.</source>
          <target state="translated">デバッガーが段階で中断されている Visual Studio デバッガーの下で実行している場合、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>未処理の例外が発生したイベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>If you have more than one <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, you should not reference any of them directly, as this would couple your <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler to a specific instance of <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated">複数ある場合<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>、参照しないでくださいそれらを直接結合はこれに応じて、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>の特定のインスタンスをイベント ハンドラー<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Instead, you should access your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> by casting the <ph id="ph2">`sender`</ph> parameter in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">代わりに、アクセスする必要があります、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>でキャスト、<ph id="ph2">`sender`</ph>内のパラメーター、<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>You must be careful not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
          <target state="translated">すべてのユーザー インターフェイス オブジェクトを操作しないように注意する必要があります、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベント ハンドラー。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events.</source>
          <target state="translated">代わりに、ユーザー インターフェイスを介しての通信、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">イベント処理の詳細については、次を参照してください。 <bpt id="p1">[</bpt>NIB: イベントの利用<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>です。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event to start an asynchronous operation.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>非同期操作を開始するイベントです。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.DoWork">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> is running an asynchronous operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> が非同期操作を実行中かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> is running an asynchronous operation; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> が非同期操作を実行中の場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> starts an asynchronous operation when you call <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>を呼び出すときに非同期操作を開始<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph> property to wait for completion of a <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> operation.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.IsBusy%2A&gt;</ph>の完了を待つプロパティ、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>操作します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.IsBusy">
          <source>This code example is part of a larger example described in <bpt id="p1">[</bpt>How to: Download a File in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</source>
          <target state="translated">このコード例で説明されている長い例の一部である<bpt id="p1">[</bpt>する方法: ファイルをダウンロードするバック グラウンドで<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">派生クラスでイベントを処理する場合は、この手法をお勧めします。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph> method to report the progress of an asynchronous operation.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A&gt;</ph>に非同期操作の進行状況を報告するメソッド。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">派生クラスで <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /&gt;</ph> メソッドを呼び出してください。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> that contains the event data.</source>
          <target state="translated">イベント データを格納している <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>Raising an event invokes the event handler through a delegate.</source>
          <target state="translated">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>For more information, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>処理とイベントの発生<ept id="p1">](~/docs/standard/events/index.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A&gt;</ph> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>This is the preferred technique for handling the event in a derived class.</source>
          <target state="translated">派生クラスでイベントを処理する場合は、この手法をお勧めします。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> in a derived class, be sure to call the base class's <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> method so that registered delegates receive the event.</source>
          <target state="translated">派生クラスで <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <ph id="ph2">&lt;see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /&gt;</ph> メソッドを呼び出してください。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>Occurs when <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /&gt;</ph> が呼び出されたときに発生します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>This event is raised when you call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method.</source>
          <target state="translated">このイベントを呼び出すとき、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>For more information about handling events, see <bpt id="p1">[</bpt>NIB: Consuming Events<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>.</source>
          <target state="translated">イベント処理の詳細については、次を参照してください。 <bpt id="p1">[</bpt>NIB: イベントの利用<ept id="p1">](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)</ept>です。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>をユーザーに非同期操作の進行状況を報告するイベントです。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
          <target state="translated">完了しているバックグラウンド操作の比率 (0 ～ 100%)。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">呼び出すことができます、進行状況を報告するバック グラウンド操作を必要がある場合、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>させる方法、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must be <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph>プロパティの値である必要があります<ph id="ph2">`true`</ph>、または<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>がスローされます、<ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
          <target state="translated">合計タスクの完了の割合としてバック グラウンド操作の進行状況を測定するための意味のある方法を実装することの責任です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The call to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method is asynchronous and returns immediately.</source>
          <target state="translated">呼び出し、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>メソッドは非同期でありが直ちに返されます。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event handler executes on the thread that created the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>イベント ハンドラーを作成したスレッドの実行、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>にユーザーを非同期操作の進行状況を報告するメソッド。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="false" /&gt;</ph> に設定されている。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The percentage, from 0 to 100, of the background operation that is complete.</source>
          <target state="translated">完了しているバックグラウンド操作の比率 (0 ～ 100%)。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The state object passed to <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph> に渡される状態オブジェクト。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>Raises the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /&gt;</ph> イベントを発生させます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>If you need the background operation to report on its progress, you can call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">呼び出すことができます、進行状況を報告するバック グラウンド操作を必要がある場合、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>させる方法、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property value must <ph id="ph2">`true`</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> will throw an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph>プロパティの値にする必要があります<ph id="ph2">`true`</ph>、または<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>がスローされます、<ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</source>
          <target state="translated">合計タスクの完了の割合としてバック グラウンド操作の進行状況を測定するための意味のある方法を実装することの責任です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to report the progress of an asynchronous operation to the user.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>にユーザーを非同期操作の進行状況を報告するメソッド。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripProgressBar&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.Windows.Forms.ToolStripProgressBar&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="false" /&gt;</ph> に設定されている。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.BackgroundWorker">
          <source>Starts execution of a background operation.</source>
          <target state="translated">バックグラウンド操作の実行を開始します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>Starts execution of a background operation.</source>
          <target state="translated">バックグラウンド操作の実行を開始します。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>メソッドが非同期的に実行された操作を開始する要求を送信します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
          <target state="translated">要求が処理されるときに、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベントを発生すると、さらに、バック グラウンド操作の実行を開始します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">バック グラウンド処理が既に実行されている場合は、呼び出す<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>再度を発生させる、<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method to start an asynchronous operation.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>メソッドを非同期操作を開始します。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source>It is part of a larger example described in <bpt id="p1">[</bpt>How to: Download a File in the Background<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>.</source>
          <target state="translated">説明されている長い例の一部である<bpt id="p1">[</bpt>する方法: ファイルをダウンロードするバック グラウンドで<ept id="p1">](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> は <ph id="ph2">&lt;see langword="true" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>A parameter for use by the background operation to be executed in the <ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> event handler.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /&gt;</ph> イベント ハンドラーで実行されるバックグラウンド操作で使用するパラメーター。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>Starts execution of a background operation.</source>
          <target state="translated">バックグラウンド操作の実行を開始します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method submits a request to start the operation running asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>メソッドが非同期的に実行された操作を開始する要求を送信します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>When the request is serviced, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event is raised, which in turn starts execution of your background operation.</source>
          <target state="translated">要求が処理されるときに、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベントを発生すると、さらに、バック グラウンド操作の実行を開始します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>If your operation requires a parameter, you can provide it as the <ph id="ph1">`argument`</ph> parameter to <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>.</source>
          <target state="translated">操作は、パラメーターを必要とする場合、としてを指定できます、<ph id="ph1">`argument`</ph>パラメーターを<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>If the background operation is already running, calling <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> again will raise an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">バック グラウンド処理が既に実行されている場合は、呼び出す<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>再度を発生させる、<ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method to start an asynchronous operation.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph>メソッドを非同期操作を開始します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
          <source><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /&gt;</ph> は <ph id="ph2">&lt;see langword="true" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Occurs when the background operation has completed, has been canceled, or has raised an exception.</source>
          <target state="translated">バックグラウンド操作の完了時、キャンセル時、またはバックグラウンド操作によって例外が発生したときに発生します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This event is raised when the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler returns.</source>
          <target state="translated">このイベントが発生したときに、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベント ハンドラーを返します。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If the operation completes successfully and its result is assigned in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, you can access the result through the <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">操作が正常に完了してでその結果が割り当てられているかどうか、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>を介して結果にアクセスする、イベント ハンドラー、<ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indicates that an exception was thrown by the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>プロパティ<ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>操作によって例外がスローされたことを示します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> indicates whether a cancellation request was processed by the background operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>プロパティ<ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>バック グラウンド操作で、キャンセル要求を処理するかどうかを示します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler detects a cancellation request by checking the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> flag and setting the <ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> flag of <ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph> to <ph id="ph5">`true`</ph>, the <ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> also will be set to <ph id="ph8">`true`</ph>.</source>
          <target state="translated">場合で自分のコード、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>イベント ハンドラーをチェックして、キャンセル要求を検出した、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>フラグと設定、<ph id="ph3">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph>のフラグ<ph id="ph4">&lt;xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType&gt;</ph>に<ph id="ph5">`true`</ph>、<ph id="ph6">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>のフラグ<ph id="ph7">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>にも設定されます<ph id="ph8">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Be aware that your code in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph> being set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">注意してくださいをコードに、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph>キャンセル要求が作成されると、ポーリング ループを見逃す可能性があります、イベント ハンドラーがその作業を完了可能性があります<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A&gt;</ph>に設定されている<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>In this case, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> flag of <ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph> in your <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler will not be set to <ph id="ph4">`true`</ph>, even though a cancellation request was made.</source>
          <target state="translated">ここでは、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>フラグ<ph id="ph2">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType&gt;</ph>で、<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>イベント ハンドラーに設定されていない<ph id="ph4">`true`</ph>キャンセル要求が行われた場合でも、します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This situation is called a <bpt id="p1">*</bpt>race condition<ept id="p1">*</ept> and is a common concern in multithreaded programming.</source>
          <target state="translated">このような状況が呼び出された、<bpt id="p1">*</bpt>競合状態<ept id="p1">*</ept>マルチ スレッド プログラミングの一般的な問題になるとします。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>For more information about multithreading design issues, see <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>.</source>
          <target state="translated">マルチ スレッド デザインの詳細については、問題を参照してください<bpt id="p1">[</bpt>マネージ スレッド処理の実施<ept id="p1">](~/docs/standard/threading/managed-threading-best-practices.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>Your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler should always check the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType&gt;</ph> properties before accessing the <ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>イベント ハンドラーが常に確認する必要があります、<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType&gt;</ph>と<ph id="ph3">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType&gt;</ph>プロパティにアクセスする前に、<ph id="ph4">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>If an exception was raised or if the operation was canceled, accessing the <ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph> property raises an exception.</source>
          <target state="translated">例外が発生した場合、または操作が取り消された場合へのアクセス、<ph id="ph1">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType&gt;</ph>プロパティが例外を発生させます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event to handle the result of an asynchronous operation.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph>非同期操作の結果を処理するイベントです。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> can report progress updates.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> が進行状況の更新を報告できるかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports progress updates; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> が進捗状況の更新をサポートしている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support progress updates.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>する場合は、<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>進行状況の更新をサポートするためにします。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
          <source>When this property is <ph id="ph1">`true`</ph>, user code can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph> method to raise the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
          <target state="translated">このプロパティが<ph id="ph1">`true`</ph>、ユーザー コードを呼び出すことができます、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A&gt;</ph>させる方法、<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports asynchronous cancellation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> が非同期のキャンセルをサポートしているかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> supports cancellation; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.ComponentModel.BackgroundWorker" /&gt;</ph> がキャンセルをサポートしている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> property to <ph id="ph2">`true`</ph> if you want the <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> to support cancellation.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph>プロパティを<ph id="ph2">`true`</ph>する場合は、<ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>取り消しをサポートします。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
          <source>When this property is <ph id="ph1">`true`</ph>, you can call the <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method to interrupt a background operation.</source>
          <target state="translated">このプロパティが<ph id="ph1">`true`</ph>、呼び出すことができます、<ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph>バック グラウンド操作を中断するメソッド。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>