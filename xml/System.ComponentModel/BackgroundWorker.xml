<Type Name="BackgroundWorker" FullName="System.ComponentModel.BackgroundWorker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0e854a81458d03e9e75ec844aa2a582a104cdffe" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37694957" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BackgroundWorker : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackgroundWorker extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.BackgroundWorker" />
  <TypeSignature Language="VB.NET" Value="Public Class BackgroundWorker&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class BackgroundWorker : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type BackgroundWorker = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("DoWork")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1861c-101">別個のスレッドに対する操作を実行します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1861c-101">Executes an operation on a separate thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-102"><xref:System.ComponentModel.BackgroundWorker>クラスでは、個別の専用スレッドで操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="1861c-102">The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread.</span></span> <span data-ttu-id="1861c-103">ダウンロードやデータベースのトランザクションのような時間のかかる操作には、ユーザー インターフェイス (UI) を実行中の応答を停止したように見える可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1861c-103">Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</span></span> <span data-ttu-id="1861c-104">レスポンシブ UI をして、このような操作に関連付けられている、長時間の遅延に直面したときに、<xref:System.ComponentModel.BackgroundWorker>クラスには、便利なソリューションが用意されています。</span><span class="sxs-lookup"><span data-stu-id="1861c-104">When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.</span></span>  
  
 <span data-ttu-id="1861c-105">バック グラウンドで時間のかかる操作を実行するには、作成、<xref:System.ComponentModel.BackgroundWorker>し、操作が終了したときに、操作および信号の進行状況を報告するイベントをリッスンします。</span><span class="sxs-lookup"><span data-stu-id="1861c-105">To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished.</span></span> <span data-ttu-id="1861c-106">作成することができます、<xref:System.ComponentModel.BackgroundWorker>プログラムからフォームにドラッグすることができますか、**コンポーネント**のタブ、**ツールボックス**。</span><span class="sxs-lookup"><span data-stu-id="1861c-106">You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**.</span></span> <span data-ttu-id="1861c-107">作成する場合、 <xref:System.ComponentModel.BackgroundWorker> Windows フォーム デザイナーで、コンポーネント トレイに表示され、[プロパティ] ウィンドウでそのプロパティが表示されます。</span><span class="sxs-lookup"><span data-stu-id="1861c-107">If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</span></span>  
  
 <span data-ttu-id="1861c-108">イベント ハンドラーを追加のバック グラウンド操作を設定するには<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント。</span><span class="sxs-lookup"><span data-stu-id="1861c-108">To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="1861c-109">このイベント ハンドラーで、時間のかかる操作を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="1861c-109">Call your time-consuming operation in this event handler.</span></span> <span data-ttu-id="1861c-110">操作を開始するには、呼び出す<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-110">To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span> <span data-ttu-id="1861c-111">進行状況の更新の通知を受信するには、処理、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="1861c-111">To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="1861c-112">操作が完了したときに通知を受信、処理、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="1861c-112">To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1861c-113">すべてのユーザー インターフェイス オブジェクトを操作しないように注意する必要があります、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="1861c-113">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="1861c-114">代わりに、を通じてユーザー インターフェイスとの通信、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged>と<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>イベント。</span><span class="sxs-lookup"><span data-stu-id="1861c-114">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.</span></span>  
>   
>  <span data-ttu-id="1861c-115"><xref:System.ComponentModel.BackgroundWorker> イベント間でマーシャ リングされない<xref:System.AppDomain>境界。</span><span class="sxs-lookup"><span data-stu-id="1861c-115"><xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries.</span></span> <span data-ttu-id="1861c-116">使用しないでください、<xref:System.ComponentModel.BackgroundWorker>コンポーネントを 1 つ以上のマルチ スレッド操作の実行<xref:System.AppDomain>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-116">Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="1861c-117">バック グラウンド操作では、パラメーターが必要とする場合に呼び出す<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>パラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="1861c-117">If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter.</span></span> <span data-ttu-id="1861c-118">内で、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーからパラメーターを抽出することができます、<xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1861c-118">Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="1861c-119"><xref:System.ComponentModel.BackgroundWorker> の詳細については、「[方法: バックグラウンドで操作を実行する](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1861c-119">For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-120">次のコード例は、の基本を示します、<xref:System.ComponentModel.BackgroundWorker>時間のかかる操作を非同期的に実行するためのクラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-120">The following code example demonstrates the basics of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="1861c-121">次の図は、出力の例を示します。</span><span class="sxs-lookup"><span data-stu-id="1861c-121">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="1861c-122">![BackgroundWorker の簡単な例](~/add/media/backgroundworker-simple.png "BackgroundWorker の簡単な例")</span><span class="sxs-lookup"><span data-stu-id="1861c-122">![BackgroundWorker simple example](~/add/media/backgroundworker-simple.png "BackgroundWorker simple example")</span></span>  
  
 <span data-ttu-id="1861c-123">このコードには、Windows フォーム アプリケーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="1861c-123">To try this code, create a Windows Forms application.</span></span> <span data-ttu-id="1861c-124">追加、<xref:System.Windows.Forms.Label>という名前のコントロール`resultLabel`2 つの追加と<xref:System.Windows.Forms.Button>という名前のコントロール`startAsyncButton`と`cancelAsyncButton`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-124">Add a <xref:System.Windows.Forms.Label> control named `resultLabel` and add two <xref:System.Windows.Forms.Button> controls named `startAsyncButton` and `cancelAsyncButton`.</span></span> <span data-ttu-id="1861c-125">作成<xref:System.Windows.Forms.Control.Click>両方のボタンのイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="1861c-125">Create <xref:System.Windows.Forms.Control.Click> event handlers for both buttons.</span></span> <span data-ttu-id="1861c-126">**コンポーネント** タブ、ツールボックスの追加、<xref:System.ComponentModel.BackgroundWorker>という名前のコンポーネント`backgroundWorker1`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-126">From the **Components** tab of the Toolbox, add a <xref:System.ComponentModel.BackgroundWorker> component named `backgroundWorker1`.</span></span> <span data-ttu-id="1861c-127">作成<xref:System.ComponentModel.BackgroundWorker.DoWork>、 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>、および<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>のイベント ハンドラー、<xref:System.ComponentModel.BackgroundWorker>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-127">Create <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handlers for the <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="1861c-128">フォームのコードでは、次のコードで、既存のコードを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="1861c-128">In the code for the form, replace the existing code with the following code.</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  
  
 <span data-ttu-id="1861c-129">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker>時間のかかる操作を非同期的に実行するためのクラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-129">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="1861c-130">次の図は、出力の例を示します。</span><span class="sxs-lookup"><span data-stu-id="1861c-130">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="1861c-131">![BackgroundWorker フィボナッチの例](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker フィボナッチの例")</span><span class="sxs-lookup"><span data-stu-id="1861c-131">![BackgroundWorker Fibonacci example](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker Fibonacci example")</span></span>  
  
 <span data-ttu-id="1861c-132">操作は、選択のフィボナッチ数を計算、計算処理の進行状況の進行状況の更新を報告し、キャンセルする保留中の計算を許可します。</span><span class="sxs-lookup"><span data-stu-id="1861c-132">The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BackgroundWorker ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BackgroundWorker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1861c-133">
            <see cref="T:System.ComponentModel.BackgroundWorker" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-133">Initializes a new instance of the <see cref="T:System.ComponentModel.BackgroundWorker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-134">このコンス トラクターの初期化、<xref:System.ComponentModel.BackgroundWorker>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-134">This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="backgroundWorker.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1861c-135">保留中のバックグラウンド操作のキャンセルを要求します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-135">Requests cancellation of a pending background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> 保留中のバック グラウンド操作を終了する要求を送信し、設定、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="1861c-137">呼び出すと<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>、ワーカー メソッドの実行と終了を停止する機会が。</span><span class="sxs-lookup"><span data-stu-id="1861c-137">When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit.</span></span> <span data-ttu-id="1861c-138">ワーカーのコードを定期的に確認する必要があります、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>プロパティ設定されていることを確認して`true`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-138">The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1861c-139">注意してくださいをコードで、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーはキャンセル要求にされていると、ポーリング ループを見逃す可能性がありますが作業を完了可能性があります<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>に設定されている`true`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-139">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="1861c-140">ここで、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>フラグ<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>で、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>イベント ハンドラーは設定されません`true`キャンセル要求が行われた場合でも。</span><span class="sxs-lookup"><span data-stu-id="1861c-140">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="1861c-141">このような状況と呼ばれる、*競合状態*はマルチ スレッド プログラミングの一般的な懸念事項とします。</span><span class="sxs-lookup"><span data-stu-id="1861c-141">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="1861c-142">マルチ スレッド デザインの詳細については、問題を参照してください[Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-142">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-143">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>非同期の (「バック グラウンド」) の操作をキャンセルするメソッド。</span><span class="sxs-lookup"><span data-stu-id="1861c-143">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to cancel an asynchronous ("background") operation.</span></span> <span data-ttu-id="1861c-144">このコード例が示されている例の一部、<xref:System.ComponentModel.BackgroundWorker>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-144">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]
 [!code-vb[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1861c-145">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> は <see langword="false" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-145">
              <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancellationPending">
      <MemberSignature Language="C#" Value="public bool CancellationPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancellationPending" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationPending As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancellationPending { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationPending : bool" Usage="System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-146">アプリケーションがバックグラウンド操作のキャンセルを要求したかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-146">Gets a value indicating whether the application has requested cancellation of a background operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1861c-147">アプリケーションがバックグラウンド操作のキャンセルを要求した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-147">
              <see langword="true" /> if the application has requested cancellation of a background operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1861c-148">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-148">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-149">場合<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>は`true`、<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>でメソッドが呼び出された、<xref:System.ComponentModel.BackgroundWorker>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-149">If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 <span data-ttu-id="1861c-150">このプロパティは、定期的に確認する必要がありますワーカー スレッドが使用するためもの<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>に設定されているときに、バック グラウンド操作を中止し、`true`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-150">This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-151">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>プロパティ クエリを<xref:System.ComponentModel.BackgroundWorker>のキャンセル状態に関するします。</span><span class="sxs-lookup"><span data-stu-id="1861c-151">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to query a <xref:System.ComponentModel.BackgroundWorker> about its cancellation state.</span></span> <span data-ttu-id="1861c-152">このコード例が示されている例の一部、<xref:System.ComponentModel.BackgroundWorker>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-152">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="backgroundWorker.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="backgroundWorker.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWork">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.DoWorkEventHandler DoWork;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.DoWorkEventHandler DoWork" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.DoWork" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoWork As DoWorkEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::DoWorkEventHandler ^ DoWork;" />
      <MemberSignature Language="F#" Value="member this.DoWork : System.ComponentModel.DoWorkEventHandler " Usage="member this.DoWork : System.ComponentModel.DoWorkEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DoWorkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-153">
            <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> が呼び出されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-153">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-154">このイベントを呼び出すときに発生しますが、<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1861c-154">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method.</span></span> <span data-ttu-id="1861c-155">これは、可能性のある時間のかかる操作を実行する操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="1861c-155">This is where you start the operation that performs the potentially time-consuming work.</span></span>  
  
 <span data-ttu-id="1861c-156">コード、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーを定期的に確認する必要があります、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>とプロパティ値の場合は、操作を中止`true`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-156">Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`.</span></span> <span data-ttu-id="1861c-157">これが発生したときに設定できます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>フラグ<xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType>に`true`、および<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>フラグ<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>で、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>イベント ハンドラーに設定されます`true`。</span><span class="sxs-lookup"><span data-stu-id="1861c-157">When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1861c-158">注意してくださいをコードで、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーはキャンセル要求にされていると、ポーリング ループを見逃す可能性がありますが作業を完了可能性があります<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>に設定されている`true`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-158">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="1861c-159">ここで、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>フラグ<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>で、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>イベント ハンドラーは設定されません`true`キャンセル要求が行われた場合でも。</span><span class="sxs-lookup"><span data-stu-id="1861c-159">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="1861c-160">このような状況と呼ばれる、*競合状態*はマルチ スレッド プログラミングの一般的な懸念事項とします。</span><span class="sxs-lookup"><span data-stu-id="1861c-160">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="1861c-161">マルチ スレッド デザインの詳細については、問題を参照してください[Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-161">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="1861c-162">操作結果、ある場合に結果を割り当てることができます、<xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1861c-162">If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1861c-163">これは使用可能になります、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>内のイベント ハンドラー、<xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1861c-163">This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="1861c-164">操作が、コードを処理は、例外が発生した場合、<xref:System.ComponentModel.BackgroundWorker>が例外をキャッチし、これに、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>として公開される、イベント ハンドラー、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>プロパティの<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-164">If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1861c-165">ある時点で、デバッガーは中断を Visual Studio デバッガーの下で実行している場合、<xref:System.ComponentModel.BackgroundWorker.DoWork>ハンドルされない例外が発生したイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="1861c-165">If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised.</span></span> <span data-ttu-id="1861c-166">1 つ以上ある場合<xref:System.ComponentModel.BackgroundWorker>、する必要がありますいないこれらのいずれかを直接参照するがよう、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーの特定のインスタンスを<xref:System.ComponentModel.BackgroundWorker>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-166">If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="1861c-167">代わりに、アクセスする必要があります、<xref:System.ComponentModel.BackgroundWorker>キャストすることによって、`sender`パラメーター、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="1861c-167">Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span>  
  
 <span data-ttu-id="1861c-168">すべてのユーザー インターフェイス オブジェクトを操作しないように注意する必要があります、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="1861c-168">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="1861c-169">代わりに、を通じてユーザー インターフェイスとの通信、<xref:System.ComponentModel.BackgroundWorker>イベント。</span><span class="sxs-lookup"><span data-stu-id="1861c-169">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.</span></span>  
  
 <span data-ttu-id="1861c-170">イベントの処理についての詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-170">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-171">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.DoWork>非同期操作を開始するイベントです。</span><span class="sxs-lookup"><span data-stu-id="1861c-171">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.DoWork> event to start an asynchronous operation.</span></span> <span data-ttu-id="1861c-172">このコード例が示されている例の一部、<xref:System.ComponentModel.BackgroundWorker>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-172">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]
 [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-173">
            <see cref="T:System.ComponentModel.BackgroundWorker" /> が非同期操作を実行中かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-173">Gets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1861c-174">
            <see cref="T:System.ComponentModel.BackgroundWorker" /> が非同期操作を実行中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-174">
              <see langword="true" />, if the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-175"><xref:System.ComponentModel.BackgroundWorker>を呼び出すときに、非同期操作を開始<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-175">The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-176">次のコード例は、使用する方法を示します、<xref:System.ComponentModel.BackgroundWorker.IsBusy%2A>の完了を待つプロパティ、<xref:System.ComponentModel.BackgroundWorker>操作。</span><span class="sxs-lookup"><span data-stu-id="1861c-176">The following code example demonstrates how to use the <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> property to wait for completion of a <xref:System.ComponentModel.BackgroundWorker> operation.</span></span> <span data-ttu-id="1861c-177">このコード例で説明されている例の一部は、[方法: バック グラウンドでファイルをダウンロード](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-177">This code example is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="Overload:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      </Docs>
    </Member>
    <Member MemberName="OnDoWork">
      <MemberSignature Language="C#" Value="protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoWork(class System.ComponentModel.DoWorkEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoWork (e As DoWorkEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoWork(System::ComponentModel::DoWorkEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoWork : System.ComponentModel.DoWorkEventArgs -&gt; unit&#xA;override this.OnDoWork : System.ComponentModel.DoWorkEventArgs -&gt; unit" Usage="backgroundWorker.OnDoWork e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.DoWorkEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1861c-178">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-178">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1861c-179">
            <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-179">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProgressChanged(class System.ComponentModel.ProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProgressChanged (e As ProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProgressChanged(System::ComponentModel::ProgressChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnProgressChanged : System.ComponentModel.ProgressChangedEventArgs -&gt; unit&#xA;override this.OnProgressChanged : System.ComponentModel.ProgressChangedEventArgs -&gt; unit" Usage="backgroundWorker.OnProgressChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.ProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1861c-180">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-180">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1861c-181">
            <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-181">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-182">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1861c-182">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="1861c-183">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-183">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="1861c-184"><xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="1861c-184">The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="1861c-185">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="1861c-185">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-186">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A>メソッドを非同期操作の進行状況を報告します。</span><span class="sxs-lookup"><span data-stu-id="1861c-186">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method to report the progress of an asynchronous operation.</span></span> <span data-ttu-id="1861c-187">このコード例が示されている例の一部、<xref:System.ComponentModel.AsyncOperationManager>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-187">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1861c-188">
            <para>オーバーライドするときに<see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />デリゲートを登録するためのメソッドがイベントを受信します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-188">
              <para>When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnRunWorkerCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRunWorkerCompleted(class System.ComponentModel.RunWorkerCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRunWorkerCompleted (e As RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRunWorkerCompleted(System::ComponentModel::RunWorkerCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventArgs -&gt; unit&#xA;override this.OnRunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventArgs -&gt; unit" Usage="backgroundWorker.OnRunWorkerCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.RunWorkerCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="1861c-189">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-189">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1861c-190">
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-190">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-191">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1861c-191">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="1861c-192">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-192">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="1861c-193"><xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="1861c-193">The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="1861c-194">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="1861c-194">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1861c-195">
            <para>オーバーライドするときに<see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />デリゲートを登録するためのメソッドがイベントを受信します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-195">
              <para>When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      </Docs>
    </Member>
    <Member MemberName="ProgressChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ProgressChangedEventHandler ProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProgressChanged As ProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::ProgressChangedEventHandler ^ ProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.ProgressChanged : System.ComponentModel.ProgressChangedEventHandler " Usage="member this.ProgressChanged : System.ComponentModel.ProgressChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-196">
            <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> が呼び出されたときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-196">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-197">このイベントを呼び出すときに発生しますが、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="1861c-197">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.</span></span>  
  
 <span data-ttu-id="1861c-198">イベントの処理についての詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-198">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-199">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged>をユーザーに非同期操作の進行状況を報告するイベントです。</span><span class="sxs-lookup"><span data-stu-id="1861c-199">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="1861c-200">このコード例が示されている例の一部、<xref:System.ComponentModel.BackgroundWorker>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-200">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]
 [!code-vb[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReportProgress">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-201">
            <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-201">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress);" />
      <MemberSignature Language="F#" Value="member this.ReportProgress : int -&gt; unit" Usage="backgroundWorker.ReportProgress percentProgress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="1861c-202">完了しているバックグラウンド操作の比率 (0 ～ 100%)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-202">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1861c-203">
            <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-203">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-204">呼び出すことができます、進行状況を報告するためのバック グラウンド操作が必要な場合、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>発生させるメソッドを<xref:System.ComponentModel.BackgroundWorker.ProgressChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="1861c-204">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="1861c-205"><xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A>プロパティの値である必要があります`true`、または<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>がスローされます、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-205">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="1861c-206">合計タスクの完了の割合としてバック グラウンド操作の進行状況の測定の意味のある方法を実装する責任です。</span><span class="sxs-lookup"><span data-stu-id="1861c-206">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
 <span data-ttu-id="1861c-207">呼び出し、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>メソッドは非同期でありが直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="1861c-207">The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately.</span></span> <span data-ttu-id="1861c-208"><xref:System.ComponentModel.BackgroundWorker.ProgressChanged>イベント ハンドラーを作成したスレッドの実行、<xref:System.ComponentModel.BackgroundWorker>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-208">The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-209">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>メソッドをユーザーに非同期操作の進行状況を報告します。</span><span class="sxs-lookup"><span data-stu-id="1861c-209">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="1861c-210">このコード例が示されている例の一部、<xref:System.ComponentModel.BackgroundWorker>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-210">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1861c-211">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> プロパティが <see langword="false" /> に設定されている。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-211">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.ReportProgress : int * obj -&gt; unit" Usage="backgroundWorker.ReportProgress (percentProgress, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="1861c-212">完了しているバックグラウンド操作の比率 (0 ～ 100%)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-212">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="1861c-213">
            <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> に渡される状態オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-213">The state object passed to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1861c-214">
            <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-214">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-215">呼び出すことができます、進行状況を報告するためのバック グラウンド操作が必要な場合、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>発生させるメソッドを<xref:System.ComponentModel.BackgroundWorker.ProgressChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="1861c-215">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="1861c-216"><xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A>プロパティの値にする必要があります`true`、または<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>がスローされます、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-216">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="1861c-217">合計タスクの完了の割合としてバック グラウンド操作の進行状況の測定の意味のある方法を実装する責任です。</span><span class="sxs-lookup"><span data-stu-id="1861c-217">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-218">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>メソッドをユーザーに非同期操作の進行状況を報告します。</span><span class="sxs-lookup"><span data-stu-id="1861c-218">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="1861c-219">このコード例が示されている例の一部、<xref:System.Windows.Forms.ToolStripProgressBar>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-219">This code example is part of a larger example provided for the <xref:System.Windows.Forms.ToolStripProgressBar> class.</span></span>  
  
 [!code-csharp[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1861c-220">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> プロパティが <see langword="false" /> に設定されている。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-220">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunWorkerAsync">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-221">バックグラウンド操作の実行を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-221">Starts execution of a background operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync();" />
      <MemberSignature Language="F#" Value="member this.RunWorkerAsync : unit -&gt; unit" Usage="backgroundWorker.RunWorkerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1861c-222">バックグラウンド操作の実行を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-222">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-223"><xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>メソッドが非同期的に実行されている操作を開始する要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="1861c-223">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="1861c-224">要求が処理されるときに、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 、さらに、バック グラウンド操作の実行を開始するイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1861c-224">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="1861c-225">呼び出して、バック グラウンド操作が既に実行されている場合<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>再度発生させる、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-225">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-226">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>非同期操作を開始する方法。</span><span class="sxs-lookup"><span data-stu-id="1861c-226">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="1861c-227">説明されている例の一部である[方法: バック グラウンドでファイルをダウンロード](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-227">It is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1861c-228">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> は <see langword="true" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-228">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync (object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync(object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync (argument As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync(System::Object ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RunWorkerAsync : obj -&gt; unit" Usage="backgroundWorker.RunWorkerAsync argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argument">
          <span data-ttu-id="1861c-229">
            <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベント ハンドラーで実行されるバックグラウンド操作で使用するパラメーター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-229">A parameter for use by the background operation to be executed in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1861c-230">バックグラウンド操作の実行を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-230">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-231"><xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>メソッドが非同期的に実行されている操作を開始する要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="1861c-231">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="1861c-232">要求が処理されるときに、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 、さらに、バック グラウンド操作の実行を開始するイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="1861c-232">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="1861c-233">操作は、パラメーターを必要とする場合、としてを指定できます、`argument`パラメーター<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-233">If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
 <span data-ttu-id="1861c-234">呼び出して、バック グラウンド操作が既に実行されている場合<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>再度発生させる、<xref:System.InvalidOperationException>します。</span><span class="sxs-lookup"><span data-stu-id="1861c-234">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-235">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>非同期操作を開始する方法。</span><span class="sxs-lookup"><span data-stu-id="1861c-235">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="1861c-236">このコード例が示されている例の一部、<xref:System.ComponentModel.BackgroundWorker>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-236">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]
 [!code-vb[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1861c-237">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> は <see langword="true" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-237">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RunWorkerCompleted As RunWorkerCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::RunWorkerCompletedEventHandler ^ RunWorkerCompleted;" />
      <MemberSignature Language="F#" Value="member this.RunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventHandler " Usage="member this.RunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.RunWorkerCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-238">バックグラウンド操作の完了時、キャンセル時、またはバックグラウンド操作によって例外が発生したときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-238">Occurs when the background operation has completed, has been canceled, or has raised an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-239">このイベントが発生したときに、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーを返します。</span><span class="sxs-lookup"><span data-stu-id="1861c-239">This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.</span></span>  
  
 <span data-ttu-id="1861c-240">操作が正常に完了してでその結果が割り当てられているかどうか、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーを通じて結果をアクセスできる、<xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1861c-240">If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="1861c-241"><xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>プロパティの<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>操作によって例外がスローされたことを示します。</span><span class="sxs-lookup"><span data-stu-id="1861c-241">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates that an exception was thrown by the operation.</span></span>  
  
 <span data-ttu-id="1861c-242"><xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>プロパティの<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>キャンセル要求をバック グラウンド操作によって処理されたかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="1861c-242">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates whether a cancellation request was processed by the background operation.</span></span> <span data-ttu-id="1861c-243">場合では、コード、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーをチェックして、キャンセル要求を検出する、<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>フラグと設定、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>フラグ<xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType>に`true`、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>フラグ<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>にも設定されます`true`.</span><span class="sxs-lookup"><span data-stu-id="1861c-243">If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> also will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="1861c-244">注意してくださいをコードで、<xref:System.ComponentModel.BackgroundWorker.DoWork>イベント ハンドラーはキャンセル要求にされていると、ポーリング ループを見逃す可能性がありますが作業を完了可能性があります<xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A>に設定されている`true`します。</span><span class="sxs-lookup"><span data-stu-id="1861c-244">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="1861c-245">ここで、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>フラグ<xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>で、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>イベント ハンドラーは設定されません`true`キャンセル要求が行われた場合でも。</span><span class="sxs-lookup"><span data-stu-id="1861c-245">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="1861c-246">このような状況と呼ばれる、*競合状態*はマルチ スレッド プログラミングの一般的な懸念事項とします。</span><span class="sxs-lookup"><span data-stu-id="1861c-246">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="1861c-247">マルチ スレッド デザインの詳細については、問題を参照してください[Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md)します。</span><span class="sxs-lookup"><span data-stu-id="1861c-247">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="1861c-248"><xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>イベント ハンドラーが常に確認する必要があります、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType>と<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType>プロパティにアクセスする前に、<xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1861c-248">Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="1861c-249">例外が発生した場合、または、操作が取り消された場合へのアクセス、<xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType>プロパティは例外を発生させます。</span><span class="sxs-lookup"><span data-stu-id="1861c-249">If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property raises an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1861c-250">次のコード例は、の使用を示します、<xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted>非同期操作の結果を処理するイベントです。</span><span class="sxs-lookup"><span data-stu-id="1861c-250">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event to handle the result of an asynchronous operation.</span></span> <span data-ttu-id="1861c-251">このコード例が示されている例の一部、<xref:System.ComponentModel.BackgroundWorker>クラス。</span><span class="sxs-lookup"><span data-stu-id="1861c-251">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]
 [!code-vb[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkerReportsProgress">
      <MemberSignature Language="C#" Value="public bool WorkerReportsProgress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerReportsProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerReportsProgress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerReportsProgress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WorkerReportsProgress : bool with get, set" Usage="System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-252">
            <see cref="T:System.ComponentModel.BackgroundWorker" /> が進行状況の更新を報告できるかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-252">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> can report progress updates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1861c-253">
            <see cref="T:System.ComponentModel.BackgroundWorker" /> が進捗状況の更新をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-253">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports progress updates; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1861c-254">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-254">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-255">設定、<xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A>プロパティを`true`する場合は、<xref:System.ComponentModel.BackgroundWorker>進行状況の更新をサポートするためにします。</span><span class="sxs-lookup"><span data-stu-id="1861c-255">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates.</span></span> <span data-ttu-id="1861c-256">このプロパティが`true`、ユーザー コードを呼び出すことができます、<xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A>発生させるメソッドを<xref:System.ComponentModel.BackgroundWorker.ProgressChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="1861c-256">When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WorkerSupportsCancellation">
      <MemberSignature Language="C#" Value="public bool WorkerSupportsCancellation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerSupportsCancellation" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerSupportsCancellation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerSupportsCancellation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WorkerSupportsCancellation : bool with get, set" Usage="System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1861c-257">
            <see cref="T:System.ComponentModel.BackgroundWorker" /> が非同期のキャンセルをサポートしているかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-257">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports asynchronous cancellation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1861c-258">
            <see cref="T:System.ComponentModel.BackgroundWorker" /> がキャンセルをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-258">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports cancellation; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1861c-259">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1861c-259">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1861c-260">設定、<xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A>プロパティを`true`する場合は、<xref:System.ComponentModel.BackgroundWorker>取り消しをサポートします。</span><span class="sxs-lookup"><span data-stu-id="1861c-260">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation.</span></span> <span data-ttu-id="1861c-261">このプロパティが`true`、呼び出すことができます、<xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>バック グラウンド操作を中断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="1861c-261">When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      </Docs>
    </Member>
  </Members>
</Type>