<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncCompletedEventArgs.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59536ea1bbd455f045b8bf42ca811c20c2823cc54.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9536ea1bbd455f045b8bf42ca811c20c2823cc54</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Provides data for the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">&lt;see langword="Completed" /&gt;</ph> event.</source>
          <target state="translated"><bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">&lt;see langword="Completed" /&gt;</ph> イベントのデータを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>If you are using a class that implements the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, the class will provide a <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph1">`Completed`</ph> event.</source>
          <target state="translated">実装するクラスを使用している場合、<bpt id="p1">[</bpt>イベント ベースの非同期パターン概要<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>、クラスが用意されて、 <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept> <ph id="ph1">`Completed`</ph>イベント。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>If you add an instance of the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType&gt;</ph> delegate to the event, you will receive information about the outcome of asynchronous operations in the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> parameter of the corresponding event-handler method.</source>
          <target state="translated">インスタンスを追加する場合、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType&gt;</ph>デリゲート、イベントでの非同期操作の結果に関する情報を受信します、<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>対応するイベント ハンドラー メソッドのパラメーターです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>The client application's event-handler delegate can check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property to determine if the asynchronous task was cancelled.</source>
          <target state="translated">クライアント アプリケーションのイベント ハンドラーのデリゲートを確認できる、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>非同期のタスクが取り消されたかどうかを決定するプロパティです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>The client application's event-handler delegate can check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property to determine if an exception occurred during execution of the asynchronous task.</source>
          <target state="translated">クライアント アプリケーションのイベント ハンドラーのデリゲートを確認できる、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>非同期タスクの実行中に例外が発生したかどうかを決定するプロパティです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Completed`</ph> event by checking the value of the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
          <target state="translated">クラスは、複数の非同期メソッド、または同じの非同期メソッドに複数の呼び出しをサポートする場合、どのタスクが発生したを決定できます、 <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph1">`Completed`</ph>イベントの値をチェックして、<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</source>
          <target state="translated">コードは、対応する非同期タスクが開始および完了すると、タスク Id と呼ばれるこれらのトークンを追跡する必要があります。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>を非同期操作の有効期間を追跡します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Classes that follow the Event-based Asynchronous Pattern can raise events to alert clients about the status of pending asynchronous operations.</source>
          <target state="translated">イベント ベースの非同期パターンに従うクラスは、保留中の非同期操作の状態に関するクライアントに通知するイベントを発生させることができます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>If the class provides a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">&lt;see langword="Completed" /&gt;</ph> event, you can use the <ph id="ph2">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> to tell clients about the outcome of asynchronous operations.</source>
          <target state="translated">クラスを提供する場合、 <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph1">&lt;see langword="Completed" /&gt;</ph>イベント、行うこともできます、<ph id="ph2">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph>への非同期操作の結果に関するクライアントを通知します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>You may want to communicate to clients more information about the outcome of an asynchronous operation than an <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> accommodates.</source>
          <target state="translated">クライアントと通信するよりも非同期操作の結果についての詳細については、<ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph>に対応します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>In this case, you can derive your own class from the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class and provide additional private instance variables and corresponding read-only public properties.</source>
          <target state="translated">この場合、派生クラスから、<ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph>クラスし、その他のプライベート インスタンス変数と対応する読み取り専用のパブリック プロパティを提供します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Call the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> method before returning the property value, in case the operation was canceled or an error occurred.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph>メソッド操作が取り消されたか、エラーが発生した場合、プロパティの値を返す前にします。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncCompletedEventArgs">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
          <source>Any error that occurred during the asynchronous operation.</source>
          <target state="translated">非同期操作中に発生したエラー。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
          <source>A value indicating whether the asynchronous operation was canceled.</source>
          <target state="translated">非同期操作がキャンセルされたかどうかを示す値。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
          <source>The optional user-supplied state object passed to the <ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /&gt;</ph> メソッドに渡される、オプションのユーザー指定の状態オブジェクト。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>Gets a value indicating whether an asynchronous operation has been canceled.</source>
          <target state="translated">非同期操作がキャンセルされたかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the background operation has been canceled; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">バックグラウンドでの操作がキャンセルされた場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="false" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>When the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the asynchronous operation was interrupted.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>プロパティは<ph id="ph2">`true`</ph>、非同期操作が中断されました。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>The client application's event-handler delegate should check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property before accessing any properties in a class derived from <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>; otherwise, the property will raise an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> if the asynchronous operation was interrupted.</source>
          <target state="translated">クライアント アプリケーションのイベント ハンドラーのデリゲートを確認する必要があります、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph>から派生したクラスの任意のプロパティにアクセスする前に、プロパティ<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>、それ以外のプロパティを発生させる、<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>非同期操作が中断された場合。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>The following code example demonstrates the using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">使用して、次のコード例を示します、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>を非同期操作の有効期間を追跡します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>If you provide read-only properties in a derived class, be sure to call the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> method.</source>
          <target state="translated">派生クラスでの読み取り専用のプロパティを提供する場合を呼び出すことを確認する、<ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
          <source>This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</source>
          <target state="translated">これはクライアントがない可能性がある非同期の操作中のエラーにより有効なプロパティへのアクセスすることを防ぎます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>Gets a value indicating which error occurred during an asynchronous operation.</source>
          <target state="translated">非同期操作中に発生したエラーを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instance, if an error occurred during an asynchronous operation; otherwise <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">非同期操作中にエラーが発生した場合は <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> インスタンス。それ以外の場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>If an exception is raised during an asynchronous operation, the class will assign the exception to the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property.</source>
          <target state="translated">クラスが例外を割り当てるための非同期操作中に例外が発生する場合、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>The client application's event-handler delegate should check the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property before accessing any properties in a class derived from <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>; otherwise, the property will raise a <ph id="ph3">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> with its <ph id="ph4">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property holding a reference to <ph id="ph5">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>.</source>
          <target state="translated">クライアント アプリケーションのイベント ハンドラーのデリゲートを確認する必要があります、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>から派生したクラスの任意のプロパティにアクセスする前に、プロパティ<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>、それ以外のプロパティが生成されます、<ph id="ph3">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph>でその<ph id="ph4">&lt;xref:System.Exception.InnerException%2A&gt;</ph>プロパティへの参照を保持している<ph id="ph5">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>The value of the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property is <ph id="ph2">`null`</ph> if the operation was canceled.</source>
          <target state="translated">値、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph>プロパティは<ph id="ph2">`null`</ph>操作が取り消された場合。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>を非同期操作の有効期間を追跡します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>If you provide read-only properties in a derived class, be sure to call the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> method in your property implementation.</source>
          <target state="translated">派生クラスでの読み取り専用のプロパティを提供する場合を呼び出すことを確認する、<ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph>メソッド、プロパティの実装にします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
          <source>This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</source>
          <target state="translated">これはクライアントがない可能性がある非同期の操作中のエラーにより有効なプロパティへのアクセスすることを防ぎます。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>Raises a user-supplied exception if an asynchronous operation failed.</source>
          <target state="translated">非同期操作が失敗した場合は、ユーザー指定の例外を発生させます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>The following code example demonstrates using <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A&gt;</ph> in derived class properties.</source>
          <target state="translated">次のコード例では、使用方法を示します<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A&gt;</ph>で派生したクラスのプロパティです。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /&gt;</ph> property is <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /&gt;</ph> プロパティが <ph id="ph2">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>The <ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph> property has been set by the asynchronous operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph> プロパティは、非同期操作によって設定されています。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property holds a reference to <ph id="ph2">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> プロパティは、<ph id="ph2">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph> への参照を保持します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>If you have derived your own class from the <ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph> class, your read-only properties should call the <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph> method before returning the property value.</source>
          <target state="translated">独自のクラスから派生した場合、<ph id="ph1">&lt;see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /&gt;</ph>クラス、読み取り専用のプロパティを呼び出す必要があります、<ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /&gt;</ph>メソッド、プロパティ値を返す前にします。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>If the component's asynchronous worker code assigns an exception to the <ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph> property or sets the <ph id="ph2">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /&gt;</ph> property to <ph id="ph3">&lt;see langword="true" /&gt;</ph>, the property will raise an exception if a client tries to read its value.</source>
          <target state="translated">ワーカーのコードが例外を割り当てますコンポーネントに非同期の場合、<ph id="ph1">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /&gt;</ph>プロパティまたはセット、<ph id="ph2">&lt;see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /&gt;</ph>プロパティを<ph id="ph3">&lt;see langword="true" /&gt;</ph>プロパティは、クライアントは、その値を読み取るしようとした場合、例外が発生します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
          <source>This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</source>
          <target state="translated">これはクライアントがない可能性がある非同期の操作中のエラーにより有効なプロパティへのアクセスすることを防ぎます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>Gets the unique identifier for the asynchronous task.</source>
          <target state="translated">非同期タスクの一意の識別子を取得します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>An object reference that uniquely identifies the asynchronous task; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no value has been set.</source>
          <target state="translated">非同期タスクを一意に識別するオブジェクト参照。値が設定されていない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Completed`</ph> event by checking the value of the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph> property.</source>
          <target state="translated">クラスは、複数の非同期メソッド、または 1 つのメソッドの複数の呼び出しをサポートする場合、どのタスクが発生したを決定できます、 <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph1">`Completed`</ph>イベントの値をチェックして、<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</source>
          <target state="translated">これらのトークンは、対応する非同期タスクが開始および完了すると、タスク Id と呼ばれますが、コードを追跡する必要があります。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>The value of this property is set during the original call to the asynchronous method that started the task.</source>
          <target state="translated">このプロパティの値は、元のタスクが開始される非同期メソッドの呼び出し中に設定されます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>を非同期操作の有効期間を追跡します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>