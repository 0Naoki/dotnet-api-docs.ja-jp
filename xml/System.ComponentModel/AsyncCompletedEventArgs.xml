<Type Name="AsyncCompletedEventArgs" FullName="System.ComponentModel.AsyncCompletedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9536ea1bbd455f045b8bf42ca811c20c2823cc54" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AsyncCompletedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AsyncCompletedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncCompletedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncCompletedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncCompletedEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b3287-101">*MethodName*<see langword="Completed" /> イベントのデータを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b3287-101">Provides data for the *MethodName*<see langword="Completed" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3287-102">実装するクラスを使用している場合、[イベント ベースの非同期パターン概要](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)、クラスが用意されて、 *MethodName* `Completed`イベント。</span><span class="sxs-lookup"><span data-stu-id="b3287-102">If you are using a class that implements the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), the class will provide a *MethodName*`Completed` event.</span></span> <span data-ttu-id="b3287-103">インスタンスを追加する場合、<xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType>デリゲート、イベントでの非同期操作の結果に関する情報を受信します、<xref:System.ComponentModel.AsyncCompletedEventArgs>対応するイベント ハンドラー メソッドのパラメーターです。</span><span class="sxs-lookup"><span data-stu-id="b3287-103">If you add an instance of the <xref:System.ComponentModel.AsyncCompletedEventHandler?displayProperty=nameWithType> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref:System.ComponentModel.AsyncCompletedEventArgs> parameter of the corresponding event-handler method.</span></span>  
  
 <span data-ttu-id="b3287-104">クライアント アプリケーションのイベント ハンドラーのデリゲートを確認できる、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>非同期のタスクが取り消されたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b3287-104">The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property to determine if the asynchronous task was cancelled.</span></span>  
  
 <span data-ttu-id="b3287-105">クライアント アプリケーションのイベント ハンドラーのデリゲートを確認できる、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>非同期タスクの実行中に例外が発生したかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b3287-105">The client application's event-handler delegate can check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property to determine if an exception occurred during execution of the asynchronous task.</span></span>  
  
 <span data-ttu-id="b3287-106">クラスは、複数の非同期メソッド、または同じの非同期メソッドに複数の呼び出しをサポートする場合、どのタスクが発生したを決定できます、 *MethodName* `Completed`イベントの値をチェックして、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b3287-106">If the class supports multiple asynchronous methods, or multiple calls to the same asynchronous method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property.</span></span> <span data-ttu-id="b3287-107">コードは、対応する非同期タスクが開始および完了すると、タスク Id と呼ばれるこれらのトークンを追跡する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b3287-107">Your code will need to track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3287-108">次のコード例では、使用方法を示します、<xref:System.ComponentModel.AsyncOperation>を非同期操作の有効期間を追跡します。</span><span class="sxs-lookup"><span data-stu-id="b3287-108">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="b3287-109">このコード例に示されている例の一部である、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b3287-109">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="b3287-110">イベント ベースの非同期パターンに従うクラスは、保留中の非同期操作の状態に関するクライアントに通知するイベントを発生させることができます。</span>
        <span class="sxs-lookup">
          <span data-stu-id="b3287-110">Classes that follow the Event-based Asynchronous Pattern can raise events to alert clients about the status of pending asynchronous operations.</span>
        </span>
        <span data-ttu-id="b3287-111">クラスを提供する場合、 *MethodName* <see langword="Completed" />イベント、行うこともできます、<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />への非同期操作の結果に関するクライアントを通知します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="b3287-111">If the class provides a *MethodName*<see langword="Completed" /> event, you can use the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> to tell clients about the outcome of asynchronous operations.</span>
        </span>
        <span data-ttu-id="b3287-112">クライアントと通信するよりも非同期操作の結果についての詳細については、<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />に対応します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="b3287-112">You may want to communicate to clients more information about the outcome of an asynchronous operation than an <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> accommodates.</span>
        </span>
        <span data-ttu-id="b3287-113">この場合、派生クラスから、<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />クラスし、その他のプライベート インスタンス変数と対応する読み取り専用のパブリック プロパティを提供します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="b3287-113">In this case, you can derive your own class from the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class and provide additional private instance variables and corresponding read-only public properties.</span>
        </span>
        <span data-ttu-id="b3287-114">呼び出す、<see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />メソッド操作が取り消されたか、エラーが発生した場合、プロパティの値を返す前にします。</span>
        <span class="sxs-lookup">
          <span data-stu-id="b3287-114">Call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method before returning the property value, in case the operation was canceled or an error occurred.</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="b3287-115">
            <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-115">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b3287-116">
            <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-116">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncCompletedEventArgs (Exception error, bool cancelled, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception error, bool cancelled, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (error As Exception, cancelled As Boolean, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AsyncCompletedEventArgs(Exception ^ error, bool cancelled, System::Object ^ userState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
        <Parameter Name="cancelled" Type="System.Boolean" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="error">
          <span data-ttu-id="b3287-117">非同期操作中に発生したエラー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-117">Any error that occurred during the asynchronous operation.</span>
          </span>
        </param>
        <param name="cancelled">
          <span data-ttu-id="b3287-118">非同期操作がキャンセルされたかどうかを示す値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-118">A value indicating whether the asynchronous operation was canceled.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="b3287-119">
            <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> メソッドに渡される、オプションのユーザー指定の状態オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-119">The optional user-supplied state object passed to the <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b3287-120">
            <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-120">Initializes a new instance of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public bool Cancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancelled" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cancelled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3287-121">非同期操作がキャンセルされたかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-121">Gets a value indicating whether an asynchronous operation has been canceled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3287-122">バックグラウンドでの操作がキャンセルされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-122">
              <see langword="true" /> if the background operation has been canceled; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="b3287-123">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-123">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3287-124">ときに、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>プロパティは`true`、非同期操作が中断されました。</span><span class="sxs-lookup"><span data-stu-id="b3287-124">When the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property is `true`, the asynchronous operation was interrupted.</span></span>  
  
 <span data-ttu-id="b3287-125">クライアント アプリケーションのイベント ハンドラーのデリゲートを確認する必要があります、<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>から派生したクラスの任意のプロパティにアクセスする前に、プロパティ<xref:System.ComponentModel.AsyncCompletedEventArgs>、それ以外のプロパティを発生させる、<xref:System.InvalidOperationException>非同期操作が中断された場合。</span><span class="sxs-lookup"><span data-stu-id="b3287-125">The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise an <xref:System.InvalidOperationException> if the asynchronous operation was interrupted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3287-126">使用して、次のコード例を示します、<xref:System.ComponentModel.AsyncOperation>を非同期操作の有効期間を追跡します。</span><span class="sxs-lookup"><span data-stu-id="b3287-126">The following code example demonstrates the using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="b3287-127">このコード例に示されている例の一部である、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b3287-127">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b3287-128">派生クラスでの読み取り専用のプロパティを提供する場合を呼び出すことを確認する、<see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />メソッドです。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b3287-128">If you provide read-only properties in a derived class, be sure to call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method.</span>
            </span>
            <span data-ttu-id="b3287-129">これはクライアントがない可能性がある非同期の操作中のエラーにより有効なプロパティへのアクセスすることを防ぎます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b3287-129">This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public Exception Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Error" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Error As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Error { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3287-130">非同期操作中に発生したエラーを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-130">Gets a value indicating which error occurred during an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3287-131">非同期操作中にエラーが発生した場合は <see cref="T:System.Exception" /> インスタンス。それ以外の場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-131">An <see cref="T:System.Exception" /> instance, if an error occurred during an asynchronous operation; otherwise <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3287-132">クラスが例外を割り当てるための非同期操作中に例外が発生する場合、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b3287-132">If an exception is raised during an asynchronous operation, the class will assign the exception to the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property.</span></span> <span data-ttu-id="b3287-133">クライアント アプリケーションのイベント ハンドラーのデリゲートを確認する必要があります、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>から派生したクラスの任意のプロパティにアクセスする前に、プロパティ<xref:System.ComponentModel.AsyncCompletedEventArgs>、それ以外のプロパティが生成されます、<xref:System.Reflection.TargetInvocationException>でその<xref:System.Exception.InnerException%2A>プロパティへの参照を保持している<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>です。</span><span class="sxs-lookup"><span data-stu-id="b3287-133">The client application's event-handler delegate should check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property before accessing any properties in a class derived from <xref:System.ComponentModel.AsyncCompletedEventArgs>; otherwise, the property will raise a <xref:System.Reflection.TargetInvocationException> with its <xref:System.Exception.InnerException%2A> property holding a reference to <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>.</span></span>  
  
 <span data-ttu-id="b3287-134">値、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>プロパティは`null`操作が取り消された場合。</span><span class="sxs-lookup"><span data-stu-id="b3287-134">The value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property is `null` if the operation was canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3287-135">次のコード例では、使用方法を示します、<xref:System.ComponentModel.AsyncOperation>を非同期操作の有効期間を追跡します。</span><span class="sxs-lookup"><span data-stu-id="b3287-135">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="b3287-136">このコード例に示されている例の一部である、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b3287-136">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b3287-137">派生クラスでの読み取り専用のプロパティを提供する場合を呼び出すことを確認する、<see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />メソッド、プロパティの実装にします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b3287-137">If you provide read-only properties in a derived class, be sure to call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method in your property implementation.</span>
            </span>
            <span data-ttu-id="b3287-138">これはクライアントがない可能性がある非同期の操作中のエラーにより有効なプロパティへのアクセスすることを防ぎます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b3287-138">This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="RaiseExceptionIfNecessary">
      <MemberSignature Language="C#" Value="protected void RaiseExceptionIfNecessary ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseExceptionIfNecessary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseExceptionIfNecessary ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseExceptionIfNecessary();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b3287-139">非同期操作が失敗した場合は、ユーザー指定の例外を発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-139">Raises a user-supplied exception if an asynchronous operation failed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b3287-140">次のコード例では、使用方法を示します<xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A>で派生したクラスのプロパティです。</span><span class="sxs-lookup"><span data-stu-id="b3287-140">The following code example demonstrates using <xref:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary%2A> in derived class properties.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#6)]
[!code-vb[System.ComponentModel.AsyncOperationManager#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b3287-141">
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> プロパティが <see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-141">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="b3287-142">
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> プロパティは、非同期操作によって設定されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-142">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property has been set by the asynchronous operation.</span>
          </span>
          <span data-ttu-id="b3287-143">
            <see cref="P:System.Exception.InnerException" /> プロパティは、<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> への参照を保持します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-143">The <see cref="P:System.Exception.InnerException" /> property holds a reference to <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="b3287-144">独自のクラスから派生した場合、<see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />クラス、読み取り専用のプロパティを呼び出す必要があります、<see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" />メソッド、プロパティ値を返す前にします。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b3287-144">If you have derived your own class from the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> class, your read-only properties should call the <see cref="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary" /> method before returning the property value.</span>
            </span>
            <span data-ttu-id="b3287-145">ワーカーのコードが例外を割り当てますコンポーネントに非同期の場合、<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />プロパティまたはセット、<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" />プロパティを<see langword="true" />プロパティは、クライアントは、その値を読み取るしようとした場合、例外が発生します。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b3287-145">If the component's asynchronous worker code assigns an exception to the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> property or sets the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> property to <see langword="true" />, the property will raise an exception if a client tries to read its value.</span>
            </span>
            <span data-ttu-id="b3287-146">これはクライアントがない可能性がある非同期の操作中のエラーにより有効なプロパティへのアクセスすることを防ぎます。</span>
            <span class="sxs-lookup">
              <span data-stu-id="b3287-146">This prevents clients from accessing properties that are potentially not valid due to a failure in the asynchronous operation.</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="UserState">
      <MemberSignature Language="C#" Value="public object UserState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncCompletedEventArgs.UserState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b3287-147">非同期タスクの一意の識別子を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-147">Gets the unique identifier for the asynchronous task.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b3287-148">非同期タスクを一意に識別するオブジェクト参照。値が設定されていない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b3287-148">An object reference that uniquely identifies the asynchronous task; otherwise, <see langword="null" /> if no value has been set.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b3287-149">クラスは、複数の非同期メソッド、または 1 つのメソッドの複数の呼び出しをサポートする場合、どのタスクが発生したを決定できます、 *MethodName* `Completed`イベントの値をチェックして、<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="b3287-149">If a class supports multiple asynchronous methods, or multiple invocations of a single method, you can determine which task raised the *MethodName*`Completed` event by checking the value of the <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> property.</span></span> <span data-ttu-id="b3287-150">これらのトークンは、対応する非同期タスクが開始および完了すると、タスク Id と呼ばれますが、コードを追跡する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b3287-150">Your code will need track these tokens, known as task IDs, as their corresponding asynchronous tasks start and complete.</span></span>  
  
 <span data-ttu-id="b3287-151">このプロパティの値は、元のタスクが開始される非同期メソッドの呼び出し中に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b3287-151">The value of this property is set during the original call to the asynchronous method that started the task.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b3287-152">次のコード例では、使用方法を示します、<xref:System.ComponentModel.AsyncOperation>を非同期操作の有効期間を追跡します。</span><span class="sxs-lookup"><span data-stu-id="b3287-152">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="b3287-153">このコード例に示されている例の一部である、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>クラスです。</span><span class="sxs-lookup"><span data-stu-id="b3287-153">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#11)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#11)]  
[!code-csharp[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#12)]
[!code-vb[System.ComponentModel.AsyncOperationManager#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
  </Members>
</Type>