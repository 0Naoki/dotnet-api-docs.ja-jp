<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AsyncOperation.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac527b3f4ff3ed46bf8dc07465aaecd985e0ada7d95.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27b3f4ff3ed46bf8dc07465aaecd985e0ada7d95</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.AsyncOperation">
          <source>Tracks the lifetime of an asynchronous operation.</source>
          <target state="translated">非同期操作の有効期間を追跡します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>When you implement a class according to the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>, you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</source>
          <target state="translated">に従ってクラスを実装する場合、<bpt id="p1">[</bpt>イベント ベースの非同期パターン概要<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>クラスのインスタンスで呼び出される各非同期操作の有効期間を追跡する必要があります。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> class provides ways to track and report the progress of an asynchronous task.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>クラスには、追跡して、非同期タスクの進行状況をレポートする方法が用意されています。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The following list identifies ways to use an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object:</source>
          <target state="translated">次の一覧が使用する方法を示して、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To report progress and interim results to the client, call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> from your asynchronous worker code.</source>
          <target state="translated">進行状況と中間結果をクライアントに報告する呼び出し<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph>非同期ワーカー コードからです。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</source>
          <target state="translated">非同期タスクが完了したことを示すために、または保留中の非同期タスクをキャンセルするには、呼び出す<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>Your class should get an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object for each asynchronous task by calling <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> when each task starts.</source>
          <target state="translated">クラスを取得する必要があります、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>オブジェクトを呼び出すことによって各非同期タスク<ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>各タスクの開始時です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>To allow the client to distinguish separate asynchronous tasks, <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph> takes a parameter for a unique client-provided token, which becomes the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">別の非同期タスクを区別するためにクライアントを許可する<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>一意クライアントに用意されているトークンになりますパラメーターを受け取り、<ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</source>
          <target state="translated">これは、進行中または完了のイベントを発生させる特定の非同期タスクを識別のクライアント コードで使用できます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>The following code example demonstrates using an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object to track the lifetime of asynchronous operations.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>非同期操作の有効期間を追跡するオブジェクト。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For a full code listing, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>.</source>
          <target state="translated">完全なコードの一覧については、次を参照してください。<bpt id="p1">[</bpt>する方法: イベント ベースの非同期パターンをサポートするコンポーネントを実装する<ept id="p1">](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)</ept>です。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For a full code listing of a client form, see <bpt id="p1">[</bpt>How to: Implement a Client of the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">クライアントの完全なコードについては、次を参照してください。<bpt id="p1">[</bpt>する方法: イベント ベースの非同期パターンのクライアントを実装する<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>Implementers must ensure the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</source>
          <target state="translated">実装時は、必ず、<ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph>と<ph id="ph2">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph>は非同期に呼び出し、特定のアプリケーション内の非同期動作であると、潜在的なスタックがオーバーフローできるように、クラス ライブラリのプロバイダーを意識する必要はありません同期することで発生したモデルです。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.AsyncOperation">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">非同期のクラスの実装の詳細については、次を参照してください。<bpt id="p1">[</bpt>イベント ベースの非同期パターンを実装する<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Finalize">
          <source>Finalizes the asynchronous operation.</source>
          <target state="translated">非同期操作の終了処理を行います。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>Ends the lifetime of an asynchronous operation.</source>
          <target state="translated">非同期操作の有効期間を終了します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A&gt;</ph>メソッドを非同期操作の有効期間を終了します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source>After this method is called for a particular task, calls to its corresponding <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> will raise an exception.</source>
          <target state="translated">このメソッドは特定のタスクに対して呼び出されると、それに対応する呼び出し<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>で例外が発生します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.OperationCompleted">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> has been called previously for this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> は、このタスクに対して既に呼び出されています。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> object that wraps the delegate to be called when the operation ends.</source>
          <target state="translated">操作終了時に呼び出されるデリゲートをラップする <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>An argument for the delegate contained in the <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> パラメーターに格納されているデリゲートの引数。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Invokes a delegate on the thread or context appropriate for the application model.</source>
          <target state="translated">アプリケーション モデルに適したスレッドまたはコンテキストでデリゲートを呼び出します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method invokes the delegate specified by the <ph id="ph2">`arg`</ph> parameter without ending the lifetime of the asynchronous operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph>メソッドによって指定されたデリゲートを呼び出す、<ph id="ph2">`arg`</ph>非同期操作の有効期間を終了せずにパラメーター。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>.</source>
          <target state="translated">呼び出すことができます、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph>メソッドへの呼び出しによって、非同期操作の有効期間が終了されていません、好きなように、多くの場合、<ph id="ph2">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can use the method to report progress or interim results back to clients.</source>
          <target state="translated">進行状況や中間結果を戻すクライアントに報告するのにメソッドを使用できます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`d`</ph> parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</source>
          <target state="translated"><ph id="ph1">`d`</ph>パラメーターは、非同期タスクの状態に関する更新を投稿するときに呼び出される必要のあるデリゲートをラップします。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>オブジェクトはスレッドまたはアプリケーション モデルに適切なコンテキストで、デリゲートが呼び出されることを確認してください。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</source>
          <target state="translated">メソッドは、状態の変更、進行状況の更新、または新しく使用可能な増分の結果のクライアントに通知イベントを発生させる必要に応じてことができます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`arg`</ph> parameter should be used to pass state to the delegate wrapped by the <ph id="ph2">`d`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">`arg`</ph>と状態をによってラップされたデリゲートに渡すパラメーターを使用する必要があります、<ph id="ph2">`d`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>It might be a reference to an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>, or it might be a <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated">参照があります、 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>、またはその可能性があります、<ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>It may be desirable to derive your own class from <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph> to provide additional state storage.</source>
          <target state="translated">独自のクラスを派生させることが望ましい場合があります<ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType&gt;</ph>追加の状態の記憶域を提供します。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph> method for reporting progress and incremental results of an asynchronous operation.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.Post%2A&gt;</ph>の進行状況と非同期操作のインクリメンタル結果をレポートします。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> method has been called previously for this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> メソッドは、このタスクに対して既に呼び出されています。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="d" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="d" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Inheritors must make the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</source>
          <target state="translated">継承元が行う必要があります、<ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph>できるように、クラス ライブラリのプロバイダーは、潜在的なスタックを考慮する必要はありませんは、非同期呼び出しには、非同期処理が前提としていますが、特定のアプリケーション モデルの処理は同期している場合がオーバーフローが発生します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>Console applications do not synchronize the execution of <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> calls.</source>
          <target state="translated">コンソール アプリケーションは <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 呼び出しの実行を同期しません。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>This can cause <ph id="ph1">&lt;see langword="ProgressChanged" /&gt;</ph> events to be raised out of order.</source>
          <target state="translated">これが原因で、<ph id="ph1">&lt;see langword="ProgressChanged" /&gt;</ph> イベントが正しくない順序で発生することがあります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>If you wish to have serialized execution of <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> calls, implement and install a <ph id="ph2">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> 呼び出しを順次実行するには、<ph id="ph2">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> クラスを実装およびインストールします。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">非同期のクラスの実装の詳細については、次を参照してください。<bpt id="p1">[</bpt>イベント ベースの非同期パターンを実装する<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> object that wraps the delegate to be called when the operation ends.</source>
          <target state="translated">操作終了時に呼び出されるデリゲートをラップする <ph id="ph1">&lt;see cref="T:System.Threading.SendOrPostCallback" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>An argument for the delegate contained in the <bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>d<ept id="p1">&lt;/c&gt;</ept> パラメーターに格納されているデリゲートの引数。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Ends the lifetime of an asynchronous operation.</source>
          <target state="translated">非同期操作の有効期間を終了します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>メソッドを非同期操作の有効期間を終了します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>After this method is called for a particular task, calls to its corresponding <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will raise an exception.</source>
          <target state="translated">このメソッドは特定のタスクに対して呼び出されると、それに対応する呼び出し<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>オブジェクトには、例外が発生します。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`d`</ph> parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</source>
          <target state="translated"><ph id="ph1">`d`</ph>パラメーター クラス完了、取り消し、またはタスクのエラーにより、タスクの有効期間が終了したときに呼び出すデリゲートをラップします。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>オブジェクトはスレッドまたはアプリケーション モデルに適切なコンテキストで、デリゲートが呼び出されることを確認してください。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</source>
          <target state="translated">デリゲートは、非同期タスクの有効期間が終了したことをクライアントに通知イベントを発生させる必要に応じてことができます。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The <ph id="ph1">`arg`</ph> parameter is used to pass state information to the completion delegate <ph id="ph2">`d`</ph>.</source>
          <target state="translated"><ph id="ph1">`arg`</ph>完了デリゲートに状態情報を渡すパラメーターが使用される<ph id="ph2">`d`</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>You can use an <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph> object, or an <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> object as the parameter value.</source>
          <target state="translated">使用することができます、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation&gt;</ph>オブジェクト、または<ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph>パラメーター値としてオブジェクト。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">代わりに、追加の状態の記憶域を提供する場合から派生したクラスのインスタンスを使用できる、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph> method to end the lifetime of an asynchronous operation.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A&gt;</ph>メソッドを非同期操作の有効期間を終了します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> has been called previously for this task.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /&gt;</ph> は、このタスクに対して既に呼び出されています。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="d" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="d" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>Inheritors must make the <ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</source>
          <target state="translated">継承元が行う必要があります、<ph id="ph1">&lt;see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /&gt;</ph>できるように、クラス ライブラリのプロバイダーは、潜在的なスタックを考慮する必要はありませんは、非同期呼び出しには、非同期処理が前提としていますが、特定のアプリケーション モデルの処理は同期している場合がオーバーフローが発生します。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</source>
          <target state="translated">メソッドは、「有効期間の終了」の呼び出し、つまり、実装は、アプリケーション モデルに適切なことを行う必要があるとして解釈する必要があります。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</source>
          <target state="translated">たとえば、ASP.NET では、未処理の非同期操作ののカウントがデクリメントされます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</source>
          <target state="translated">これもする必要があります、操作状態に後続の呼び出しが失敗するようが今すぐに完了したためです。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
          <source>For more information about implementing asynchronous classes, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
          <target state="translated">非同期のクラスの実装の詳細については、次を参照してください。<bpt id="p1">[</bpt>イベント ベースの非同期パターンを実装する<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>です。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> object that was passed to the constructor.</source>
          <target state="translated">コンストラクターに渡された <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> object that was passed to the constructor.</source>
          <target state="translated">コンストラクターに渡された <ph id="ph1">&lt;see cref="T:System.Threading.SynchronizationContext" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Gets or sets an object used to uniquely identify an asynchronous operation.</source>
          <target state="translated">非同期操作を一意に識別するために使用するオブジェクトを取得または設定します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>The state object passed to the asynchronous method invocation.</source>
          <target state="translated">非同期メソッド呼び出しに渡される状態オブジェクト。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</source>
          <target state="translated">クラスは、複数の非同期メソッド、または 1 つの非同期メソッドの複数の呼び出しをサポートする場合、クライアントは、非同期タスクがイベントを発生させるかを決定する方法を必要があります。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Your <ph id="ph1">`MethodNameAsync`</ph> method should take a parameter of type <ph id="ph2">&lt;xref:System.Object&gt;</ph> that will act as a task ID.</source>
          <target state="translated"><ph id="ph1">`MethodNameAsync`</ph>メソッドは、型のパラメーターを受け取る必要があります<ph id="ph2">&lt;xref:System.Object&gt;</ph>タスク ID として動作します。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>You will use this task ID when you call the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</source>
          <target state="translated">呼び出すときにこのタスクの ID を使用する、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType&gt;</ph>メソッドが、これは、非同期操作の特定の呼び出しで、クライアントのタスクの ID を関連付けます。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>This task ID is made available to your implementation through the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">このタスクの ID はを通じて実装に使用可能になります、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Client code must be careful to provide a unique value for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> property.</source>
          <target state="translated">クライアント コードは一意の値を指定するように注意する必要があります、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</source>
          <target state="translated">タスク Id が一意でない進行状況とその他のイベントを正しくレポートする、実装があります。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>Your code should check for a non-unique task ID and raise an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> if one is detected.</source>
          <target state="translated">一意でないタスク id をチェックして発生させるコード、<ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>いずれかが検出された場合。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>The following code example demonstrates using <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph> to track the lifetime of asynchronous operations.</source>
          <target state="translated">次のコード例では、使用方法を示します<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A&gt;</ph>を非同期操作の有効期間を追跡します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType&gt;</ph>クラスです。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>