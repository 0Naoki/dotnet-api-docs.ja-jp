<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f80cce11905afe34dcbe6df6aa924c4b2148e01" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39837601" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="2373b-101">非同期操作の有効期間を追跡します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="2373b-101">Tracks the lifetime of an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2373b-102">に従ってクラスを実装する場合、 [- イベント ベースの非同期パターンの概要](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)クラスのインスタンスで呼び出される各非同期操作の有効期間を追跡する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2373b-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="2373b-103"><xref:System.ComponentModel.AsyncOperation>クラスには、追跡し、非同期タスクの進行状況を報告する方法が用意されています。</span><span class="sxs-lookup"><span data-stu-id="2373b-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="2373b-104">次に示しますを使用する方法、<xref:System.ComponentModel.AsyncOperation>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2373b-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="2373b-105">進行状況と中間結果をクライアントに報告するには、呼び出す<xref:System.ComponentModel.AsyncOperation.Post%2A>非同期ワーカー コードから。</span><span class="sxs-lookup"><span data-stu-id="2373b-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="2373b-106">非同期タスクが完了したことを示すために、または保留中の非同期タスクをキャンセルするには、呼び出す<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2373b-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="2373b-107">クラスを取得する必要があります、<xref:System.ComponentModel.AsyncOperation>オブジェクトを呼び出すことによってそれぞれの非同期タスク<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>各タスクの開始時です。</span><span class="sxs-lookup"><span data-stu-id="2373b-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="2373b-108">別の非同期タスクを区別するためにクライアントを許可する<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>をクライアントが提供される一意のトークンがパラメーターを受け取り、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2373b-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="2373b-109">これは、進行状況や完了イベントを発生させている特定の非同期タスクを識別するためのクライアント コードで使用できます。</span><span class="sxs-lookup"><span data-stu-id="2373b-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2373b-110">次のコード例に示しますを使用して、<xref:System.ComponentModel.AsyncOperation>非同期操作の有効期間を追跡するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2373b-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="2373b-111">このコード例が示されている例の一部、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>クラス。</span><span class="sxs-lookup"><span data-stu-id="2373b-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="2373b-112">完全なコード一覧については、次を参照してください。[方法: イベント ベースの非同期パターンをサポートするコンポーネントを実装する](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)します。</span><span class="sxs-lookup"><span data-stu-id="2373b-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="2373b-113">クライアントの完全なコード一覧については、次を参照してください。[方法: イベント ベースの非同期パターンのクライアントを実装する](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md)します。</span><span class="sxs-lookup"><span data-stu-id="2373b-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="2373b-114">
        <para>実装のことを確認する必要があります、<see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />と<see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />呼び出しが非同期には、特定のアプリケーションで非同期の動作を前提としている場合に潜在的なスタック オーバーフローが発生できるように、クラス ライブラリのプロバイダーは、使用を意識する必要はありません同期する必要があるモデル。非同期クラスの実装の詳細については、次を参照してください。[イベント ベースの非同期パターンを実装する](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)します。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="2373b-114">
          <para>Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2373b-115">非同期操作の終了処理を行います。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-115">Finalizes the asynchronous operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2373b-116">非同期操作の有効期間を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-116">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2373b-117">呼び出す、<xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A>メソッドを非同期操作の有効期間を終了します。</span><span class="sxs-lookup"><span data-stu-id="2373b-117">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="2373b-118">このメソッドは、特定の作業で呼び出されると、それに対応する呼び出し<xref:System.ComponentModel.AsyncOperation>で例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="2373b-118">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2373b-119">
            <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> は、このタスクに対して既に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-119">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="2373b-120">操作終了時に呼び出されるデリゲートをラップする <see cref="T:System.Threading.SendOrPostCallback" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-120">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="2373b-121">
            <c>d</c> パラメーターに格納されているデリゲートの引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-121">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2373b-122">アプリケーション モデルに適したスレッドまたはコンテキストでデリゲートを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-122">Invokes a delegate on the thread or context appropriate for the application model.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2373b-123"><xref:System.ComponentModel.AsyncOperation.Post%2A>メソッドで指定されたデリゲートを呼び出す、`arg`非同期操作の有効期間を終了せずパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2373b-123">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="2373b-124">呼び出すことができます、<xref:System.ComponentModel.AsyncOperation.Post%2A>メソッドを呼び出して非同期操作の有効期間が終了されていません、必要に応じて何度でも<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>します。</span><span class="sxs-lookup"><span data-stu-id="2373b-124">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="2373b-125">メソッドを使用すると、進行状況や中間結果を元のクライアントに報告します。</span><span class="sxs-lookup"><span data-stu-id="2373b-125">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="2373b-126">`d`パラメーターする非同期タスクの状態に関する更新をポストする場合に呼び出されるデリゲートをラップします。</span><span class="sxs-lookup"><span data-stu-id="2373b-126">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="2373b-127"><xref:System.ComponentModel.AsyncOperation>オブジェクトはスレッドまたは、アプリケーション モデルの適切なコンテキストで、デリゲートが呼び出されることを確認します。</span><span class="sxs-lookup"><span data-stu-id="2373b-127">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="2373b-128">メソッドは、状態の変更、進行状況の更新、または新しく使用可能な増分結果のクライアントに通知するイベントを発生させる必要に応じてことができます。</span><span class="sxs-lookup"><span data-stu-id="2373b-128">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="2373b-129">`arg`によってラップされたデリゲートに状態を渡すパラメーターを使用する必要があります、`d`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="2373b-129">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="2373b-130">参照があります、 <xref:System.ComponentModel.AsyncOperation>、または、<xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2373b-130">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="2373b-131">クラスを派生することが望ましい可能性がある<xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType>に追加の状態の記憶域を提供します。</span><span class="sxs-lookup"><span data-stu-id="2373b-131">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2373b-132">次のコード例に示しますを使用して、<xref:System.ComponentModel.AsyncOperation.Post%2A>メソッドの非同期操作の進捗と増分をレポートします。</span><span class="sxs-lookup"><span data-stu-id="2373b-132">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="2373b-133">このコード例が示されている例の一部、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>クラス。</span><span class="sxs-lookup"><span data-stu-id="2373b-133">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2373b-134">
            <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> メソッドは、このタスクに対して既に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-134">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2373b-135">
            <paramref name="d" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-135">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2373b-136">
            <para>継承クラスが行う必要があります、<see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />非同期性を前提としているが、特定のアプリケーション モデルが同期である場合、クラス ライブラリのプロバイダーは、潜在的なスタックを意識する必要はありませんように非同期呼び出しをオーバーフローしています。<block subset="none" type="note"><para> コンソール アプリケーションの実行を同期しない<see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />呼び出し。これが原因で、<see langword="ProgressChanged" /> イベントが正しくない順序で発生することがあります。<see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> 呼び出しを順次実行するには、<see cref="T:System.Threading.SynchronizationContext" /> クラスを実装およびインストールします。</para></block>  非同期クラスの実装の詳細については、次を参照してください。[イベント ベースの非同期パターンを実装する](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-136">
              <para>Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.  <block subset="none" type="note"><para> Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls. This can cause <see langword="ProgressChanged" /> events to be raised out of order. If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.  </para></block>  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="2373b-137">操作終了時に呼び出されるデリゲートをラップする <see cref="T:System.Threading.SendOrPostCallback" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-137">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="2373b-138">
            <c>d</c> パラメーターに格納されているデリゲートの引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-138">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2373b-139">非同期操作の有効期間を終了します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-139">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2373b-140">呼び出す、<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>メソッドを非同期操作の有効期間を終了します。</span><span class="sxs-lookup"><span data-stu-id="2373b-140">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="2373b-141">このメソッドは、特定の作業で呼び出されると、それに対応する呼び出し<xref:System.ComponentModel.AsyncOperation>オブジェクトには、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="2373b-141">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="2373b-142">`d`パラメーター クラス完了、取り消し、またはタスクのエラーにより、タスクの有効期間が終了したときに呼び出すデリゲートをラップします。</span><span class="sxs-lookup"><span data-stu-id="2373b-142">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="2373b-143"><xref:System.ComponentModel.AsyncOperation>オブジェクトはスレッドまたは、アプリケーション モデルの適切なコンテキストで、デリゲートが呼び出されることを確認します。</span><span class="sxs-lookup"><span data-stu-id="2373b-143">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="2373b-144">デリゲートは、非同期タスクの有効期間が終了したことをクライアントに通知イベントを発生させる必要に応じてことができます。</span><span class="sxs-lookup"><span data-stu-id="2373b-144">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="2373b-145">`arg`パラメーターは、完了のデリゲートに状態情報を渡すために使用`d`します。</span><span class="sxs-lookup"><span data-stu-id="2373b-145">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="2373b-146">使用することができます、<xref:System.ComponentModel.AsyncOperation>オブジェクト、または<xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType>パラメーター値としてオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2373b-146">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="2373b-147">または、追加の状態の記憶域を提供する場合から派生したクラスのインスタンスを使用できます、<xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType>クラス。</span><span class="sxs-lookup"><span data-stu-id="2373b-147">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2373b-148">次のコード例に示しますを使用して、<xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>メソッドを非同期操作の有効期間を終了します。</span><span class="sxs-lookup"><span data-stu-id="2373b-148">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="2373b-149">このコード例が示されている例の一部、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>クラス。</span><span class="sxs-lookup"><span data-stu-id="2373b-149">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2373b-150">
            <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> は、このタスクに対して既に呼び出されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-150">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2373b-151">
            <paramref name="d" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-151">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2373b-152">
            <para>継承クラスが行う必要があります、<see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />非同期性を前提としているが、特定のアプリケーション モデルが同期である場合、クラス ライブラリのプロバイダーは、潜在的なスタックを意識する必要はありませんように非同期呼び出しをオーバーフローしています。メソッドは、つまり、実装は、アプリケーション モデルの適切なことを行う必要があります、「有効期間の終了」呼び出しとして解釈する必要があります。たとえば、ASP.NET は未解決の非同期操作のカウントをデクリメントします。これもする必要があります操作状態に移行を完了したようになりましたので、そこに後続の呼び出しは失敗します。非同期クラスの実装の詳細については、次を参照してください。[イベント ベースの非同期パターンを実装する](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)します。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-152">
              <para>Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous. The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model. For instance, ASP.NET will decrement its count of outstanding asynchronous operations. This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2373b-153">コンストラクターに渡された <see cref="T:System.Threading.SynchronizationContext" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-153">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2373b-154">コンストラクターに渡された <see cref="T:System.Threading.SynchronizationContext" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-154">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2373b-155">非同期操作を一意に識別するために使用するオブジェクトを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-155">Gets or sets an object used to uniquely identify an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2373b-156">非同期メソッド呼び出しに渡される状態オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="2373b-156">The state object passed to the asynchronous method invocation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2373b-157">クラスは、複数の非同期メソッドまたは 1 つの非同期メソッドの複数の呼び出しをサポートする場合、クライアントは、イベントを発生させている非同期タスクを決定する方法を必要があります。</span><span class="sxs-lookup"><span data-stu-id="2373b-157">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="2373b-158">`MethodNameAsync`メソッドは、型のパラメーターを受け取る必要があります<xref:System.Object>は、タスク ID として機能します。</span><span class="sxs-lookup"><span data-stu-id="2373b-158">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="2373b-159">呼び出すときにこのタスクの ID を使用する、<xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>メソッドとこれは、非同期操作の特定の呼び出しとクライアントのタスク ID を関連付けます。</span><span class="sxs-lookup"><span data-stu-id="2373b-159">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="2373b-160">このタスクを実装する ID を利用、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2373b-160">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="2373b-161">クライアント コードの一意の値を指定する必要がある、<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="2373b-161">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="2373b-162">一意でないタスク Id、その実装を進行状況とその他のイベントを正しくレポートがあります。</span><span class="sxs-lookup"><span data-stu-id="2373b-162">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="2373b-163">コードを一意でないタスク ID を確認し、発生させる、<xref:System.ArgumentException>いずれかが検出された場合。</span><span class="sxs-lookup"><span data-stu-id="2373b-163">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2373b-164">次のコード例に示しますを使用して<xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A>する非同期操作の有効期間を追跡します。</span><span class="sxs-lookup"><span data-stu-id="2373b-164">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="2373b-165">このコード例が示されている例の一部、<xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType>クラス。</span><span class="sxs-lookup"><span data-stu-id="2373b-165">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
  </Members>
</Type>