<Type Name="StatisticFormula" FullName="System.Web.UI.DataVisualization.Charting.StatisticFormula">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="92d4b2167ff6f21d5cdcc51f71a0fa69fdcc3dbe" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StatisticFormula" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StatisticFormula extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataVisualization.Charting.StatisticFormula" />
  <TypeSignature Language="VB.NET" Value="Public Class StatisticFormula" />
  <TypeSignature Language="C++ CLI" Value="public ref class StatisticFormula" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="3e822-101">統計数式の計算を行います。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e822-101">Calculates statistical formulas.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e822-102">数式は、次のカテゴリに疎分類できます逆のディストリビューションを含む、すべての分布。テストです。基本的な統計式。</span><span class="sxs-lookup"><span data-stu-id="3e822-102">Formulas can be loosely grouped into the following categories: distributions, including inverse distributions; tests; and basic statistical formulas.</span></span> <span data-ttu-id="3e822-103">各グループには、その入力値と戻り値に関する一般的な特性があります。</span><span class="sxs-lookup"><span data-stu-id="3e822-103">Each group has common characteristics with respect to their input and return values.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Anova">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.AnovaResult Anova (double probability, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.AnovaResult Anova(float64 probability, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Anova(System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Anova (probability As Double, inputSeriesNames As String) As AnovaResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::AnovaResult ^ Anova(double probability, System::String ^ inputSeriesNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.AnovaResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="3e822-104">アルファ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-104">Alpha value.</span>
          </span>
          <span data-ttu-id="3e822-105">指定できる入力の範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-105">The acceptable input range is between 0 and 1.</span>
          </span>
        </param>
        <param name="inputSeriesNames">
          <span data-ttu-id="3e822-106">複数の入力系列の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-106">Names of two or more input series.</span>
          </span>
          <span data-ttu-id="3e822-107">各系列はメソッドの呼び出し時に系列コレクション内に存在しており、同じ数のデータ ポイントを含んでいる必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-107">Each series must exist in the series collection at the time of the method call, and have the same number of data points.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-108">ANOVA 式では、複数のデータ グループの平均値の間に統計上大きな差異があるかどうかを明らかにします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-108">The Anova formula determines the existence or absence of a statistically significant difference between the mean values of two or more groups of data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-109">
            <see cref="T:System.Web.UI.DataVisualization.Charting.AnovaResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-109">An <see cref="T:System.Web.UI.DataVisualization.Charting.AnovaResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-110">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-110">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As AnovaResult = Chart1.DataManipulator.Statistics.Anova(.05, "Series1,Series2,Series3")  
```  
  
```csharp  
AnovaResult result = Chart1.DataManipulator.Statistics.Anova(.05, "Series1,Series2,Series3");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaFunction">
      <MemberSignature Language="C#" Value="public double BetaFunction (double m, double n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 BetaFunction(float64 m, float64 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.BetaFunction(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaFunction (m As Double, n As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BetaFunction(double m, double n);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Double" />
        <Parameter Name="n" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="3e822-111">ベータ関数の最初の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-111">First value for the beta function.</span>
          </span>
        </param>
        <param name="n">
          <span data-ttu-id="3e822-112">ベータ関数の 2 番目の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-112">Second value for the beta function.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-113">ベータ関数では、ベータ関数の値を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-113">The beta function calculates the beta function value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-114">ベータ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-114">Beta value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-115">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-115">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.BetaFunction(2.3, 6.2)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.BetaFunction(2.3, 6.2);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Correlation">
      <MemberSignature Language="C#" Value="public double Correlation (string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Correlation(string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Correlation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correlation (firstInputSeriesName As String, secondInputSeriesName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correlation(System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="firstInputSeriesName">
          <span data-ttu-id="3e822-116">最初のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-116">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="3e822-117">2 番目のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-117">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-118">相関式では、2 つの確率変数の間に存在する関係の強さを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-118">The correlation formula shows the strength of the relationship that exists between two random variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-119">2 つのデータ グループ間の関連付け値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-119">Correlation value between the two groups of data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e822-120">メソッドは、入力系列に同じ数のデータ ポイントがない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="3e822-120">The method throws an exception if the input series do not have the same number of data points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e822-121">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-121">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.Correlation("Series1", "Series2")  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.Correlation("Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance">
      <MemberSignature Language="C#" Value="public double Covariance (string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Covariance(string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Covariance(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance (firstInputSeriesName As String, secondInputSeriesName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance(System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="firstInputSeriesName">
          <span data-ttu-id="3e822-122">最初のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-122">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="3e822-123">2 番目のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-123">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-124">共分散式では、2 つの確率変数の間に存在する可能性のある依存関係の度合いを測ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-124">The covariance formula measures the degree of dependence that may exist between two random variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-125">2 つのデータ グループ間の共分散値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-125">Covariance value between the two groups of data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e822-126">メソッドは、入力系列に同じ数のデータ ポイントがない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="3e822-126">The method throws an exception if the input series do not have the same number of data points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e822-127">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-127">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As double = Chart1.DataManipulator.Statistics.Covariance("Series1", "Series2")  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.Covariance("Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FDistribution">
      <MemberSignature Language="C#" Value="public double FDistribution (double value, int firstDegreeOfFreedom, int secondDegreeOfFreedom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 FDistribution(float64 value, int32 firstDegreeOfFreedom, int32 secondDegreeOfFreedom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.FDistribution(System.Double,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDistribution (value As Double, firstDegreeOfFreedom As Integer, secondDegreeOfFreedom As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDistribution(double value, int firstDegreeOfFreedom, int secondDegreeOfFreedom);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="firstDegreeOfFreedom" Type="System.Int32" />
        <Parameter Name="secondDegreeOfFreedom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e822-128">分布を求める F 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-128">The F value for which you want the distribution.</span>
          </span>
        </param>
        <param name="firstDegreeOfFreedom">
          <span data-ttu-id="3e822-129">最初の自由度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-129">First degree of freedom.</span>
          </span>
        </param>
        <param name="secondDegreeOfFreedom">
          <span data-ttu-id="3e822-130">2 番目の自由度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-130">Second degree of freedom.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-131">F 分布式では、F 分布の確率を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-131">The F distribution formula calculates the probability for the F-distribution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-132">F 分布の確率。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-132">Probability for the F distribution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-133">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-133">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As double = Chart1.DataManipulator.Statistics.FDistribution(6.31, 15, 7)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.FDistribution(6.31, 15, 7);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.FTestResult FTest (double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.FTestResult FTest(float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.FTest(System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As FTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::FTestResult ^ FTest(double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.FTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="3e822-134">アルファ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-134">The alpha value.</span>
          </span>
          <span data-ttu-id="3e822-135">指定できる範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-135">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="3e822-136">最初のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-136">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="3e822-137">2 番目のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-137">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-138">F 検定式では、F 分布を使用して 2 サンプル F 検定を実行します。サンプルの分散がそれぞれ異なるかどうかを調べるために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-138">The F-test formula performs a two-sample F-test using F distribution, and is used to see if the samples have different variances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-139">
            <see cref="T:System.Web.UI.DataVisualization.Charting.FTestResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-139">An <see cref="T:System.Web.UI.DataVisualization.Charting.FTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e822-140">メソッドは、入力系列に同じ数のデータ ポイントがない場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="3e822-140">The method throws an exception if the input series do not have the same number of data points.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e822-141">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-141">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As FTestResult = Chart1.DataManipulator.Statistics.FTest(0.05, "Series1", "Series2")  
```  
  
```csharp  
FTestResult result = Chart1.DataManipulator.Statistics.FTest(0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaFunction">
      <MemberSignature Language="C#" Value="public double GammaFunction (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GammaFunction(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.GammaFunction(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaFunction (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaFunction(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e822-142">ガンマ値を求める値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-142">Value for which the gamma value is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-143">ガンマ関数では、ガンマ値を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-143">The gamma function calculates the gamma value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-144">ガンマ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-144">Gamma value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-145">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-145">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.GammaFunction(6.2)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.GammaFunction(6.2);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseFDistribution">
      <MemberSignature Language="C#" Value="public double InverseFDistribution (double probability, int firstDegreeOfFreedom, int secondDegreeOfFreedom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 InverseFDistribution(float64 probability, int32 firstDegreeOfFreedom, int32 secondDegreeOfFreedom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.InverseFDistribution(System.Double,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InverseFDistribution (probability As Double, firstDegreeOfFreedom As Integer, secondDegreeOfFreedom As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double InverseFDistribution(double probability, int firstDegreeOfFreedom, int secondDegreeOfFreedom);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstDegreeOfFreedom" Type="System.Int32" />
        <Parameter Name="secondDegreeOfFreedom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="3e822-146">F 分布の確率。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-146">Probability for the F distribution.</span>
          </span>
          <span data-ttu-id="3e822-147">指定できる範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-147">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstDegreeOfFreedom">
          <span data-ttu-id="3e822-148">最初の自由度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-148">First degree of freedom.</span>
          </span>
        </param>
        <param name="secondDegreeOfFreedom">
          <span data-ttu-id="3e822-149">2 番目の自由度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-149">Second degree of freedom.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-150">逆 F 分布式では、F 累積分布の逆関数の計算を行います。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-150">The inverse F distribution formula calculates the inverse of the F cumulative distribution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-151">F 分布の F 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-151">F value for the F distribution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-152">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-152">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.InverseFDistribution(.05, 15, 30)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.InverseFDistribution(.05, 15, 30);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseNormalDistribution">
      <MemberSignature Language="C#" Value="public double InverseNormalDistribution (double probability);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 InverseNormalDistribution(float64 probability) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.InverseNormalDistribution(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function InverseNormalDistribution (probability As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double InverseNormalDistribution(double probability);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="3e822-153">アルファ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-153">Alpha value.</span>
          </span>
          <span data-ttu-id="3e822-154">指定できる入力の範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-154">The acceptable input range is between 0 and 1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-155">逆正規分布式では、標準正規累積分布の逆関数の計算を行います。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-155">The inverse normal distribution formula calculates the inverse of the standard normal cumulative distribution.</span>
          </span>
          <span data-ttu-id="3e822-156">この分布の平均値は 0 で、標準偏差は 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-156">The distribution has a mean of 0 and a standard deviation of one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-157">正規分布関数の逆関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-157">Inverse of the normal distribution function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-158">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-158">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As double = Chart1.DataManipulator.Statistics.InverseNormalDistribution(.05)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.InverseNormalDistribution(.05);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InverseTDistribution">
      <MemberSignature Language="C#" Value="public double InverseTDistribution (double probability, int degreeOfFreedom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 InverseTDistribution(float64 probability, int32 degreeOfFreedom) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.InverseTDistribution(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InverseTDistribution (probability As Double, degreeOfFreedom As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double InverseTDistribution(double probability, int degreeOfFreedom);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="degreeOfFreedom" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="probability">
          <span data-ttu-id="3e822-159">F 分布の確率。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-159">Probability for the F distribution.</span>
          </span>
          <span data-ttu-id="3e822-160">指定できる範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-160">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="degreeOfFreedom">
          <span data-ttu-id="3e822-161">自由度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-161">Degree of freedom.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-162">逆 *T* 分布式では、確率と自由度の関数として、スチューデント *T* 分布の *T* 値を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-162">The inverse *t*-distribution formula calculates the *t*-value of the Student's *t*-distribution as a function of probability and degrees of freedom.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-163">*T* 分布の逆関数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-163">Inverse of the *t*-distribution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-164">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-164">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
double result = Chart1.DataManipulator.Statistics.InverseTDistribution(.05, 15)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.InverseTDistribution(.05, 15);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mean">
      <MemberSignature Language="C#" Value="public double Mean (string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Mean(string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Mean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mean (inputSeriesName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Mean(System::String ^ inputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputSeriesName">
          <span data-ttu-id="3e822-165">平均値を求めるデータを格納している <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-165">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the data for which the mean value is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-166">平均式では、データ系列に格納されているデータの平均を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-166">The mean formula calculates the average, or mean, of data stored in a data series.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-167">指定された系列のすべてのデータ ポイントの平均値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-167">Mean value of all the data points in the given series.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e822-168">入力系列をという名前が存在しない場合に、<xref:System.Web.UI.DataVisualization.Charting.SeriesCollection>メソッドの呼び出し時、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3e822-168">If named input series does not exist in the <xref:System.Web.UI.DataVisualization.Charting.SeriesCollection> at the time of the method call, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e822-169">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-169">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.Mean("Series1")  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.Mean("Series1");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Median(string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Median(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (inputSeriesName As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Median(System::String ^ inputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputSeriesName">
          <span data-ttu-id="3e822-170">中央値を求めるデータを格納している <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-170">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the data for which the median value is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-171">中央値式では、データ系列に格納されているデータの中央値を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-171">The median formula calculates the median of the data stored in a data series.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-172">指定された系列のすべてのデータ ポイントの中央値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-172">Median of all the data points in the given series.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e822-173">指定された入力系列が存在しない場合、<xref:System.Web.UI.DataVisualization.Charting.SeriesCollection>メソッドの呼び出し時、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="3e822-173">If the named input series does not exist in the <xref:System.Web.UI.DataVisualization.Charting.SeriesCollection> at the time of the method call, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e822-174">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-174">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.Median("Series1")  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.Median("Series1");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalDistribution">
      <MemberSignature Language="C#" Value="public double NormalDistribution (double zValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 NormalDistribution(float64 zValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.NormalDistribution(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormalDistribution (zValue As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormalDistribution(double zValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="zValue">
          <span data-ttu-id="3e822-175">正規分布を求める値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-175">Value for which the normal distribution is required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-176">正規分布式では、標準正規累積分布の値を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-176">The normal distribution formula calculates the value of the standard normal cumulative distribution.</span>
          </span>
          <span data-ttu-id="3e822-177">この分布の平均値は 0 で、標準偏差は 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-177">The distribution has a mean of 0 and a standard deviation of 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-178">標準正規累積分布の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-178">Value of the standard normal cumulative distribution.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-179">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-179">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.NormalDistribution(1.96)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.NormalDistribution(1.96);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TDistribution">
      <MemberSignature Language="C#" Value="public double TDistribution (double value, int degreeOfFreedom, bool oneTail);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 TDistribution(float64 value, int32 degreeOfFreedom, bool oneTail) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.TDistribution(System.Double,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDistribution (value As Double, degreeOfFreedom As Integer, oneTail As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDistribution(double value, int degreeOfFreedom, bool oneTail);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="degreeOfFreedom" Type="System.Int32" />
        <Parameter Name="oneTail" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3e822-180">分布を求める <c>t</c> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-180">
              <c>t</c>-value for which you want the distribution.</span>
          </span>
        </param>
        <param name="degreeOfFreedom">
          <span data-ttu-id="3e822-181">自由度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-181">Degree of freedom</span>
          </span>
        </param>
        <param name="oneTail">
          <span data-ttu-id="3e822-182">
            <see langword="true" /> に設定された場合は片側分布が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-182">If set to <see langword="true" />, one-tailed distribution is used.</span>
          </span>
          <span data-ttu-id="3e822-183">それ以外の場合は両側分布が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-183">Otherwise, two-tailed distribution is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-184">*T* 分布式では、スチューデント *T* 分布の確率を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-184">The *t*-distribution formula calculates the probability for the Student's *t*-distribution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-185">*T* 分布関数の確率。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-185">*t*-distribution function probability.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-186">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-186">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.TDistribution(1.96, 30, true)  
```  
  
```csharp  
double result = Chart1.DataManipulator.Statistics.TDistribution(1.96, 30, true);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTestEqualVariances">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TTestResult TTestEqualVariances (double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.TTestResult TTestEqualVariances(float64 hypothesizedMeanDifference, float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.TTestEqualVariances(System.Double,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTestEqualVariances (hypothesizedMeanDifference As Double, probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As TTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::TTestResult ^ TTestEqualVariances(double hypothesizedMeanDifference, double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesizedMeanDifference" Type="System.Double" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesizedMeanDifference">
          <span data-ttu-id="3e822-187">データ グループの平均値間の仮定される差。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-187">Hypothesized difference between the means of the data groups.</span>
          </span>
        </param>
        <param name="probability">
          <span data-ttu-id="3e822-188">アルファ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-188">Alpha value.</span>
          </span>
          <span data-ttu-id="3e822-189">指定できる範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-189">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="3e822-190">最初のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-190">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="3e822-191">2 番目のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-191">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-192">等分散を仮定した *T* 検定式では、等分散を仮定し、スチューデント *T* 分布を使用して *T* 検定を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-192">The *t*-test with equal variances formula performs a *t*-test using Student's *t*-distribution with equal variances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-193">
            <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-193">A <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-194">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-194">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As TTestResult = Chart1.DataManipulator.Statistics.TTestPaired(0.2, 0.05, "Series1", "Series2")  
```  
  
```csharp  
TTestResult result = Chart1.DataManipulator.Statistics.TTestPaired(0.2, 0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTestPaired">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TTestResult TTestPaired (double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.TTestResult TTestPaired(float64 hypothesizedMeanDifference, float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.TTestPaired(System.Double,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTestPaired (hypothesizedMeanDifference As Double, probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As TTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::TTestResult ^ TTestPaired(double hypothesizedMeanDifference, double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesizedMeanDifference" Type="System.Double" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesizedMeanDifference">
          <span data-ttu-id="3e822-195">データ グループの平均値間の仮定される差。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-195">Hypothesized difference between the means of the data groups.</span>
          </span>
        </param>
        <param name="probability">
          <span data-ttu-id="3e822-196">アルファ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-196">Alpha value.</span>
          </span>
          <span data-ttu-id="3e822-197">指定できる範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-197">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="3e822-198">最初のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-198">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="3e822-199">2 番目のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-199">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-200">対 *T* 検定式では、対をなすサンプルとスチューデント *T* 分布を使用して *T* 検定を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-200">The *t*-test paired formula performs a *t*-test using Student's *t*-distribution with paired samples.</span>
          </span>
          <span data-ttu-id="3e822-201">サンプルでデータが自然な対になっている場合 (サンプルのグループを 2 回テストする場合など) に便利です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-201">This is useful when there is an observed natural pairing in samples (for example, when a sample group is tested twice).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-202">
            <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-202">A <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-203">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-203">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As TTestResult = Chart1.DataManipulator.Statistics.TTestPaired(0.2, 0.05, "Series1", "Series2")  
```  
  
```csharp  
TTestResult result = Chart1.DataManipulator.Statistics.TTestPaired(0.2, 0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTestUnequalVariances">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TTestResult TTestUnequalVariances (double hypothesizedMeanDifference, double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.TTestResult TTestUnequalVariances(float64 hypothesizedMeanDifference, float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.TTestUnequalVariances(System.Double,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTestUnequalVariances (hypothesizedMeanDifference As Double, probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As TTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::TTestResult ^ TTestUnequalVariances(double hypothesizedMeanDifference, double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesizedMeanDifference" Type="System.Double" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesizedMeanDifference">
          <span data-ttu-id="3e822-204">データ グループの平均値間の仮定される差。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-204">Hypothesized difference between the means of the data groups.</span>
          </span>
        </param>
        <param name="probability">
          <span data-ttu-id="3e822-205">アルファ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-205">Alpha value.</span>
          </span>
          <span data-ttu-id="3e822-206">指定できる範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-206">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="3e822-207">最初のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-207">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="3e822-208">2 番目のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-208">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-209">非等分散を仮定した *T* 検定式では、非等分散を仮定し、スチューデント *T* 分布を使用して *T* 検定を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-209">The *t*-test with unequal variances formula performs a *t*-test using Student's *t*-distribution with unequal variances.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-210">
            <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-210">A <see cref="T:System.Web.UI.DataVisualization.Charting.TTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-211">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-211">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As TTestResult = Chart1.DataManipulator.Statistics.TTestUnEqualVariances(0.2, 0.05, "Series1", "Series2")  
```  
  
```csharp  
TTestResult result = Chart1.DataManipulator.Statistics.TTestUnEqualVariances(0.2, 0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variance">
      <MemberSignature Language="C#" Value="public double Variance (string inputSeriesName, bool sampleVariance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Variance(string inputSeriesName, bool sampleVariance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.Variance(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Variance (inputSeriesName As String, sampleVariance As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Variance(System::String ^ inputSeriesName, bool sampleVariance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSeriesName" Type="System.String" />
        <Parameter Name="sampleVariance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inputSeriesName">
          <span data-ttu-id="3e822-212">平均値を求めるデータを格納している <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-212">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the data for which the mean value is required.</span>
          </span>
        </param>
        <param name="sampleVariance">
          <span data-ttu-id="3e822-213">データが母集団のサンプルである場合は <see langword="true" />。データが母集団全体である場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-213">Specify <see langword="true" /> if the data is a sample of a population; and <see langword="false" /> if the data is the entire population.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-214">分散式では、データ グループ内の分散を計算します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-214">The variance formula calculates the variance within a group of data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-215">データ グループ内の分散。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-215">Variance within the group of data.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-216">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-216">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As Double = Chart1.DataManipulator.Statistics.Variance("Series1", false)  
```  
  
```csharp  
TTestResult result = double result = Chart1.DataManipulator.Statistics.Variance("Series1", false);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ZTestResult ZTest (double hypothesizedMeanDifference, double varianceFirstGroup, double varianceSecondGroup, double probability, string firstInputSeriesName, string secondInputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.DataVisualization.Charting.ZTestResult ZTest(float64 hypothesizedMeanDifference, float64 varianceFirstGroup, float64 varianceSecondGroup, float64 probability, string firstInputSeriesName, string secondInputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StatisticFormula.ZTest(System.Double,System.Double,System.Double,System.Double,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (hypothesizedMeanDifference As Double, varianceFirstGroup As Double, varianceSecondGroup As Double, probability As Double, firstInputSeriesName As String, secondInputSeriesName As String) As ZTestResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::DataVisualization::Charting::ZTestResult ^ ZTest(double hypothesizedMeanDifference, double varianceFirstGroup, double varianceSecondGroup, double probability, System::String ^ firstInputSeriesName, System::String ^ secondInputSeriesName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ZTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hypothesizedMeanDifference" Type="System.Double" />
        <Parameter Name="varianceFirstGroup" Type="System.Double" />
        <Parameter Name="varianceSecondGroup" Type="System.Double" />
        <Parameter Name="probability" Type="System.Double" />
        <Parameter Name="firstInputSeriesName" Type="System.String" />
        <Parameter Name="secondInputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hypothesizedMeanDifference">
          <span data-ttu-id="3e822-217">データ グループの平均値間の仮定される差。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-217">Hypothesized difference between the means of the data groups.</span>
          </span>
        </param>
        <param name="varianceFirstGroup">
          <span data-ttu-id="3e822-218">最初のデータ グループ内の分散。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-218">Variance within the first group of data.</span>
          </span>
        </param>
        <param name="varianceSecondGroup">
          <span data-ttu-id="3e822-219">2 番目のデータ グループ内の分散。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-219">Variance within the second group of data.</span>
          </span>
        </param>
        <param name="probability">
          <span data-ttu-id="3e822-220">アルファ値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-220">Alpha value.</span>
          </span>
          <span data-ttu-id="3e822-221">指定できる範囲は 0 ～ 1 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-221">The acceptable range is between 0 and 1.</span>
          </span>
        </param>
        <param name="firstInputSeriesName">
          <span data-ttu-id="3e822-222">最初のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-222">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the first group's data.</span>
          </span>
        </param>
        <param name="secondInputSeriesName">
          <span data-ttu-id="3e822-223">2 番目のグループのデータを格納する <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> オブジェクトの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-223">Name of the <see cref="P:System.Web.UI.DataVisualization.Charting.Chart.Series" /> object that stores the second group's data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e822-224">Z 検定式では、正規分布を使用して Z 検定を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-224">The Z-test formula performs a Z-test using normal distribution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e822-225">
            <see cref="T:System.Web.UI.DataVisualization.Charting.ZTestResult" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e822-225">A <see cref="T:System.Web.UI.DataVisualization.Charting.ZTestResult" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e822-226">次のコードでは、この数式を使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3e822-226">The following code demonstrates how to use this formula.</span></span>  
  
```vb  
Dim result As ZTestResult = Chart1.DataManipulator.Statistics.ZTest(0.2, 2.5, 4.5, 0.05, "Series1", "Series2")  
```  
  
```csharp  
ZTestResult result = Chart1.DataManipulator.Statistics.ZTest(0.2, 2.5, 4.5, 0.05, "Series1", "Series2");  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>