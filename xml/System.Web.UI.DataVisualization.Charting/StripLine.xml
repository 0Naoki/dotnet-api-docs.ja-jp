<Type Name="StripLine" FullName="System.Web.UI.DataVisualization.Charting.StripLine">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="10c4c0c806c3b7a6a39c6a9b8ccb7dcc49d55b6c" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48749509" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StripLine : System.Web.UI.DataVisualization.Charting.ChartElement, System.Web.UI.DataVisualization.Charting.IChartMapArea" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StripLine extends System.Web.UI.DataVisualization.Charting.ChartElement implements class System.Web.UI.DataVisualization.Charting.IChartMapArea" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataVisualization.Charting.StripLine" />
  <TypeSignature Language="VB.NET" Value="Public Class StripLine&#xA;Inherits ChartElement&#xA;Implements IChartMapArea" />
  <TypeSignature Language="C++ CLI" Value="public ref class StripLine : System::Web::UI::DataVisualization::Charting::ChartElement, System::Web::UI::DataVisualization::Charting::IChartMapArea" />
  <TypeSignature Language="F#" Value="type StripLine = class&#xA;    inherit ChartElement&#xA;    interface IChartMapArea" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataVisualization.Charting.ChartElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.DataVisualization.Charting.IChartMapArea</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultProperty("IntervalOffset")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="21732-101">グラフ上の背景の縞模様を表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="21732-101">Represents the strip lines on a chart.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-102">背景の縞模様とは、標準またはカスタムの間隔でグラフの背景に影を付ける水平または垂直の範囲です。</span><span class="sxs-lookup"><span data-stu-id="21732-102">Strip lines, or strips, are horizontal or vertical ranges that shade the background of a chart in regular or custom intervals.</span></span> <span data-ttu-id="21732-103">背景の縞模様を使用できます。</span><span class="sxs-lookup"><span data-stu-id="21732-103">You can use strip lines to:</span></span>  
  
-   <span data-ttu-id="21732-104">グラフ上の個々 の値を検索するためには、読みやすさを向上します。</span><span class="sxs-lookup"><span data-stu-id="21732-104">Improve readability for looking up individual values on the chart.</span></span>  
  
-   <span data-ttu-id="21732-105">グラフの読み取り時に、データ ポイントを区切ります。</span><span class="sxs-lookup"><span data-stu-id="21732-105">Separate data points when reading the chart.</span></span>  
  
-   <span data-ttu-id="21732-106">一定の間隔で発生した日付を強調表示、たとえば、週末のデータを識別するために参照します。</span><span class="sxs-lookup"><span data-stu-id="21732-106">Highlight dates that occur at regular intervals, for example, to identify weekend data points.</span></span>  
  
-   <span data-ttu-id="21732-107">データの特定のキー範囲を強調表示します。</span><span class="sxs-lookup"><span data-stu-id="21732-107">Highlight a specific key range of data.</span></span>  
  
-   <span data-ttu-id="21732-108">特定の定数値にしきい値を表す線を追加します。</span><span class="sxs-lookup"><span data-stu-id="21732-108">Add a threshold line at a specific constant value.</span></span>  
  
 <span data-ttu-id="21732-109">1 つ<xref:System.Web.UI.DataVisualization.Charting.StripLine>オブジェクトのいずれかに描画できる、1 回または繰り返し間隔を指定します。</span><span class="sxs-lookup"><span data-stu-id="21732-109">A single <xref:System.Web.UI.DataVisualization.Charting.StripLine> object can either be drawn once, or repeatedly, for a given interval.</span></span> <span data-ttu-id="21732-110">このアクションはによって制御されます、<xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-110">This action is controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property.</span></span> <span data-ttu-id="21732-111">-1 という値が割り当てられるとき、<xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>プロパティ、1 つのストリップ ラインが描画されます。</span><span class="sxs-lookup"><span data-stu-id="21732-111">When a value of -1 is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, one strip line will be drawn.</span></span> <span data-ttu-id="21732-112">0 以外の値が割り当てられるとき、<xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>プロパティ、背景の縞模様が指定された間隔で繰り返し描画します。</span><span class="sxs-lookup"><span data-stu-id="21732-112">When a non-zero value is assigned to the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property, a strip line will be drawn repeatedly at each given interval.</span></span> <span data-ttu-id="21732-113">ストリップ ラインを描画する場所がによっても影響を受ける、<xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>と<xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A>背景の縞模様のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-113">The location where a strip line is drawn is also affected by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> properties of the strip line.</span></span>  
  
 <span data-ttu-id="21732-114">背景の縞模様の関連付けは常に、<xref:System.Web.UI.DataVisualization.Charting.Axis>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="21732-114">Strip lines are always associated with an <xref:System.Web.UI.DataVisualization.Charting.Axis> object.</span></span> <span data-ttu-id="21732-115">デザイン時と実行時の両方で追加できます。</span><span class="sxs-lookup"><span data-stu-id="21732-115">They can be added at both design time and run time.</span></span>  
  
 <span data-ttu-id="21732-116">しきい値を表示する水平または垂直の行を追加するには、設定、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティ 0.0 の値。</span><span class="sxs-lookup"><span data-stu-id="21732-116">To add a horizontal or vertical line to display a threshold, set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to a value of 0.0.</span></span> <span data-ttu-id="21732-117">描画されている行が発生します。</span><span class="sxs-lookup"><span data-stu-id="21732-117">This will result in a line being drawn.</span></span> <span data-ttu-id="21732-118">使用することができます、 <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>と<xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>の色、幅、および線のスタイル プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-118">You can use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties for the color, width and style of the line.</span></span> <span data-ttu-id="21732-119">グラフの背景のプロパティはありません (`Back*`) ときに使用されて、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティが 0.0 に設定します。</span><span class="sxs-lookup"><span data-stu-id="21732-119">No chart background properties (`Back*`) are used when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0.</span></span>  
  
 <span data-ttu-id="21732-120">使用して、<xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A>に関連付ける背景の縞模様のテキスト背景の縞模様のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-120">Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Text%2A> property of the strip line to associate text with a strip line.</span></span> <span data-ttu-id="21732-121">このテキストの向き、配置を使用して制御できる、<xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-121">The placement and orientation of this text can be controlled by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment%2A> property.</span></span>  
  
 <span data-ttu-id="21732-122">同じ軸には、複数の背景の縞模様が定義されている、背景の縞模様が重複していることになります。</span><span class="sxs-lookup"><span data-stu-id="21732-122">When multiple strip lines are defined for the same axis, it is possible that the strip lines will overlap.</span></span> <span data-ttu-id="21732-123">Z オーダー<xref:System.Web.UI.DataVisualization.Charting.StripLine>オブジェクトが内に見つかった位置の順序によって決まり、<xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="21732-123">The Z-order of <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects is determined by their order of occurrence in the <xref:System.Web.UI.DataVisualization.Charting.StripLinesCollection> object.</span></span> <span data-ttu-id="21732-124">つまり、最初に見つかったが最初に描画されます。2 つ目の 2 番目に出現が描画されます。</span><span class="sxs-lookup"><span data-stu-id="21732-124">This means that the first occurrence is drawn first; the second occurrence is drawn second, and so on.</span></span>  
  
 <span data-ttu-id="21732-125">次のグラフの種類の背景の縞模様はサポートされていません。 円、ドーナツ グラフ、じょうごグラフ、ピラミッド、かぎ足、ThreeLineBreak、PointAndFigure、極座標、レーダー チャート。</span><span class="sxs-lookup"><span data-stu-id="21732-125">Strip lines are not supported for the following chart types: Pie, Doughnut, Funnel, Pyramid, Kagi, ThreeLineBreak, PointAndFigure, Polar and Radar.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21732-126">次のコード例では、背景の縞模様の 3 つのアプリケーションを示します。</span><span class="sxs-lookup"><span data-stu-id="21732-126">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="21732-127">まず、水平方向のストリップ ラインは、一定の間隔で追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-127">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="21732-128">第 2 に、垂直方向のストリップ ラインを追加するには、ポイントには、週末のデータを強調表示されます。</span><span class="sxs-lookup"><span data-stu-id="21732-128">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="21732-129">最後に、非循環のストリップ ラインは、グラフの最初の系列のデータ ポイントの平均を示すために追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-129">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ' Adds a week of data with values between 20 and 35.   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ' Adds repeating horizontal strip lines at intervals of 5.   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()  
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ' Adds strip lines to highlight weekend values.   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ' Adds a horizontal threshold strip line at the mean value of the first series.  
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StripLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StripLine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StripLine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="21732-130">
            <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-130">Initializes a new instance of the <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-131">背景の縞模様の背景色を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-131">Gets or sets the background color of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-132">
            <see cref="T:System.Drawing.Color" /> 構造。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-132">A <see cref="T:System.Drawing.Color" /> structure.</span>
          </span>
          <span data-ttu-id="21732-133">既定の色は <see cref="P:System.Drawing.Color.White" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-133">The default color is <see cref="P:System.Drawing.Color.White" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-134">ARGB (アルファ、赤、緑、青) の有効な値には、このプロパティを設定することができます。</span><span class="sxs-lookup"><span data-stu-id="21732-134">You can set this property to any valid ARGB (alpha, red, green, blue) value.</span></span>  
  
 <span data-ttu-id="21732-135">背景の縞模様のグラデーションを設定するには、設定、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>と<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-135">To set a gradient for the strip line, set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties.</span></span>  
  
 <span data-ttu-id="21732-136">この色を"transparent"に設定した場合、つまり、アルファ値を 0 に設定-要素の背景色は割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="21732-136">If you set this color to "transparent"—in other words, set the alpha value to 0—no color will be assigned to the background of the element.</span></span> <span data-ttu-id="21732-137">その結果、背景が透明になります。</span><span class="sxs-lookup"><span data-stu-id="21732-137">As a result, the background will be transparent.</span></span>  
  
 <span data-ttu-id="21732-138">場合、 <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> 0.0 に設定されて、線が描画されると、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>プロパティには、このプロパティではなく、行の色が決まります。</span><span class="sxs-lookup"><span data-stu-id="21732-138">If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to 0.0, a line will be drawn and the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A> property will determine the color of the line, not this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21732-139">次のコード例では、背景の縞模様の 3 つのアプリケーションを示します。</span><span class="sxs-lookup"><span data-stu-id="21732-139">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="21732-140">まず、水平方向のストリップ ラインは、一定の間隔で追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-140">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="21732-141">第 2 に、垂直方向のストリップ ラインを追加するには、ポイントには、週末のデータを強調表示されます。</span><span class="sxs-lookup"><span data-stu-id="21732-141">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="21732-142">最後に、非循環のストリップ ラインは、グラフの最初の系列のデータ ポイントの平均を示すために追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-142">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackGradientStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.GradientStyle BackGradientStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BackGradientStyle As GradientStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::GradientStyle BackGradientStyle { System::Web::UI::DataVisualization::Charting::GradientStyle get(); void set(System::Web::UI::DataVisualization::Charting::GradientStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BackGradientStyle : System.Web.UI.DataVisualization.Charting.GradientStyle with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.GradientEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.GradientEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.GradientStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-143">背景の縞模様のグラデーション スタイルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-143">Gets or sets the gradient style of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-144">
            <see cref="T:System.Web.UI.DataVisualization.Charting.GradientStyle" /> 列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-144">A <see cref="T:System.Web.UI.DataVisualization.Charting.GradientStyle" /> enumeration.</span>
          </span>
          <span data-ttu-id="21732-145">既定値は <see cref="F:System.Web.UI.DataVisualization.Charting.GradientStyle.None" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-145">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.GradientStyle.None" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-146"><xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>プロパティを決定するかどうかグラフ要素が表示されます、グラデーションの方向と同様にグラデーションを使用する場合。</span><span class="sxs-lookup"><span data-stu-id="21732-146">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property determines whether a chart element will display a gradient, as well as the orientation of the gradient, if used.</span></span>  
  
 <span data-ttu-id="21732-147">グラデーションの色を使用するには。</span><span class="sxs-lookup"><span data-stu-id="21732-147">To use gradient colors:</span></span>  
  
-   <span data-ttu-id="21732-148">使用して、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>プライマリ カラーを設定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-148">Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.</span></span>  
  
-   <span data-ttu-id="21732-149">使用して、 <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> 2 番目の色を設定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-149">Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color.</span></span>  
  
-   <span data-ttu-id="21732-150">この設定<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>目的のグラデーション スタイルをグラフ要素のプロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-150">Set this <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property of the chart element to the desired gradient style.</span></span>  
  
 <span data-ttu-id="21732-151">このプロパティに適用可能でない場合、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティが 0.0 の値に設定します。</span><span class="sxs-lookup"><span data-stu-id="21732-151">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackHatchStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartHatchStyle BackHatchStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BackHatchStyle As ChartHatchStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::ChartHatchStyle BackHatchStyle { System::Web::UI::DataVisualization::Charting::ChartHatchStyle get(); void set(System::Web::UI::DataVisualization::Charting::ChartHatchStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BackHatchStyle : System.Web.UI.DataVisualization.Charting.ChartHatchStyle with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackHatchStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.HatchStyleEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.HatchStyleEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartHatchStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-152">背景の縞模様のハッチング スタイルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-152">Gets or sets the hatching style of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-153">
            <see cref="T:System.Web.UI.DataVisualization.Charting.ChartHatchStyle" /> 列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-153">A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartHatchStyle" /> enumeration.</span>
          </span>
          <span data-ttu-id="21732-154">既定値は <see cref="F:System.Web.UI.DataVisualization.Charting.ChartHatchStyle.None" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-154">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.ChartHatchStyle.None" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-155">ハッチ パターンは、単色の背景色と背景の上に描画された直線で構成されます。</span><span class="sxs-lookup"><span data-stu-id="21732-155">The hatch pattern consists of a solid background color and lines drawn over the background.</span></span> <span data-ttu-id="21732-156">陰影のスタイルで使用する 2 つの色がによって設定された、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>と<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-156">The two colors used in the hatch style are set by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> properties.</span></span> <span data-ttu-id="21732-157">このプロパティに適用可能でない場合、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティが 0.0 の値に設定します。</span><span class="sxs-lookup"><span data-stu-id="21732-157">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImage">
      <MemberSignature Language="C#" Value="public string BackImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackImage" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BackImage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackImage : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ImageValueEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ImageValueEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-158">背景の縞模様の背景イメージを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-158">Gets or sets the background image of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-159">イメージ ファイルの URL を表す <see langword="string" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-159">A <see langword="string" /> value that represents an image file URL.</span>
          </span>
          <span data-ttu-id="21732-160">既定値は空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-160">The default is an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-161"><xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImage%2A>プロパティの多くのグラフ要素の背景イメージ パスが定義され、絶対または相対 URL。</span><span class="sxs-lookup"><span data-stu-id="21732-161">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImage%2A> property defines a path to a background image for many chart elements, and is an absolute or relative URL.</span></span>  
  
 <span data-ttu-id="21732-162">このイメージを配置するには、使用、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>と<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-162">To position this image, use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> properties.</span></span>  
  
 <span data-ttu-id="21732-163">1 つの色が「透過」としてイメージを設定して表示されることを指定することも、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-163">You can also specify that one color will be displayed by the image as "transparent" by setting the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> property.</span></span>  
  
 <span data-ttu-id="21732-164">イメージは、アイコンを含む、.NET Framework でサポートされている任意の有効なグラフィックス ファイルを指定できます。</span><span class="sxs-lookup"><span data-stu-id="21732-164">An image can be any valid graphics file supported by .NET Framework, including icons.</span></span>  
  
 <span data-ttu-id="21732-165">このプロパティに適用可能でない場合、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティが 0.0 の値に設定します。</span><span class="sxs-lookup"><span data-stu-id="21732-165">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 <span data-ttu-id="21732-166">背景イメージは、グラデーションの色など、他のバック グラウンド プロパティよりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="21732-166">Background images take precedence over other background properties, such as gradient colors.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageAlignment">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageAlignment As ChartImageAlignmentStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::ChartImageAlignmentStyle BackImageAlignment { System::Web::UI::DataVisualization::Charting::ChartImageAlignmentStyle get(); void set(System::Web::UI::DataVisualization::Charting::ChartImageAlignmentStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BackImageAlignment : System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-167">背景イメージの配置を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-167">Gets or sets the background image alignment.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-168">
            <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle" /> 列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-168">A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle" /> enumeration value.</span>
          </span>
          <span data-ttu-id="21732-169">既定値は <see cref="F:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-169">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-170">このプロパティは、縞模様の背景イメージの配置を決定します。適用されている場合にのみ、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>プロパティに設定されて<xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Unscaled>します。</span><span class="sxs-lookup"><span data-stu-id="21732-170">This property determines the alignment of the background image for strip lines; it is only applied when the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Unscaled>.</span></span>  
  
 <span data-ttu-id="21732-171">使用可能な配置の詳細については、次を参照してください。、<xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle>トピックを列挙します。</span><span class="sxs-lookup"><span data-stu-id="21732-171">For more information about available alignments, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageAlignmentStyle> enumeration topic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageTransparentColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackImageTransparentColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackImageTransparentColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageTransparentColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackImageTransparentColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackImageTransparentColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackImageTransparentColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-172">透明色として実装される背景の縞模様の背景イメージの色を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-172">Gets or sets the color of a strip line background image that will be implemented as transparent.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-173">透明色として表示される <see cref="T:System.Drawing.Color" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-173">A <see cref="T:System.Drawing.Color" /> value that will be displayed as transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-174">このプロパティに適用可能でない場合、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティが 0.0 の値に設定します。</span><span class="sxs-lookup"><span data-stu-id="21732-174">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageWrapMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode" />
      <MemberSignature Language="VB.NET" Value="Public Property BackImageWrapMode As ChartImageWrapMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::ChartImageWrapMode BackImageWrapMode { System::Web::UI::DataVisualization::Charting::ChartImageWrapMode get(); void set(System::Web::UI::DataVisualization::Charting::ChartImageWrapMode value); };" />
      <MemberSignature Language="F#" Value="member this.BackImageWrapMode : System.Web.UI.DataVisualization.Charting.ChartImageWrapMode with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartImageWrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-175">背景の縞模様の背景イメージの描画モードを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-175">Gets or sets the drawing mode of the background image of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-176">
            <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode" /> 整数列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-176">A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode" /> integer enumeration.</span>
          </span>
          <span data-ttu-id="21732-177">既定値は、<see cref="F:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Tile" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-177">The default is <see cref="F:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Tile" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-178">このプロパティは、イメージの表示方法を決定します。つまり、並べて表示したり、拡大または縮小などです。</span><span class="sxs-lookup"><span data-stu-id="21732-178">This property determines how the image is displayed; that is, tiled, scaled, and so forth.</span></span>  
  
 <span data-ttu-id="21732-179">イメージがスケールされた場合は、境界の背景の縞模様に収まるように伸縮されます。</span><span class="sxs-lookup"><span data-stu-id="21732-179">If an image is scaled, it will be stretched to fit within the bounding strip line.</span></span> <span data-ttu-id="21732-180">イメージを並べて表示するが繰り返し描画、左上隅から開始します。</span><span class="sxs-lookup"><span data-stu-id="21732-180">If the image is tiled, it is repeatedly drawn, starting from the top-left corner.</span></span>  
  
 <span data-ttu-id="21732-181">詳細については、使用可能なラップ モードを参照してください、<xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode>列挙トピック。</span><span class="sxs-lookup"><span data-stu-id="21732-181">For more information concerning the available wrapping modes, see the <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode> enumeration topic.</span></span>  
  
 <span data-ttu-id="21732-182">場合、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A>プロパティに設定されて<xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Unscaled>、イメージを描画する場所によって決定されます、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A>プロパティの設定。</span><span class="sxs-lookup"><span data-stu-id="21732-182">If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> property is set to <xref:System.Web.UI.DataVisualization.Charting.ChartImageWrapMode.Unscaled>, the location where the image is drawn will be determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackImageAlignment%2A> property setting.</span></span>  
  
 <span data-ttu-id="21732-183">このプロパティに適用可能でない場合は<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>値 0.0 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="21732-183">This property is not applicable if <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackSecondaryColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackSecondaryColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackSecondaryColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackSecondaryColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackSecondaryColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackSecondaryColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-184">背景の縞模様の背景の 2 番目の色を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-184">Gets or sets the secondary color of the strip line background.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-185">ハッチングまたはグラデーションの塗りが適用される背景の 2 番目の色に使用される <see cref="T:System.Drawing.Color" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-185">A <see cref="T:System.Drawing.Color" /> value used for the secondary color of a background with hatching or gradient fill.</span>
          </span>
          <span data-ttu-id="21732-186">既定の色は <see cref="F:System.Drawing.Color.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-186">The default color is <see cref="F:System.Drawing.Color.Empty" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-187">このプロパティは、多くのグラフ オブジェクトの第 2 背景色を決定し、グラデーションの色を適用しているときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="21732-187">This property determines the secondary background color of many chart objects, and is used when gradient colors are being applied.</span></span>  
  
 <span data-ttu-id="21732-188">ARGB (アルファ、赤、緑、青) の有効な値には、2 番目の背景色を設定できます。</span><span class="sxs-lookup"><span data-stu-id="21732-188">You can set background secondary color to any valid ARGB (alpha, red, green, blue) value.</span></span>  
  
 <span data-ttu-id="21732-189">陰影を使用する場合、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A>プロパティ陰影線の色を決定します。</span><span class="sxs-lookup"><span data-stu-id="21732-189">If hatching is used, the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property determines the color of the hatching lines.</span></span>  
  
 <span data-ttu-id="21732-190">グラフ要素の背景のグラデーションの色を使用。</span><span class="sxs-lookup"><span data-stu-id="21732-190">To use gradient colors for the background of a chart element:</span></span>  
  
-   <span data-ttu-id="21732-191">使用して、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>プライマリ カラーを設定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-191">Use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property to set the primary color.</span></span>  
  
-   <span data-ttu-id="21732-192">これを使用して、 <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> 2 番目の色を設定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-192">Use this <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> property to set the secondary color.</span></span>  
  
-   <span data-ttu-id="21732-193">設定、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A>に目的のグラデーションのスタイル プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-193">Set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackGradientStyle%2A> property to the desired gradient style.</span></span>  
  
 <span data-ttu-id="21732-194">このプロパティに適用可能でない場合、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティが 0.0 の値に設定します。</span><span class="sxs-lookup"><span data-stu-id="21732-194">This property is not applicable if the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is set to a value of 0.0.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BorderColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BorderColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BorderColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-195">背景の縞模様の境界線の色を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-195">Gets or sets the border color of a strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-196">
            <see cref="T:System.Drawing.Color" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-196">A <see cref="T:System.Drawing.Color" /> value.</span>
          </span>
          <span data-ttu-id="21732-197">既定の色は <see cref="F:System.Drawing.Color.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-197">The default color is <see cref="F:System.Drawing.Color.Empty" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-198">ARGB (アルファ、赤、緑、青) の有効な値には、このプロパティを設定することができます。</span><span class="sxs-lookup"><span data-stu-id="21732-198">You can set this property to any valid ARGB (alpha, red, green, blue) value.</span></span>  
  
 <span data-ttu-id="21732-199">場合、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>のプロパティを<xref:System.Web.UI.DataVisualization.Charting.StripLine>オブジェクトが 0.0 に設定されている、線が描画されると、およびこのプロパティではなく、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A>プロパティを設定するには、線の色が決まります。</span><span class="sxs-lookup"><span data-stu-id="21732-199">If the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property of a <xref:System.Web.UI.DataVisualization.Charting.StripLine> object is set to 0.0, a line will be drawn, and it is this property and not the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BackColor%2A> property setting that will determine the color of the line.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderDashStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.ChartDashStyle BorderDashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderDashStyle As ChartDashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::ChartDashStyle BorderDashStyle { System::Web::UI::DataVisualization::Charting::ChartDashStyle get(); void set(System::Web::UI::DataVisualization::Charting::ChartDashStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderDashStyle : System.Web.UI.DataVisualization.Charting.ChartDashStyle with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-200">背景の縞模様の境界線スタイルを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-200">Gets or sets the border style of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-201">背景の縞模様の境界線スタイルを決定する <see cref="T:System.Web.UI.DataVisualization.Charting.ChartDashStyle" /> 列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-201">A <see cref="T:System.Web.UI.DataVisualization.Charting.ChartDashStyle" /> enumeration value that determines the border style of the strip line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-202">このプロパティは、境界に使用する線のスタイルを指定します。</span><span class="sxs-lookup"><span data-stu-id="21732-202">This property specifies the line style used for a border.</span></span> <span data-ttu-id="21732-203">線には、solid、点線またはいくつかのバリエーションをピリオドで区切られたのです。</span><span class="sxs-lookup"><span data-stu-id="21732-203">The line can be solid, dotted or some variation of solid and dotted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderWidth">
      <MemberSignature Language="C#" Value="public int BorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BorderWidth" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BorderWidth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BorderWidth : int with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-204">背景の縞模様の境界線の幅を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-204">Gets or sets the border width of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-205">背景の縞模様の境界線の幅 (ピクセル単位) を決定する <see langword="integer" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-205">An <see langword="integer" /> value that determines the width of the strip line's border, in pixels.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-206">このプロパティは、ピクセル単位で測定されます。</span><span class="sxs-lookup"><span data-stu-id="21732-206">This property is measured in pixels.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataVisualization.Charting.StripLine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="stripLine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="21732-207">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="True" />。アンマネージド リソースだけを解放する場合は <see langword="False" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-207">
              <see langword="True" /> to release both managed and unmanaged resources; <see langword="False" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21732-208">
            <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-208">Releases the unmanaged resources used by the <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Font" />
      <MemberSignature Language="VB.NET" Value="Public Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Font), "Microsoft Sans Serif, 8pt")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-209">背景の縞模様のテキストに使用されるフォントを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-209">Gets or sets the font used for the strip line text.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-210">背景の縞模様のテキストのフォントを表す <see cref="T:System.Drawing.Font" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-210">A <see cref="T:System.Drawing.Font" /> value that represents the font of the strip line text.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-211">背景の縞模様のテキストの色を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-211">Gets or sets the color of the strip line text.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-212">背景の縞模様のテキストの色を表す <see cref="T:System.Drawing.Color" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-212">A <see cref="T:System.Drawing.Color" /> value that represents the text color of a strip line.</span>
          </span>
          <span data-ttu-id="21732-213">既定値は <see cref="P:System.Drawing.Color.Black" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-213">The default value is <see cref="P:System.Drawing.Color.Black" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-214">このプロパティの有効な任意 ARGB 色を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="21732-214">You can specify any valid ARGB color for this property.</span></span> <span data-ttu-id="21732-215">このプロパティは、背景の縞模様のテキスト値を指定した場合にのみ適用。</span><span class="sxs-lookup"><span data-stu-id="21732-215">This property is only applicable when a text value is specified for the strip line.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : double with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-216">背景の縞模様の間隔を取得または設定します。また、背景の縞模様を 1 回だけ描画するか、連続的に描画するかを決定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-216">Gets or sets the interval for a strip line, and determines if the strip line is drawn once or repeatedly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-217">背景の縞模様の間の間隔を表す <see langword="double" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-217">A <see langword="double" /> value that represents the interval between strip lines.</span>
          </span>
          <span data-ttu-id="21732-218">既定値は 0.0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-218">The default value is 0.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-219">設定すると、<xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>で指定された幅とプロパティを 0 (0.0)、1 つのストリップ ラインの値も表示されますが、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-219">When you set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property to a value of zero (0.0), one strip line will be displayed, with a width specified by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property.</span></span> <span data-ttu-id="21732-220">設定すると<xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>のゼロ以外の値に複数の背景の縞模様が表示されます。</span><span class="sxs-lookup"><span data-stu-id="21732-220">When you set <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> to a value of other than zero, multiple strip lines will be shown.</span></span> <span data-ttu-id="21732-221">使用される単位、<xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>によってプロパティが定義されている、<xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-221">The unit that is used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property is defined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21732-222">次のコード例では、背景の縞模様の 3 つのアプリケーションを示します。</span><span class="sxs-lookup"><span data-stu-id="21732-222">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="21732-223">まず、水平方向のストリップ ラインは、一定の間隔で追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-223">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="21732-224">第 2 に、垂直方向のストリップ ラインを追加するには、ポイントには、週末のデータを強調表示されます。</span><span class="sxs-lookup"><span data-stu-id="21732-224">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="21732-225">最後に、非循環のストリップ ラインは、グラフの最初の系列のデータ ポイントの平均を示すために追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-225">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffset">
      <MemberSignature Language="C#" Value="public double IntervalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 IntervalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double IntervalOffset { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffset : double with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataVisualization.Charting.AxisLabelDateValueConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-226">グリッド線、目盛り、背景の縞模様、および軸ラベルのオフセットを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-226">Gets or sets the offset of grid lines, tick marks, strip lines and axis labels.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-227">間隔のオフセットを表す <see langword="double" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-227">A <see langword="double" /> value that represents the interval offset.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-228">補助目盛りとグリッド線の間隔のオフセットの値によって影響を受けることはありません、<xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A>のプロパティ、<xref:System.Web.UI.DataVisualization.Charting.Axis>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="21732-228">The interval offset of minor tick marks and grid lines is never affected by the value of the <xref:System.Web.UI.DataVisualization.Charting.Axis.IntervalOffset%2A> property of the <xref:System.Web.UI.DataVisualization.Charting.Axis> object.</span></span>  
  
 <span data-ttu-id="21732-229"><xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A>プロパティの設定は、オフセットの測定単位を定義します。</span><span class="sxs-lookup"><span data-stu-id="21732-229">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffset%2A> property setting defines the units of measurement of the offset.</span></span>  
  
 <span data-ttu-id="21732-230"><xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>負の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="21732-230">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> can be a negative value.</span></span>  
  
 <span data-ttu-id="21732-231">既定値は`Auto`(`0`)。</span><span class="sxs-lookup"><span data-stu-id="21732-231">The default value is `Auto` (`0`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21732-232">次のコード例では、背景の縞模様の 3 つのアプリケーションを示します。</span><span class="sxs-lookup"><span data-stu-id="21732-232">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="21732-233">まず、水平方向のストリップ ラインは、一定の間隔で追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-233">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="21732-234">第 2 に、垂直方向のストリップ ラインを追加するには、ポイントには、週末のデータを強調表示されます。</span><span class="sxs-lookup"><span data-stu-id="21732-234">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="21732-235">最後に、非循環のストリップ ラインは、グラフの最初の系列のデータ ポイントの平均を示すために追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-235">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffsetType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffsetType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::DateTimeIntervalType IntervalOffsetType { System::Web::UI::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Web::UI::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalOffsetType : System.Web.UI.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.IntervalOffsetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-236">背景の縞模様の間隔のオフセットの種類を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-236">Gets or sets the interval offset type of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-237">間隔の種類を示す <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> 列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-237">A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type.</span>
          </span>
          <span data-ttu-id="21732-238">既定値は <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-238">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-239">既定では、このプロパティに設定<xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>; このプロパティの実際の値が続く、<xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-239">By default, this property is set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>; the actual value of this property is determined by the <xref:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21732-240">次のコード例では、背景の縞模様の 3 つのアプリケーションを示します。</span><span class="sxs-lookup"><span data-stu-id="21732-240">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="21732-241">まず、水平方向のストリップ ラインは、一定の間隔で追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-241">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="21732-242">第 2 に、垂直方向のストリップ ラインを追加するには、ポイントには、週末のデータを強調表示されます。</span><span class="sxs-lookup"><span data-stu-id="21732-242">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="21732-243">最後に、非循環のストリップ ラインは、グラフの最初の系列のデータ ポイントの平均を示すために追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-243">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType IntervalType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.IntervalType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::DateTimeIntervalType IntervalType { System::Web::UI::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Web::UI::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.IntervalType : System.Web.UI.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.IntervalType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-244">
            <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> オブジェクトの間隔の種類を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-244">Gets or sets the interval type of a <see cref="T:System.Web.UI.DataVisualization.Charting.StripLine" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-245">間隔の種類を示す <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> 列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-245">A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the interval type.</span>
          </span>
          <span data-ttu-id="21732-246">既定値は <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-246">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-247">間隔の種類に設定することができます<xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>、この場合、種類によって異なります。 プロットの X 値または Y 値の型<xref:System.Web.UI.DataVisualization.Charting.DataPoint>オブジェクト-軸によって、<xref:System.Web.UI.DataVisualization.Charting.StripLine>にオブジェクトが属している- と軸のスケール。</span><span class="sxs-lookup"><span data-stu-id="21732-247">Interval types can be set to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>, in which case the type depends on: the X-value or Y-value types of the plotted <xref:System.Web.UI.DataVisualization.Charting.DataPoint> objects—depending on which axis the <xref:System.Web.UI.DataVisualization.Charting.StripLine> objects belong to—and the axis scale.</span></span>  
  
 <span data-ttu-id="21732-248"><xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A>プロパティは、ストリップまたは線の描画頻度を決定します。</span><span class="sxs-lookup"><span data-stu-id="21732-248">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.Interval%2A> property determines how often a strip or line is drawn.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21732-249">次のコード例では、背景の縞模様の 3 つのアプリケーションを示します。</span><span class="sxs-lookup"><span data-stu-id="21732-249">The following code example demonstrates three applications of strip lines.</span></span> <span data-ttu-id="21732-250">まず、水平方向のストリップ ラインは、一定の間隔で追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-250">First, horizontal strip lines are added at recurring intervals.</span></span> <span data-ttu-id="21732-251">第 2 に、垂直方向のストリップ ラインを追加するには、ポイントには、週末のデータを強調表示されます。</span><span class="sxs-lookup"><span data-stu-id="21732-251">Second, vertical strip lines are added to highlight weekend data points.</span></span> <span data-ttu-id="21732-252">最後に、非循環のストリップ ラインは、グラフの最初の系列のデータ ポイントの平均を示すために追加されます。</span><span class="sxs-lookup"><span data-stu-id="21732-252">Lastly, a non-recurring strip line is added to denote the mean of the data points in the first series of the chart.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds repeating horizontal strip lines.   
        AddHorizRepeatingStripLines()   
  
        ' Highlights weekend points using strip lines.   
        HighlightWeekendsWithStripLines()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds repeating horizontal strip lines at intervals of 5.   
    ''' </summary>   
    Private Sub AddHorizRepeatingStripLines()   
        ' Instantiate new strip line   
        Dim stripLine1 As New StripLine()   
        stripLine1.StripWidth = 2.5   
        stripLine1.Interval = 5   
  
        ' Consider adding transparency so that the strip lines are lighter   
        stripLine1.BackColor = Color.FromArgb(120, Color.Red)   
  
        ' Add the strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine1)   
    End Sub   
  
    ''' <summary>   
    ''' Adds strip lines to highlight weekend values.   
    ''' </summary>   
    Private Sub HighlightWeekendsWithStripLines()   
        ' Set strip line to highlight weekends   
        Dim stripLine2 As New StripLine()   
        stripLine2.BackColor = Color.FromArgb(120, Color.Gold)   
        stripLine2.IntervalOffset = -1.5   
        stripLine2.IntervalOffsetType = DateTimeIntervalType.Days   
        stripLine2.Interval = 1   
        stripLine2.IntervalType = DateTimeIntervalType.Weeks   
        stripLine2.StripWidth = 2   
        stripLine2.StripWidthType = DateTimeIntervalType.Days   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisX.StripLines.Add(stripLine2)   
  
        ' Set the axis label to show the name of the day   
        ' This is done in order to demonstrate that weekends are highlighted   
        chart1.ChartAreas(0).AxisX.LabelStyle.Format = "ddd"   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds repeating horizontal strip lines.  
            AddHorizRepeatingStripLines();  
  
            // Highlights weekend points using strip lines.  
            HighlightWeekendsWithStripLines();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds repeating horizontal strip lines at intervals of 5.  
        /// </summary>  
        private void AddHorizRepeatingStripLines()  
        {  
            // Instantiate new strip line  
            StripLine stripLine1 = new StripLine();  
            stripLine1.StripWidth = 0;  
            stripLine1.BorderColor = Color.Black;  
            stripLine1.BorderWidth = 3;  
            stripLine1.Interval = 5;  
  
            // Consider adding transparency so that the strip lines are lighter  
            stripLine1.BackColor = Color.FromArgb(120, Color.Red);  
  
            stripLine1.BackSecondaryColor = Color.Black;  
            stripLine1.BackGradientStyle = GradientStyle.LeftRight;  
  
            // Add the strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine1);  
        }  
  
        /// <summary>  
        /// Adds strip lines to highlight weekend values.  
        /// </summary>  
        private void HighlightWeekendsWithStripLines()  
        {  
            // Set strip line to highlight weekends  
            StripLine stripLine2 = new StripLine();  
            stripLine2.BackColor = Color.FromArgb(120, Color.Gold);              
            stripLine2.IntervalOffset = -1.5;  
            stripLine2.IntervalOffsetType = DateTimeIntervalType.Days;  
            stripLine2.Interval = 1;  
            stripLine2.IntervalType = DateTimeIntervalType.Weeks;  
            stripLine2.StripWidth = 2;  
            stripLine2.StripWidthType = DateTimeIntervalType.Days;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisX.StripLines.Add(stripLine2);  
  
            // Set the axis label to show the name of the day  
            // This is done in order to demonstrate that weekends are highlighted  
            chart1.ChartAreas[0].AxisX.LabelStyle.Format = "ddd";  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapAreaAttributes">
      <MemberSignature Language="C#" Value="public string MapAreaAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MapAreaAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property MapAreaAttributes As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MapAreaAttributes { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MapAreaAttributes : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.MapAreaAttributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.DataVisualization.Charting.IChartMapArea.MapAreaAttributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-253">背景の縞模様のマップ領域属性を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-253">Gets or sets the map area attributes of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-254">グラフ要素の対応するマップ領域の属性を表す <see langword="string" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-254">A <see langword="string" /> value that represents the attributes of the chart element's corresponding map area.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("StripLine")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-255">背景の縞模様の名前を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-255">Gets the name of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-256">背景の縞模様の名前を表す <see langword="string" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-256">A <see langword="string" /> value that represents the name of the strip line.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostBackValue">
      <MemberSignature Language="C#" Value="public string PostBackValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue" />
      <MemberSignature Language="VB.NET" Value="Public Property PostBackValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PostBackValue { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PostBackValue : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.PostBackValue" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.DataVisualization.Charting.IChartMapArea.PostBackValue</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-257">
            <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" /> イベントで処理できるポストバック値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-257">Gets or sets the postback value that can be processed on a <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" /> event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-258">
            <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" /> イベントに渡されるポストバック値を表す string 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-258">A string value that represents the postback value that is passed to a <see cref="E:System.Web.UI.DataVisualization.Charting.Chart.Click" /> event.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StripWidth">
      <MemberSignature Language="C#" Value="public double StripWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 StripWidth" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property StripWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double StripWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.StripWidth : double with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.StripWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-259">背景の縞模様の幅を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-259">Gets or sets the width of a strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-260">背景の縞模様または線を描画するかどうかを決定する <see langword="double" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-260">A <see langword="double" /> value that determines whether a strip or a line is drawn.</span>
          </span>
          <span data-ttu-id="21732-261">既定値は 0.0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-261">The default value is 0.0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-262">このプロパティは、0.0 未満の値に設定することはできません、それ以外の場合、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="21732-262">This property cannot be set to a value less than 0.0, otherwise an exception will be raised.</span></span>  
  
 <span data-ttu-id="21732-263">0.0 に設定は、線が描画されます。この行を使用して、 <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>と<xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>色、幅、およびスタイルのプロパティの設定。</span><span class="sxs-lookup"><span data-stu-id="21732-263">A setting of 0.0 will result in a line being drawn; this line will use the <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> property settings for its color, width and style.</span></span> <span data-ttu-id="21732-264">いずれも、`Back*`このクラスのプロパティを使用時の値<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>は 0.0 です。</span><span class="sxs-lookup"><span data-stu-id="21732-264">None of the `Back*` properties in this class are utilized when the value of <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> is 0.0.</span></span>  
  
 <span data-ttu-id="21732-265">設定した場合、 <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> 0.0 より大きい値をプロパティ、ストリップが作成されます。</span><span class="sxs-lookup"><span data-stu-id="21732-265">If you set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to a value greater than 0.0, a strip will be created.</span></span> <span data-ttu-id="21732-266"><xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>、<xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A>と<xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A>プロパティは、ストリップ; の枠線にのみ適用のすべて、`Back*`プロパティを背景の縞の背景のプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="21732-266">The <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderColor%2A>, <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderDashStyle%2A> and <xref:System.Web.UI.DataVisualization.Charting.StripLine.BorderWidth%2A> properties only apply to the border of the strip; all of the `Back*` properties are then used for the background properties of the strip.</span></span>  
  
 <span data-ttu-id="21732-267">場合の値、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティが 0.0 より大きい場合、単位は、関連する軸のスケールによって決まります。</span><span class="sxs-lookup"><span data-stu-id="21732-267">If the value of the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property is greater than 0.0, the units are determined by the relevant axis scale.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StripWidthType">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.DateTimeIntervalType StripWidthType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType" />
      <MemberSignature Language="VB.NET" Value="Public Property StripWidthType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::DateTimeIntervalType StripWidthType { System::Web::UI::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Web::UI::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberSignature Language="F#" Value="member this.StripWidthType : System.Web.UI.DataVisualization.Charting.DateTimeIntervalType with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.StripWidthType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-268">
            <see cref="P:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth" /> プロパティの単位を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-268">Gets or sets the unit of measurement for the <see cref="P:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-269">幅の種類を示す <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> 列挙値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-269">A <see cref="T:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType" /> enumeration value that indicates the width type.</span>
          </span>
          <span data-ttu-id="21732-270">既定値は <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-270">The default value is <see cref="F:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-271">このプロパティに使用する単位を決定する、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="21732-271">This property determines the units used for the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property.</span></span> <span data-ttu-id="21732-272">たとえば、"week"の 1 つを表すための背景の縞模様を設定する可能性がありますこのプロパティ設定する<xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Weeks>設定と、<xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A>プロパティをいずれか (1.0)。</span><span class="sxs-lookup"><span data-stu-id="21732-272">For example, to set a strip line to represent "one week", you could set this property to <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Weeks> and set the <xref:System.Web.UI.DataVisualization.Charting.StripLine.StripWidth%2A> property to one (1.0).</span></span>  
  
 <span data-ttu-id="21732-273">このプロパティの値を変更する<xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>を<xref:System.DateTime>値の関連する軸のスケールを使用する場合、<xref:System.DateTime>値。</span><span class="sxs-lookup"><span data-stu-id="21732-273">You can change the value of this property from <xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto> to a <xref:System.DateTime> value when the relevant axis scale uses a <xref:System.DateTime> value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-274">背景の縞模様のテキストを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-274">Gets or sets the text for the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-275">背景の縞模様のテキストを表す <see langword="string" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-275">A <see langword="string" /> value that represents the text of a strip line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-276">背景の縞模様のテキストを追加するのにには、このプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="21732-276">Use this property to add text to a strip line.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21732-277">次のコード例では、グラフ コントロールがデザイン画面に追加した後は、しきい値を表す線を追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="21732-277">The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface.</span></span> <span data-ttu-id="21732-278">グラフでは、定期的ではないの背景の縞模様を使用して、系列内のすべてのデータ ポイントの平均の計算を表示します。</span><span class="sxs-lookup"><span data-stu-id="21732-278">The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlignment As StringAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringAlignment TextAlignment { System::Drawing::StringAlignment get(); void set(System::Drawing::StringAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlignment : System.Drawing.StringAlignment with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.StringAlignment), "Far")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-279">背景の縞模様のテキストの配置を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-279">Gets or sets the text alignment of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-280">背景の縞模様のテキストの配置を表す <see cref="T:System.Drawing.StringAlignment" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-280">A <see cref="T:System.Drawing.StringAlignment" /> value that represents the alignment of the strip line text.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="21732-281">次のコード例では、グラフ コントロールがデザイン画面に追加した後は、しきい値を表す線を追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="21732-281">The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface.</span></span> <span data-ttu-id="21732-282">グラフでは、定期的ではないの背景の縞模様を使用して、系列内のすべてのデータ ポイントの平均の計算を表示します。</span><span class="sxs-lookup"><span data-stu-id="21732-282">The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLineAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment TextLineAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment TextLineAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLineAlignment As StringAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::StringAlignment TextLineAlignment { System::Drawing::StringAlignment get(); void set(System::Drawing::StringAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextLineAlignment : System.Drawing.StringAlignment with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.TextLineAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.StringAlignment), "Near")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-283">背景の縞模様のテキストのテキスト行の配置を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-283">Gets or sets the text line alignment of strip line text.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-284">テキスト行の配置を表す <see cref="T:System.Drawing.StringAlignment" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-284">A <see cref="T:System.Drawing.StringAlignment" /> value that represents the alignment of the text line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="21732-285">次のコード例では、グラフ コントロールがデザイン画面に追加した後は、しきい値を表す線を追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="21732-285">The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface.</span></span> <span data-ttu-id="21732-286">グラフでは、定期的ではないの背景の縞模様を使用して、系列内のすべてのデータ ポイントの平均の計算を表示します。</span><span class="sxs-lookup"><span data-stu-id="21732-286">The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOrientation">
      <MemberSignature Language="C#" Value="public System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataVisualization.Charting.TextOrientation TextOrientation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOrientation As TextOrientation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::DataVisualization::Charting::TextOrientation TextOrientation { System::Web::UI::DataVisualization::Charting::TextOrientation get(); void set(System::Web::UI::DataVisualization::Charting::TextOrientation value); };" />
      <MemberSignature Language="F#" Value="member this.TextOrientation : System.Web.UI.DataVisualization.Charting.TextOrientation with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataVisualization.Charting.TextOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-287">テキストの方向を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-287">Gets or sets the text orientation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-288">テキストの配置方向を表す <see cref="P:System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-288">A <see cref="P:System.Web.UI.DataVisualization.Charting.StripLine.TextOrientation" /> value that represents the alignment of the text orientation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-289">値にこのプロパティを設定すると<xref:System.Web.UI.DataVisualization.Charting.TextOrientation.Auto>テキスト、グラフの種類に基づく向きです。</span><span class="sxs-lookup"><span data-stu-id="21732-289">When this property is set to a value of <xref:System.Web.UI.DataVisualization.Charting.TextOrientation.Auto>, the text is oriented based on the chart type.</span></span> <span data-ttu-id="21732-290">すべての X と Y グラフの種類が他よりも横棒グラフ、x 軸の背景の縞模様のテキストの背景の縞模様の下部にある右に水平に左から向きです。</span><span class="sxs-lookup"><span data-stu-id="21732-290">For all X-Y chart types other than Bar, X-axis strip line text is oriented horizontally from left to right on the bottom of the strip line.</span></span> <span data-ttu-id="21732-291">横棒グラフ、x 軸のストリップ ラインのテキストは背景の縞模様の右下に上から縦方向です。</span><span class="sxs-lookup"><span data-stu-id="21732-291">For Bar charts, X-axis strip line text is oriented vertically from top to bottom to the right of the strip line.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21732-292">次のコード例では、グラフ コントロールがデザイン画面に追加した後は、しきい値を表す線を追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="21732-292">The following code example demonstrates how to add a threshold line after the chart control has been added to the design surface.</span></span> <span data-ttu-id="21732-293">グラフでは、定期的ではないの背景の縞模様を使用して、系列内のすべてのデータ ポイントの平均の計算を表示します。</span><span class="sxs-lookup"><span data-stu-id="21732-293">The chart uses a non-recurring strip line to show a calculation of the mean of all data points in a series.</span></span>  
  
```vb  
Imports System.Web.UI.DataVisualization.Charting  
  
Public Partial Class StripLines   
    Inherits System.Web.UI.Page   
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)  
        ' Add chart data before adding strip lines.   
        AddChartData()   
  
        ' Adds a threshold line using strip lines.   
        AddThresholdStripLine()   
    End Sub   
  
    ''' <summary>   
    ''' Adds a week of data with values between 20 and 35.   
    ''' </summary>   
    Private Sub AddChartData()   
        ' Declare new random variable   
        Dim rand As New Random()   
        For i As Integer = 0 To 6   
  
            ' Add a week of data   
            chart1.Series(0).Points.AddXY(DateTime.Now.AddDays(i), rand.[Next](20, 35))   
        Next   
    End Sub   
  
    ''' <summary>   
    ''' Adds a horizontal threshold strip line at the calculated mean   
    ''' value of all data points in the first series of the chart.   
    ''' </summary>   
    Private Sub AddThresholdStripLine()   
        Dim stripLine3 As New StripLine()   
  
        ' Set threshold line so that it is only shown once   
        stripLine3.Interval = 0   
  
        ' Set the threshold line to be drawn at the calculated mean of the first series   
        stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series(0).Name)   
  
        stripLine3.BackColor = Color.DarkGreen   
        stripLine3.StripWidth = 0.25   
  
        ' Set text properties for the threshold line   
        stripLine3.Text = "Mean"   
        stripLine3.ForeColor = Color.Black   
        stripLine3.TextAlignment = StringAlignment.Near   
        stripLine3.TextLineAlignment = StringAlignment.Near   
        stripLine3.TextOrientation = TextOrientation.Auto   
  
        ' Add strip line to the chart   
        chart1.ChartAreas(0).AxisY.StripLines.Add(stripLine3)   
    End Sub   
End Class  
```  
  
```csharp  
public partial class StripLines : System.Web.UI.Page   
    {  
        protected void Page_Load(object sender, EventArgs e)  
        {              
            // Add chart data  
            AddChartData();  
  
            // Adds a threshold line using strip lines.  
            AddThresholdStripLine();  
        }  
  
        /// <summary>  
        /// Adds a week of data with values between 20 and 35.  
        /// </summary>  
        private void AddChartData()  
        {  
            // Declare new random variable  
            Random rand = new Random();  
  
            // Add a week of data  
            for (int i = 0; i < 7; i++)   
            {  
                chart1.Series[0].Points.AddXY(DateTime.Now.AddDays(i), rand.Next(20,35));  
            }  
        }  
  
        /// <summary>  
        /// Adds a horizontal threshold strip line at the calculated mean   
        /// value of all data points in the first series of the chart.  
        /// </summary>  
        private void AddThresholdStripLine()  
        {  
            StripLine stripLine3 = new StripLine();  
  
            // Set threshold line so that it is only shown once  
            stripLine3.Interval = 0;  
  
            // Set the threshold line to be drawn at the calculated mean of the first series  
            stripLine3.IntervalOffset = chart1.DataManipulator.Statistics.Mean(chart1.Series[0].Name);  
  
            stripLine3.BackColor = Color.DarkGreen;  
            stripLine3.StripWidth = 0.25;  
  
            // Set text properties for the threshold line  
            stripLine3.Text = "Mean";  
            stripLine3.ForeColor = Color.Black;  
            stripLine3.TextAlignment = StringAlignment.Near;  
            stripLine3.TextLineAlignment = StringAlignment.Near;  
            stripLine3.TextOrientation = TextOrientation.Auto;  
  
            // Add strip line to the chart  
            chart1.ChartAreas[0].AxisY.StripLines.Add(stripLine3);  
        }  
    }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public string ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ToolTip { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.ToolTip" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.DataVisualization.Charting.IChartMapArea.ToolTip</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-294">背景の縞模様のツールヒントを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-294">Gets or sets the tooltip of a strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-295">背景の縞模様のツールヒントを表す <see langword="string" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-295">A <see langword="string" /> value that represents the tooltip of the strip line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-296">このプロパティを設定する場合は、クライアント側のイメージ マップが自動的に作成して、タイトル属性のツールヒントの指定した文字列に設定されたマップ領域が作成されます。</span><span class="sxs-lookup"><span data-stu-id="21732-296">If you set this property, a client-side image map will automatically be created, and a map area will be created with the Title attribute set to the specified tooltip string.</span></span> <span data-ttu-id="21732-297">マップ領域では、背景の縞模様に対応するディメンションを使用します。</span><span class="sxs-lookup"><span data-stu-id="21732-297">The map area will use the dimensions that correspond to the strip line.</span></span>  
  
 <span data-ttu-id="21732-298">このプロパティの設定は影響しない場合、<xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A>プロパティに設定されて`false`します。</span><span class="sxs-lookup"><span data-stu-id="21732-298">Setting this property will have no effect if the <xref:System.Web.UI.DataVisualization.Charting.Chart.IsMapEnabled%2A> property is set to `false`.</span></span> <span data-ttu-id="21732-299">既定値は true です。</span><span class="sxs-lookup"><span data-stu-id="21732-299">The default value is true.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public string Url { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Url" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataVisualization.Charting.StripLine.Url" />
      <MemberSignature Language="VB.NET" Value="Public Property Url As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Url { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Url : string with get, set" Usage="System.Web.UI.DataVisualization.Charting.StripLine.Url" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.DataVisualization.Charting.IChartMapArea.Url</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.UrlValueEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.DataVisualization.Charting.UrlValueEditor, System.Web.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21732-300">背景の縞模様の参照先 URL またはアンカー ポイントを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-300">Gets or sets the destination URL or anchor point of the strip line.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21732-301">背景の縞模様の参照先 URL またはアンカー ポイントを表す <see langword="string" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="21732-301">A <see langword="string" /> value that represents the destination URL or anchor point of the strip line.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21732-302">絶対 URL を使用するには、文字列式を "http://" または "www." で開始します。</span><span class="sxs-lookup"><span data-stu-id="21732-302">To use an absolute URL, start the string expression with either "http://" or "www.".</span></span> <span data-ttu-id="21732-303">これらのプレフィックスで開始されない文字列は、相対 URL として処理されます。</span><span class="sxs-lookup"><span data-stu-id="21732-303">If the string does not start with either of these prefixes, it will be treated as a relative URL.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>