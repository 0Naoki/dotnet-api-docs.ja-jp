<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Collection`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58d6fa73ab1869f7d3db9619c3424c839a24dfe2c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d6fa73ab1869f7d3db9619c3424c839a24dfe2c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The type of elements in the collection.</source>
          <target state="translated">コレクション内の要素の型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Provides the base class for a generic collection.</source>
          <target state="translated">ジェネリック コレクションの基本クラスを提供します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> class can be used immediately by creating an instance of one of its constructed types; all you have to do is specify the type of object to be contained in the collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスは、構築された型の 1 つのインスタンスを作成してすぐに使用できます。 行う必要があるのは、コレクションに含まれているオブジェクトの種類を指定します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>In addition, you can derive your own collection type from any constructed type, or derive a generic collection type from the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> class itself.</source>
          <target state="translated">さらに、独自のコレクション型を構築された型から派生したりからジェネリック コレクション型を派生させる、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラス自体です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> class provides protected methods that can be used to customize its behavior when adding and removing items, clearing the collection, or setting the value of an existing item.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスをその動作を追加するときと項目を削除する、オフにすると、コレクションまたは既存の項目の値を設定をカスタマイズするために使用する保護対象のメソッドを提供します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Most <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> objectscan be modified.</source>
          <target state="translated">ほとんど<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>objectscan を変更します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>However, a <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> object that is initialized with a read-only <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> object cannot be modified.</source>
          <target state="translated">ただし、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>読み取り専用に初期化されたオブジェクトを<ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>オブジェクトは変更できません。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>See <ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> for a read-only version of this class.</source>
          <target state="translated">参照してください<ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph>このクラスの読み取り専用バージョン。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Elements in this collection can be accessed using an integer index.</source>
          <target state="translated">このコレクション内の要素は、整数インデックスを使用してアクセスできます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Indexes in this collection are zero-based.</source>
          <target state="translated">このコレクションのインデックスは 0 から始まります。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>This section contains two code examples.</source>
          <target state="translated">このセクションには、2 つのコード例が含まれています。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The first example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> class.</source>
          <target state="translated">最初の例は、いくつかのプロパティとメソッドを示しています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The second example shows how to derive a collection class from a constructed type of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>, and how to override the protected methods of <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> to provide custom behavior.</source>
          <target state="translated">2 番目の例から構築された型のコレクション クラスを派生させる方法を示しています。 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>、の保護されたメソッドをオーバーライドする方法と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>カスタム動作を提供します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Example 1</source>
          <target state="translated">例 1</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The code example creates a collection of strings, uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例は、文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Example 2</source>
          <target state="translated">例 2</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The following code example shows how to derive a collection class from a constructed type of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph> methods to provide custom behavior for the <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the <ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">次のコード例をから構築された型のコレクション クラスを派生させる方法を示しています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラス、および保護されたをオーバーライドする方法<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph>ユーザー設定を提供するメソッド動作、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>、および<ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および設定の<ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The custom behavior provided by this example is a <ph id="ph1">`Changed`</ph> notification event that is raised at the end of each of the protected methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、<ph id="ph1">`Changed`</ph>個々 の保護されたメソッドの最後に発生するイベントを通知します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The <ph id="ph1">`Dinosaurs`</ph> class inherits <ph id="ph2">`Collection&lt;string&gt;`</ph> (<ph id="ph3">`Collection(Of String)`</ph> in Visual Basic) and defines the <ph id="ph4">`Changed`</ph> event, which uses a <ph id="ph5">`DinosaursChangedEventArgs`</ph> class for the event information, and an enumeration to identify the kind of change.</source>
          <target state="translated"><ph id="ph1">`Dinosaurs`</ph>クラスは継承<ph id="ph2">`Collection&lt;string&gt;`</ph>(<ph id="ph3">`Collection(Of String)`</ph> Visual Basic で) を定義し、<ph id="ph4">`Changed`</ph>を使用する、イベント、<ph id="ph5">`DinosaursChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体のクラスです。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>The code example calls several properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> to demonstrate the custom event.</source>
          <target state="translated">いくつかのプロパティとメソッドを呼び出すコード例を<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>をカスタム イベントを示します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">パブリック静的 (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> Visual Basic で) この型のメンバーは、スレッド セーフであります。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">インスタンス メンバーの場合は、スレッド セーフであるとは限りません。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">A<ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>コレクションが変更されない限り、複数のリーダーを同時にサポートできます。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">それでも、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>This base class is provided to make it easier for implementers to create a custom collection.</source>
          <target state="translated">この基本クラスは、カスタム コレクションを作成する実装を容易にできるようにするものです。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Implementers are encouraged to extend this base class instead of creating their own.</source>
          <target state="translated">実装する場合は、独自に作成する代わりにこの基本クラスを拡張することをお勧めします。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:System.Collections.ObjectModel.Collection`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> class that is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> クラスの新しい空のインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor">
          <source>The code example creates a collection of strings with the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.%23ctor&gt;</ph> constructor, uses the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例を含む文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.%23ctor&gt;</ph>コンス トラクターを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
          <source>The list that is wrapped by the new collection.</source>
          <target state="translated">新しいコレクションによってラップされているリスト。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> class as a wrapper for the specified list.</source>
          <target state="translated">指定したリストのラッパーとして <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
          <source>The elements of the list are not copied.</source>
          <target state="translated">リストの要素はコピーされません。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
          <source>The list is wrapped by the collection, so that subsequent changes to the elements of the list are visible through the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">その後、リストの要素に対する変更がを通じて表示されるよう、ボックスの一覧が、コレクションによってラップされた、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
          <source><ph id="ph1">&lt;paramref name="list" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="list" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>The object to be added to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の末尾に追加するオブジェクト。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の末尾にオブジェクトを追加します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>The code example creates a collection of strings, uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例は、文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> からすべての要素を削除します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph> 0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>The code example creates a collection of strings, uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例は、文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Clear">
          <source>Derived classes can override <ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.ClearItems" /&gt;</ph> to change the behavior of this method.</source>
          <target state="translated">派生クラスでオーバーライド<ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.ClearItems" /&gt;</ph>このメソッドの動作を変更します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.ClearItems">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> からすべての要素を削除します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.ClearItems">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph> 0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.ClearItems">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.ClearItems">
          <source>The following code example shows how to derive a collection class from a constructed type of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph> methods to provide custom behavior for the <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the <ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">次のコード例をから構築された型のコレクション クラスを派生させる方法を示しています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラス、および保護されたをオーバーライドする方法<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph>ユーザー設定を提供するメソッド動作、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>、および<ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および設定の<ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.ClearItems">
          <source>The custom behavior provided by this example is a <ph id="ph1">`Changed`</ph> notification event that is raised at the end of each of the protected methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、<ph id="ph1">`Changed`</ph>個々 の保護されたメソッドの最後に発生するイベントを通知します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.ClearItems">
          <source>The <ph id="ph1">`Dinosaurs`</ph> class inherits <ph id="ph2">`Collection&lt;string&gt;`</ph> (<ph id="ph3">`Collection(Of String)`</ph> in Visual Basic) and defines the <ph id="ph4">`Changed`</ph> event, which uses a <ph id="ph5">`DinosaursChangedEventArgs`</ph> class for the event information, and an enumeration to identify the kind of change.</source>
          <target state="translated"><ph id="ph1">`Dinosaurs`</ph>クラスは継承<ph id="ph2">`Collection&lt;string&gt;`</ph>(<ph id="ph3">`Collection(Of String)`</ph> Visual Basic で) を定義し、<ph id="ph4">`Changed`</ph>を使用する、イベント、<ph id="ph5">`DinosaursChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体のクラスです。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.ClearItems">
          <source>The code example calls several properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> to demonstrate the custom event.</source>
          <target state="translated">いくつかのプロパティとメソッドを呼び出すコード例を<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>をカスタム イベントを示します。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.ClearItems">
          <source>Derived classes can override this method to change the behavior of the <ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.Clear" /&gt;</ph> method.</source>
          <target state="translated">派生クラスでの動作を変更するには、このメソッドをオーバーライドできる、<ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.Clear" /&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated">ある要素が <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 内に存在するかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が <ph id="ph2">&lt;paramref name="item" /&gt;</ph> に存在する場合は <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> object is created using the default constructor, this method determines equality using the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph3">`T`</ph>, the type of values in the list.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>オブジェクトが作成される既定のコンス トラクターを使用して、このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph3">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source>If type <ph id="ph1">`T`</ph> does not implement the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interface, the <ph id="ph3">&lt;xref:System.Object.Equals%2A&gt;</ph> method is used.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>を実装しません、 <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> 、インターフェイス、<ph id="ph3">&lt;xref:System.Object.Equals%2A&gt;</ph>メソッドを使用します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source>If the Collection object is created by passing an <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> object to the constructor, the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method will be determined by the <ph id="ph3">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface used by that <ph id="ph4">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> object.</source>
          <target state="translated">コレクション オブジェクトを渡すことによって作成する場合、<ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>コンス トラクター、オブジェクト、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>メソッドによって決定されます、<ph id="ph3">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>をで使用されるインターフェイス<ph id="ph4">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source>This method performs a linear search; therefore, the average execution time is proportional to <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。したがって、平均実行時間に比例して<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
          <source>That is, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">つまり、このメソッドは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> から要素がコピーされる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified index of the target array.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 全体を、互換性のある 1 次元の <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まる部分に行います。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">このメソッドを使用して<ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph>要素のコピー。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">要素のコピー先は、<ph id="ph1">&lt;xref:System.Array&gt;</ph>を列挙子が反復処理する順序と同じ順序で、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の要素数が、コピー先 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の <ph id="ph2">&lt;paramref name="index" /&gt;</ph> から最後までの使用可能領域を超えています。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>Gets the number of elements actually contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> に実際に含まれる要素の数を取得します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>The number of elements actually contained in the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> に実際に格納されている要素の数。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>The code example creates a collection of strings, uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例は、文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Count">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> を反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> の <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">この位置では、<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> が未定義です。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> の値を読み取る前に、<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> が呼び出されるまでは同じオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> 内で検索するオブジェクト。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 全体から指定したオブジェクトを検索し、最初に見つかったオブジェクトのインデックス (0 から始まる) を返します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The zero-based index of the first occurrence of <ph id="ph1">&lt;paramref name="item" /&gt;</ph> within the entire <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>, if found; otherwise, -1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> 全体を対象に <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> is searched forward starting at the first element and ending at the last element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>はフォワード最初の要素を起点と最後の要素で終わる検索します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>This method performs a linear search; therefore, the average execution time is proportional to <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。したがって、平均実行時間に比例して<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>That is, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">つまり、このメソッドは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The code example creates a collection of strings, uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例は、文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> を挿入する位置の、0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source>The object to insert.</source>
          <target state="translated">挿入するオブジェクト。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 内の指定したインデックスの位置に要素を挿入します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> is added to the end of <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`index`</ph>と等しい<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>、<ph id="ph3">`item`</ph>の末尾に追加された<ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph> より大きくなっています。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
          <source>Derived classes can override <ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)" /&gt;</ph> to change the behavior of this method.</source>
          <target state="translated">派生クラスでオーバーライド<ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)" /&gt;</ph>このメソッドの動作を変更します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> を挿入する位置の、0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>The object to insert.</source>
          <target state="translated">挿入するオブジェクト。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 内の指定したインデックスの位置に要素を挿入します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph> is meant to be overridden in a derived class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>は派生クラスでオーバーライドされることを意図したものです。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>For a public method to insert an item in the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>, see <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>.</source>
          <target state="translated">パブリック メソッド内の項目を挿入する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>を参照してください<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> is added to the end of <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`index`</ph>と等しい<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>、<ph id="ph3">`item`</ph>の末尾に追加された<ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>The following code example shows how to derive a collection class from a constructed type of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph> methods to provide custom behavior for the <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the <ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">次のコード例をから構築された型のコレクション クラスを派生させる方法を示しています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラス、および保護されたをオーバーライドする方法<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph>ユーザー設定を提供するメソッド動作、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>、および<ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および設定の<ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>The custom behavior provided by this example is a <ph id="ph1">`Changed`</ph> notification event that is raised at the end of each of the protected methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、<ph id="ph1">`Changed`</ph>個々 の保護されたメソッドの最後に発生するイベントを通知します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>The <ph id="ph1">`Dinosaurs`</ph> class inherits <ph id="ph2">`Collection&lt;string&gt;`</ph> (<ph id="ph3">`Collection(Of String)`</ph> in Visual Basic) and defines the <ph id="ph4">`Changed`</ph> event, which uses a <ph id="ph5">`DinosaursChangedEventArgs`</ph> class for the event information, and an enumeration to identify the kind of change.</source>
          <target state="translated"><ph id="ph1">`Dinosaurs`</ph>クラスは継承<ph id="ph2">`Collection&lt;string&gt;`</ph>(<ph id="ph3">`Collection(Of String)`</ph> Visual Basic で) を定義し、<ph id="ph4">`Changed`</ph>を使用する、イベント、<ph id="ph5">`DinosaursChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体のクラスです。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>The code example calls several properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> to demonstrate the custom event.</source>
          <target state="translated">いくつかのプロパティとメソッドを呼び出すコード例を<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>をカスタム イベントを示します。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph> より大きくなっています。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">取得または設定する要素の、0 から始まるインデックス番号。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">指定したインデックスにある要素を取得または設定します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">指定したインデックス位置にある要素。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">このプロパティでは、<ph id="ph1">`myCollection[index]`</ph> という構文を使用して、コレクション内の特定の要素にアクセスできます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic は、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもです。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>The code example creates a collection of strings, uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例は、文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph> 以上になっています。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
          <source>Derived classes can override <ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)" /&gt;</ph> to change the behavior of setting this property.</source>
          <target state="translated">派生クラスでオーバーライド<ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)" /&gt;</ph>このプロパティの設定の動作を変更します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.Items">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> wrapper around the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> をラップする <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> ラッパーを取得します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Items">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> wrapper around the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> をラップする <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> ラッパー。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Items">
          <source>The wrapper provides the functionality of the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> class and exposes all the elements of the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">ラッパーの機能を提供する、<ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>クラスし、のすべての要素を公開、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.Items">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>The object to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> から削除するオブジェクト。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated">特定のオブジェクトが <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 内にあるときに、最初に出現したものを削除します。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is successfully removed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="item" /&gt;</ph> が正常に削除された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> was not found in the original <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated">このメソッドは、元の <ph id="ph1">&lt;see langword="false" /&gt;</ph> で <ph id="ph2">&lt;paramref name="item" /&gt;</ph> が見つからなかった場合にも <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">このメソッドは、既定の等値比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>の<ph id="ph2">`T`</ph>リスト内の値の型。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>This method performs a linear search; therefore, the average execution time is proportional to <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、一方向の検索を実行します。したがって、平均実行時間に比例して<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>That is, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">つまり、このメソッドは、O (<ph id="ph1">`n`</ph>) 操作、場所<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>The code example creates a collection of strings, uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例は、文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
          <source>Derived classes can override <ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" /&gt;</ph> to change the behavior of this method.</source>
          <target state="translated">派生クラスでオーバーライド<ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" /&gt;</ph>このメソッドの動作を変更します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">削除する要素の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の指定したインデックスにある要素を削除します。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>The following code example demonstrates many of the properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
          <target state="translated">次のコード例は、多くのプロパティとメソッドを示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>The code example creates a collection of strings, uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> method to add several strings, displays the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, and lists the strings.</source>
          <target state="translated">コード例は、文字列のコレクションを作成、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>をいくつかの文字列を追加するメソッドを表示、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>文字列の一覧とします。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph> method to find the index of a string and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph> method to determine whether a string is in the collection.</source>
          <target state="translated">この例では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A&gt;</ph>文字列のインデックスを検索するメソッド、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>文字列がコレクション内にあるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>The example inserts a string using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> method and retrieves and sets strings using the default <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">例では、挿入を使用して、文字列、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>とメソッドの取得および設定の文字列が既定値を使用して<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>The example removes strings by string identity using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> method and by index using the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> method.</source>
          <target state="translated">例では、文字列の id を使用して文字列を削除する、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>メソッドとインデックスを使用して、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method is used to clear all strings from the collection.</source>
          <target state="translated">最後に、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッドを使用して、コレクションからすべての文字列をクリアします。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph> 以上になっています。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
          <source>Derived classes can override <ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" /&gt;</ph> to change the behavior of this method.</source>
          <target state="translated">派生クラスでオーバーライド<ph id="ph1">&lt;see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" /&gt;</ph>このメソッドの動作を変更します。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source>The zero-based index of the element to remove.</source>
          <target state="translated">削除する要素の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の指定したインデックスにある要素を削除します。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source>The following code example shows how to derive a collection class from a constructed type of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph> methods to provide custom behavior for the <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the <ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">次のコード例をから構築された型のコレクション クラスを派生させる方法を示しています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラス、および保護されたをオーバーライドする方法<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph>ユーザー設定を提供するメソッド動作、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>、および<ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および設定の<ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source>The custom behavior provided by this example is a <ph id="ph1">`Changed`</ph> notification event that is raised at the end of each of the protected methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、<ph id="ph1">`Changed`</ph>個々 の保護されたメソッドの最後に発生するイベントを通知します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source>The <ph id="ph1">`Dinosaurs`</ph> class inherits <ph id="ph2">`Collection&lt;string&gt;`</ph> (<ph id="ph3">`Collection(Of String)`</ph> in Visual Basic) and defines the <ph id="ph4">`Changed`</ph> event, which uses a <ph id="ph5">`DinosaursChangedEventArgs`</ph> class for the event information, and an enumeration to identify the kind of change.</source>
          <target state="translated"><ph id="ph1">`Dinosaurs`</ph>クラスは継承<ph id="ph2">`Collection&lt;string&gt;`</ph>(<ph id="ph3">`Collection(Of String)`</ph> Visual Basic で) を定義し、<ph id="ph4">`Changed`</ph>を使用する、イベント、<ph id="ph5">`DinosaursChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体のクラスです。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source>The code example calls several properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> to demonstrate the custom event.</source>
          <target state="translated">いくつかのプロパティとメソッドを呼び出すコード例を<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>をカスタム イベントを示します。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph> 以上になっています。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>The zero-based index of the element to replace.</source>
          <target state="translated">置き換える要素の 0 から始まるインデックス番号。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>The new value for the element at the specified index.</source>
          <target state="translated">指定したインデックス位置に存在する要素の新しい値。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">参照型の場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph> の値を使用できます。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>Replaces the element at the specified index.</source>
          <target state="translated">指定したインデックス位置にある要素を置き換えます。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 受け付ける<ph id="ph2">`null`</ph>と参照の有効な値の型により、重複する要素。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>The following code example shows how to derive a collection class from a constructed type of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph> methods to provide custom behavior for the <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the <ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property.</source>
          <target state="translated">次のコード例をから構築された型のコレクション クラスを派生させる方法を示しています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラス、および保護されたをオーバーライドする方法<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.SetItem%2A&gt;</ph>ユーザー設定を提供するメソッド動作、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>、 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>、および<ph id="ph9">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および設定の<ph id="ph10">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>The custom behavior provided by this example is a <ph id="ph1">`Changed`</ph> notification event that is raised at the end of each of the protected methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、<ph id="ph1">`Changed`</ph>個々 の保護されたメソッドの最後に発生するイベントを通知します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>The <ph id="ph1">`Dinosaurs`</ph> class inherits <ph id="ph2">`Collection&lt;string&gt;`</ph> (<ph id="ph3">`Collection(Of String)`</ph> in Visual Basic) and defines the <ph id="ph4">`Changed`</ph> event, which uses a <ph id="ph5">`DinosaursChangedEventArgs`</ph> class for the event information, and an enumeration to identify the kind of change.</source>
          <target state="translated"><ph id="ph1">`Dinosaurs`</ph>クラスは継承<ph id="ph2">`Collection&lt;string&gt;`</ph>(<ph id="ph3">`Collection(Of String)`</ph> Visual Basic で) を定義し、<ph id="ph4">`Changed`</ph>を使用する、イベント、<ph id="ph5">`DinosaursChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体のクラスです。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>The code example calls several properties and methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> to demonstrate the custom event.</source>
          <target state="translated">いくつかのプロパティとメソッドを呼び出すコード例を<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>をカスタム イベントを示します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph> より大きくなっています。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> が読み取り専用かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が読み取り専用である場合は <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> から要素がコピーされる 1 次元の <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> には、0 から始まるインデックス番号が必要です。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">コピーの開始位置となる、<bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の要素を <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> にコピーします。コピーは特定の <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> のインデックスから開始されます。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">場合、ソースの種類<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>変換先の型に自動的にキャストすることはできません<ph id="ph2">`array`</ph>の非ジェネリックの実装<ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph>スロー<ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>汎用実装でスローされ、<ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> が多次元です。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> には、0 から始まるインデックス番号がありません。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の要素数が、コピー先 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> の <ph id="ph2">&lt;paramref name="index" /&gt;</ph> から最後までの使用可能領域を超えています。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">コピー元の <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> の型をコピー先の <ph id="ph2">&lt;paramref name="array" /&gt;</ph> の型に自動的にキャストすることはできません。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> へのアクセスが同期されている (スレッド セーフである) 場合は <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> アクセスを同期するために使用できるオブジェクトを返します、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスを同期するために使用できるオブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> へのアクセスの同期に使用できるオブジェクト。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> アクセスを同期するために使用できるオブジェクトを返します、<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">次のコードの使用を示しています、 <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> c#、C++、および Visual Basic のプロパティです。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">コレクションを反復処理する列挙子を返します。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">コレクションを反復処理するために使用できる <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 言語のステートメント (<ph id="ph2">`for each`</ph> C++ では、 <ph id="ph3">`For Each`</ph> Visual Basic で)、列挙子の複雑さが隠されています。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">したがって、列挙子を直接操作するのではなく、<ph id="ph1">`foreach`</ph> を使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> を実行した場合も、列挙子はこの位置に戻されます。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">この位置では、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> が未定義です。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">そのため、<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> の値を読み取る前に、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> または <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> が呼び出されるまでは同じオブジェクトを返します。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> は、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> を次の要素に設定します。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返します<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">列挙子がこの位置では、後続の呼び出しの場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>を返すことも<ph id="ph2">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">最後の呼び出し場合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返される<ph id="ph2">`false`</ph>、<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>が定義されていません。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> をコレクションの最初の要素にもう一度設定するには、<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> を呼び出してから <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">コレクションが変更されない限り、列挙子は有効です。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">コレクションに対して変更 (要素の追加、変更、削除など) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">既定の実装のコレクションの<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>が同期されていません。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> に追加する <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
          <source>Adds an item to the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に項目を追加します。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
          <source>The position into which the new element was inserted.</source>
          <target state="translated">新しい要素が挿入された位置。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 内で検索される <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> contains a specific value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に特定の値が格納されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.IList" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> が <ph id="ph3">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に存在する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
          <source>This method determines equality by first determining whether <ph id="ph1">`value`</ph> is of type <ph id="ph2">`T`</ph> (or null) and then calling <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、最初に等しいかどうかを決定するかどうか<ph id="ph1">`value`</ph>の種類は<ph id="ph2">`T`</ph>(または null) し、呼び出す<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Contains%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to locate in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 内で検索される <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source>Determines the index of a specific item in the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 内の特定の項目のインデックスを確認します。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source>The index of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> if found in the list; otherwise, -1.</source>
          <target state="translated">リストに存在する場合は <ph id="ph1">&lt;paramref name="value" /&gt;</ph> のインデックス。それ以外の場合は -1。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source>This method determines equality using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このメソッドは、既定の比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> チェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する<ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph>し、使用可能な場合は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">ない場合は、<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph2">`T`</ph>実装<ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, this method uses <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>はいずれのインターフェイスでは、このメソッドを使用して実装されていない<ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> を挿入する位置を示す、0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to insert into the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に挿入する <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>Inserts an item into the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 内の指定したインデックス位置に項目を挿入します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>If <ph id="ph1">`index`</ph> equals the number of items in the <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>, then <ph id="ph3">`value`</ph> is appended to the end.</source>
          <target state="translated"><ph id="ph1">`index`</ph> が <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph> 内の項目数に等しければ、<ph id="ph3">`value`</ph> が末尾に追加されます。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> has a fixed size.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> が固定サイズかどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> has a fixed size; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が固定サイズの場合は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
          <source>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</source>
          <target state="translated">固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
          <source>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</source>
          <target state="translated">固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> が読み取り専用かどうかを示す値を取得します。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> が読み取り専用である場合は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> の既定の実装では、このプロパティは常に <ph id="ph2">&lt;see langword="false" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source>The zero-based index of the element to get or set.</source>
          <target state="translated">取得または設定する要素の、0 から始まるインデックス番号。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source>Gets or sets the element at the specified index.</source>
          <target state="translated">指定したインデックスにある要素を取得または設定します。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source>The element at the specified index.</source>
          <target state="translated">指定したインデックス位置にある要素。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">このプロパティでは、<ph id="ph1">`myCollection[index]`</ph> という構文を使用して、コレクション内の特定の要素にアクセスできます。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source>The C# language uses the <bpt id="p1">[</bpt>this<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept> keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.System%23Collections%23IList%23Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 言語を使用して、<bpt id="p1">[</bpt>この<ept id="p1">](~/docs/csharp/language-reference/keywords/this.md)</ept>キーワードを実装する代わりに、インデクサーの定義、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.System%23Collections%23IList%23Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.System%23Collections%23IList%23Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic は、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.System%23Collections%23IList%23Item%2A&gt;</ph> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">このプロパティの値を取得する場合は、o (1) 操作です。プロパティの設定は、o (1) 操作ではもです。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is not a valid index in the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> の有効なインデックスではありません。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
          <source>The property is set and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">プロパティが設定されていて、<ph id="ph1">&lt;paramref name="value" /&gt;</ph> が <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to remove from the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> から削除する <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
          <source>Removes the first occurrence of a specific object from the <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated">特定のオブジェクトが <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> 内にあるときに、最初に出現したものを削除します。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
          <source>This method determines equality using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">このメソッドは、既定の比較子を使用して等しいかどうかを決定<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements <ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> and uses that implementation, if available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> チェックを入力するかどうか<ph id="ph2">`T`</ph>を実装する<ph id="ph3">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph>し、使用可能な場合は、その実装を使用します。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
          <source>If not, <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> checks whether type <ph id="ph2">`T`</ph> implements <ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">ない場合は、<ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>チェックを入力するかどうか<ph id="ph2">`T`</ph>実装<ph id="ph3">&lt;xref:System.IComparable?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
          <source>If type <ph id="ph1">`T`</ph> does not implement either interface, this method uses <ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">場合型<ph id="ph1">`T`</ph>はいずれのインターフェイスでは、このメソッドを使用して実装されていない<ph id="ph2">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is of a type that is not assignable to the <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.IList" /&gt;</ph> に割り当てることのできない型です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>