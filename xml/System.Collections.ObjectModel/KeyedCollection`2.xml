<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3375080ab008f35379a851d18f700db732edfd23" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30370806" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="e9783-101">コレクション内のキーの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e9783-101">The type of keys in the collection.</span>
      </span>
    </typeparam>
    <typeparam name="TItem">
      <span data-ttu-id="e9783-102">コレクション内の項目の型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e9783-102">The type of items in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="e9783-103">キーが値に埋め込まれているコレクションの抽象基本クラスを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e9783-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-104"><xref:System.Collections.ObjectModel.KeyedCollection%602>両方 o (1) が検索インデックスが作成され、o (1) に匹敵する検索キー指定されたクラスが用意されています。</span><span class="sxs-lookup"><span data-stu-id="e9783-104">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</span></span> <span data-ttu-id="e9783-105">型が抽象型、または抽象基本クラスは、それぞれの構築ジェネリック型のための抽象型は、の無限がより正確に設定します。</span><span class="sxs-lookup"><span data-stu-id="e9783-105">It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</span></span> <span data-ttu-id="e9783-106">使用する<xref:System.Collections.ObjectModel.KeyedCollection%602>、適切な構築された型から、そのコレクション型を派生します。</span><span class="sxs-lookup"><span data-stu-id="e9783-106">To use <xref:System.Collections.ObjectModel.KeyedCollection%602>, derive your collection type from the appropriate constructed type.</span></span>  
  
 <span data-ttu-id="e9783-107"><xref:System.Collections.ObjectModel.KeyedCollection%602>クラスは、基にしたコレクションの間でのハイブリッド、<xref:System.Collections.Generic.IList%601>ジェネリック インターフェイス型とコレクションに基づいて、<xref:System.Collections.Generic.IDictionary%602>ジェネリック インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="e9783-107">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is a hybrid between a collection based on the <xref:System.Collections.Generic.IList%601> generic interface and a collection based on the <xref:System.Collections.Generic.IDictionary%602> generic interface.</span></span> <span data-ttu-id="e9783-108">基づくコレクションと同様に、<xref:System.Collections.Generic.IList%601>ジェネリック インターフェイスは、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のインデックス付きのリストです。</span><span class="sxs-lookup"><span data-stu-id="e9783-108">Like collections based on the <xref:System.Collections.Generic.IList%601> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> is an indexed list of items.</span></span> <span data-ttu-id="e9783-109">基づくコレクションと同様に、<xref:System.Collections.Generic.IDictionary%602>ジェネリック インターフェイスは、<xref:System.Collections.ObjectModel.KeyedCollection%602>の各要素に関連付けられているキーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e9783-109">Like collections based on the <xref:System.Collections.Generic.IDictionary%602> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> has a key associated with each element.</span></span>  
  
 <span data-ttu-id="e9783-110">ディクショナリの要素とは異なり<xref:System.Collections.ObjectModel.KeyedCollection%602>キー/値ペアではありません; 代わりに、要素全体は値であり、キーが値に埋め込まれました。</span><span class="sxs-lookup"><span data-stu-id="e9783-110">Unlike dictionaries, an element of <xref:System.Collections.ObjectModel.KeyedCollection%602> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</span></span>  <span data-ttu-id="e9783-111">派生したコレクションの要素など、 `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` Visual Basic で)"John doe さん Jr"があります。</span><span class="sxs-lookup"><span data-stu-id="e9783-111">For example, an element of a collection derived from `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) might be "John Doe Jr."</span></span> <span data-ttu-id="e9783-112">この値は"John doe さん Jr"</span><span class="sxs-lookup"><span data-stu-id="e9783-112">where the value is "John Doe Jr."</span></span> <span data-ttu-id="e9783-113">キーが"Doe"です。整数キーを含む従業員レコードのコレクションはから派生するでした`KeyedCollection\<int,Employee>`です。</span><span class="sxs-lookup"><span data-stu-id="e9783-113">and the key is "Doe"; or a collection of employee records containing integer keys could be derived from `KeyedCollection\<int,Employee>`.</span></span> <span data-ttu-id="e9783-114">抽象<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッドは、要素からキーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="e9783-114">The abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method extracts the key from the element.</span></span>  
  
 <span data-ttu-id="e9783-115">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>で入手できる検索ディクショナリが含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-115">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that you can obtain with the <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> property.</span></span>  <span data-ttu-id="e9783-116">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="e9783-116">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="e9783-117">作成するときに、ディクショナリの作成のしきい値を指定することによってこの動作がオーバーライドされる、<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-117">This behavior is overridden by specifying a dictionary creation threshold when you create the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="e9783-118">検索ディクショナリの要素の数は、そのしきい値を超えています。 最初に作成されます。</span><span class="sxs-lookup"><span data-stu-id="e9783-118">The lookup dictionary is created the first time the number of elements exceeds that threshold.</span></span>  <span data-ttu-id="e9783-119">しきい値として – 1 を指定する場合、検索ディクショナリが作成されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-119">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e9783-120">場合、コレクション内のすべてのアイテムへの参照がある内部検索ディクショナリを使用すると`TItem`、参照型では、場合、コレクション内のすべての項目のコピーまたは`TItem`は値型です。</span><span class="sxs-lookup"><span data-stu-id="e9783-120">When the internal lookup dictionary is used, it contains references to all the items in the collection if `TItem` is a reference type, or copies of all the items in the collection if `TItem` is a value type.</span></span> <span data-ttu-id="e9783-121">したがって、検索ディクショナリを使用できない可能性があります適切な場合`TItem`は値型です。</span><span class="sxs-lookup"><span data-stu-id="e9783-121">Thus, using the lookup dictionary may not be appropriate if `TItem` is a value type.</span></span>  
  
 <span data-ttu-id="e9783-122">使用してインデックスまたはキーによって項目にアクセスすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-122">You can access an item by its index or key by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="e9783-123">、キーのない項目を追加することができますが、これらの項目は、インデックスによってのみアクセスされることができます。</span><span class="sxs-lookup"><span data-stu-id="e9783-123">You can add items without a key, but these items can subsequently be accessed only by index.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-124">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="e9783-124">This section contains two code examples.</span></span> <span data-ttu-id="e9783-125">最初の例から派生するために必要最小限のコード<xref:System.Collections.ObjectModel.KeyedCollection%602>、継承されたメソッドの多くを示しています。</span><span class="sxs-lookup"><span data-stu-id="e9783-125">The first example shows the minimum code required to derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and demonstrates many of the inherited methods.</span></span> <span data-ttu-id="e9783-126">2 番目の例は、の保護されたメソッドをオーバーライドする方法を示しています。<xref:System.Collections.ObjectModel.KeyedCollection%602>カスタム動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-126">The second example shows how to override the protected methods of <xref:System.Collections.ObjectModel.KeyedCollection%602> to provide custom behavior.</span></span>  
  
 <span data-ttu-id="e9783-127">**例 1**</span><span class="sxs-lookup"><span data-stu-id="e9783-127">**Example 1**</span></span>  
  
 <span data-ttu-id="e9783-128">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-128">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="e9783-129">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-129">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="e9783-130">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e9783-130">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="e9783-131">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-131">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="e9783-132">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-132">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 <span data-ttu-id="e9783-133">**例 2**</span><span class="sxs-lookup"><span data-stu-id="e9783-133">**Example 2**</span></span>  
  
 <span data-ttu-id="e9783-134">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="e9783-134">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="e9783-135">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="e9783-135">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="e9783-136">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="e9783-136">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="e9783-137">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="e9783-137">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="e9783-138">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="e9783-138">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="e9783-139">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-139">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="e9783-140">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-140">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="e9783-141">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-141">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e9783-142">
            <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e9783-143">既定の等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-144">A<xref:System.Collections.ObjectModel.KeyedCollection%602>これで作成されたコンス トラクターから取得した、キーの種類の既定のジェネリック等値比較子を使用して<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-144">A <xref:System.Collections.ObjectModel.KeyedCollection%602> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e9783-145">異なるジェネリック等値比較子を指定するには、使用、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29>コンス トラクターまたは<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="e9783-145">To specify a different generic equality comparer, use the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor or the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="e9783-146">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e9783-146">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="e9783-147">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="e9783-147">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="e9783-148">使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="e9783-148">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e9783-149"><xref:System.Collections.ObjectModel.KeyedCollection%602>クラスは抽象クラスです (`MustInherit` Visual Basic で)、それを使用するために、そこから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e9783-149">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="e9783-150">派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="e9783-150">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="e9783-151">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e9783-151">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="e9783-152">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="e9783-152">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-153">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-153">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="e9783-154">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-154">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="e9783-155">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e9783-155">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="e9783-156">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-156">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="e9783-157">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-157">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="e9783-158">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-159">指定した等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-160">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e9783-160">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="e9783-161">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="e9783-161">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="e9783-162">使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="e9783-162">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e9783-163"><xref:System.Collections.ObjectModel.KeyedCollection%602>クラスは抽象クラスです (`MustInherit` Visual Basic で)、それを使用するために、そこから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e9783-163">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="e9783-164">派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="e9783-164">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="e9783-165">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e9783-165">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="e9783-166">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="e9783-166">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="e9783-167">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <param name="dictionaryCreationThreshold">
          <span data-ttu-id="e9783-168">検索ディクショナリを作成せずにコレクションが保有できる要素数 (0 を指定すると最初の項目の追加時に検索ディクショナリが作成される)。検索ディクショナリを作成しない場合は -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-169">指定した等値比較子を使用し、指定したしきい値を超えた場合に検索ディクショナリを作成する、<see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-170">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e9783-170">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="e9783-171">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="e9783-171">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="e9783-172">このコンス トラクターでは、その動作をオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="e9783-172">This constructor allows you to override that behavior.</span></span> <span data-ttu-id="e9783-173">最初の要素が追加されたときに、ディクショナリを作成する場合は 0、2 番目の要素が追加されると、ディクショナリを作成する場合は 1 を指定します。</span><span class="sxs-lookup"><span data-stu-id="e9783-173">Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</span></span> <span data-ttu-id="e9783-174">しきい値として – 1 を指定する場合、検索ディクショナリが作成されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-174">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
 <span data-ttu-id="e9783-175">非常に小規模なコレクション検索ディクショナリによって指定された検索の速度の向上がありますすべきディクショナリで必要な追加のメモリ。</span><span class="sxs-lookup"><span data-stu-id="e9783-175">For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</span></span> <span data-ttu-id="e9783-176">しきい値を設定するには、トレードオフするタイミングを決定することができます。</span><span class="sxs-lookup"><span data-stu-id="e9783-176">Setting a threshold allows you to decide when to make that tradeoff.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e9783-177"><xref:System.Collections.ObjectModel.KeyedCollection%602>クラスは抽象クラスです (`MustInherit` Visual Basic で)、それを使用するために、そこから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e9783-177">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="e9783-178">派生型のコンス トラクターで呼び出して、適切な<xref:System.Collections.ObjectModel.KeyedCollection%602>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="e9783-178">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="e9783-179">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e9783-179">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="e9783-180">このコンス トラクターは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="e9783-180">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-181">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="e9783-181">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="e9783-182">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="e9783-182">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="e9783-183">コード例では、 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 0 の場合のしきい値を持つコンス トラクターは内部辞書で最初に、オブジェクトが作成されるように、コレクションに追加されます。</span><span class="sxs-lookup"><span data-stu-id="e9783-183">The code example uses the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</span></span>  
  
 <span data-ttu-id="e9783-184">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="e9783-184">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="e9783-185">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="e9783-185">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="e9783-186">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="e9783-186">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="e9783-187">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-187">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="e9783-188">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-188">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="e9783-189">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-189">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e9783-190">
            <paramref name="dictionaryCreationThreshold" /> が -1 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-190">
              <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e9783-191">変更するキーの要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-191">The element to change the key of.</span>
          </span>
        </param>
        <param name="newKey">
          <span data-ttu-id="e9783-192">
            <c>item</c> の新しいキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-192">The new key for <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-193">検索ディクショナリの指定した要素に関連付けられたキーを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-194">このメソッドに埋め込まれたキーを変更していない`item`; 検索ディクショナリに保存されているキーを置き換えるだけです。</span><span class="sxs-lookup"><span data-stu-id="e9783-194">This method does not modify the key embedded in `item`; it simply replaces the key saved in the lookup dictionary.</span></span>  <span data-ttu-id="e9783-195">したがって場合、`newKey`に埋め込まれているキーとは異なる`item`、アクセスすることはできません`item`によって返されたキーを使用して<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-195">Therefore, if `newKey` is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="e9783-196">このメソッドは、何も行わない場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリではありません。</span><span class="sxs-lookup"><span data-stu-id="e9783-196">This method does nothing if the <xref:System.Collections.ObjectModel.KeyedCollection%602> does not have a lookup dictionary.</span></span>  
  
 <span data-ttu-id="e9783-197">内のすべてのキー、<xref:System.Collections.ObjectModel.KeyedCollection%602>一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="e9783-197">Every key in a <xref:System.Collections.ObjectModel.KeyedCollection%602> must be unique.</span></span> <span data-ttu-id="e9783-198">キーには`null`します。</span><span class="sxs-lookup"><span data-stu-id="e9783-198">A key cannot be `null`.</span></span>  
  
 <span data-ttu-id="e9783-199">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="e9783-199">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="e9783-200">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="e9783-200">Notes for Implementers</span></span>  
 <span data-ttu-id="e9783-201">アイテムに埋め込まれているキーを変更する前に検索ディクショナリのキーを更新するには、このメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="e9783-201">Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</span></span> <span data-ttu-id="e9783-202">ディクショナリの作成のしきい値が-1 の場合は、このメソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e9783-202">If the dictionary creation threshold is –1, calling this method is not necessary.</span></span>  
  
 <span data-ttu-id="e9783-203">公開しない、<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>メソッドを派生クラスのパブリック メソッドとして。</span><span class="sxs-lookup"><span data-stu-id="e9783-203">Do not expose the <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method as a public method of a derived class.</span></span> <span data-ttu-id="e9783-204">このメソッドの不正使用では、項目のキーを持つ同期検索ディクショナリを格納します。</span><span class="sxs-lookup"><span data-stu-id="e9783-204">Misuse of this method puts the lookup dictionary out of sync with item keys.</span></span> <span data-ttu-id="e9783-205">たとえば、キーを設定`null`検索ディクショナリをアイテムに対して複数のキーを追加し、別の値に設定するとします。</span><span class="sxs-lookup"><span data-stu-id="e9783-205">For example, setting the key to `null` and then setting it to another value adds multiple keys for an item to the lookup dictionary.</span></span> <span data-ttu-id="e9783-206">変更可能な項目のキーを許可するには、内部的には、このメソッドを公開します。 検索ディクショナリのキーを変更するこのメソッドを使用する項目のキーが変更されたときにします。</span><span class="sxs-lookup"><span data-stu-id="e9783-206">Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-207">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e9783-207">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="e9783-208">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-208">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="e9783-209">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-209">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="e9783-210">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-210">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="e9783-211">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-211">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="e9783-212">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-212">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="e9783-213">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-213">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="e9783-214">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="e9783-214">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9783-215">
            <paramref name="item" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-215">
              <paramref name="item" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e9783-216">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-216">-or-</span>
          </span>
          <span data-ttu-id="e9783-217">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-217">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e9783-218">
            <paramref name="item" /> が見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-218">
              <paramref name="item" /> is not found.</span>
          </span>
          <span data-ttu-id="e9783-219">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-219">-or-</span>
          </span>
          <span data-ttu-id="e9783-220">
            <paramref name="key" /> は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> に既に存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-220">
              <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e9783-221">
            <see cref="T:System.Collections.ObjectModel.KeyedCollection\`2" /> からすべての要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-221">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-222">検索ディクショナリがある場合、このメソッドはそれをクリアが削除されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-222">If there is a lookup dictionary, this method clears it but does not delete it.</span></span>  
  
 <span data-ttu-id="e9783-223">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-223">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="e9783-224">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e9783-224">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="e9783-225">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="e9783-225">Notes for Implementers</span></span>  
 <span data-ttu-id="e9783-226">動作をカスタマイズするには、このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-226">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="e9783-227">このメソッドを基になるコレクションをクリアし、検索ディクショナリをオフにするの基本クラス実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e9783-227">Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-228">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>コレクションからすべてのオブジェクトをクリアするためのカスタム動作を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="e9783-228">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> method to provide custom behavior for clearing all objects from the collection.</span></span> <span data-ttu-id="e9783-229">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-229">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="e9783-230">例 1</span><span class="sxs-lookup"><span data-stu-id="e9783-230">Example 1</span></span>  
  
 <span data-ttu-id="e9783-231">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="e9783-231">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="e9783-232">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="e9783-232">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="e9783-233">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="e9783-233">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="e9783-234">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="e9783-234">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="e9783-235">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="e9783-235">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="e9783-236">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-236">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="e9783-237">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-237">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="e9783-238">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-238">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="e9783-239">例 2</span><span class="sxs-lookup"><span data-stu-id="e9783-239">Example 2</span></span>  
  
 <span data-ttu-id="e9783-240">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e9783-240">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="e9783-241">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-241">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="e9783-242">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-242">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="e9783-243">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-243">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="e9783-244">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-244">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="e9783-245">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-245">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="e9783-246">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-246">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="e9783-247">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="e9783-247">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e9783-248">コレクションの複数のキーの値が等しいかどうかを確認するために使用される、ジェネリック等値比較子を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-248">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e9783-249">コレクションの複数のキーの値が等しいかどうかを確認するために使用される <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-249">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-250">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="e9783-250">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="e9783-251">
            <see cref="T:System.Collections.ObjectModel.KeyedCollection\`2" /> 内で検索されるキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-251">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-252">指定したキーの要素がコレクションに含まれているかどうかを確認します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-252">Determines whether the collection contains an element with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9783-253">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-253">
              <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-254">場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリを持つ`key`ディクショナリを検索するために使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-254">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to search the dictionary.</span></span> <span data-ttu-id="e9783-255">使用して、各要素のキーを抽出検索ディクショナリがない場合、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッド、指定したキーと比較します。</span><span class="sxs-lookup"><span data-stu-id="e9783-255">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="e9783-256">場合、このメソッドは、o (1) 操作に、 <xref:System.Collections.ObjectModel.KeyedCollection%602> ; 検索ディクショナリがそれ以外の場合これは、O (`n`) 操作、場所`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e9783-256">This method is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-257">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-257">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="e9783-258">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-258">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="e9783-259">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e9783-259">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="e9783-260">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-260">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="e9783-261">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-261">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9783-262">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-262">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e9783-263">
            <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-263">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e9783-264">存在する場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリ。それ以外の場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-264">The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-265">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="e9783-265">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="e9783-266">アイテムを追加するときに、<xref:System.Collections.ObjectModel.KeyedCollection%602>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</span><span class="sxs-lookup"><span data-stu-id="e9783-266">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="e9783-267">使用してこの動作をオーバーライドすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29>コンス トラクターとディクショナリの作成のしきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="e9783-267">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
 <span data-ttu-id="e9783-268">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="e9783-268">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-269">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e9783-269">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="e9783-270">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-270">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="e9783-271">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-271">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="e9783-272">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-272">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="e9783-273">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-273">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="e9783-274">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-274">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="e9783-275">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-275">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="e9783-276">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="e9783-276">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="e9783-277">キーの抽出元要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-277">The element from which to extract the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-278">派生クラスで実装された場合、指定した要素からキーを抽出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-278">When implemented in a derived class, extracts the key from the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9783-279">指定した要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-279">The key for the specified element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-280">検索ディクショナリのキーに埋め込まれているキーと異なる場合`item`、アクセスすることはできません`item`によって返されたキーを使用して<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-280">If the key in the lookup dictionary is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="e9783-281">返すには、このメソッドを実装することができます`null`キーを持たない項目を格納するコレクションは、この場合、項目にアクセスできる、インデックスでのみです。</span><span class="sxs-lookup"><span data-stu-id="e9783-281">You can implement this method to return `null` for a collection that contains items without keys, in which case the items can be accessed only by their index.</span></span> <span data-ttu-id="e9783-282">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="e9783-282">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="e9783-283">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="e9783-283">Notes for Implementers</span></span>  
 <span data-ttu-id="e9783-284">ディクショナリ内の項目からキーを抽出する方法にディクショナリを提供するには、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e9783-284">You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</span></span>  
  
 <span data-ttu-id="e9783-285">このメソッドは、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e9783-285">This method is called internally.</span></span> <span data-ttu-id="e9783-286">パブリックにする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e9783-286">It is not necessary for it to be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-287">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-287">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="e9783-288">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-288">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="e9783-289">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e9783-289">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="e9783-290">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-290">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="e9783-291">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-291">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e9783-292">
            <c>item</c> を挿入する位置の、0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-292">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e9783-293">挿入するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-293">The object to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-294">
            <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内の指定したインデックスの位置に要素を挿入します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-294">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-295">場合`index`と等しい<xref:System.Collections.ObjectModel.Collection%601.Count%2A>、`item`の末尾に追加された、<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-295">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span>  
  
 <span data-ttu-id="e9783-296">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e9783-296">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="e9783-297"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> によって呼び出される、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>と<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-297"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> is called by the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="e9783-298">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="e9783-298">Notes for Implementers</span></span>  
 <span data-ttu-id="e9783-299">動作をカスタマイズするには、このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>と<xref:System.Collections.ObjectModel.Collection%601.Insert%2A>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-299">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="e9783-300">基になるコレクションに項目を挿入し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e9783-300">Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-301">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドを追加またはコレクションにオブジェクトを挿入するためのカスタム動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-301">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method to provide custom behavior for adding or inserting objects into the collection.</span></span> <span data-ttu-id="e9783-302">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-302">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="e9783-303">例 1</span><span class="sxs-lookup"><span data-stu-id="e9783-303">Example 1</span></span>  
  
 <span data-ttu-id="e9783-304">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="e9783-304">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="e9783-305">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="e9783-305">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="e9783-306">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="e9783-306">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="e9783-307">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="e9783-307">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="e9783-308">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="e9783-308">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="e9783-309">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-309">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="e9783-310">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-310">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="e9783-311">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-311">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="e9783-312">例 2</span><span class="sxs-lookup"><span data-stu-id="e9783-312">Example 2</span></span>  
  
 <span data-ttu-id="e9783-313">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e9783-313">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="e9783-314">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-314">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="e9783-315">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-315">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="e9783-316">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-316">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="e9783-317">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-317">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="e9783-318">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-318">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="e9783-319">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-319">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="e9783-320">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="e9783-320">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e9783-321">
            <paramref name="index" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-321">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e9783-322">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-322">-or-</span>
          </span>
          <span data-ttu-id="e9783-323">
            <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-323">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="e9783-324">取得する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-324">The key of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-325">指定したキーを持つ要素を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-325">Gets the element with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e9783-326">指定したキーを持つ要素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-326">The element with the specified key.</span>
          </span>
          <span data-ttu-id="e9783-327">指定したキーを持つ要素が見つからない場合は、例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-327">If an element with the specified key is not found, an exception is thrown.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-328">このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。 `myCollection[key]` (`myCollection(key)` Visual Basic で)。</span><span class="sxs-lookup"><span data-stu-id="e9783-328">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e9783-329">このプロパティは、継承された異なる<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティを取得し、数値インデックスで要素を設定します。</span><span class="sxs-lookup"><span data-stu-id="e9783-329">This property is distinct from the inherited <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which gets and sets elements by numeric index.</span></span> <span data-ttu-id="e9783-330">ただし場合、`TKey`の種類は<xref:System.Int32>、このプロパティは、継承されたプロパティをマスクします。</span><span class="sxs-lookup"><span data-stu-id="e9783-330">However, if `TKey` is of type <xref:System.Int32>, this property masks the inherited property.</span></span> <span data-ttu-id="e9783-331">その場合は、キャストによって継承されたプロパティにアクセスすることができます、<xref:System.Collections.ObjectModel.KeyedCollection%602>その基本型にします。</span><span class="sxs-lookup"><span data-stu-id="e9783-331">In that case, you can access the inherited property by casting the <xref:System.Collections.ObjectModel.KeyedCollection%602> to its base type.</span></span> <span data-ttu-id="e9783-332">たとえば、 `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` Visual basic で`KeyedCollection<int, MyType^>`C++ で) にキャストできます`Collection<MyType>`(`Collection(Of MyType)` Visual basic で`Collection<MyType^>`C++ で)。</span><span class="sxs-lookup"><span data-stu-id="e9783-332">For example, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic, `KeyedCollection<int, MyType^>` in C++) can be cast to `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic, `Collection<MyType^>` in C++).</span></span>  
  
 <span data-ttu-id="e9783-333">場合、<xref:System.Collections.ObjectModel.KeyedCollection%602>検索ディクショナリを持つ`key`ディクショナリから要素を取得するために使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-333">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to retrieve the element from the dictionary.</span></span>  <span data-ttu-id="e9783-334">使用して、各要素のキーを抽出検索ディクショナリがない場合、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>メソッド、指定したキーと比較します。</span><span class="sxs-lookup"><span data-stu-id="e9783-334">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="e9783-335">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-335">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="e9783-336">Visual Basic は、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-336">Visual Basic implements <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="e9783-337">場合は、o (1) 操作には、このプロパティの値を取得、<xref:System.Collections.ObjectModel.KeyedCollection%602>が検索ディクショナリです。 それ以外の場合これは、O (`n`) 操作、場所`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e9783-337">Retrieving the value of this property is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-338">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-338">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="e9783-339">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-339">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="e9783-340">このコード例では、両方を呼び出します、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>プロパティは読み取り専用としてキーを取得、および<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティが設定可能なのインデックスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e9783-340">The code example calls both the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only and retrieves by key, and the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which is settable and retrieves by index.</span></span> <span data-ttu-id="e9783-341">派生コレクション内のオブジェクトの整数キー、インデックス検索に使用される整数と区別することがある場合、後者のプロパティにアクセスする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="e9783-341">It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</span></span>  
  
 <span data-ttu-id="e9783-342">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e9783-342">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="e9783-343">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-343">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="e9783-344">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-344">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9783-345">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-345">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="e9783-346">指定したキーを持つ要素がコレクション内に存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-346">An element with the specified key does not exist in the collection.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="e9783-347">削除する要素のキー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-347">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-348">指定したキーを持つ要素を <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> から削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-348">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9783-349">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-349">
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e9783-350">このメソッドは、<see langword="false" /> が <paramref name="key" /> に見つからない場合にも <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-350">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-351">要素のキーは、検索ディクショナリからも削除されます。</span><span class="sxs-lookup"><span data-stu-id="e9783-351">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="e9783-352">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-352">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e9783-353">このメソッドの動作をカスタマイズするには、上書き、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-353">To customize the behavior of this method, override the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method.</span></span>  
  
 <span data-ttu-id="e9783-354">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e9783-354">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-355">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-355">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="e9783-356">コード例も示して多くのプロパティおよびメソッドから継承<xref:System.Collections.ObjectModel.KeyedCollection%602>と<xref:System.Collections.ObjectModel.Collection%601>クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-356">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="e9783-357">例を示します<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>から継承されたメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602>、指定したキーを持つ項目を削除しても、<xref:System.Collections.ObjectModel.Collection%601.Remove%2A>と<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A>から継承されたメソッド<xref:System.Collections.ObjectModel.Collection%601>インデックスとオブジェクトによってをそれぞれ削除します。</span><span class="sxs-lookup"><span data-stu-id="e9783-357">The example demonstrates <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> method inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602>, which removes the item with a specified key, and also the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> methods inherited from <xref:System.Collections.ObjectModel.Collection%601>, which remove by object and by index respectively.</span></span>  
  
 <span data-ttu-id="e9783-358">`SimpleOrder`クラスは、非常に単純な要求 ボックスの一覧を含む`OrderItem`注文の行アイテムを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="e9783-358">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="e9783-359">キー`OrderItem`は変更できないから派生するクラスの重要な考慮事項<xref:System.Collections.ObjectModel.KeyedCollection%602>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-359">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="e9783-360">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-360">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9783-361">
            <paramref name="key" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-361">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e9783-362">削除する要素のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-362">The index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-363">
            <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の指定したインデックスにある要素を削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-363">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-364">要素のキーは、検索ディクショナリからも削除されます。</span><span class="sxs-lookup"><span data-stu-id="e9783-364">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="e9783-365">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<xref:System.Collections.ObjectModel.KeyedCollection%602>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-365">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="e9783-366">このメソッドは、O (`n`) 操作では、ここで`n`は<xref:System.Collections.ObjectModel.Collection%601.Count%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e9783-366">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="e9783-367">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="e9783-367">Notes for Implementers</span></span>  
 <span data-ttu-id="e9783-368">動作をカスタマイズするには、このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29>と<xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29>から継承されたメソッド、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスは、および<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-368">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class, and the <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> method.</span></span>  
  
 <span data-ttu-id="e9783-369">基になるコレクションから項目を削除し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e9783-369">Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-370">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>をコレクションからオブジェクトを削除するカスタム動作を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="e9783-370">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method to provide custom behavior for removing objects from the collection.</span></span> <span data-ttu-id="e9783-371">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-371">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="e9783-372">例 1</span><span class="sxs-lookup"><span data-stu-id="e9783-372">Example 1</span></span>  
  
 <span data-ttu-id="e9783-373">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="e9783-373">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="e9783-374">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="e9783-374">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="e9783-375">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="e9783-375">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="e9783-376">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="e9783-376">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="e9783-377">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="e9783-377">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="e9783-378">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-378">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="e9783-379">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-379">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="e9783-380">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-380">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="e9783-381">例 2</span><span class="sxs-lookup"><span data-stu-id="e9783-381">Example 2</span></span>  
  
 <span data-ttu-id="e9783-382">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e9783-382">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="e9783-383">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-383">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="e9783-384">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-384">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="e9783-385">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-385">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="e9783-386">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-386">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="e9783-387">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-387">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="e9783-388">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-388">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="e9783-389">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="e9783-389">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="e9783-390">置き換えられる項目の 0 から始まるインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-390">The zero-based index of the item to be replaced.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e9783-391">新しい項目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-391">The new item.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9783-392">指定したインデックス位置の項目を、指定した項目で置き換えます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9783-392">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9783-393">検索ディクショナリは、それに従って更新されます。</span><span class="sxs-lookup"><span data-stu-id="e9783-393">The lookup dictionary is updated accordingly.</span></span> <span data-ttu-id="e9783-394">つまり、置き換えられる項目のキーは検索ディクショナリから削除され、新しい項目のキーが追加されます。</span><span class="sxs-lookup"><span data-stu-id="e9783-394">That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</span></span>  
  
 <span data-ttu-id="e9783-395">このメソッドは、o (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="e9783-395">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="e9783-396">実装についてのメモ</span><span class="sxs-lookup"><span data-stu-id="e9783-396">Notes for Implementers</span></span>  
 <span data-ttu-id="e9783-397">設定の動作をカスタマイズするには、このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティから継承、<xref:System.Collections.ObjectModel.Collection%601>ジェネリック クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-397">Override this method to provide customized behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e9783-398">このメソッドではの動作には影響しません、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType>プロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="e9783-398">This method does not affect the behavior of the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only.</span></span>  
  
 <span data-ttu-id="e9783-399">基になるコレクションの項目を設定し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e9783-399">Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9783-400">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>設定のカスタム動作を提供するメソッドを<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-400">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> method to provide custom behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e9783-401">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="e9783-401">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="e9783-402">例 1</span><span class="sxs-lookup"><span data-stu-id="e9783-402">Example 1</span></span>  
  
 <span data-ttu-id="e9783-403">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および<xref:System.Collections.ObjectModel.Collection%601.Clear%2A>メソッド、および既定の設定<xref:System.Collections.ObjectModel.Collection%601.Item%2A>プロパティ (c# のインデクサー)。</span><span class="sxs-lookup"><span data-stu-id="e9783-403">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="e9783-404">この例で提供されるカスタムの動作は、という名前の通知イベント`Changed`、これらのオーバーライドされたメソッドの最後にこれが発生します。</span><span class="sxs-lookup"><span data-stu-id="e9783-404">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="e9783-405">コード例を作成、`SimpleOrder`から派生するクラス<xref:System.Collections.ObjectModel.KeyedCollection%602>単純な注文形式を表します。</span><span class="sxs-lookup"><span data-stu-id="e9783-405">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="e9783-406">注文フォームを含む`OrderItem`注文のアイテムを表すオブジェクトします。</span><span class="sxs-lookup"><span data-stu-id="e9783-406">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="e9783-407">コード例でも作成、`SimpleOrderChangedEventArgs`イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</span><span class="sxs-lookup"><span data-stu-id="e9783-407">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="e9783-408">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、`Main`のメソッド、`Demo`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-408">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="e9783-409">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="e9783-409">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="e9783-410">変更可能なキーを使用するコード例は、次を参照してください。<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>です。</span><span class="sxs-lookup"><span data-stu-id="e9783-410">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="e9783-411">例 2</span><span class="sxs-lookup"><span data-stu-id="e9783-411">Example 2</span></span>  
  
 <span data-ttu-id="e9783-412">次のコード例は、保護されたをオーバーライドする方法を示しています<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および<xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A>キーの整合性を維持するためにメソッドおよびコレクションです。</span><span class="sxs-lookup"><span data-stu-id="e9783-412">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="e9783-413">コード例を作成、`MutableKeys`から派生するコレクション<xref:System.Collections.ObjectModel.KeyedCollection%602>、および`MutableKey`クラスです。</span><span class="sxs-lookup"><span data-stu-id="e9783-413">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="e9783-414">`MutableKey`クラスには、設定可能な`Key`プロパティです。</span><span class="sxs-lookup"><span data-stu-id="e9783-414">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="e9783-415">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` (`Friend` Visual Basic で)`ChangeKey`を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-415">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="e9783-416">場合は、例外がスローされ、プロパティの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="e9783-416">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="e9783-417">間の接続を維持するために、`MutableKey`オブジェクトおよび`MutableKeys`コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、`MutableKey`クラスには、 `internal` (`Friend` Visual Basic で) `Collection`フィールドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-417">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="e9783-418">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="e9783-418">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="e9783-419">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</span><span class="sxs-lookup"><span data-stu-id="e9783-419">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>