<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="KeyedCollection`2.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53375080ab008f35379a851d18f700db732edfd23.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3375080ab008f35379a851d18f700db732edfd23</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The type of keys in the collection.</source>
          <target state="translated">コレクション内のキーの型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The type of items in the collection.</source>
          <target state="translated">コレクション内の項目の型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Provides the abstract base class for a collection whose keys are embedded in the values.</source>
          <target state="translated">キーが値に埋め込まれているコレクションの抽象基本クラスを提供します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>両方 o (1) が検索インデックスが作成され、o (1) に匹敵する検索キー指定されたクラスが用意されています。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</source>
          <target state="translated">型が抽象型、または抽象基本クラスは、それぞれの構築ジェネリック型のための抽象型は、の無限がより正確に設定します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>To use <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, derive your collection type from the appropriate constructed type.</source>
          <target state="translated">使用する<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、適切な構築された型から、そのコレクション型を派生します。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is a hybrid between a collection based on the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface and a collection based on the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> generic interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>クラスは、基にしたコレクションの間でのハイブリッド、<ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>ジェネリック インターフェイス型とコレクションに基づいて、<ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>ジェネリック インターフェイス。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Like collections based on the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is an indexed list of items.</source>
          <target state="translated">基づくコレクションと同様に、<ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>ジェネリック インターフェイスは、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>項目のインデックス付きのリストです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Like collections based on the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> generic interface, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a key associated with each element.</source>
          <target state="translated">基づくコレクションと同様に、<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>ジェネリック インターフェイスは、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>の各要素に関連付けられているキーが含まれています。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Unlike dictionaries, an element of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</source>
          <target state="translated">ディクショナリの要素とは異なり<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>キー/値ペアではありません; 代わりに、要素全体は値であり、キーが値に埋め込まれました。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For example, an element of a collection derived from <ph id="ph1">`KeyedCollection\&lt;String,String&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of String, String)`</ph> in Visual Basic) might be "John Doe Jr."</source>
          <target state="translated">派生したコレクションの要素など、 <ph id="ph1">`KeyedCollection\&lt;String,String&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of String, String)`</ph> Visual Basic で)"John doe さん Jr"があります。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>where the value is "John Doe Jr."</source>
          <target state="translated">この値は"John doe さん Jr"</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>and the key is "Doe"; or a collection of employee records containing integer keys could be derived from <ph id="ph1">`KeyedCollection\&lt;int,Employee&gt;`</ph>.</source>
          <target state="translated">キーが"Doe"です。整数キーを含む従業員レコードのコレクションはから派生するでした<ph id="ph1">`KeyedCollection\&lt;int,Employee&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The abstract <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method extracts the key from the element.</source>
          <target state="translated">抽象<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>メソッドは、要素からキーを抽出します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that you can obtain with the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A&gt;</ph> property.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>で入手できる検索ディクショナリが含まれています、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">アイテムを追加するときに、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This behavior is overridden by specifying a dictionary creation threshold when you create the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">作成するときに、ディクショナリの作成のしきい値を指定することによってこの動作がオーバーライドされる、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The lookup dictionary is created the first time the number of elements exceeds that threshold.</source>
          <target state="translated">検索ディクショナリの要素の数は、そのしきい値を超えています。 最初に作成されます。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>If you specify –1 as the threshold, the lookup dictionary is never created.</source>
          <target state="translated">しきい値として – 1 を指定する場合、検索ディクショナリが作成されません。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>When the internal lookup dictionary is used, it contains references to all the items in the collection if <ph id="ph1">`TItem`</ph> is a reference type, or copies of all the items in the collection if <ph id="ph2">`TItem`</ph> is a value type.</source>
          <target state="translated">場合、コレクション内のすべてのアイテムへの参照がある内部検索ディクショナリを使用すると<ph id="ph1">`TItem`</ph>、参照型では、場合、コレクション内のすべての項目のコピーまたは<ph id="ph2">`TItem`</ph>は値型です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Thus, using the lookup dictionary may not be appropriate if <ph id="ph1">`TItem`</ph> is a value type.</source>
          <target state="translated">したがって、検索ディクショナリを使用できない可能性があります適切な場合<ph id="ph1">`TItem`</ph>は値型です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>You can access an item by its index or key by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">使用してインデックスまたはキーによって項目にアクセスすることができます、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>You can add items without a key, but these items can subsequently be accessed only by index.</source>
          <target state="translated">、キーのない項目を追加することができますが、これらの項目は、インデックスによってのみアクセスされることができます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This section contains two code examples.</source>
          <target state="translated">このセクションには、2 つのコード例が含まれています。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The first example shows the minimum code required to derive from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and demonstrates many of the inherited methods.</source>
          <target state="translated">最初の例から派生するために必要最小限のコード<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、継承されたメソッドの多くを示しています。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The second example shows how to override the protected methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> to provide custom behavior.</source>
          <target state="translated">2 番目の例は、の保護されたメソッドをオーバーライドする方法を示しています。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>カスタム動作を提供します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>例 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: オーバーライドする、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">コード例も示して多くのプロパティおよびメソッドから継承<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph>クラスは、非常に単純な要求 ボックスの一覧を含む<ph id="ph2">`OrderItem`</ph>注文の行アイテムを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">キー<ph id="ph1">`OrderItem`</ph>は変更できないから派生するクラスの重要な考慮事項<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>例 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>のカスタム動作を提供する、メソッド、 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および既定の設定<ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、という名前の通知イベント<ph id="ph1">`Changed`</ph>、これらのオーバーライドされたメソッドの最後にこれが発生します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`SimpleOrder`</ph>から派生するクラス<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>単純な注文形式を表します。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">注文フォームを含む<ph id="ph1">`OrderItem`</ph>注文のアイテムを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">コード例でも作成、<ph id="ph1">`SimpleOrderChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、<ph id="ph1">`Main`</ph>のメソッド、<ph id="ph2">`Demo`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">このコード例では、変更できないキーを持つオブジェクトを使用します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the default equality comparer.</source>
          <target state="translated">既定の等値比較子を使用する <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>A <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>これで作成されたコンス トラクターから取得した、キーの種類の既定のジェネリック等値比較子を使用して<ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>To specify a different generic equality comparer, use the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> constructor or the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">異なるジェネリック等値比較子を指定するには、使用、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph>コンス トラクターまたは<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">アイテムを追加するときに、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">使用してこの動作をオーバーライドすることができます、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph>コンス トラクターとディクショナリの作成のしきい値を指定します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>クラスは抽象クラスです (<ph id="ph2">`MustInherit`</ph> Visual Basic で)、それを使用するために、そこから派生する必要があります。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">派生型のコンス トラクターで呼び出して、適切な<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: オーバーライドする、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">コード例も示して多くのプロパティおよびメソッドから継承<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph>クラスは、非常に単純な要求 ボックスの一覧を含む<ph id="ph2">`OrderItem`</ph>注文の行アイテムを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">キー<ph id="ph1">`OrderItem`</ph>は変更できないから派生するクラスの重要な考慮事項<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default equality comparer for the type of the key, obtained from <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">キーを比較する場合に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> ジェネリック インターフェイスの実装。または、<ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph> から取得する、キーの型の既定の等値比較子を使用する場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the specified equality comparer.</source>
          <target state="translated">指定した等値比較子を使用する <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">アイテムを追加するときに、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">使用してこの動作をオーバーライドすることができます、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph>コンス トラクターとディクショナリの作成のしきい値を指定します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>クラスは抽象クラスです (<ph id="ph2">`MustInherit`</ph> Visual Basic で)、それを使用するために、そこから派生する必要があります。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">派生型のコンス トラクターで呼び出して、適切な<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default equality comparer for the type of the key, obtained from <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">キーを比較する場合に使用する <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> ジェネリック インターフェイスの実装。または、<ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph> から取得する、キーの型の既定の等値比較子を使用する場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</source>
          <target state="translated">検索ディクショナリを作成せずにコレクションが保有できる要素数 (0 を指定すると最初の項目の追加時に検索ディクショナリが作成される)。検索ディクショナリを作成しない場合は -1。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</source>
          <target state="translated">指定した等値比較子を使用し、指定したしきい値を超えた場合に検索ディクショナリを作成する、<ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">アイテムを追加するときに、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This constructor allows you to override that behavior.</source>
          <target state="translated">このコンス トラクターでは、その動作をオーバーライドすることができます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</source>
          <target state="translated">最初の要素が追加されたときに、ディクショナリを作成する場合は 0、2 番目の要素が追加されると、ディクショナリを作成する場合は 1 を指定します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>If you specify –1 as the threshold, the lookup dictionary is never created.</source>
          <target state="translated">しきい値として – 1 を指定する場合、検索ディクショナリが作成されません。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</source>
          <target state="translated">非常に小規模なコレクション検索ディクショナリによって指定された検索の速度の向上がありますすべきディクショナリで必要な追加のメモリ。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Setting a threshold allows you to decide when to make that tradeoff.</source>
          <target state="translated">しきい値を設定するには、トレードオフするタイミングを決定することができます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>クラスは抽象クラスです (<ph id="ph2">`MustInherit`</ph> Visual Basic で)、それを使用するために、そこから派生する必要があります。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">派生型のコンス トラクターで呼び出して、適切な<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>コンス トラクターです。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">等値比較演算子またはコンス トラクター内のディクショナリ作成のしきい値などの機能を公開する必要はありません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">このコンス トラクターは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>のカスタム動作を提供する、メソッド、 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および既定の設定<ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、という名前の通知イベント<ph id="ph1">`Changed`</ph>、これらのオーバーライドされたメソッドの最後にこれが発生します。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</source>
          <target state="translated">コード例では、 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> 0 の場合のしきい値を持つコンス トラクターは内部辞書で最初に、オブジェクトが作成されるように、コレクションに追加されます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`SimpleOrder`</ph>から派生するクラス<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>単純な注文形式を表します。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">注文フォームを含む<ph id="ph1">`OrderItem`</ph>注文のアイテムを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">コード例でも作成、<ph id="ph1">`SimpleOrderChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、<ph id="ph1">`Main`</ph>のメソッド、<ph id="ph2">`Demo`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">このコード例では、変更できないキーを持つオブジェクトを使用します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="dictionaryCreationThreshold" /&gt;</ph> is less than –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionaryCreationThreshold" /&gt;</ph> が -1 未満です。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The element to change the key of.</source>
          <target state="translated">変更するキーの要素。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The new key for <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> の新しいキー。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Changes the key associated with the specified element in the lookup dictionary.</source>
          <target state="translated">検索ディクショナリの指定した要素に関連付けられたキーを変更します。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method does not modify the key embedded in <ph id="ph1">`item`</ph>; it simply replaces the key saved in the lookup dictionary.</source>
          <target state="translated">このメソッドに埋め込まれたキーを変更していない<ph id="ph1">`item`</ph>; 検索ディクショナリに保存されているキーを置き換えるだけです。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Therefore, if <ph id="ph1">`newKey`</ph> is different from the key that is embedded in <ph id="ph2">`item`</ph>, you cannot access <ph id="ph3">`item`</ph> by using the key returned by <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>.</source>
          <target state="translated">したがって場合、<ph id="ph1">`newKey`</ph>に埋め込まれているキーとは異なる<ph id="ph2">`item`</ph>、アクセスすることはできません<ph id="ph3">`item`</ph>によって返されたキーを使用して<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method does nothing if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> does not have a lookup dictionary.</source>
          <target state="translated">このメソッドは、何も行わない場合、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>検索ディクショナリではありません。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> must be unique.</source>
          <target state="translated">内のすべてのキー、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>一意である必要があります。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>A key cannot be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">キーには<ph id="ph1">`null`</ph>します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Notes for Implementers</source>
          <target state="translated">実装についてのメモ</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</source>
          <target state="translated">アイテムに埋め込まれているキーを変更する前に検索ディクショナリのキーを更新するには、このメソッドを呼び出す必要があります。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>If the dictionary creation threshold is –1, calling this method is not necessary.</source>
          <target state="translated">ディクショナリの作成のしきい値が-1 の場合は、このメソッドを呼び出す必要はありません。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Do not expose the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method as a public method of a derived class.</source>
          <target state="translated">公開しない、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>メソッドを派生クラスのパブリック メソッドとして。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Misuse of this method puts the lookup dictionary out of sync with item keys.</source>
          <target state="translated">このメソッドの不正使用では、項目のキーを持つ同期検索ディクショナリを格納します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>For example, setting the key to <ph id="ph1">`null`</ph> and then setting it to another value adds multiple keys for an item to the lookup dictionary.</source>
          <target state="translated">たとえば、キーを設定<ph id="ph1">`null`</ph>検索ディクショナリをアイテムに対して複数のキーを追加し、別の値に設定するとします。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</source>
          <target state="translated">変更可能な項目のキーを許可するには、内部的には、このメソッドを公開します。 検索ディクショナリのキーを変更するこのメソッドを使用する項目のキーが変更されたときにします。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>キーの整合性を維持するためにメソッドおよびコレクションです。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`MutableKeys`</ph>から派生するコレクション<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、および<ph id="ph3">`MutableKey`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph>クラスには、設定可能な<ph id="ph2">`Key`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic で)<ph id="ph3">`ChangeKey`</ph>を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">場合は、例外がスローされ、プロパティの値は変更されません。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">間の接続を維持するために、<ph id="ph1">`MutableKey`</ph>オブジェクトおよび<ph id="ph2">`MutableKeys`</ph>コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、<ph id="ph3">`MutableKey`</ph>クラスには、 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual Basic で) <ph id="ph6">`Collection`</ph>フィールドです。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph> が見つかりません。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> already exists in the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> に既に存在します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> からすべての要素を削除します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If there is a lookup dictionary, this method clears it but does not delete it.</source>
          <target state="translated">検索ディクショナリがある場合、このメソッドはそれをクリアが削除されません。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Notes for Implementers</source>
          <target state="translated">実装についてのメモ</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method, inherited from the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">動作をカスタマイズするには、このメソッドをオーバーライドして、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>から継承されたメソッド、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</source>
          <target state="translated">このメソッドを基になるコレクションをクリアし、検索ディクショナリをオフにするの基本クラス実装を呼び出します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> method to provide custom behavior for clearing all objects from the collection.</source>
          <target state="translated">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>コレクションからすべてのオブジェクトをクリアするためのカスタム動作を提供するメソッド。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Example 1</source>
          <target state="translated">例 1</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>のカスタム動作を提供する、メソッド、 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および既定の設定<ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、という名前の通知イベント<ph id="ph1">`Changed`</ph>、これらのオーバーライドされたメソッドの最後にこれが発生します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`SimpleOrder`</ph>から派生するクラス<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>単純な注文形式を表します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">注文フォームを含む<ph id="ph1">`OrderItem`</ph>注文のアイテムを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">コード例でも作成、<ph id="ph1">`SimpleOrderChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、<ph id="ph1">`Main`</ph>のメソッド、<ph id="ph2">`Demo`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">このコード例では、変更できないキーを持つオブジェクトを使用します。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Example 2</source>
          <target state="translated">例 2</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>キーの整合性を維持するためにメソッドおよびコレクションです。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`MutableKeys`</ph>から派生するコレクション<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、および<ph id="ph3">`MutableKey`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph>クラスには、設定可能な<ph id="ph2">`Key`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic で)<ph id="ph3">`ChangeKey`</ph>を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">場合は、例外がスローされ、プロパティの値は変更されません。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">間の接続を維持するために、<ph id="ph1">`MutableKey`</ph>オブジェクトおよび<ph id="ph2">`MutableKeys`</ph>コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、<ph id="ph3">`MutableKey`</ph>クラスには、 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual Basic で) <ph id="ph6">`Collection`</ph>フィールドです。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>Gets the generic equality comparer that is used to determine equality of keys in the collection.</source>
          <target state="translated">コレクションの複数のキーの値が等しいかどうかを確認するために使用される、ジェネリック等値比較子を取得します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface that is used to determine equality of keys in the collection.</source>
          <target state="translated">コレクションの複数のキーの値が等しいかどうかを確認するために使用される <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> ジェネリック インターフェイスの実装。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> 内で検索されるキー。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>Determines whether the collection contains an element with the specified key.</source>
          <target state="translated">指定したキーの要素がコレクションに含まれているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したキーを持つ要素が <ph id="ph1">&lt;see langword="true" /&gt;</ph> に格納されている場合は <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary, <ph id="ph2">`key`</ph> is used to search the dictionary.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>検索ディクショナリを持つ<ph id="ph2">`key`</ph>ディクショナリを検索するために使用します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>If there is no lookup dictionary, the key of each element is extracted using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and compared with the specified key.</source>
          <target state="translated">使用して、各要素のキーを抽出検索ディクショナリがない場合、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>メソッド、指定したキーと比較します。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>This method is an O(1) operation if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary; otherwise it is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">場合、このメソッドは、o (1) 操作に、 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> ; 検索ディクショナリがそれ以外の場合これは、O (<ph id="ph2">`n`</ph>) 操作、場所<ph id="ph3">`n`</ph>は<ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: オーバーライドする、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">コード例も示して多くのプロパティおよびメソッドから継承<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph>クラスは、非常に単純な要求 ボックスの一覧を含む<ph id="ph2">`OrderItem`</ph>注文の行アイテムを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">キー<ph id="ph1">`OrderItem`</ph>は変更できないから派生するクラスの重要な考慮事項<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>Gets the lookup dictionary of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> の検索ディクショナリを取得します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The lookup dictionary of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>, if it exists; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">存在する場合は <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> の検索ディクショナリ。それ以外の場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">既定では、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>最初の項目が追加されたときに作成される検索ディクショナリが含まれています。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">アイテムを追加するときに、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>項目のキーが 1 回に抽出され、高速な検索ルックアップ辞書に保存します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">使用してこの動作をオーバーライドすることができます、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph>コンス トラクターとディクショナリの作成のしきい値を指定します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">このプロパティ値を取得することは、O(1) 操作になります。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>キーの整合性を維持するためにメソッドおよびコレクションです。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`MutableKeys`</ph>から派生するコレクション<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、および<ph id="ph3">`MutableKey`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph>クラスには、設定可能な<ph id="ph2">`Key`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic で)<ph id="ph3">`ChangeKey`</ph>を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">場合は、例外がスローされ、プロパティの値は変更されません。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">間の接続を維持するために、<ph id="ph1">`MutableKey`</ph>オブジェクトおよび<ph id="ph2">`MutableKeys`</ph>コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、<ph id="ph3">`MutableKey`</ph>クラスには、 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual Basic で) <ph id="ph6">`Collection`</ph>フィールドです。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The element from which to extract the key.</source>
          <target state="translated">キーの抽出元要素。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>When implemented in a derived class, extracts the key from the specified element.</source>
          <target state="translated">派生クラスで実装された場合、指定した要素からキーを抽出します。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The key for the specified element.</source>
          <target state="translated">指定した要素のキー。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>If the key in the lookup dictionary is different from the key that is embedded in <ph id="ph1">`item`</ph>, you cannot access <ph id="ph2">`item`</ph> by using the key returned by <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>.</source>
          <target state="translated">検索ディクショナリのキーに埋め込まれているキーと異なる場合<ph id="ph1">`item`</ph>、アクセスすることはできません<ph id="ph2">`item`</ph>によって返されたキーを使用して<ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>You can implement this method to return <ph id="ph1">`null`</ph> for a collection that contains items without keys, in which case the items can be accessed only by their index.</source>
          <target state="translated">返すには、このメソッドを実装することができます<ph id="ph1">`null`</ph>キーを持たない項目を格納するコレクションは、この場合、項目にアクセスできる、インデックスでのみです。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>Notes for Implementers</source>
          <target state="translated">実装についてのメモ</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</source>
          <target state="translated">ディクショナリ内の項目からキーを抽出する方法にディクショナリを提供するには、このメソッドをオーバーライドする必要があります。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This method is called internally.</source>
          <target state="translated">このメソッドは、内部的に呼び出されます。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>It is not necessary for it to be public.</source>
          <target state="translated">パブリックにする必要はありません。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: オーバーライドする、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">コード例も示して多くのプロパティおよびメソッドから継承<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph>クラスは、非常に単純な要求 ボックスの一覧を含む<ph id="ph2">`OrderItem`</ph>注文の行アイテムを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">キー<ph id="ph1">`OrderItem`</ph>は変更できないから派生するクラスの重要な考慮事項<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> を挿入する位置の、0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The object to insert.</source>
          <target state="translated">挿入するオブジェクト。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> 内の指定したインデックスの位置に要素を挿入します。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> is added to the end of the <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">場合<ph id="ph1">`index`</ph>と等しい<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>、<ph id="ph3">`item`</ph>の末尾に追加された、<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> is called by the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> によって呼び出される、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Notes for Implementers</source>
          <target state="translated">実装についてのメモ</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> methods, inherited from the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">動作をカスタマイズするには、このメソッドをオーバーライドして、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph>から継承されたメソッド、<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">基になるコレクションに項目を挿入し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method to provide custom behavior for adding or inserting objects into the collection.</source>
          <target state="translated">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>メソッドを追加またはコレクションにオブジェクトを挿入するためのカスタム動作を提供します。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Example 1</source>
          <target state="translated">例 1</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>のカスタム動作を提供する、メソッド、 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および既定の設定<ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、という名前の通知イベント<ph id="ph1">`Changed`</ph>、これらのオーバーライドされたメソッドの最後にこれが発生します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`SimpleOrder`</ph>から派生するクラス<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>単純な注文形式を表します。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">注文フォームを含む<ph id="ph1">`OrderItem`</ph>注文のアイテムを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">コード例でも作成、<ph id="ph1">`SimpleOrderChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、<ph id="ph1">`Main`</ph>のメソッド、<ph id="ph2">`Demo`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">このコード例では、変更できないキーを持つオブジェクトを使用します。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Example 2</source>
          <target state="translated">例 2</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>キーの整合性を維持するためにメソッドおよびコレクションです。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`MutableKeys`</ph>から派生するコレクション<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、および<ph id="ph3">`MutableKey`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph>クラスには、設定可能な<ph id="ph2">`Key`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic で)<ph id="ph3">`ChangeKey`</ph>を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">場合は、例外がスローされ、プロパティの値は変更されません。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">間の接続を維持するために、<ph id="ph1">`MutableKey`</ph>オブジェクトおよび<ph id="ph2">`MutableKeys`</ph>コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、<ph id="ph3">`MutableKey`</ph>クラスには、 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual Basic で) <ph id="ph6">`Collection`</ph>フィールドです。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> が <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph> より大きくなっています。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The key of the element to get.</source>
          <target state="translated">取得する要素のキー。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Gets the element with the specified key.</source>
          <target state="translated">指定したキーを持つ要素を取得します。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The element with the specified key.</source>
          <target state="translated">指定したキーを持つ要素。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If an element with the specified key is not found, an exception is thrown.</source>
          <target state="translated">指定したキーを持つ要素が見つからない場合は、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
          <target state="translated">このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。 <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> Visual Basic で)。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This property is distinct from the inherited <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property, which gets and sets elements by numeric index.</source>
          <target state="translated">このプロパティは、継承された異なる<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティを取得し、数値インデックスで要素を設定します。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>However, if <ph id="ph1">`TKey`</ph> is of type <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, this property masks the inherited property.</source>
          <target state="translated">ただし場合、<ph id="ph1">`TKey`</ph>の種類は<ph id="ph2">&lt;xref:System.Int32&gt;</ph>、このプロパティは、継承されたプロパティをマスクします。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>In that case, you can access the inherited property by casting the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> to its base type.</source>
          <target state="translated">その場合は、キャストによって継承されたプロパティにアクセスすることができます、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>その基本型にします。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>For example, <ph id="ph1">`KeyedCollection&lt;int, MyType&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of Integer, MyType)`</ph> in Visual Basic, <ph id="ph3">`KeyedCollection&lt;int, MyType^&gt;`</ph> in C++) can be cast to <ph id="ph4">`Collection&lt;MyType&gt;`</ph> (<ph id="ph5">`Collection(Of MyType)`</ph> in Visual Basic, <ph id="ph6">`Collection&lt;MyType^&gt;`</ph> in C++).</source>
          <target state="translated">たとえば、 <ph id="ph1">`KeyedCollection&lt;int, MyType&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of Integer, MyType)`</ph> Visual basic で<ph id="ph3">`KeyedCollection&lt;int, MyType^&gt;`</ph>C++ で) にキャストできます<ph id="ph4">`Collection&lt;MyType&gt;`</ph>(<ph id="ph5">`Collection(Of MyType)`</ph> Visual basic で<ph id="ph6">`Collection&lt;MyType^&gt;`</ph>C++ で)。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary, <ph id="ph2">`key`</ph> is used to retrieve the element from the dictionary.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>検索ディクショナリを持つ<ph id="ph2">`key`</ph>ディクショナリから要素を取得するために使用します。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If there is no lookup dictionary, the key of each element is extracted using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and compared with the specified key.</source>
          <target state="translated">使用して、各要素のキーを抽出検索ディクショナリがない場合、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>メソッド、指定したキーと比較します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 言語キーワードを使用して実装する代わりに、インデクサーの定義、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic は、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Retrieving the value of this property is an O(1) operation if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary; otherwise it is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">場合は、o (1) 操作には、このプロパティの値を取得、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>が検索ディクショナリです。 それ以外の場合これは、O (<ph id="ph2">`n`</ph>) 操作、場所<ph id="ph3">`n`</ph>は<ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: オーバーライドする、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">コード例も示して多くのプロパティおよびメソッドから継承<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The code example calls both the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is read-only and retrieves by key, and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is settable and retrieves by index.</source>
          <target state="translated">このコード例では、両方を呼び出します、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティは読み取り専用としてキーを取得、および<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティが設定可能なのインデックスを取得します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</source>
          <target state="translated">派生コレクション内のオブジェクトの整数キー、インデックス検索に使用される整数と区別することがある場合、後者のプロパティにアクセスする方法を示します。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph>クラスは、非常に単純な要求 ボックスの一覧を含む<ph id="ph2">`OrderItem`</ph>注文の行アイテムを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">キー<ph id="ph1">`OrderItem`</ph>は変更できないから派生するクラスの重要な考慮事項<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>An element with the specified key does not exist in the collection.</source>
          <target state="translated">指定したキーを持つ要素がコレクション内に存在しません。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">削除する要素のキー。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">指定したキーを持つ要素を <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> から削除します。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">要素が正常に削除された場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is not found in the <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;see langword="false" /&gt;</ph> が <ph id="ph2">&lt;paramref name="key" /&gt;</ph> に見つからない場合にも <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of the element is also removed from the lookup dictionary.</source>
          <target state="translated">要素のキーは、検索ディクショナリからも削除されます。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>To customize the behavior of this method, override the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドの動作をカスタマイズするには、上書き、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">このコード例はからコレクション クラスを派生させるために必要な最小限のコードは<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: オーバーライドする、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>基底クラスのコンス トラクターにデリゲートされるメソッドおよびパブリック コンス トラクターを提供します。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">コード例も示して多くのプロパティおよびメソッドから継承<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The example demonstrates <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> method inherited from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, which removes the item with a specified key, and also the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> methods inherited from <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>, which remove by object and by index respectively.</source>
          <target state="translated">例を示します<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>から継承されたメソッド<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、指定したキーを持つ項目を削除しても、<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph>と<ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph>から継承されたメソッド<ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>インデックスとオブジェクトによってをそれぞれ削除します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph>クラスは、非常に単純な要求 ボックスの一覧を含む<ph id="ph2">`OrderItem`</ph>注文の行アイテムを表すオブジェクト。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">キー<ph id="ph1">`OrderItem`</ph>は変更できないから派生するクラスの重要な考慮事項<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The index of the element to remove.</source>
          <target state="translated">削除する要素のインデックス。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> の指定したインデックスにある要素を削除します。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The key of the element is also removed from the lookup dictionary.</source>
          <target state="translated">要素のキーは、検索ディクショナリからも削除されます。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">かどうかの要素の数がしきい値を超えました、ディクショナリの作成と<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>は検索ディクショナリを使用して、引き続き場合でも、要素の数がしきい値より下にもう一度検索ディクショナリを使用します。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">このメソッドは、O (<ph id="ph1">`n`</ph>) 操作では、ここで<ph id="ph2">`n`</ph>は<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Notes for Implementers</source>
          <target state="translated">実装についてのメモ</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29&gt;</ph> methods, inherited from the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class, and the <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29&gt;</ph> method.</source>
          <target state="translated">動作をカスタマイズするには、このメソッドをオーバーライドして、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29&gt;</ph>と<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29&gt;</ph>から継承されたメソッド、<ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラスは、および<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">基になるコレクションから項目を削除し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> method to provide custom behavior for removing objects from the collection.</source>
          <target state="translated">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>をコレクションからオブジェクトを削除するカスタム動作を提供するメソッド。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Example 1</source>
          <target state="translated">例 1</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>のカスタム動作を提供する、メソッド、 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および既定の設定<ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、という名前の通知イベント<ph id="ph1">`Changed`</ph>、これらのオーバーライドされたメソッドの最後にこれが発生します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`SimpleOrder`</ph>から派生するクラス<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>単純な注文形式を表します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">注文フォームを含む<ph id="ph1">`OrderItem`</ph>注文のアイテムを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">コード例でも作成、<ph id="ph1">`SimpleOrderChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、<ph id="ph1">`Main`</ph>のメソッド、<ph id="ph2">`Demo`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">このコード例では、変更できないキーを持つオブジェクトを使用します。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Example 2</source>
          <target state="translated">例 2</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>キーの整合性を維持するためにメソッドおよびコレクションです。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`MutableKeys`</ph>から派生するコレクション<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、および<ph id="ph3">`MutableKey`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph>クラスには、設定可能な<ph id="ph2">`Key`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic で)<ph id="ph3">`ChangeKey`</ph>を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">場合は、例外がスローされ、プロパティの値は変更されません。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">間の接続を維持するために、<ph id="ph1">`MutableKey`</ph>オブジェクトおよび<ph id="ph2">`MutableKeys`</ph>コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、<ph id="ph3">`MutableKey`</ph>クラスには、 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual Basic で) <ph id="ph6">`Collection`</ph>フィールドです。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The zero-based index of the item to be replaced.</source>
          <target state="translated">置き換えられる項目の 0 から始まるインデックス。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The new item.</source>
          <target state="translated">新しい項目。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Replaces the item at the specified index with the specified item.</source>
          <target state="translated">指定したインデックス位置の項目を、指定した項目で置き換えます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The lookup dictionary is updated accordingly.</source>
          <target state="translated">検索ディクショナリは、それに従って更新されます。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</source>
          <target state="translated">つまり、置き換えられる項目のキーは検索ディクショナリから削除され、新しい項目のキーが追加されます。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">このメソッドは、o (1) 操作です。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Notes for Implementers</source>
          <target state="translated">実装についてのメモ</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Override this method to provide customized behavior for setting the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property inherited from the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">設定の動作をカスタマイズするには、このメソッドをオーバーライドして、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティから継承、<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>ジェネリック クラスです。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This method does not affect the behavior of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is read-only.</source>
          <target state="translated">このメソッドではの動作には影響しません、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティは読み取り専用です。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">基になるコレクションの項目を設定し、検索ディクショナリを更新するこのメソッドの基本クラス実装を呼び出します。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> method to provide custom behavior for setting the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">このセクションにはオーバーライドを示す 2 つのコード例が含まれています、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>設定のカスタム動作を提供するメソッドを<ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Example 1</source>
          <target state="translated">例 1</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>のカスタム動作を提供する、メソッド、 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>、 <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>、および<ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph>メソッド、および既定の設定<ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph>プロパティ (c# のインデクサー)。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">この例で提供されるカスタムの動作は、という名前の通知イベント<ph id="ph1">`Changed`</ph>、これらのオーバーライドされたメソッドの最後にこれが発生します。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`SimpleOrder`</ph>から派生するクラス<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>単純な注文形式を表します。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">注文フォームを含む<ph id="ph1">`OrderItem`</ph>注文のアイテムを表すオブジェクトします。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">コード例でも作成、<ph id="ph1">`SimpleOrderChangedEventArgs`</ph>イベントの情報、および変更の種類を識別する列挙体を格納するクラス。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">コード例では、カスタム動作を示してのプロパティと、派生クラスのメソッドを呼び出すことによって、<ph id="ph1">`Main`</ph>のメソッド、<ph id="ph2">`Demo`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">このコード例では、変更できないキーを持つオブジェクトを使用します。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">変更可能なキーを使用するコード例は、次を参照してください。<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Example 2</source>
          <target state="translated">例 2</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">次のコード例は、保護されたをオーバーライドする方法を示しています<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>変更可能なキー、および保護されたをオーバーライドする方法をサポートするためにメソッド<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>、および<ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph>キーの整合性を維持するためにメソッドおよびコレクションです。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">コード例を作成、<ph id="ph1">`MutableKeys`</ph>から派生するコレクション<ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>、および<ph id="ph3">`MutableKey`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph>クラスには、設定可能な<ph id="ph2">`Key`</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic で)<ph id="ph3">`ChangeKey`</ph>を既存のキーを持つ新しいキーが競合するかどうかをテストする、コレクションのメソッドです。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">場合は、例外がスローされ、プロパティの値は変更されません。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">間の接続を維持するために、<ph id="ph1">`MutableKey`</ph>オブジェクトおよび<ph id="ph2">`MutableKeys`</ph>コレクションとオブジェクトが 2 つのコレクションに挿入されることを防ぐため、<ph id="ph3">`MutableKey`</ph>クラスには、 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual Basic で) <ph id="ph6">`Collection`</ph>フィールドです。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">このフィールドが追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護された方法によって維持される、<ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>